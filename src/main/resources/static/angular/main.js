(self["webpackChunkangularPlayer"] = self["webpackChunkangularPlayer"] || []).push([[179],{

/***/ 7120:
/*!*****************************************!*\
  !*** ./src/app/action/action-player.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionPlayer": () => (/* binding */ ActionPlayer)
/* harmony export */ });
/* harmony import */ var _utils_executable_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/executable-base */ 1679);


class ActionPlayer extends _utils_executable_base__WEBPACK_IMPORTED_MODULE_0__.ExecutableBase {
  constructor(executor) {
    super();
    this.executor = executor;
  }

}



/***/ }),

/***/ 7653:
/*!***************************************!*\
  !*** ./src/app/action/action-type.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionType": () => (/* binding */ ActionType)
/* harmony export */ });
var ActionType = /*#__PURE__*/(() => {
  (function (ActionType) {
    /*
     * Tool actions
     */
    ActionType[ActionType["TOOL_BEGIN"] = 0] = "TOOL_BEGIN";
    ActionType[ActionType["TOOL_EXECUTE"] = 1] = "TOOL_EXECUTE";
    ActionType[ActionType["TOOL_END"] = 2] = "TOOL_END";
    /*
     * Stroke actions
     */

    ActionType[ActionType["PEN"] = 3] = "PEN";
    ActionType[ActionType["HIGHLIGHTER"] = 4] = "HIGHLIGHTER";
    ActionType[ActionType["POINTER"] = 5] = "POINTER";
    /*
     * Form actions
     */

    ActionType[ActionType["ARROW"] = 6] = "ARROW";
    ActionType[ActionType["LINE"] = 7] = "LINE";
    ActionType[ActionType["RECTANGLE"] = 8] = "RECTANGLE";
    ActionType[ActionType["ELLIPSE"] = 9] = "ELLIPSE";
    /*
     * Text actions
     */

    ActionType[ActionType["TEXT"] = 10] = "TEXT";
    ActionType[ActionType["TEXT_CHANGE"] = 11] = "TEXT_CHANGE";
    ActionType[ActionType["TEXT_FONT_CHANGE"] = 12] = "TEXT_FONT_CHANGE";
    ActionType[ActionType["TEXT_LOCATION_CHANGE"] = 13] = "TEXT_LOCATION_CHANGE";
    ActionType[ActionType["TEXT_REMOVE"] = 14] = "TEXT_REMOVE";
    ActionType[ActionType["TEXT_SELECTION"] = 15] = "TEXT_SELECTION";
    ActionType[ActionType["LATEX"] = 16] = "LATEX";
    ActionType[ActionType["LATEX_FONT_CHANGE"] = 17] = "LATEX_FONT_CHANGE";
    /*
     * Rearrangement actions
     */

    ActionType[ActionType["UNDO"] = 18] = "UNDO";
    ActionType[ActionType["REDO"] = 19] = "REDO";
    ActionType[ActionType["CLONE"] = 20] = "CLONE";
    ActionType[ActionType["SELECT"] = 21] = "SELECT";
    ActionType[ActionType["SELECT_GROUP"] = 22] = "SELECT_GROUP";
    ActionType[ActionType["RUBBER"] = 23] = "RUBBER";
    ActionType[ActionType["CLEAR_SHAPES"] = 24] = "CLEAR_SHAPES";
    /*
     * Zoom actions
     */

    ActionType[ActionType["PANNING"] = 25] = "PANNING";
    ActionType[ActionType["EXTEND_VIEW"] = 26] = "EXTEND_VIEW";
    ActionType[ActionType["ZOOM"] = 27] = "ZOOM";
    ActionType[ActionType["ZOOM_OUT"] = 28] = "ZOOM_OUT";
    /*
     * Atomic actions
     */

    ActionType[ActionType["NEXT_PAGE"] = 29] = "NEXT_PAGE";
    ActionType[ActionType["KEY"] = 30] = "KEY";
    ActionType[ActionType["STATIC"] = 31] = "STATIC";
    ActionType[ActionType["PAGE"] = 32] = "PAGE";
    ActionType[ActionType["RUBBER_EXT"] = 33] = "RUBBER_EXT";
    ActionType[ActionType["TEXT_SELECTION_EXT"] = 34] = "TEXT_SELECTION_EXT";
  })(ActionType || (ActionType = {}));

  return ActionType;
})();


/***/ }),

/***/ 8031:
/*!*******************************************!*\
  !*** ./src/app/action/action.executor.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamActionExecutor": () => (/* binding */ StreamActionExecutor)
/* harmony export */ });
/* harmony import */ var _tool_tool_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tool/tool-context */ 2474);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/pen-point */ 7578);
/* harmony import */ var _tool_atomic_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tool/atomic.tool */ 8534);




class StreamActionExecutor {
  constructor(renderController) {
    this.renderController = renderController;
    this.toolContext = new _tool_tool_context__WEBPACK_IMPORTED_MODULE_0__.ToolContext(renderController);
  }

  setOnSelectPageIndex(observer) {
    this.pageIndexObserver = observer;
  }

  setKeyEvent(keyEvent) {
    this.toolContext.keyEvent = keyEvent;
  }

  setSeek(seek) {
    this.renderController.setSeek(seek);
  }

  setDocument(document) {
    this.document = document;
  }

  setPageNumber(pageNumber) {
    const page = this.document.getPage(pageNumber);
    this.pageNumber = pageNumber;
    this.toolContext.page = page;
    this.renderController.setPage(page);

    if (this.pageIndexObserver) {
      this.pageIndexObserver(pageNumber);
    }
  }

  setTool(tool) {
    if (!tool) {
      throw new Error("Tool must not be null");
    }

    if (!this.tool && this.tool === tool) {
      return;
    }

    this.setPreviousTool(this.tool);
    this.tool = tool;
  }

  selectAndExecuteTool(tool) {
    this.executeAtomicTool(tool);
  }

  beginTool(point) {
    this.tool.begin(point.clone(), this.toolContext);
  }

  executeTool(point) {
    this.tool.execute(point.clone());
  }

  endTool(point) {
    this.tool.end(point.clone());
  }

  executeAtomicTool(tool) {
    const point = _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__.PenPoint.createZero();
    this.setTool(tool);
    this.beginTool(point);
    this.executeTool(point);
    this.endTool(point);
    this.setPreviousTool(this.previousTool);
  }

  setPreviousTool(tool) {
    if (!tool) {
      return;
    }

    if (tool instanceof _tool_atomic_tool__WEBPACK_IMPORTED_MODULE_2__.AtomicTool) {
      // Do not remember atomic tools.
      return;
    }

    this.previousTool = tool;
  }

}



/***/ }),

/***/ 4712:
/*!**********************************!*\
  !*** ./src/app/action/action.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Action": () => (/* binding */ Action)
/* harmony export */ });
let Action = /*#__PURE__*/(() => {
  class Action {
    createDataView(payloadLength) {
      let header = 0;

      if (this.keyEvent) {
        payloadLength += 9;
        header |= Action.KEY_EVENT_MASK;
      }

      let dataViewByteOffsetObject = this.createActionBuffer(payloadLength + 4);
      let dataView = dataViewByteOffsetObject.dataView;
      let byteOffset = dataViewByteOffsetObject.byteOffset;
      dataView.setInt32(byteOffset, header);
      byteOffset += 4;

      if (this.keyEvent) {
        dataView.setInt32(byteOffset, Number(this.keyEvent.code));
        byteOffset += 4;
        dataView.setInt32(byteOffset, 0);
        byteOffset += 4;
        let type = -1;

        switch (this.keyEvent.type) {
          case "keydown":
            type = 0;
            break;

          case "keyup":
            type = 1;
            break;

          case "keypressed":
            type = 2;
            break;
        }

        if (type === -1) {
          console.error("KeyboardEvent type is not assigned correctly!");
        }

        dataView.setInt8(byteOffset, type);
        byteOffset++;
      }

      return {
        dataView,
        byteOffset
      };
    }

    createActionBuffer(payloadLength) {
      let buffer = new ArrayBuffer(payloadLength + 9);
      let dataView = new DataView(buffer);
      const byteOffset = 9;
      dataView.setInt32(0, payloadLength + 5);
      dataView.setInt8(4, this.getType());
      dataView.setInt32(5, this.timestamp);
      return {
        dataView,
        byteOffset
      };
    }

  }

  Action.KEY_EVENT_MASK = 1;
  return Action;
})();


/***/ }),

/***/ 9706:
/*!****************************************!*\
  !*** ./src/app/action/arrow.action.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrowAction": () => (/* binding */ ArrowAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_arrow_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/arrow.tool */ 9329);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class ArrowAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_arrow_tool__WEBPACK_IMPORTED_MODULE_1__.ArrowTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.ARROW;
  }

}



/***/ }),

/***/ 4798:
/*!****************************************!*\
  !*** ./src/app/action/brush.action.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrushAction": () => (/* binding */ BrushAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);


class BrushAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(shapeHandle, brush) {
    super();
    this.shapeHandle = shapeHandle;

    if (brush) {
      this.brush = brush;
    }
  }

  toByteBuffer() {
    let length = this.brush ? 17 : 4;
    let dataViewByteOffsetObject = this.createDataView(length);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.shapeHandle);

    if (this.brush) {
      dataView.setInt32(byteOffset + 4, Number(this.brush.color.toRgba()));
      dataView.setInt8(byteOffset + 8, 0);
      dataView.setBigInt64(byteOffset + 9, BigInt(this.brush.width));
    }

    return dataView.buffer;
  }

}



/***/ }),

/***/ 5466:
/*!***********************************************!*\
  !*** ./src/app/action/clear-shapes.action.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClearShapesAction": () => (/* binding */ ClearShapesAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_clear_shapes_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/clear-shapes.tool */ 5496);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class ClearShapesAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.selectAndExecuteTool(new _tool_clear_shapes_tool__WEBPACK_IMPORTED_MODULE_1__.ClearShapesTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.CLEAR_SHAPES;
  }

}



/***/ }),

/***/ 6015:
/*!****************************************!*\
  !*** ./src/app/action/clone.action.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CloneAction": () => (/* binding */ CloneAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_clone_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/clone.tool */ 10);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class CloneAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_clone_tool__WEBPACK_IMPORTED_MODULE_1__.CloneTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.CLONE;
  }

}



/***/ }),

/***/ 6221:
/*!******************************************!*\
  !*** ./src/app/action/ellipse.action.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EllipseAction": () => (/* binding */ EllipseAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_ellipse_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/ellipse.tool */ 2817);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class EllipseAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_ellipse_tool__WEBPACK_IMPORTED_MODULE_1__.EllipseTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.ELLIPSE;
  }

}



/***/ }),

/***/ 8114:
/*!**********************************************!*\
  !*** ./src/app/action/extend-view.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtendViewAction": () => (/* binding */ ExtendViewAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_extend_view_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/extend-view.tool */ 1562);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class ExtendViewAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(rect) {
    super();
    this.rect = rect;
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.selectAndExecuteTool(new _tool_extend_view_tool__WEBPACK_IMPORTED_MODULE_1__.ExtendViewTool(this.rect));
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.RECTANGLE;
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(32);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setBigInt64(byteOffset, BigInt(this.rect.x));
    dataView.setBigInt64(byteOffset + 8, BigInt(this.rect.y));
    dataView.setBigInt64(byteOffset + 16, BigInt(this.rect.width));
    dataView.setBigInt64(byteOffset + 24, BigInt(this.rect.height));
    return dataView.buffer;
  }

}



/***/ }),

/***/ 3233:
/*!**********************************************!*\
  !*** ./src/app/action/highlighter.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HighlighterAction": () => (/* binding */ HighlighterAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_highlighter_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/highlighter.tool */ 7062);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class HighlighterAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_highlighter_tool__WEBPACK_IMPORTED_MODULE_1__.HighlighterTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.HIGHLIGHTER;
  }

}



/***/ }),

/***/ 7801:
/*!**************************************!*\
  !*** ./src/app/action/key.action.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyAction": () => (/* binding */ KeyAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-type */ 7653);



class KeyAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.KEY;
  }

}



/***/ }),

/***/ 8069:
/*!*********************************************!*\
  !*** ./src/app/action/latex-font.action.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexFontAction": () => (/* binding */ LatexFontAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_latex_font_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/latex-font.tool */ 6444);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class LatexFontAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle, font, textColor, textAttributes) {
    super();
    this.handle = handle;
    this.font = font;
    this.textColor = textColor;
    this.textAttributes = textAttributes;
  }

  execute(executor) {
    executor.selectAndExecuteTool(new _tool_latex_font_tool__WEBPACK_IMPORTED_MODULE_1__.LatexFontTool(this.handle, this.font, this.textColor, this.textAttributes));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(16);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    let color = this.font.family;
    let index = Object.values(Fonts).indexOf(this.font.family);
    dataView.setInt32(byteOffset + 4, index);
    dataView.setInt32(byteOffset + 8, this.font.size);
    dataView.setInt32(byteOffset + 12, Number(this.textColor.toRgba()));
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.LATEX_FONT_CHANGE;
  }

}

var Fonts = /*#__PURE__*/(() => {
  (function (Fonts) {
    Fonts["SERIF"] = "Serif";
    Fonts["SANSSERIF"] = "Sanserif";
    Fonts["BOLD"] = "Bold";
    Fonts["ITALIC"] = "Italic";
    Fonts["BOLD_ITALIC"] = "Bold_Italic";
    Fonts["ROMAN"] = "Roman";
    Fonts["TYPEWRITER"] = "Typewriter";
  })(Fonts || (Fonts = {}));

  return Fonts;
})();


/***/ }),

/***/ 2750:
/*!****************************************!*\
  !*** ./src/app/action/latex.action.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexAction": () => (/* binding */ LatexAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_latex_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/latex.tool */ 8004);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class LatexAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle) {
    super();
    this.handle = handle;
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_latex_tool__WEBPACK_IMPORTED_MODULE_1__.LatexTool(this.handle));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(4);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.LATEX;
  }

}



/***/ }),

/***/ 8118:
/*!***************************************!*\
  !*** ./src/app/action/line.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineAction": () => (/* binding */ LineAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_line_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/line.tool */ 9485);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class LineAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_line_tool__WEBPACK_IMPORTED_MODULE_1__.LineTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.LINE;
  }

}



/***/ }),

/***/ 8078:
/*!***************************************!*\
  !*** ./src/app/action/page.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageAction": () => (/* binding */ PageAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-type */ 7653);



class PageAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(pageNumber) {
    super();
    this.pageNumber = pageNumber;
  }

  execute(executor) {
    executor.setPageNumber(this.pageNumber);
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(12);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setBigInt64(byteOffset, BigInt(0));
    dataView.setInt32(byteOffset + 8, this.pageNumber);
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.PAGE;
  }

}



/***/ }),

/***/ 998:
/*!**************************************!*\
  !*** ./src/app/action/pan.action.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PanAction": () => (/* binding */ PanAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_pan_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/pan.tool */ 7989);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class PanAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_pan_tool__WEBPACK_IMPORTED_MODULE_1__.PanTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.PANNING;
  }

}



/***/ }),

/***/ 7758:
/*!************************************************!*\
  !*** ./src/app/action/parser/action.parser.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionParser": () => (/* binding */ ActionParser)
/* harmony export */ });
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../action-type */ 7653);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../geometry/pen-point */ 7578);
/* harmony import */ var _pen_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pen.action */ 1373);
/* harmony import */ var _paint_brush__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../paint/brush */ 5035);
/* harmony import */ var _paint_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../paint/color */ 6428);
/* harmony import */ var _highlighter_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../highlighter.action */ 3233);
/* harmony import */ var _pointer_action__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../pointer.action */ 3448);
/* harmony import */ var _arrow_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../arrow.action */ 9706);
/* harmony import */ var _line_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../line.action */ 8118);
/* harmony import */ var _rectangle_action__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../rectangle.action */ 9116);
/* harmony import */ var _ellipse_action__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ellipse.action */ 6221);
/* harmony import */ var _tool_begin_action__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../tool-begin.action */ 7479);
/* harmony import */ var _tool_execute_action__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../tool-execute.action */ 2656);
/* harmony import */ var _tool_end_action__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../tool-end.action */ 1100);
/* harmony import */ var _undo_action__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../undo.action */ 8095);
/* harmony import */ var _redo_action__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../redo.action */ 5987);
/* harmony import */ var _clear_shapes_action__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../clear-shapes.action */ 5466);
/* harmony import */ var _key_action__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../key.action */ 7801);
/* harmony import */ var _clone_action__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../clone.action */ 6015);
/* harmony import */ var _select_action__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../select.action */ 1254);
/* harmony import */ var _select_group_action__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../select-group.action */ 9521);
/* harmony import */ var _pan_action__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../pan.action */ 998);
/* harmony import */ var _extend_view_action__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../extend-view.action */ 8114);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../geometry/rectangle */ 7723);
/* harmony import */ var _zoom_action__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../zoom.action */ 2289);
/* harmony import */ var _zoom_out_action__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../zoom-out.action */ 4016);
/* harmony import */ var _rubber_action__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../rubber.action */ 7164);
/* harmony import */ var _text_action__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../text.action */ 6717);
/* harmony import */ var _text_font_action__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../text-font.action */ 1808);
/* harmony import */ var _text_change_action__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../text-change.action */ 7204);
/* harmony import */ var _text_move_action__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../text-move.action */ 1304);
/* harmony import */ var _geometry_point__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../geometry/point */ 6374);
/* harmony import */ var _text_remove_action__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../text-remove.action */ 3926);
/* harmony import */ var _paint_font__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../paint/font */ 8783);
/* harmony import */ var _text_highlight_action__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../text-highlight.action */ 4414);
/* harmony import */ var _latex_action__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../latex.action */ 2750);
/* harmony import */ var _latex_font_action__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../latex-font.action */ 8069);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../stream.action-type */ 2970);
/* harmony import */ var _services_playback_service__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../services/playback.service */ 8818);







































let ActionParser = /*#__PURE__*/(() => {
  class ActionParser {
    static parse(dataView, type, length) {
      let action = null;
      const keyEvent = this.parseActionHeader(dataView);
      length -= 13; // Action header has a length of 13 bytes.

      switch (type) {
        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.CLEAR_SHAPES:
          action = this.atomicAction(dataView, _clear_shapes_action__WEBPACK_IMPORTED_MODULE_16__.ClearShapesAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.UNDO:
          action = this.atomicAction(dataView, _undo_action__WEBPACK_IMPORTED_MODULE_14__.UndoAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.REDO:
          action = this.atomicAction(dataView, _redo_action__WEBPACK_IMPORTED_MODULE_15__.RedoAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.KEY:
          action = this.atomicAction(dataView, _key_action__WEBPACK_IMPORTED_MODULE_17__.KeyAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.PEN:
          action = this.toolBrushAction(dataView, _pen_action__WEBPACK_IMPORTED_MODULE_2__.PenAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.HIGHLIGHTER:
          action = this.toolBrushAction(dataView, _highlighter_action__WEBPACK_IMPORTED_MODULE_5__.HighlighterAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.POINTER:
          action = this.toolBrushAction(dataView, _pointer_action__WEBPACK_IMPORTED_MODULE_6__.PointerAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.ARROW:
          action = this.toolBrushAction(dataView, _arrow_action__WEBPACK_IMPORTED_MODULE_7__.ArrowAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.LINE:
          action = this.toolBrushAction(dataView, _line_action__WEBPACK_IMPORTED_MODULE_8__.LineAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.RECTANGLE:
          action = this.toolBrushAction(dataView, _rectangle_action__WEBPACK_IMPORTED_MODULE_9__.RectangleAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.ELLIPSE:
          action = this.toolBrushAction(dataView, _ellipse_action__WEBPACK_IMPORTED_MODULE_10__.EllipseAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.CLONE:
          action = this.atomicAction(dataView, _clone_action__WEBPACK_IMPORTED_MODULE_18__.CloneAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.SELECT:
          action = this.atomicAction(dataView, _select_action__WEBPACK_IMPORTED_MODULE_19__.SelectAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.SELECT_GROUP:
          action = this.atomicAction(dataView, _select_group_action__WEBPACK_IMPORTED_MODULE_20__.SelectGroupAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.LATEX:
          action = this.textAction(dataView, _latex_action__WEBPACK_IMPORTED_MODULE_35__.LatexAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.LATEX_FONT_CHANGE:
          action = this.latexFontAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT:
          action = this.textAction(dataView, _text_action__WEBPACK_IMPORTED_MODULE_27__.TextAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT_CHANGE:
          action = this.textChangeAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT_FONT_CHANGE:
          action = this.textFontAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT_LOCATION_CHANGE:
          action = this.textMoveAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT_REMOVE:
          action = this.textRemoveAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TEXT_SELECTION_EXT:
          action = this.textHighlightAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TOOL_BEGIN:
          action = this.toolDragAction(dataView, _tool_begin_action__WEBPACK_IMPORTED_MODULE_11__.ToolBeginAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TOOL_EXECUTE:
          action = this.toolDragAction(dataView, _tool_execute_action__WEBPACK_IMPORTED_MODULE_12__.ToolExecuteAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.TOOL_END:
          action = this.toolDragAction(dataView, _tool_end_action__WEBPACK_IMPORTED_MODULE_13__.ToolEndAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.PANNING:
          action = this.atomicAction(dataView, _pan_action__WEBPACK_IMPORTED_MODULE_21__.PanAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.EXTEND_VIEW:
          action = this.extendViewAction(dataView);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.ZOOM:
          if (length < 1) {
            action = this.atomicAction(dataView, _zoom_action__WEBPACK_IMPORTED_MODULE_24__.ZoomAction);
          } else {
            action = this.toolBrushAction(dataView, _zoom_action__WEBPACK_IMPORTED_MODULE_24__.ZoomAction);
          }

          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.ZOOM_OUT:
          action = this.atomicAction(dataView, _zoom_out_action__WEBPACK_IMPORTED_MODULE_25__.ZoomOutAction);
          break;

        case _action_type__WEBPACK_IMPORTED_MODULE_0__.ActionType.RUBBER_EXT:
          action = this.rubberAction(dataView);
          break;
      }

      if (action && keyEvent) {
        action.keyEvent = keyEvent;
      }

      return action;
    }

    static parseActionHeader(dataView) {
      const header = dataView.getInt32();
      let keyEvent = null;

      if ((header & this.KEY_EVENT_MASK) == this.KEY_EVENT_MASK) {
        keyEvent = this.parseKeyEvent(dataView);
      }

      return keyEvent;
    }

    static parseKeyEvent(dataView) {
      const keyCode = dataView.getInt32();
      const modifiers = dataView.getInt32();
      const actionType = dataView.getInt8();
      let typeArg;

      switch (actionType) {
        case 0:
          typeArg = "keydown";
          break;

        case 1:
          typeArg = "keyup";
          break;

        case 2:
          typeArg = "keypress";
          break;

        default:
          throw new Error("Unknown key event type");
      }
      /** The Shift key modifier constant. */


      const SHIFT_MASK = 1 << 1;
      /** The Control key modifier constant. */

      const CTRL_MASK = 1 << 2;
      /** The Alt key modifier constant. */

      const ALT_MASK = 1 << 3;
      return new KeyboardEvent(typeArg, {
        //code: keyCode,
        shiftKey: (modifiers & SHIFT_MASK) != 0,
        ctrlKey: (modifiers & CTRL_MASK) != 0,
        altKey: (modifiers & ALT_MASK) != 0
      });
    }

    static atomicAction(dataView, type) {
      return new type();
    }

    static toolBrushAction(dataView, type) {
      const shapeHandle = dataView.getInt32();
      const rgba = dataView.getInt32();
      const lineCap = dataView.getInt8();
      const brushWidth = dataView.getFloat64();
      const color = _paint_color__WEBPACK_IMPORTED_MODULE_4__.Color.fromRGBNumber(rgba);
      const brush = new _paint_brush__WEBPACK_IMPORTED_MODULE_3__.Brush(color, brushWidth);
      const action = new type(shapeHandle, brush);
      return action;
    }

    static rubberAction(dataView) {
      const shapeHandle = dataView.getInt32();
      return new _rubber_action__WEBPACK_IMPORTED_MODULE_26__.RubberAction(shapeHandle);
    }

    static toolDragAction(dataView, type) {
      const point = new _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__.PenPoint(dataView.getFloat32(), dataView.getFloat32(), dataView.getFloat32());
      const action = new type(point);
      return action;
    }

    static extendViewAction(dataView) {
      const x = dataView.getFloat64();
      const y = dataView.getFloat64();
      const w = dataView.getFloat64();
      const h = dataView.getFloat64();
      return new _extend_view_action__WEBPACK_IMPORTED_MODULE_22__.ExtendViewAction(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_23__.Rectangle(x, y, w, h));
    }

    static textAction(dataView, type) {
      const handle = dataView.getInt32();
      const action = new type(handle);
      return action;
    }

    static textChangeAction(dataView) {
      const handle = dataView.getInt32();
      const textLength = dataView.getInt32();
      const text = dataView.getString(textLength);
      return new _text_change_action__WEBPACK_IMPORTED_MODULE_29__.TextChangeAction(handle, text);
    }

    static textMoveAction(dataView) {
      const handle = dataView.getInt32();
      const point = new _geometry_point__WEBPACK_IMPORTED_MODULE_31__.Point(dataView.getFloat64(), dataView.getFloat64());
      return new _text_move_action__WEBPACK_IMPORTED_MODULE_30__.TextMoveAction(handle, point);
    }

    static textRemoveAction(dataView) {
      const handle = dataView.getInt32();
      return new _text_remove_action__WEBPACK_IMPORTED_MODULE_32__.TextRemoveAction(handle);
    }

    static textHighlightAction(dataView) {
      const handle = dataView.getInt32();
      const rgba = dataView.getInt32();
      const count = dataView.getInt32();
      const color = _paint_color__WEBPACK_IMPORTED_MODULE_4__.Color.fromRGBNumber(rgba);
      const textBounds = new Array();

      for (let i = 0; i < count; i++) {
        const x = dataView.getFloat64();
        const y = dataView.getFloat64();
        const w = dataView.getFloat64();
        const h = dataView.getFloat64();
        textBounds.push(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_23__.Rectangle(x, y, w, h));
      }

      return new _text_highlight_action__WEBPACK_IMPORTED_MODULE_34__.TextHighlightAction(handle, color, textBounds);
    }

    static textFontAction(dataView) {
      const handle = dataView.getInt32();
      const rgba = dataView.getInt32();
      const fontFamilyLength = dataView.getInt32();
      const fontFamily = dataView.getString(fontFamilyLength);
      const fontSize = dataView.getFloat64();
      const posture = dataView.getInt8();
      const weight = dataView.getInt8();
      const strikethrough = dataView.getInt8() > 0;
      const underline = dataView.getInt8() > 0;
      let fontWeight = (weight + 1) * 100;
      let fontStyle;

      switch (posture) {
        case 0:
          fontStyle = "normal";
          break;

        case 1:
          fontStyle = "italic";
          break;

        default:
          console.error("Unsupported font style");
          break;
      }

      const color = _paint_color__WEBPACK_IMPORTED_MODULE_4__.Color.fromRGBNumber(rgba);
      const font = new _paint_font__WEBPACK_IMPORTED_MODULE_33__.Font(fontFamily, fontSize, fontStyle, fontWeight.toString());
      const attributes = new Map();
      attributes.set("strikethrough", strikethrough);
      attributes.set("underline", underline);
      return new _text_font_action__WEBPACK_IMPORTED_MODULE_28__.TextFontAction(handle, font, color, attributes);
    }

    static latexFontAction(dataView) {
      const handle = dataView.getInt32();
      const fontType = dataView.getInt32();
      const fontSize = dataView.getFloat32();
      const rgba = dataView.getInt32();
      const color = _paint_color__WEBPACK_IMPORTED_MODULE_4__.Color.fromRGBNumber(rgba);
      const font = new _paint_font__WEBPACK_IMPORTED_MODULE_33__.Font("Arial", fontSize);
      const attributes = new Map();
      return new _latex_font_action__WEBPACK_IMPORTED_MODULE_36__.LatexFontAction(handle, font, color, attributes);
    }

    static parseActionToBinary(action) {
      const actionByteBuffer = action.toByteBuffer();
      let buffer = new ArrayBuffer(17);
      let dataView = new DataView(buffer);
      dataView.setInt32(0, actionByteBuffer.byteLength);
      dataView.setInt8(4, _stream_action_type__WEBPACK_IMPORTED_MODULE_37__.StreamActionType.STREAM_PAGE_ACTION);
      let playbackService = _services_playback_service__WEBPACK_IMPORTED_MODULE_38__.PlaybackService.getInstance();
      let page = playbackService.renderController.getPage();
      let docId = page.getDocument().getDocumentId();
      let pageNumber = page.getPageNumber();
      dataView.setBigInt64(5, BigInt(docId));
      dataView.setInt32(13, pageNumber);
      const headerBuffer = dataView.buffer;
      let combinedBuffer = new Uint8Array(actionByteBuffer.byteLength + headerBuffer.byteLength);
      combinedBuffer.set(new Uint8Array(headerBuffer), 0);
      combinedBuffer.set(new Uint8Array(actionByteBuffer), headerBuffer.byteLength);
      return combinedBuffer.buffer;
    }

  }

  ActionParser.KEY_EVENT_MASK = 1;
  return ActionParser;
})();


/***/ }),

/***/ 8843:
/*!********************************************************!*\
  !*** ./src/app/action/parser/progressive-data-view.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProgressiveDataView": () => (/* binding */ ProgressiveDataView)
/* harmony export */ });
class ProgressiveDataView {
  constructor(buffer, byteOffset, byteLength) {
    this.dataView = new DataView(buffer, byteOffset, byteLength);
    this.offset = byteOffset ? byteOffset : 0;
  }

  get byteOffset() {
    return this.offset;
  }

  skip(n) {
    if (this.offset + n >= this.dataView.byteLength) {
      throw new Error(`Out of bounds ${this.offset + n} exceeds length ${this.dataView.byteLength}`);
    }

    this.offset += n;
  }

  getString(length) {
    let text = "";
    let val = -1;

    for (let i = 0; i < length; i++) {
      val = this.getUint8();

      if (val == 0) {
        break;
      }

      text += String.fromCharCode(val);
    }

    return text;
  }

  getFloat32(littleEndian) {
    const value = this.dataView.getFloat32(this.offset, littleEndian);
    this.offset += 4;
    return value;
  }

  getFloat64(littleEndian) {
    const value = this.dataView.getFloat64(this.offset, littleEndian);
    this.offset += 8;
    return value;
  }

  getInt8() {
    const value = this.dataView.getInt8(this.offset);
    this.offset += 1;
    return value;
  }

  getInt16(littleEndian) {
    const value = this.dataView.getInt16(this.offset, littleEndian);
    this.offset += 2;
    return value;
  }

  getInt32(littleEndian) {
    const value = this.dataView.getInt32(this.offset, littleEndian);
    this.offset += 4;
    return value;
  }

  getInt64(littleEndian) {
    const value = this.dataView.getBigInt64(this.offset, littleEndian);
    this.offset += 8;
    return value;
  }

  getUint8() {
    const value = this.dataView.getUint8(this.offset);
    this.offset += 1;
    return value;
  }

  getUint16(littleEndian) {
    const value = this.dataView.getUint16(this.offset, littleEndian);
    this.offset += 2;
    return value;
  }

  getUint32(littleEndian) {
    const value = this.dataView.getUint32(this.offset, littleEndian);
    this.offset += 4;
    return value;
  }

}



/***/ }),

/***/ 9015:
/*!*******************************************************!*\
  !*** ./src/app/action/parser/recorded-page.parser.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecordedPageParser": () => (/* binding */ RecordedPageParser)
/* harmony export */ });
/* harmony import */ var _action_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action.parser */ 7758);
/* harmony import */ var _model_recorded_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../model/recorded-page */ 6137);



class RecordedPageParser {
  parse(dataView) {
    const recordedPage = new _model_recorded_page__WEBPACK_IMPORTED_MODULE_1__.RecordedPage();
    const number = dataView.getInt32();
    const timestamp = dataView.getInt32();
    recordedPage.pageNumber = number;
    recordedPage.timestamp = timestamp;
    const staticActionSize = dataView.getInt32();

    if (staticActionSize > 0) {
      const end = dataView.byteOffset + staticActionSize;

      while (dataView.byteOffset < end) {
        const length = dataView.getInt32();
        const type = dataView.getInt8();
        const timestamp = dataView.getInt32();
        const action = _action_parser__WEBPACK_IMPORTED_MODULE_0__.ActionParser.parse(dataView, type, length);

        if (action) {
          action.timestamp = timestamp;
          recordedPage.staticActions.push(action);
        }
      }
    }

    const playbackActionSize = dataView.getInt32();

    if (playbackActionSize > 0) {
      const end = dataView.byteOffset + playbackActionSize;

      while (dataView.byteOffset < end) {
        const length = dataView.getInt32();
        const type = dataView.getInt8();
        const timestamp = dataView.getInt32();
        const action = _action_parser__WEBPACK_IMPORTED_MODULE_0__.ActionParser.parse(dataView, type, length);

        if (action) {
          action.timestamp = timestamp;
          recordedPage.playbackActions.push(action);
        }
      }
    }

    return recordedPage;
  }

}



/***/ }),

/***/ 1317:
/*!*******************************************************!*\
  !*** ./src/app/action/parser/stream.action.parser.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamActionParser": () => (/* binding */ StreamActionParser)
/* harmony export */ });
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../stream.action-type */ 2970);
/* harmony import */ var _stream_document_closed_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stream.document.closed.action */ 2726);
/* harmony import */ var _stream_document_created_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stream.document.created.action */ 6806);
/* harmony import */ var _stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../stream.document.selected.action */ 3239);
/* harmony import */ var _stream_page_created_action__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../stream.page.created.action */ 5320);
/* harmony import */ var _stream_page_deleted_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../stream.page.deleted.action */ 3966);
/* harmony import */ var _stream_page_selected_action__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../stream.page.selected.action */ 1);
/* harmony import */ var _stream_playback_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../stream.playback.action */ 4725);
/* harmony import */ var _stream_playbacks_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../stream.playbacks.action */ 5132);
/* harmony import */ var _stream_start_action__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stream.start.action */ 2816);
/* harmony import */ var _stream_speech_published_action__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../stream.speech.published.action */ 6673);
/* harmony import */ var _action_parser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./action.parser */ 7758);
/* harmony import */ var _recorded_page_parser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./recorded-page.parser */ 9015);













class StreamActionParser {
  static parse(dataView, type, length) {
    let action = null;

    switch (type) {
      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_INIT:
        //action = this.initAction(dataView);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_START:
        action = this.startAction(dataView);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_PAGE_ACTION:
        action = this.playbackAction(dataView);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_PAGE_ACTIONS:
        action = this.playbackActions(dataView);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_PAGE_CREATED:
        action = this.pageAction(dataView, _stream_page_created_action__WEBPACK_IMPORTED_MODULE_4__.StreamPageCreatedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_PAGE_DELETED:
        action = this.pageAction(dataView, _stream_page_deleted_action__WEBPACK_IMPORTED_MODULE_5__.StreamPageDeletedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_PAGE_SELECTED:
        action = this.pageAction(dataView, _stream_page_selected_action__WEBPACK_IMPORTED_MODULE_6__.StreamPageSelectedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_DOCUMENT_CREATED:
        action = this.documentAction(dataView, _stream_document_created_action__WEBPACK_IMPORTED_MODULE_2__.StreamDocumentCreatedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_DOCUMENT_CLOSED:
        action = this.documentAction(dataView, _stream_document_closed_action__WEBPACK_IMPORTED_MODULE_1__.StreamDocumentClosedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_DOCUMENT_SELECTED:
        action = this.documentAction(dataView, _stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction);
        break;

      case _stream_action_type__WEBPACK_IMPORTED_MODULE_0__.StreamActionType.STREAM_SPEECH_PUBLISHED:
        action = this.speechAction(dataView, _stream_speech_published_action__WEBPACK_IMPORTED_MODULE_10__.StreamSpeechPublishedAction);
        break;
    }

    return action;
  }

  static startAction(dataView) {
    const courseId = dataView.getUint32();
    return new _stream_start_action__WEBPACK_IMPORTED_MODULE_9__.StreamStartAction(courseId);
  }

  static playbackAction(dataView) {
    const docId = dataView.getInt64();
    const pageNumber = dataView.getInt32();
    const length = dataView.getInt32();
    const type = dataView.getInt8();
    const timestamp = dataView.getInt32();
    const action = _action_parser__WEBPACK_IMPORTED_MODULE_11__.ActionParser.parse(dataView, type, length);

    if (action) {
      action.timestamp = timestamp;
      return new _stream_playback_action__WEBPACK_IMPORTED_MODULE_7__.StreamPagePlaybackAction(docId, pageNumber, action);
    }

    return null;
  }

  static playbackActions(dataView) {
    const docId = dataView.getInt64();
    const entryLength = dataView.getInt32();
    const pageParser = new _recorded_page_parser__WEBPACK_IMPORTED_MODULE_12__.RecordedPageParser();
    const recordedPage = pageParser.parse(dataView);
    return new _stream_playbacks_action__WEBPACK_IMPORTED_MODULE_8__.StreamPageActionsAction(docId, recordedPage);
  }

  static pageAction(dataView, type) {
    const docId = dataView.getInt64();
    const pageNumber = dataView.getInt32();
    return new type(docId, pageNumber);
  }

  static documentAction(dataView, type) {
    const docId = dataView.getInt64();
    const docType = dataView.getInt8();
    const titleLength = dataView.getInt32();
    const nameLength = dataView.getInt32();
    const checksumLength = dataView.getInt32();
    const docTitle = dataView.getString(titleLength);
    const docName = dataView.getString(nameLength);
    const docChecksum = dataView.getString(checksumLength);
    return new type(docId, docType, docTitle, docName);
  }

  static speechAction(dataView, type) {
    const idLength = dataView.getInt32();
    const idStr = dataView.getString(idLength);
    const publisherId = BigInt(idStr);
    return new type(publisherId);
  }

  static parseActionToBinary(action) {
    return action.toByteBuffer();
  }

}

/***/ }),

/***/ 1373:
/*!**************************************!*\
  !*** ./src/app/action/pen.action.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenAction": () => (/* binding */ PenAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_pen_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/pen.tool */ 8395);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class PenAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_pen_tool__WEBPACK_IMPORTED_MODULE_1__.PenTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.PEN;
  }

}



/***/ }),

/***/ 3448:
/*!******************************************!*\
  !*** ./src/app/action/pointer.action.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PointerAction": () => (/* binding */ PointerAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_pointer_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/pointer.tool */ 5205);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class PointerAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_pointer_tool__WEBPACK_IMPORTED_MODULE_1__.PointerTool();
    tool.brush = this.brush;
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.POINTER;
  }

}



/***/ }),

/***/ 9116:
/*!********************************************!*\
  !*** ./src/app/action/rectangle.action.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RectangleAction": () => (/* binding */ RectangleAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_rectangle_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/rectangle.tool */ 8156);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class RectangleAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  execute(executor) {
    const tool = new _tool_rectangle_tool__WEBPACK_IMPORTED_MODULE_1__.RectangleTool();
    tool.shapeHandle = this.shapeHandle;
    tool.brush = this.brush;
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(tool);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.RECTANGLE;
  }

}



/***/ }),

/***/ 5987:
/*!***************************************!*\
  !*** ./src/app/action/redo.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RedoAction": () => (/* binding */ RedoAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_redo_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/redo.tool */ 9223);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class RedoAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.selectAndExecuteTool(new _tool_redo_tool__WEBPACK_IMPORTED_MODULE_1__.RedoTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.REDO;
  }

}



/***/ }),

/***/ 7164:
/*!*****************************************!*\
  !*** ./src/app/action/rubber.action.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RubberAction": () => (/* binding */ RubberAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_delete_shape_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/delete.shape.tool */ 2065);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geometry/pen-point */ 7578);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./action-type */ 7653);





class RubberAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(shapeHandle) {
    super();
    this.shapeHandle = shapeHandle;
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_delete_shape_tool__WEBPACK_IMPORTED_MODULE_1__.DeleteShapeTool(this.shapeHandle));
    executor.beginTool(new _geometry_pen_point__WEBPACK_IMPORTED_MODULE_2__.PenPoint(0, 0, 0));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_3__.ActionType.RUBBER;
  }

}



/***/ }),

/***/ 9521:
/*!***********************************************!*\
  !*** ./src/app/action/select-group.action.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectGroupAction": () => (/* binding */ SelectGroupAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_select_group_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/select-group.tool */ 5912);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class SelectGroupAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_select_group_tool__WEBPACK_IMPORTED_MODULE_1__.SelectGroupTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.SELECT_GROUP;
  }

}



/***/ }),

/***/ 1254:
/*!*****************************************!*\
  !*** ./src/app/action/select.action.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectAction": () => (/* binding */ SelectAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_select_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/select.tool */ 5686);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class SelectAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_select_tool__WEBPACK_IMPORTED_MODULE_1__.SelectTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.SELECT;
  }

}



/***/ }),

/***/ 2827:
/*!**************************************************!*\
  !*** ./src/app/action/simple-action-executor.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SimpleActionExecutor": () => (/* binding */ SimpleActionExecutor)
/* harmony export */ });
/* harmony import */ var _tool_tool_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tool/tool-context */ 2474);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/pen-point */ 7578);
/* harmony import */ var _tool_atomic_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tool/atomic.tool */ 8534);




class SimpleActionExecutor {
  constructor(document) {
    this.document = document;
    this.toolContext = new _tool_tool_context__WEBPACK_IMPORTED_MODULE_0__.ToolContext(null);
  }

  setOnSelectPageIndex(observer) {}

  setSeek(seek) {}

  setKeyEvent(keyEvent) {
    this.toolContext.keyEvent = keyEvent;
  }

  setDocument(document) {}

  setPageNumber(pageNumber) {
    if (this.pageNumber === pageNumber) {
      return;
    }

    const page = this.document.getPage(pageNumber);
    this.pageNumber = pageNumber;
    this.toolContext.page = page;
  }

  setTool(tool) {
    if (!tool) {
      throw new Error("Tool must not be null");
    }

    if (!this.tool && this.tool === tool) {
      return;
    }

    this.setPreviousTool(this.tool);
    this.tool = tool;
  }

  selectAndExecuteTool(tool) {
    const point = _geometry_pen_point__WEBPACK_IMPORTED_MODULE_1__.PenPoint.createZero();
    this.setTool(tool);
    this.beginTool(point);
    this.executeTool(point);
    this.endTool(point);
    this.setPreviousTool(this.previousTool);
  }

  beginTool(point) {
    this.tool.begin(point.clone(), this.toolContext);
  }

  executeTool(point) {
    this.tool.execute(point.clone());
  }

  endTool(point) {
    this.tool.end(point.clone());
  }

  setPreviousTool(tool) {
    if (!tool) {
      return;
    }

    if (tool instanceof _tool_atomic_tool__WEBPACK_IMPORTED_MODULE_2__.AtomicTool) {
      // Do not remember atomic tools.
      return;
    }

    this.previousTool = tool;
  }

}



/***/ }),

/***/ 486:
/*!************************************************!*\
  !*** ./src/app/action/stream-action-player.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamActionPlayer": () => (/* binding */ StreamActionPlayer)
/* harmony export */ });
/* harmony import */ var _action_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action-player */ 7120);


class StreamActionPlayer extends _action_player__WEBPACK_IMPORTED_MODULE_0__.ActionPlayer {
  constructor(executor, syncState) {
    super(executor);
    this.syncState = syncState;
  }

  addAction(action) {
    this.actions.push(action);
  }

  setDocument(document) {
    this.executor.setDocument(document);
  }

  seekByTime(time) {
    throw new Error("Method not implemented.");
  }

  seekByPage(pageNumber) {
    throw new Error("Method not implemented.");
  }

  executeActions() {
    let actionCount = this.actions.length;

    while (actionCount > 0) {
      // Get next action for execution.
      const action = this.actions[0];
      console.log("Execute action ", action);
      const time = this.syncState.audioTime; // if (time >= action.timestamp) {
      //console.log("action latency: " + (time - action.timestamp));

      try {
        action.execute(this.executor);
      } catch (cause) {//console.error(cause);
      } // Remove executed action.


      this.actions.shift();
      actionCount = this.actions.length; // }
      // else {
      // 	break;
      // }
    }
  }

  initInternal() {
    this.actions = [];
  }

  startInternal() {
    try {
      this.run();
    } catch (e) {
      console.error(e);
      throw new Error("Execute action failed.");
    }
  }

  stopInternal() {
    cancelAnimationFrame(this.requestID);
  }

  suspendInternal() {
    cancelAnimationFrame(this.requestID);
  }

  destroyInternal() {
    this.actions.length = 0;
  }

  run() {
    this.executeActions();
    this.requestID = requestAnimationFrame(this.run.bind(this));
  }

}



/***/ }),

/***/ 2970:
/*!**********************************************!*\
  !*** ./src/app/action/stream.action-type.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamActionType": () => (/* binding */ StreamActionType)
/* harmony export */ });
var StreamActionType = /*#__PURE__*/(() => {
  (function (StreamActionType) {
    StreamActionType[StreamActionType["STREAM_INIT"] = 0] = "STREAM_INIT";
    StreamActionType[StreamActionType["STREAM_START"] = 1] = "STREAM_START";
    StreamActionType[StreamActionType["STREAM_PAGE_ACTION"] = 2] = "STREAM_PAGE_ACTION";
    StreamActionType[StreamActionType["STREAM_PAGE_ACTIONS"] = 3] = "STREAM_PAGE_ACTIONS";
    StreamActionType[StreamActionType["STREAM_PAGE_CREATED"] = 4] = "STREAM_PAGE_CREATED";
    StreamActionType[StreamActionType["STREAM_PAGE_DELETED"] = 5] = "STREAM_PAGE_DELETED";
    StreamActionType[StreamActionType["STREAM_PAGE_SELECTED"] = 6] = "STREAM_PAGE_SELECTED";
    StreamActionType[StreamActionType["STREAM_DOCUMENT_CREATED"] = 7] = "STREAM_DOCUMENT_CREATED";
    StreamActionType[StreamActionType["STREAM_DOCUMENT_CLOSED"] = 8] = "STREAM_DOCUMENT_CLOSED";
    StreamActionType[StreamActionType["STREAM_DOCUMENT_SELECTED"] = 9] = "STREAM_DOCUMENT_SELECTED";
    StreamActionType[StreamActionType["STREAM_SPEECH_PUBLISHED"] = 10] = "STREAM_SPEECH_PUBLISHED";
  })(StreamActionType || (StreamActionType = {}));

  return StreamActionType;
})();


/***/ }),

/***/ 8736:
/*!*****************************************!*\
  !*** ./src/app/action/stream.action.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamAction": () => (/* binding */ StreamAction)
/* harmony export */ });
class StreamAction {
  createDataView(payloadLength) {
    // Create ArrayBuffer with 5 Bytes for the header and length Bytes for the payload
    let buffer = new ArrayBuffer(5 + payloadLength);
    let dataView = new DataView(buffer); // Write header.

    dataView.setInt32(0, payloadLength);
    dataView.setInt8(4, this.getType());
    return dataView;
  }

}



/***/ }),

/***/ 7972:
/*!**************************************************!*\
  !*** ./src/app/action/stream.document.action.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamDocumentAction": () => (/* binding */ StreamDocumentAction)
/* harmony export */ });
/* harmony import */ var _stream_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.action */ 8736);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamDocumentAction extends _stream_action__WEBPACK_IMPORTED_MODULE_0__.StreamAction {
  constructor(documentId, documentType, documentTitle, documentFile) {
    super();
    this.documentId = documentId;
    this.documentType = documentType;
    this.documentTitle = documentTitle;
    this.documentFile = documentFile;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_ACTIONS;
  }

  toByteBuffer() {
    let titleBuffer = [];
    let fileNameBuffer = [];
    let titleLength = 0;
    let fileNameLength = 0;
    let checksumLength = 0;
    let textLength = 8;

    if (this.documentTitle != null) {
      for (let i = 0; i < this.documentTitle.length; ++i) {
        let code = this.documentTitle.charCodeAt(i);
        titleBuffer = titleBuffer.concat([code]);
      }

      titleLength = titleBuffer.length;
      textLength += titleBuffer.length;
    }

    if (this.documentFile != null) {
      for (let i = 0; i < this.documentFile.length; ++i) {
        let code = this.documentFile.charCodeAt(i);
        fileNameBuffer = fileNameBuffer.concat([code]);
      }

      fileNameLength = fileNameBuffer.length;
      textLength += fileNameBuffer.length;
    }

    let buffer = new ArrayBuffer(22 + textLength);
    let dataView = new DataView(buffer); // Write header.

    dataView.setInt32(0, 14 + textLength);
    dataView.setInt8(4, this.getType());
    dataView.setBigInt64(5, this.documentId);
    dataView.setInt8(13, this.documentType);
    dataView.setInt32(14, titleLength);
    dataView.setInt32(18, fileNameLength);
    dataView.setInt32(22, checksumLength);
    let byteOffset = 26;

    for (const index in titleBuffer) {
      dataView.setUint8(byteOffset, titleBuffer[index]);
      byteOffset++;
    }

    for (const index in fileNameBuffer) {
      dataView.setUint8(byteOffset, fileNameBuffer[index]);
      byteOffset++;
    }

    return dataView.buffer;
  }

}



/***/ }),

/***/ 2726:
/*!*********************************************************!*\
  !*** ./src/app/action/stream.document.closed.action.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamDocumentClosedAction": () => (/* binding */ StreamDocumentClosedAction)
/* harmony export */ });
/* harmony import */ var _stream_document_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.document.action */ 7972);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamDocumentClosedAction extends _stream_document_action__WEBPACK_IMPORTED_MODULE_0__.StreamDocumentAction {
  constructor(documentId, documentType, documentTitle, documentFile) {
    super(documentId, documentType, documentTitle, documentFile);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_DOCUMENT_CLOSED;
  }

}



/***/ }),

/***/ 6806:
/*!**********************************************************!*\
  !*** ./src/app/action/stream.document.created.action.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamDocumentCreatedAction": () => (/* binding */ StreamDocumentCreatedAction)
/* harmony export */ });
/* harmony import */ var _stream_document_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.document.action */ 7972);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamDocumentCreatedAction extends _stream_document_action__WEBPACK_IMPORTED_MODULE_0__.StreamDocumentAction {
  constructor(documentId, documentType, documentTitle, documentFile) {
    super(documentId, documentType, documentTitle, documentFile);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_DOCUMENT_CREATED;
  }

}



/***/ }),

/***/ 3239:
/*!***********************************************************!*\
  !*** ./src/app/action/stream.document.selected.action.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamDocumentSelectedAction": () => (/* binding */ StreamDocumentSelectedAction)
/* harmony export */ });
/* harmony import */ var _stream_document_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.document.action */ 7972);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamDocumentSelectedAction extends _stream_document_action__WEBPACK_IMPORTED_MODULE_0__.StreamDocumentAction {
  constructor(documentId, documentType, documentTitle, documentFile) {
    super(documentId, documentType, documentTitle, documentFile);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_DOCUMENT_SELECTED;
  }

}



/***/ }),

/***/ 3434:
/*!**********************************************!*\
  !*** ./src/app/action/stream.page.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPageAction": () => (/* binding */ StreamPageAction)
/* harmony export */ });
/* harmony import */ var _stream_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.action */ 8736);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPageAction extends _stream_action__WEBPACK_IMPORTED_MODULE_0__.StreamAction {
  constructor(documentId, pageNumber) {
    super();
    this.documentId = documentId;
    this.pageNumber = pageNumber;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_ACTIONS;
  }

  toByteBuffer() {
    let dataView = this.createDataView(12);
    dataView.setBigInt64(5, this.documentId);
    dataView.setInt32(13, this.pageNumber);
    return dataView.buffer;
  }

}



/***/ }),

/***/ 5320:
/*!******************************************************!*\
  !*** ./src/app/action/stream.page.created.action.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPageCreatedAction": () => (/* binding */ StreamPageCreatedAction)
/* harmony export */ });
/* harmony import */ var _stream_page_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.page.action */ 3434);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPageCreatedAction extends _stream_page_action__WEBPACK_IMPORTED_MODULE_0__.StreamPageAction {
  constructor(documentId, pageNumber) {
    super(documentId, pageNumber);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_CREATED;
  }

}



/***/ }),

/***/ 3966:
/*!******************************************************!*\
  !*** ./src/app/action/stream.page.deleted.action.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPageDeletedAction": () => (/* binding */ StreamPageDeletedAction)
/* harmony export */ });
/* harmony import */ var _stream_page_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.page.action */ 3434);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPageDeletedAction extends _stream_page_action__WEBPACK_IMPORTED_MODULE_0__.StreamPageAction {
  constructor(documentId, pageNumber) {
    super(documentId, pageNumber);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_DELETED;
  }

}



/***/ }),

/***/ 1:
/*!*******************************************************!*\
  !*** ./src/app/action/stream.page.selected.action.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPageSelectedAction": () => (/* binding */ StreamPageSelectedAction)
/* harmony export */ });
/* harmony import */ var _stream_page_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.page.action */ 3434);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPageSelectedAction extends _stream_page_action__WEBPACK_IMPORTED_MODULE_0__.StreamPageAction {
  constructor(documentId, pageNumber) {
    super(documentId, pageNumber);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_SELECTED;
  }

}



/***/ }),

/***/ 4725:
/*!**************************************************!*\
  !*** ./src/app/action/stream.playback.action.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPagePlaybackAction": () => (/* binding */ StreamPagePlaybackAction)
/* harmony export */ });
/* harmony import */ var _stream_page_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.page.action */ 3434);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPagePlaybackAction extends _stream_page_action__WEBPACK_IMPORTED_MODULE_0__.StreamPageAction {
  constructor(documentId, pageNumber, action) {
    super(documentId, pageNumber);
    this.action = action;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_ACTION;
  }

}



/***/ }),

/***/ 5132:
/*!***************************************************!*\
  !*** ./src/app/action/stream.playbacks.action.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamPageActionsAction": () => (/* binding */ StreamPageActionsAction)
/* harmony export */ });
/* harmony import */ var _stream_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.action */ 8736);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamPageActionsAction extends _stream_action__WEBPACK_IMPORTED_MODULE_0__.StreamAction {
  constructor(documentId, recPage) {
    super();
    this.documentId = documentId;
    this.recordedPage = recPage;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_PAGE_ACTIONS;
  } // TODO: Implement method to convert actions history to ArrayBuffer


  toByteBuffer() {
    // TODO: Iterate complete history to buffer
    let pageData = [];
    let dataView = this.createDataView(pageData.length + 8);
    dataView.setBigInt64(5, this.documentId);
    return dataView.buffer;
  }

}



/***/ }),

/***/ 8631:
/*!************************************************!*\
  !*** ./src/app/action/stream.speech.action.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamSpeechAction": () => (/* binding */ StreamSpeechAction)
/* harmony export */ });
/* harmony import */ var _stream_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.action */ 8736);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamSpeechAction extends _stream_action__WEBPACK_IMPORTED_MODULE_0__.StreamAction {
  constructor(publisherId) {
    super();
    this.publisherId = publisherId;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_SPEECH_PUBLISHED;
  }

  toByteBuffer() {
    return new ArrayBuffer(12);
  }

}



/***/ }),

/***/ 6673:
/*!**********************************************************!*\
  !*** ./src/app/action/stream.speech.published.action.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamSpeechPublishedAction": () => (/* binding */ StreamSpeechPublishedAction)
/* harmony export */ });
/* harmony import */ var _stream_speech_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.speech.action */ 8631);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamSpeechPublishedAction extends _stream_speech_action__WEBPACK_IMPORTED_MODULE_0__.StreamSpeechAction {
  constructor(publisherId) {
    super(publisherId);
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_SPEECH_PUBLISHED;
  }

}



/***/ }),

/***/ 2816:
/*!***********************************************!*\
  !*** ./src/app/action/stream.start.action.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamStartAction": () => (/* binding */ StreamStartAction)
/* harmony export */ });
/* harmony import */ var _stream_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.action */ 8736);
/* harmony import */ var _stream_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.action-type */ 2970);



class StreamStartAction extends _stream_action__WEBPACK_IMPORTED_MODULE_0__.StreamAction {
  constructor(courseId) {
    super();
    this.courseId = courseId;
  }

  getType() {
    return _stream_action_type__WEBPACK_IMPORTED_MODULE_1__.StreamActionType.STREAM_START;
  }

  toByteBuffer() {
    return new ArrayBuffer(12);
  }

}



/***/ }),

/***/ 7204:
/*!**********************************************!*\
  !*** ./src/app/action/text-change.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextChangeAction": () => (/* binding */ TextChangeAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_change_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text-change.tool */ 3774);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class TextChangeAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle, text) {
    super();
    this.handle = handle;
    this.text = text;
  }

  execute(executor) {
    executor.selectAndExecuteTool(new _tool_text_change_tool__WEBPACK_IMPORTED_MODULE_1__.TextChangeTool(this.handle, this.text));
  }

  toByteBuffer() {
    const utf8Encode = new TextEncoder();
    const byteArr = utf8Encode.encode(this.text);
    let dataViewByteOffsetObject = this.createDataView(8 + byteArr.byteLength);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    dataView.setInt32(byteOffset + 4, byteArr.byteLength);
    let combinedBuffer = new Uint8Array(dataView.buffer.byteLength + byteArr.byteLength);
    combinedBuffer.set(new Uint8Array(dataView.buffer), 0);
    combinedBuffer.set(new Uint8Array(byteArr.buffer), dataView.buffer.byteLength);
    return combinedBuffer.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.TEXT_CHANGE;
  }

}



/***/ }),

/***/ 1808:
/*!********************************************!*\
  !*** ./src/app/action/text-font.action.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFontAction": () => (/* binding */ TextFontAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_font_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text-font.tool */ 2294);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class TextFontAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle, font, textColor, textAttributes) {
    super();
    this.handle = handle;
    this.font = font;
    this.textColor = textColor;
    this.textAttributes = textAttributes;
  }

  execute(executor) {
    executor.selectAndExecuteTool(new _tool_text_font_tool__WEBPACK_IMPORTED_MODULE_1__.TextFontTool(this.handle, this.font, this.textColor, this.textAttributes));
  }

  toByteBuffer() {
    const utf8Encode = new TextEncoder(); // Font family buffer

    const byteArr = utf8Encode.encode(this.font.family);
    let dataViewByteOffsetObject = this.createDataView(12); // Header + first 12 Bytes

    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    dataView.setInt32(byteOffset + 4, Number(this.textColor.toRgba()));
    dataView.setInt32(byteOffset + 8, byteArr.buffer.byteLength);
    let buffer = new ArrayBuffer(12);
    let trailingDataView = new DataView(buffer);
    trailingDataView.setFloat64(0, this.font.size);
    trailingDataView.setInt8(8, 0);
    trailingDataView.setInt8(9, 0);
    trailingDataView.setInt8(10, this.textAttributes.get("strikethrough") ? 1 : 0);
    trailingDataView.setInt8(11, this.textAttributes.get("underline") ? 1 : 0);
    let combinedBuffer = new Uint8Array(dataView.buffer.byteLength + byteArr.byteLength + trailingDataView.buffer.byteLength);
    combinedBuffer.set(new Uint8Array(dataView.buffer), 0);
    combinedBuffer.set(new Uint8Array(byteArr.buffer), dataView.buffer.byteLength);
    combinedBuffer.set(new Uint8Array(trailingDataView.buffer), dataView.buffer.byteLength + byteArr.buffer.byteLength);
    return combinedBuffer.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.TEXT_FONT_CHANGE;
  }

}



/***/ }),

/***/ 4414:
/*!*************************************************!*\
  !*** ./src/app/action/text-highlight.action.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextHighlightAction": () => (/* binding */ TextHighlightAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_highlight_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text-highlight.tool */ 9045);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geometry/pen-point */ 7578);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./action-type */ 7653);





class TextHighlightAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(shapeHandle, color, textBounds) {
    super();
    this.shapeHandle = shapeHandle;
    this.color = color;
    this.textBounds = textBounds;
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_text_highlight_tool__WEBPACK_IMPORTED_MODULE_1__.TextHighlightTool(this.shapeHandle, this.color, this.textBounds));
    executor.beginTool(new _geometry_pen_point__WEBPACK_IMPORTED_MODULE_2__.PenPoint(0, 0, 0));
  }

  toByteBuffer() {
    let length = 8 + this.textBounds.length * 32;
    let dataViewByteOffsetObject = this.createDataView(length);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, Number(this.color.toRgba()));
    dataView.setInt32(byteOffset + 4, this.textBounds.length);

    if (this.textBounds.length !== 0) {
      for (const textBound of this.textBounds) {
        dataView.setFloat64(byteOffset + 8, textBound.x);
        dataView.setFloat64(byteOffset + 16, textBound.y);
        dataView.setFloat64(byteOffset + 24, textBound.width);
        dataView.setFloat64(byteOffset + 32, textBound.height);
      }
    }

    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_3__.ActionType.TEXT_SELECTION;
  }

}



/***/ }),

/***/ 1304:
/*!********************************************!*\
  !*** ./src/app/action/text-move.action.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextMoveAction": () => (/* binding */ TextMoveAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_move_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text-move.tool */ 3469);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class TextMoveAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle, point) {
    super();
    this.handle = handle;
    this.point = point;
  }

  execute(executor) {
    executor.selectAndExecuteTool(new _tool_text_move_tool__WEBPACK_IMPORTED_MODULE_1__.TextMoveTool(this.handle, this.point));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(20);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    dataView.setBigInt64(byteOffset + 4, BigInt(this.point.x));
    dataView.setBigInt64(byteOffset + 12, BigInt(this.point.y));
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.TEXT_LOCATION_CHANGE;
  }

}



/***/ }),

/***/ 3926:
/*!**********************************************!*\
  !*** ./src/app/action/text-remove.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextRemoveAction": () => (/* binding */ TextRemoveAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_remove_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text-remove.tool */ 7134);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class TextRemoveAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle) {
    super();
    this.handle = handle;
  }

  execute(executor) {
    executor.selectAndExecuteTool(new _tool_text_remove_tool__WEBPACK_IMPORTED_MODULE_1__.TextRemoveTool(this.handle));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(4);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.TEXT_REMOVE;
  }

}



/***/ }),

/***/ 6717:
/*!***************************************!*\
  !*** ./src/app/action/text.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextAction": () => (/* binding */ TextAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_text_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/text.tool */ 7280);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class TextAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(handle) {
    super();
    this.handle = handle;
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_text_tool__WEBPACK_IMPORTED_MODULE_1__.TextTool(this.handle));
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(4);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset;
    dataView.setInt32(byteOffset, this.handle);
    return dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.TEXT;
  }

}



/***/ }),

/***/ 7479:
/*!*********************************************!*\
  !*** ./src/app/action/tool-begin.action.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolBeginAction": () => (/* binding */ ToolBeginAction)
/* harmony export */ });
/* harmony import */ var _tool_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tool.action */ 354);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-type */ 7653);



class ToolBeginAction extends _tool_action__WEBPACK_IMPORTED_MODULE_0__.ToolAction {
  execute(executor) {
    executor.beginTool(this.point);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_BEGIN;
  }

}



/***/ }),

/***/ 1100:
/*!*******************************************!*\
  !*** ./src/app/action/tool-end.action.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolEndAction": () => (/* binding */ ToolEndAction)
/* harmony export */ });
/* harmony import */ var _tool_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tool.action */ 354);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-type */ 7653);



class ToolEndAction extends _tool_action__WEBPACK_IMPORTED_MODULE_0__.ToolAction {
  execute(executor) {
    executor.endTool(this.point);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_END;
  }

}



/***/ }),

/***/ 2656:
/*!***********************************************!*\
  !*** ./src/app/action/tool-execute.action.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolExecuteAction": () => (/* binding */ ToolExecuteAction)
/* harmony export */ });
/* harmony import */ var _tool_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tool.action */ 354);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-type */ 7653);



class ToolExecuteAction extends _tool_action__WEBPACK_IMPORTED_MODULE_0__.ToolAction {
  execute(executor) {
    executor.executeTool(this.point);
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_EXECUTE;
  }

}



/***/ }),

/***/ 354:
/*!***************************************!*\
  !*** ./src/app/action/tool.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolAction": () => (/* binding */ ToolAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);


class ToolAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(point) {
    super();

    if (point) {
      this.point = point;
    }
  }

  toByteBuffer() {
    if (this.point) {
      return this.createDataView(0).dataView.buffer;
    }

    let dataViewByteOffsetObject = this.createDataView(12);
    let dataView = dataViewByteOffsetObject.dataView;
    let byteOffset = dataViewByteOffsetObject.byteOffset; // @ts-ignore

    dataView.setFloat32(byteOffset, this.point.x); // @ts-ignore

    dataView.setFloat32(byteOffset + 4, this.point.y); // @ts-ignore

    dataView.setFloat32(byteOffset + 8, this.point.p);
    return dataView.buffer;
  }

}



/***/ }),

/***/ 8095:
/*!***************************************!*\
  !*** ./src/app/action/undo.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UndoAction": () => (/* binding */ UndoAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_undo_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/undo.tool */ 1368);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class UndoAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.selectAndExecuteTool(new _tool_undo_tool__WEBPACK_IMPORTED_MODULE_1__.UndoTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.UNDO;
  }

}



/***/ }),

/***/ 4016:
/*!*******************************************!*\
  !*** ./src/app/action/zoom-out.action.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomOutAction": () => (/* binding */ ZoomOutAction)
/* harmony export */ });
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action */ 4712);
/* harmony import */ var _tool_zoom_out_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/zoom-out.tool */ 6196);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class ZoomOutAction extends _action__WEBPACK_IMPORTED_MODULE_0__.Action {
  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.selectAndExecuteTool(new _tool_zoom_out_tool__WEBPACK_IMPORTED_MODULE_1__.ZoomOutTool());
  }

  toByteBuffer() {
    let dataViewByteOffsetObject = this.createDataView(0);
    return dataViewByteOffsetObject.dataView.buffer;
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.ZOOM_OUT;
  }

}



/***/ }),

/***/ 2289:
/*!***************************************!*\
  !*** ./src/app/action/zoom.action.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomAction": () => (/* binding */ ZoomAction)
/* harmony export */ });
/* harmony import */ var _brush_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./brush.action */ 4798);
/* harmony import */ var _tool_zoom_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tool/zoom.tool */ 6010);
/* harmony import */ var _action_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-type */ 7653);




class ZoomAction extends _brush_action__WEBPACK_IMPORTED_MODULE_0__.BrushAction {
  constructor(shapeHandle, brush) {
    super(0, brush);
  }

  execute(executor) {
    executor.setKeyEvent(this.keyEvent);
    executor.setTool(new _tool_zoom_tool__WEBPACK_IMPORTED_MODULE_1__.ZoomTool());
  }

  getType() {
    return _action_type__WEBPACK_IMPORTED_MODULE_2__.ActionType.ZOOM;
  }

}



/***/ }),

/***/ 158:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppRoutingModule": () => (/* binding */ AppRoutingModule)
/* harmony export */ });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 4202);
/* harmony import */ var _pages_player_player_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pages/player/player.component */ 3500);
/* harmony import */ var _pages_home_home_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/home/home.component */ 7513);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 5000);





const routes = [{
  path: '',
  component: _pages_home_home_component__WEBPACK_IMPORTED_MODULE_1__.HomeComponent
}, {
  path: 'course/:courseId',
  component: _pages_player_player_component__WEBPACK_IMPORTED_MODULE_0__.PlayerComponent
}];
let AppRoutingModule = /*#__PURE__*/(() => {
  class AppRoutingModule {}

  AppRoutingModule.ɵfac = function AppRoutingModule_Factory(t) {
    return new (t || AppRoutingModule)();
  };

  AppRoutingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
    type: AppRoutingModule
  });
  AppRoutingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
    imports: [[_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule.forRoot(routes)], _angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
  });
  return AppRoutingModule;
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](AppRoutingModule, {
    imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule],
    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
  });
})();

/***/ }),

/***/ 5041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 4202);
/* harmony import */ var _services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/janus/janus.service */ 465);



let AppComponent = /*#__PURE__*/(() => {
  class AppComponent {
    constructor(router, janusService, elementRef) {
      this.router = router;
      this.janusService = janusService;
      this.elementRef = elementRef;
      this.title = 'angularPlayer';
      this.janusService.setUsername(this.elementRef.nativeElement.getAttribute('userdisplayname'));
    }

  }

  AppComponent.ɵfac = function AppComponent_Factory(t) {
    return new (t || AppComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_2__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__.JanusService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef));
  };

  AppComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
    type: AppComponent,
    selectors: [["app-root"]],
    decls: 1,
    vars: 0,
    template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "router-outlet");
      }
    },
    directives: [_angular_router__WEBPACK_IMPORTED_MODULE_2__.RouterOutlet],
    styles: [""]
  });
  return AppComponent;
})();

/***/ }),

/***/ 6747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppModule": () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/platform-browser */ 2313);
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app-routing.module */ 158);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.component */ 5041);
/* harmony import */ var _pages_player_player_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/player/player.component */ 3500);
/* harmony import */ var _pages_home_home_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/home/home.component */ 7513);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/icon */ 5245);
/* harmony import */ var _components_gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/gallery-view/gallery-view.component */ 8149);
/* harmony import */ var _components_speaker_view_speaker_view_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/speaker-view/speaker-view.component */ 9662);
/* harmony import */ var _components_document_view_document_view_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/document-view/document-view.component */ 3144);
/* harmony import */ var _components_menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/menubar/menubar-button/menubar-button.component */ 6604);
/* harmony import */ var _components_menubar_menubar_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/menubar/menubar.component */ 1511);
/* harmony import */ var _components_select_overlay_select_overlay_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/select-overlay/select-overlay.component */ 8726);
/* harmony import */ var _components_menubar_menubar_buttongroup_menubar_buttongroup_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/menubar/menubar-buttongroup/menubar-buttongroup.component */ 7703);
/* harmony import */ var _ngneat_dialog__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ngneat/dialog */ 9087);
/* harmony import */ var _components_settings_settings_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/settings/settings.component */ 6577);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/common/http */ 520);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 5000);


















let AppModule = /*#__PURE__*/(() => {
  class AppModule {}

  AppModule.ɵfac = function AppModule_Factory(t) {
    return new (t || AppModule)();
  };

  AppModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_12__["ɵɵdefineNgModule"]({
    type: AppModule,
    bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_1__.AppComponent]
  });
  AppModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_12__["ɵɵdefineInjector"]({
    providers: [],
    imports: [[_angular_platform_browser__WEBPACK_IMPORTED_MODULE_13__.BrowserModule, _app_routing_module__WEBPACK_IMPORTED_MODULE_0__.AppRoutingModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_14__.MatIconModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_15__.HttpClientModule, _ngneat_dialog__WEBPACK_IMPORTED_MODULE_16__.DialogModule.forRoot({
      closeButton: true,
      resizable: false,
      draggable: false,
      sizes: {
        md: {
          width: '40vw',
          height: '60vh'
        }
      }
    })], _angular_material_icon__WEBPACK_IMPORTED_MODULE_14__.MatIconModule]
  });
  return AppModule;
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_12__["ɵɵsetNgModuleScope"](AppModule, {
    declarations: [_app_component__WEBPACK_IMPORTED_MODULE_1__.AppComponent, _pages_player_player_component__WEBPACK_IMPORTED_MODULE_2__.PlayerComponent, _pages_home_home_component__WEBPACK_IMPORTED_MODULE_3__.HomeComponent, _components_gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_4__.GalleryViewComponent, _components_speaker_view_speaker_view_component__WEBPACK_IMPORTED_MODULE_5__.SpeakerViewComponent, _components_document_view_document_view_component__WEBPACK_IMPORTED_MODULE_6__.DocumentViewComponent, _components_menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_7__.MenubarButtonComponent, _components_menubar_menubar_component__WEBPACK_IMPORTED_MODULE_8__.MenubarComponent, _components_select_overlay_select_overlay_component__WEBPACK_IMPORTED_MODULE_9__.SelectOverlayComponent, _components_menubar_menubar_buttongroup_menubar_buttongroup_component__WEBPACK_IMPORTED_MODULE_10__.MenubarButtongroupComponent, _components_settings_settings_component__WEBPACK_IMPORTED_MODULE_11__.SettingsComponent],
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_13__.BrowserModule, _app_routing_module__WEBPACK_IMPORTED_MODULE_0__.AppRoutingModule, _angular_material_icon__WEBPACK_IMPORTED_MODULE_14__.MatIconModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_15__.HttpClientModule, _ngneat_dialog__WEBPACK_IMPORTED_MODULE_16__.DialogModule],
    exports: [_angular_material_icon__WEBPACK_IMPORTED_MODULE_14__.MatIconModule]
  });
})();

/***/ }),

/***/ 3144:
/*!*********************************************************************!*\
  !*** ./src/app/components/document-view/document-view.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentViewComponent": () => (/* binding */ DocumentViewComponent)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _render_render_surface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/render-surface */ 4741);
/* harmony import */ var _render_slide_render_surface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/slide-render-surface */ 4177);
/* harmony import */ var _render_text_layer_surface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../render/text-layer-surface */ 41);
/* harmony import */ var _services_playback_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/playback.service */ 8818);
/* harmony import */ var _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../action/stream.page.selected.action */ 1);
/* harmony import */ var _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../action/parser/stream.action.parser */ 1317);
/* harmony import */ var _action_page_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../action/page.action */ 8078);
/* harmony import */ var _action_action_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../action/action-type */ 7653);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _services_janus_janus_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../services/janus/janus.service */ 465);
/* harmony import */ var _services_annotation_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/annotation.service */ 9698);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../gallery-view/gallery-view.component */ 8149);
/* harmony import */ var _menubar_menubar_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../menubar/menubar.component */ 1511);
/* harmony import */ var _menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../menubar/menubar-button/menubar-button.component */ 6604);
















const _c0 = ["actionCanvas"];
const _c1 = ["slideCanvas"];
const _c2 = ["volatileCanvas"];
const _c3 = ["textLayer"];
const _c4 = ["parent"];
const _c5 = ["pdfActionBar"];

function DocumentViewComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](0, "div", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelement"](1, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](2, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelement"](3, "app-gallery-view", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]()();
  }

  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("isTinyView", true)("skipAnimations", true)("allowNavigation", true)("cameraStreams", ctx_r0._cameraStreams);
  }
}

function DocumentViewComponent_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](1, "app-menubar-button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("clicked", function DocumentViewComponent_ng_container_24_Template_app_menubar_button_clicked_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵrestoreView"](_r11);
      const i_r9 = restoredCtx.index;
      const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵnextContext"]();
      return ctx_r10.annotationService.setColor(i_r9);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementContainerEnd"]();
  }

  if (rf & 2) {
    const color_r8 = ctx.$implicit;
    const i_r9 = ctx.index;
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("colorObject", color_r8)("highlighted", ctx_r7.annotationService.currentColorId === i_r9);
  }
}

let DocumentViewComponent = /*#__PURE__*/(() => {
  class DocumentViewComponent {
    constructor(janusService, annotationService) {
      this.janusService = janusService;
      this.annotationService = annotationService;
      this.actionType = _action_action_type__WEBPACK_IMPORTED_MODULE_8__.ActionType;
    }

    set cameraStreams(value) {
      var _a;

      const currentCameraStreamsAmount = ((_a = this._cameraStreams) === null || _a === void 0 ? void 0 : _a.length) || -1;

      if (currentCameraStreamsAmount !== value.length) {
        // this.refreshViews(this.janusService.talkingFeeds);
        this._cameraStreams = value;
      }
    }

    ngOnInit() {}

    ngAfterViewInit() {
      this.slideRenderSurface = new _render_slide_render_surface__WEBPACK_IMPORTED_MODULE_2__.SlideRenderSurface(this.slideCanvas.nativeElement);
      this.actionRenderSurface = new _render_render_surface__WEBPACK_IMPORTED_MODULE_1__.RenderSurface(this.actionCanvas.nativeElement);
      this.volatileRenderSurface = new _render_render_surface__WEBPACK_IMPORTED_MODULE_1__.RenderSurface(this.volatileCanvas.nativeElement);
      this.textLayerSurface = new _render_text_layer_surface__WEBPACK_IMPORTED_MODULE_3__.TextLayerSurface(this.textLayer.nativeElement);
      this.repaint();
      new ResizeObserver(this.resize.bind(this)).observe(this.parent.nativeElement);
      this.renderController = _services_playback_service__WEBPACK_IMPORTED_MODULE_4__.PlaybackService.getInstance().renderController;
    }

    getActionRenderSurface() {
      return this.actionRenderSurface;
    }

    getSlideRenderSurface() {
      return this.slideRenderSurface;
    }

    getTextLayerSurface() {
      return this.textLayerSurface;
    }

    getVolatileRenderSurface() {
      return this.volatileRenderSurface;
    }

    repaint() {
      this.resize();
    }

    resize() {
      var _this = this;

      return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        if (!_this.renderController) {
          _this.renderController = _services_playback_service__WEBPACK_IMPORTED_MODULE_4__.PlaybackService.getInstance().renderController;
          return;
        }

        const page = _this.renderController.getPage();

        page.getPageBounds().then(bounds => {
          let width = _this.parent.nativeElement.clientWidth;
          let height = _this.parent.nativeElement.clientHeight;
          const slideRatio = bounds.width / bounds.height;
          const viewRatio = width / height;

          if (viewRatio > slideRatio) {
            width = height * slideRatio;
          } else {
            height = width / slideRatio;
          }

          if (width === 0 || height === 0) {
            return;
          }

          _this.slideRenderSurface.setSize(width, height);

          _this.actionRenderSurface.setSize(width, height);

          _this.volatileRenderSurface.setSize(width, height);

          _this.textLayerSurface.setSize(width, height);
        });
      })();
    }

    pageBack() {
      const activePageNumber = _services_playback_service__WEBPACK_IMPORTED_MODULE_4__.PlaybackService.getInstance().renderController.getPage().getPageNumber();
      this.modifyPage(activePageNumber - 1);
    }

    pageForward() {
      const activePageNumber = _services_playback_service__WEBPACK_IMPORTED_MODULE_4__.PlaybackService.getInstance().renderController.getPage().getPageNumber();
      this.modifyPage(activePageNumber + 1);
    }

    modifyPage(pageNumber) {
      const action = new _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_5__.StreamPageSelectedAction(BigInt(0), pageNumber);
      const parsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_6__.StreamActionParser.parseActionToBinary(action);
      this.janusService.sendData(parsed);
      const pageAction = new _action_page_action__WEBPACK_IMPORTED_MODULE_7__.PageAction(action.pageNumber);
      pageAction.timestamp = 0;
      _services_playback_service__WEBPACK_IMPORTED_MODULE_4__.PlaybackService.getInstance().addAction(pageAction);
    }

  }

  DocumentViewComponent.ɵfac = function DocumentViewComponent_Factory(t) {
    return new (t || DocumentViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵdirectiveInject"](_services_janus_janus_service__WEBPACK_IMPORTED_MODULE_9__.JanusService), _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵdirectiveInject"](_services_annotation_service__WEBPACK_IMPORTED_MODULE_10__.AnnotationService));
  };

  DocumentViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵdefineComponent"]({
    type: DocumentViewComponent,
    selectors: [["app-document-view"]],
    viewQuery: function DocumentViewComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c2, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c3, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵviewQuery"](_c5, 5);
      }

      if (rf & 2) {
        let _t;

        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.actionCanvas = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.slideCanvas = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.volatileCanvas = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.textLayer = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.parent = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵloadQuery"]()) && (ctx.pdfActionBar = _t.first);
      }
    },
    inputs: {
      cameraStreams: "cameraStreams"
    },
    decls: 25,
    vars: 4,
    consts: [[1, "conferenceContainer"], ["class", "topBar", 4, "ngIf"], [1, "documentContainer"], [1, "slide-view"], ["parent", ""], [1, "slide-canvas"], ["slideCanvas", ""], ["scale", "full", 1, "action-canvas", 3, "mousedown", "mouseup", "mousemove"], ["actionCanvas", ""], ["scale", "full", 1, "volatile-canvas"], ["volatileCanvas", ""], [1, "text-layer"], ["textLayer", ""], [1, "menubarContainer"], ["pdfActionBar", ""], ["matIconName", "arrow_back", 3, "clicked"], ["matIconName", "arrow_forward", 3, "clicked"], [1, "separator"], ["matIconName", "edit", 3, "highlighted", "clicked"], ["matIconName", "format_shapes", 3, "highlighted", "clicked"], [4, "ngFor", "ngForOf"], [1, "topBar"], [1, "me"], [1, "attendants"], [3, "isTinyView", "skipAnimations", "allowNavigation", "cameraStreams"], ["matIconName", "lens", 3, "colorObject", "highlighted", "clicked"]],
    template: function DocumentViewComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵtemplate"](1, DocumentViewComponent_div_1_Template, 4, 4, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](2, "div", 2)(3, "div", 3, 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelement"](5, "canvas", 5, 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](7, "canvas", 7, 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("mousedown", function DocumentViewComponent_Template_canvas_mousedown_7_listener($event) {
          return ctx.annotationService.mouseDown($event);
        })("mouseup", function DocumentViewComponent_Template_canvas_mouseup_7_listener($event) {
          return ctx.annotationService.mouseUp($event);
        })("mousemove", function DocumentViewComponent_Template_canvas_mousemove_7_listener($event) {
          return ctx.annotationService.drag($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelement"](9, "canvas", 9, 10)(11, "div", 11, 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](13, "div", 13)(14, "app-menubar", null, 14)(16, "app-menubar-button", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("clicked", function DocumentViewComponent_Template_app_menubar_button_clicked_16_listener() {
          return ctx.pageBack();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](17, "app-menubar-button", 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("clicked", function DocumentViewComponent_Template_app_menubar_button_clicked_17_listener() {
          return ctx.pageForward();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](18, "div", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵtext"](19, "\u00A0");
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](20, "app-menubar-button", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("clicked", function DocumentViewComponent_Template_app_menubar_button_clicked_20_listener() {
          return ctx.annotationService.setTool(ctx.actionType.POINTER);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](21, "app-menubar-button", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵlistener"]("clicked", function DocumentViewComponent_Template_app_menubar_button_clicked_21_listener() {
          return ctx.annotationService.setTool(ctx.actionType.PEN);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementStart"](22, "div", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵtext"](23, "\u00A0");
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵtemplate"](24, DocumentViewComponent_ng_container_24_Template, 2, 2, "ng-container", 20);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵelementEnd"]()()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("ngIf", ctx._cameraStreams.length > 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](19);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("highlighted", ctx.annotationService.currentTool === ctx.actionType.POINTER);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("highlighted", ctx.annotationService.currentTool === ctx.actionType.PEN);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_14__["ɵɵproperty"]("ngForOf", ctx.annotationService.availableColors);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_15__.NgIf, _gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_11__.GalleryViewComponent, _menubar_menubar_component__WEBPACK_IMPORTED_MODULE_12__.MenubarComponent, _menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_13__.MenubarButtonComponent, _angular_common__WEBPACK_IMPORTED_MODULE_15__.NgForOf],
    styles: ["[_nghost-%COMP%] {\n  flex: 1;\n  display: flex;\n}\n\n.slide-view[_ngcontent-%COMP%] {\n  flex: 1;\n  min-height: 1px;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  box-sizing: border-box;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  border: none;\n}\n\n.slide-view[_ngcontent-%COMP%]    > canvas[_ngcontent-%COMP%] {\n  position: absolute;\n  transform: translate(-50%, 0);\n  left: 50%;\n  border-radius: 0.2em;\n  border: none;\n}\n\n.slide-view[_ngcontent-%COMP%]   .slide-canvas[_ngcontent-%COMP%] {\n  visibility: hidden;\n  z-index: 0;\n  pointer-events: none;\n}\n\n.slide-view[_ngcontent-%COMP%]   .action-canvas[_ngcontent-%COMP%] {\n  z-index: 1;\n}\n\n.slide-view[_ngcontent-%COMP%]   .volatile-canvas[_ngcontent-%COMP%] {\n  z-index: 2;\n  pointer-events: none;\n}\n\n.text-layer[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  opacity: 0.2;\n  line-height: 1;\n  margin: 0 auto;\n  z-index: -3;\n  pointer-events: none;\n}\n\n.text-layer[_ngcontent-%COMP%]    > span[_ngcontent-%COMP%] {\n  color: transparent;\n  position: absolute;\n  white-space: pre;\n  cursor: text;\n  transform-origin: 0% 0%;\n}\n\n.text-layer[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%] {\n  margin: -1px;\n  padding: 1px;\n  background-color: #b400aa;\n  border-radius: 4px;\n}\n\n.text-layer[_ngcontent-%COMP%]   .highlight.begin[_ngcontent-%COMP%] {\n  border-radius: 4px 0 0 4px;\n}\n\n.text-layer[_ngcontent-%COMP%]   .highlight.end[_ngcontent-%COMP%] {\n  border-radius: 0 4px 4px 0;\n}\n\n.text-layer[_ngcontent-%COMP%]   .highlight.middle[_ngcontent-%COMP%] {\n  border-radius: 0;\n}\n\n.text-layer[_ngcontent-%COMP%]   .highlight.selected[_ngcontent-%COMP%] {\n  background-color: darkgreen;\n}\n\n.text-layer[_ngcontent-%COMP%]   [_ngcontent-%COMP%]::selection {\n  background: blue;\n}\n\n.text-layer[_ngcontent-%COMP%]   .endOfContent[_ngcontent-%COMP%] {\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 100%;\n  right: 0;\n  bottom: 0;\n  z-index: -1;\n  cursor: default;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.text-layer[_ngcontent-%COMP%]   .endOfContent.active[_ngcontent-%COMP%] {\n  top: 0;\n}\n\n.annotationLayer[_ngcontent-%COMP%]   section[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 4;\n}\n\n.annotationLayer[_ngcontent-%COMP%]   .linkAnnotation[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n  position: absolute;\n  font-size: 1em;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n\n.annotationLayer[_ngcontent-%COMP%]   .linkAnnotation[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  background: #ff0;\n}\n\n[_nghost-%COMP%] {\n  display: flex;\n  flex: 1;\n}\n\n.conferenceContainer[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.topBar[_ngcontent-%COMP%] {\n  display: flex;\n  max-height: 10vh;\n  margin-bottom: 0.75em;\n}\n\n.attendants[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  min-height: 12vh;\n}\n\n.attendantStreams[_ngcontent-%COMP%] {\n  flex: 1;\n}\n\n.buttonContainer[_ngcontent-%COMP%] {\n  display: flex;\n}\n\nmat-icon[_ngcontent-%COMP%] {\n  color: white;\n}\n\n.button[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5em;\n  max-width: 10vw;\n  width: 100%;\n}\n\n.button[_ngcontent-%COMP%]:hover {\n  background-color: #555555;\n}\n\n.attendantStreams[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  max-height: 100%;\n  max-width: 95%;\n}\n\n.documentContainer[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  position: relative;\n  justify-content: center;\n}\n\n.attendantStreamContainer[_ngcontent-%COMP%] {\n  display: flex;\n  overflow: hidden;\n  max-height: 100%;\n  aspect-ratio: 4/3;\n  padding-right: 1em;\n}\n\n.attendantStreamContainer[_ngcontent-%COMP%]:first-of-type   [_ngcontent-%COMP%]:last-of-type {\n  padding: 0;\n}\n\nvideo[_ngcontent-%COMP%] {\n  background: transparent;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.menubarContainer[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.menubarContainer[_ngcontent-%COMP%]    > app-menubar[_ngcontent-%COMP%] {\n  z-index: 10;\n  margin-bottom: 0.33em;\n  margin-top: 0.33em;\n  border-radius: 1em;\n  min-width: 30vw;\n  grid-column-gap: 0 !important;\n  display: flex;\n}\n\n.menubarContainer[_ngcontent-%COMP%]    > app-menubar[_ngcontent-%COMP%]    > .separator[_ngcontent-%COMP%] {\n  width: 1px;\n  background-color: white;\n  margin: 2% 1em;\n}"]
  });
  return DocumentViewComponent;
})();

/***/ }),

/***/ 8149:
/*!*******************************************************************!*\
  !*** ./src/app/components/gallery-view/gallery-view.component.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GalleryViewComponent": () => (/* binding */ GalleryViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/janus/janus.service */ 465);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/icon */ 5245);




const _c0 = ["renderSpace"];
const _c1 = ["conferenceView"];
const _c2 = ["dish"];

function GalleryViewComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8)(1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function GalleryViewComponent_div_4_Template_div_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r6.changePage(-1);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "arrow_left");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
  }
}

function GalleryViewComponent_div_7_video_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "video", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("loadedmetadata", function GalleryViewComponent_div_7_video_1_Template_video_loadedmetadata_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r14);
      const cameraStream_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;
      return cameraStream_r8.loadingFinished = true;
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const cameraStream_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("animatedVideo", !cameraStream_r8.firstRenderFinished)("loading", !cameraStream_r8.loadingFinished)("screenshareNoCrop", cameraStream_r8.isScreenshare);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("srcObject", cameraStream_r8.stream);
  }
}

function GalleryViewComponent_div_7_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 16)(1, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, "videocam_off");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
  }
}

function GalleryViewComponent_div_7_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 17)(1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function GalleryViewComponent_div_7_div_5_Template_div_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r18);
      const cameraStream_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;
      return cameraStream_r8.isVideoMuted = !cameraStream_r8.isVideoMuted;
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function GalleryViewComponent_div_7_div_5_Template_div_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r18);
      const cameraStream_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r19.muteAudioForFeedId(cameraStream_r8.feedId);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
  }

  if (rf & 2) {
    const cameraStream_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().$implicit;
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("tinyView", ctx_r11.isTinyView)("red", cameraStream_r8.isVideoMuted);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](cameraStream_r8.isVideoMuted ? "videocam_off" : "videocam");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("tinyView", ctx_r11.isTinyView)("red", ctx_r11.janusService.locallyMutedRemoteAudioFeeds[cameraStream_r8.feedId] === true);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate"](ctx_r11.janusService.locallyMutedRemoteAudioFeeds[cameraStream_r8.feedId] === true ? "mic_off" : "mic");
  }
}

function GalleryViewComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("mouseover", function GalleryViewComponent_div_7_Template_div_mouseover_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const cameraStream_r8 = restoredCtx.$implicit;
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r22.mouseHoverFeedId = cameraStream_r8.feedId;
    })("mouseleave", function GalleryViewComponent_div_7_Template_div_mouseleave_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r24.mouseHoverFeedId = "";
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, GalleryViewComponent_div_7_video_1_Template, 1, 7, "video", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, GalleryViewComponent_div_7_div_2_Template, 3, 0, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, GalleryViewComponent_div_7_div_5_Template, 7, 10, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const cameraStream_r8 = ctx.$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("isTalking", ctx_r4.janusService.talkingFeeds[cameraStream_r8.feedId])("screenshareNoCrop", cameraStream_r8.isScreenshare)("animatedDiv", !cameraStream_r8.firstRenderFinished);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !cameraStream_r8.isVideoMuted);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", cameraStream_r8.isVideoMuted);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("tinyViewUsernameContainer", ctx_r4.isTinyView);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", cameraStream_r8.userName, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", !cameraStream_r8.isMyStream && ctx_r4.mouseHoverFeedId === cameraStream_r8.feedId);
  }
}

function GalleryViewComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8)(1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function GalleryViewComponent_div_8_Template_div_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r26);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r25.changePage(1);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "arrow_right");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
  }
} // Based on https://github.com/Alicunde/Videoconference-Dish-CSS-JS (CC4)
// https://github.com/Alicunde/Videoconference-Dish-CSS-JS/blob/main/LICENSE.md


let GalleryViewComponent = /*#__PURE__*/(() => {
  class GalleryViewComponent {
    constructor(janusService) {
      this.janusService = janusService;
      this.pageinatedStreams = [];
      this._cameraStreams = [];
      this.skipAnimations = false;
      this.allowNavigation = true;
      this.isTinyView = false;
      this.width = 0;
      this.height = 0;
      this.ratios = ['4:3', '16:9', '1:1', '1:2'];
      this.aspect = 1;
      this.margin = 5;
      this.cameras = 15;
      this.ratio = this.calculateRatio(); // Pagination

      this.maximumAmountOfCamsPerPage = 6;
      this.currentPage = 0;
      this.mouseHoverFeedId = '';
    }

    set cameraStreams(value) {
      let shouldResize = false;

      if (value) {
        if (value.length !== this._cameraStreams.length) {
          shouldResize = true;
        }
      }

      if (this.skipAnimations) {
        value = value.map(e => {
          return Object.assign(Object.assign({}, e), {
            firstRenderFinished: true,
            loadingFinished: true
          });
        });
      }

      this._cameraStreams = value;
      this.pageinatedStreams = this._cameraStreams.sort().slice(this.currentPage * this.maximumAmountOfCamsPerPage, this.currentPage * this.maximumAmountOfCamsPerPage + this.maximumAmountOfCamsPerPage);

      if (this.dish && shouldResize) {
        this.render();
        this.resize();
      }
    }

    ngOnInit() {}

    ngAfterViewInit() {
      this.render();
      this.resize();
    }

    ngAfterContentChecked() {
      if (this.dish) {
        this.render();
        this.resize();
      }
    }

    onResize(event) {
      this.render();
      this.resize();
    }

    changePage(modifier) {
      // All streams that were currently displayed on this page are done with their first render.
      this.pageinatedStreams.forEach(e => e.firstRenderFinished = true);
      const tmp = this.currentPage + modifier;

      if (tmp >= 0 && tmp <= this._cameraStreams.length / this.maximumAmountOfCamsPerPage) {
        this.currentPage = tmp;
        this.pageinatedStreams = this._cameraStreams.sort().slice(this.currentPage * this.maximumAmountOfCamsPerPage, this.currentPage * this.maximumAmountOfCamsPerPage + this.maximumAmountOfCamsPerPage);
      }
    }

    calculateDimensions() {
      this.width = this.dish.nativeElement.offsetWidth - this.margin * 2;
      this.height = this.dish.nativeElement.offsetHeight - this.margin * 2;
    }

    render() {
      if (this._cameraStreams.length > this.maximumAmountOfCamsPerPage) {// We need to paginate the streams!
      }
    }

    resize() {
      this.calculateDimensions();
      let max = 0;
      let i = 0;

      while (i < 5000) {
        const area = this.area(i);

        if (area === false) {
          max = i - 1;
          break;
        }

        i++;
      }

      max = max - this.margin * 2;
      this.resizer(max);
    } // resizer of cameras


    resizer(width) {
      for (var s = 0; s < this.dish.nativeElement.children.length; s++) {
        // camera fron dish (div without class)
        let element = this.dish.nativeElement.children[s]; // custom margin

        element.style.margin = this.margin + "px"; // calculate dimensions

        element.style.width = width + "px";
        element.style.height = width * this.ratio + "px";
      }
    }

    calculateRatio() {
      const ratio = this.ratios[this.aspect].split(":");
      return Number.parseInt(ratio[1]) / Number.parseInt(ratio[0]);
    }

    area(increment) {
      let i = 0;
      let w = 0;
      let h = increment * this.ratio + this.margin * 2;

      while (i < this.dish.nativeElement.children.length) {
        if (w + increment > this.width) {
          w = 0;
          h = h + increment * this.ratio + this.margin * 2;
        }

        w = w + increment + this.margin * 2;
        i++;
      }

      if (h > this.height || increment > this.width) return false;else return increment;
    }

    add() {
      this.cameras++;
      this.render();
      this.resize();
    }

    delete() {
      this.cameras--;
      this.render();
      this.resize();
    }

    getRatios() {
      return this.ratios;
    }

    getCameras() {
      return this.cameras;
    }

    setAspect(i) {
      this.aspect = i;
      this.ratio = this.calculateRatio();
      this.resize();
    }

    expand() {
      // detect screen exist
      let screens = this.conferenceView.nativeElement.querySelector('.Screen');

      if (screens) {
        // remove screen
        this.conferenceView.nativeElement.removeChild(screens);
      } else {
        // add div to scenary
        let screen = document.createElement('div');
        screen.classList.add('Screen'); // append first to scenary

        this.conferenceView.nativeElement.prepend(screen);
      }

      this.resize();
    }

    muteAudioForFeedId(feedId) {
      this.janusService.muteRemoteAudioLocallyForFeedId(feedId);
    }

  }

  GalleryViewComponent.ɵfac = function GalleryViewComponent_Factory(t) {
    return new (t || GalleryViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__.JanusService));
  };

  GalleryViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
    type: GalleryViewComponent,
    selectors: [["app-gallery-view"]],
    viewQuery: function GalleryViewComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_c2, 5);
      }

      if (rf & 2) {
        let _t;

        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.renderSpace = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.conferenceView = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.dish = _t.first);
      }
    },
    hostBindings: function GalleryViewComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("resize", function GalleryViewComponent_resize_HostBindingHandler($event) {
          return ctx.onResize($event);
        }, false, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresolveWindow"]);
      }
    },
    inputs: {
      cameraStreams: "cameraStreams",
      skipAnimations: "skipAnimations",
      allowNavigation: "allowNavigation",
      isTinyView: "isTinyView"
    },
    decls: 9,
    vars: 3,
    consts: [[1, "renderSpace"], ["renderSpace", ""], [1, "conferenceView"], ["conferenceView", ""], ["class", "buttonContainer", 4, "ngIf"], [1, "dish"], ["dish", ""], [3, "isTalking", "screenshareNoCrop", "animatedDiv", "mouseover", "mouseleave", 4, "ngFor", "ngForOf"], [1, "buttonContainer"], [1, "button", 3, "click"], [3, "mouseover", "mouseleave"], ["autoplay", "", "playsinline", "", 3, "animatedVideo", "loading", "srcObject", "screenshareNoCrop", "loadedmetadata", 4, "ngIf"], ["class", "videoUnavailable", 4, "ngIf"], [1, "usernameContainer"], ["class", "controlButtons", 4, "ngIf"], ["autoplay", "", "playsinline", "", 3, "srcObject", "loadedmetadata"], [1, "videoUnavailable"], [1, "controlButtons"]],
    template: function GalleryViewComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0, 1)(2, "div", 2, 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, GalleryViewComponent_div_4_Template, 4, 0, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "div", 5, 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](7, GalleryViewComponent_div_7_Template, 6, 12, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](8, GalleryViewComponent_div_8_Template, 4, 0, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.allowNavigation && ctx._cameraStreams.length > ctx.maximumAmountOfCamsPerPage);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.pageinatedStreams);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.allowNavigation && ctx._cameraStreams.length > ctx.maximumAmountOfCamsPerPage);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgIf, _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__.MatIcon, _angular_common__WEBPACK_IMPORTED_MODULE_2__.NgForOf],
    styles: ["[_nghost-%COMP%] {\n  display: flex;\n  flex: 1;\n}\n\n.buttonContainer[_ngcontent-%COMP%] {\n  display: flex;\n}\n\n.button[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5em;\n  max-width: 10vw;\n  width: 100%;\n}\n\nmat-icon[_ngcontent-%COMP%] {\n  font-size: 5vw;\n  width: 5vw;\n  height: 5vw;\n  margin: 0;\n  color: white;\n}\n\n.tinyView[_ngcontent-%COMP%] {\n  font-size: 1.5vw !important;\n  width: 1.5vw !important;\n  height: 1.5vw !important;\n}\n\n.button[_ngcontent-%COMP%]:hover {\n  background-color: #555555;\n}\n\n.renderSpace[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n\n\n.conferenceView[_ngcontent-%COMP%] {\n  display: flex;\n  flex: 1;\n  max-height: 100%;\n  max-width: 100%;\n}\n\n\n\n.dish[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n  align-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  vertical-align: middle;\n  flex: 1;\n}\n\n\n\n.dish[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n  position: relative;\n  vertical-align: middle;\n  align-self: center;\n  border-radius: 10px;\n  overflow: hidden;\n  display: inline-block;\n  box-shadow: var(--shadow-dark);\n  border: 2px solid transparent;\n}\n\n.animatedDiv[_ngcontent-%COMP%] {\n  animation: show 0.4s ease;\n}\n\n.animatedVideo[_ngcontent-%COMP%] {\n  transition: margin-top 0.4s ease-in-out;\n}\n\n\n\n.dish[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%]   video[_ngcontent-%COMP%], .videoUnavailable[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  object-fit: cover;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background: transparent;\n  border-radius: 10px;\n  overflow: hidden;\n  left: 0;\n  top: 0;\n  background-size: cover;\n  overflow: hidden;\n}\n\n.videoUnavailable[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #666666;\n}\n\n.isTalking[_ngcontent-%COMP%] {\n  border-color: lawngreen !important;\n}\n\n\n\n.dish[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%]   video.loading[_ngcontent-%COMP%] {\n  margin-top: 100%;\n}\n\n\n\n.usernameContainer[_ngcontent-%COMP%] {\n  color: #aaa;\n  font-size: 1em;\n  font-family: Arial, Helvetica, sans-serif;\n  position: absolute;\n  left: 1%;\n  bottom: 1%;\n  font-weight: 100;\n  display: block;\n  background: rgba(0, 0, 0, 0.6);\n  padding: 0.75em;\n  border-radius: 0.75em;\n}\n\n.tinyViewUsernameContainer[_ngcontent-%COMP%] {\n  font-size: 0.45vw !important;\n  background: rgba(0, 0, 0, 0.6);\n  padding: 0.35em;\n  border-radius: 0.45em;\n}\n\n.controlButtons[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 1%;\n  display: flex;\n  flex-direction: column;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n\n\n.dish[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:before {\n  position: absolute;\n  height: 100%;\n  background-size: 100% 100%;\n  width: 100%;\n  opacity: 0.3;\n  font-weight: 100;\n  content: \"\";\n  display: block;\n}\n\n\n\n.screen[_ngcontent-%COMP%] {\n  flex: 2;\n  background: #000;\n  opacity: 0.8;\n  border-radius: 10px;\n}\n\n\n\n@keyframes show {\n  0% {\n    opacity: 0;\n    transform: scale(0.4) translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.button[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5em;\n  max-width: 5vw;\n  width: 100%;\n  margin-left: 0.5em;\n  margin-right: 0.5em;\n}\n\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n\n.screenshareNoCrop[_ngcontent-%COMP%] {\n  object-fit: contain !important;\n  background: #252525;\n}"]
  });
  return GalleryViewComponent;
})();

/***/ }),

/***/ 6604:
/*!*******************************************************************************!*\
  !*** ./src/app/components/menubar/menubar-button/menubar-button.component.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenubarButtonComponent": () => (/* binding */ MenubarButtonComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/icon */ 5245);





function MenubarButtonComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MenubarButtonComponent_div_1_Template_div_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return ctx_r1.subButtonClickAction($event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "keyboard_arrow_up");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}

let MenubarButtonComponent = /*#__PURE__*/(() => {
  class MenubarButtonComponent {
    constructor() {
      this.highlightToggleStateActive = false;
      this.clicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }

    ngOnInit() {
      console.log('COLOR OBJECT: ', this.colorObject);
    }

  }

  MenubarButtonComponent.ɵfac = function MenubarButtonComponent_Factory(t) {
    return new (t || MenubarButtonComponent)();
  };

  MenubarButtonComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MenubarButtonComponent,
    selectors: [["app-menubar-button"]],
    inputs: {
      clickAction: "clickAction",
      subButtonClickAction: "subButtonClickAction",
      highlightToggleStateActive: "highlightToggleStateActive",
      matIconName: "matIconName",
      matIconNameHighlightedToggleState: "matIconNameHighlightedToggleState",
      caption: "caption",
      captionHighlightedToggleState: "captionHighlightedToggleState",
      highlighted: "highlighted",
      colorObject: "colorObject"
    },
    outputs: {
      clicked: "clicked"
    },
    decls: 6,
    vars: 9,
    consts: [[1, "button", 3, "click"], ["class", "subbutton", 3, "click", 4, "ngIf"], [1, "subbutton", 3, "click"]],
    template: function MenubarButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MenubarButtonComponent_Template_div_click_0_listener($event) {
          ctx.clicked.emit();
          return ctx.clickAction && ctx.clickAction($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, MenubarButtonComponent_div_1_Template, 3, 0, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-icon");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "p");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("highlighted", ctx.highlighted);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.subButtonClickAction);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("color", ctx.colorObject ? "rgb(" + ctx.colorObject.r * 255 + ", " + ctx.colorObject.g * 255 + ", " + ctx.colorObject.b * 255 + ")" : null);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("red", ctx.highlightToggleStateActive);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.highlightToggleStateActive ? ctx.matIconNameHighlightedToggleState : ctx.matIconName);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.highlightToggleStateActive ? ctx.captionHighlightedToggleState : ctx.caption);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_material_icon__WEBPACK_IMPORTED_MODULE_2__.MatIcon],
    styles: ["[_nghost-%COMP%] {\n  display: contents;\n}\n\n.button[_ngcontent-%COMP%] {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5em;\n  max-width: 6.5vw;\n  width: 100%;\n  padding-top: 0.3em;\n  padding-bottom: 0.3em;\n}\n\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n\n.button[_ngcontent-%COMP%]:hover {\n  background-color: #555555;\n}\n\nmat-icon[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: min(2.25vw, 2.5em);\n  width: min(2.25vw, 2.5em);\n  height: min(2.25vw, 2.5em);\n  margin: 0;\n  color: white;\n  text-align: center;\n  pointer-events: none;\n}\n\n.button[_ngcontent-%COMP%]    > p[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: min(0.75vw, 1em);\n  margin: 0.25em;\n  color: white;\n  pointer-events: none;\n}\n\n.subbutton[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  top: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: context-menu;\n  border-radius: 0.5em;\n}\n\n.subbutton[_ngcontent-%COMP%]:hover {\n  background-color: #393939;\n}\n\n.subbutton[_ngcontent-%COMP%]    > mat-icon[_ngcontent-%COMP%] {\n  font-size: min(2vw, 3em);\n  margin: 0;\n}\n\n.highlighted[_ngcontent-%COMP%] {\n  box-shadow: 0px 0px 0px 2px blue inset;\n}"]
  });
  return MenubarButtonComponent;
})();

/***/ }),

/***/ 7703:
/*!*****************************************************************************************!*\
  !*** ./src/app/components/menubar/menubar-buttongroup/menubar-buttongroup.component.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenubarButtongroupComponent": () => (/* binding */ MenubarButtongroupComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

const _c0 = ["*"];
let MenubarButtongroupComponent = /*#__PURE__*/(() => {
  class MenubarButtongroupComponent {
    constructor() {}

    ngOnInit() {}

  }

  MenubarButtongroupComponent.ɵfac = function MenubarButtongroupComponent_Factory(t) {
    return new (t || MenubarButtongroupComponent)();
  };

  MenubarButtongroupComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MenubarButtongroupComponent,
    selectors: [["app-menubar-buttongroup"]],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function MenubarButtongroupComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
      }
    },
    styles: ["[_nghost-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}"]
  });
  return MenubarButtongroupComponent;
})();

/***/ }),

/***/ 1511:
/*!*********************************************************!*\
  !*** ./src/app/components/menubar/menubar.component.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MenubarComponent": () => (/* binding */ MenubarComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

const _c0 = ["*"];
let MenubarComponent = /*#__PURE__*/(() => {
  class MenubarComponent {
    constructor() {}

    ngOnInit() {}

  }

  MenubarComponent.ɵfac = function MenubarComponent_Factory(t) {
    return new (t || MenubarComponent)();
  };

  MenubarComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MenubarComponent,
    selectors: [["app-menubar"]],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function MenubarComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
      }
    },
    styles: ["[_nghost-%COMP%] {\n  background: #151515;\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: minmax(0, 1fr);\n  grid-column-gap: 10%;\n}\n\n[_nghost-%COMP%]     app-menubar-buttongroup:last-of-type {\n  justify-content: flex-end !important;\n}\n\n[_nghost-%COMP%]     app-menubar-buttongroup:first-of-type {\n  justify-content: flex-start !important;\n}"]
  });
  return MenubarComponent;
})();

/***/ }),

/***/ 8726:
/*!***********************************************************************!*\
  !*** ./src/app/components/select-overlay/select-overlay.component.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectOverlayComponent": () => (/* binding */ SelectOverlayComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _services_select_overlay_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/select-overlay.service */ 6148);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/icon */ 5245);





function SelectOverlayComponent_div_1_mat_icon_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "mat-icon");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, "check");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
}

function SelectOverlayComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function SelectOverlayComponent_div_1_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r4);
      const option_r1 = restoredCtx.$implicit;
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return ctx_r3.selectOverlayService.optionSelected(option_r1);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, SelectOverlayComponent_div_1_mat_icon_1_Template, 2, 0, "mat-icon", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("active", ctx_r0.selectOverlayService.activeKey === option_r1.key);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r0.selectOverlayService.activeKey === option_r1.key);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", option_r1.value, " ");
  }
}

let SelectOverlayComponent = /*#__PURE__*/(() => {
  class SelectOverlayComponent {
    constructor(selectOverlayService) {
      this.selectOverlayService = selectOverlayService;
    }

    ngOnInit() {}

  }

  SelectOverlayComponent.ɵfac = function SelectOverlayComponent_Factory(t) {
    return new (t || SelectOverlayComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_services_select_overlay_service__WEBPACK_IMPORTED_MODULE_0__.SelectOverlayService));
  };

  SelectOverlayComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
    type: SelectOverlayComponent,
    selectors: [["app-select-overlay"]],
    decls: 2,
    vars: 7,
    consts: [[1, "selectList"], ["class", "selectListItem", 3, "active", "click", 4, "ngFor", "ngForOf"], [1, "selectListItem", 3, "click"], [4, "ngIf"]],
    template: function SelectOverlayComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, SelectOverlayComponent_div_1_Template, 3, 4, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵstyleProp"]("top", ctx.selectOverlayService.topPx)("left", ctx.selectOverlayService.leftPx)("display", ctx.selectOverlayService.isOverlayVisible ? "" : "none");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx.selectOverlayService.options);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_2__.NgIf, _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__.MatIcon],
    styles: [".selectList[_ngcontent-%COMP%] {\n  background: #151515;\n  border: 1px solid black;\n  border-radius: 1em;\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  transform: translate(0%, -100%);\n  min-width: 15vw;\n  z-index: 99;\n}\n\n.selectListItem[_ngcontent-%COMP%] {\n  color: white;\n  height: 4em;\n  display: flex;\n  flex-direction: row;\n  cursor: pointer;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5em 1em;\n  border-radius: 1em;\n}\n\n.selectListItem[_ngcontent-%COMP%]    > mat-icon[_ngcontent-%COMP%] {\n  font-size: 25px;\n  height: 25px;\n  width: 25px;\n  margin-bottom: 4px;\n  margin-right: 4px;\n}\n\n.active[_ngcontent-%COMP%] {\n  background-color: #444444;\n}\n\n.selectListItem[_ngcontent-%COMP%]:hover {\n  background-color: #555555;\n}"]
  });
  return SelectOverlayComponent;
})();

/***/ }),

/***/ 6577:
/*!***********************************************************!*\
  !*** ./src/app/components/settings/settings.component.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsComponent": () => (/* binding */ SettingsComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

let SettingsComponent = /*#__PURE__*/(() => {
  class SettingsComponent {
    constructor() {}

    ngOnInit() {}

  }

  SettingsComponent.ɵfac = function SettingsComponent_Factory(t) {
    return new (t || SettingsComponent)();
  };

  SettingsComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: SettingsComponent,
    selectors: [["app-settings"]],
    decls: 1,
    vars: 0,
    consts: [[1, "content"]],
    template: function SettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 0);
      }
    },
    styles: ["[_nghost-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.content[_ngcontent-%COMP%] {\n  flex: 1;\n}"]
  });
  return SettingsComponent;
})();

/***/ }),

/***/ 9662:
/*!*******************************************************************!*\
  !*** ./src/app/components/speaker-view/speaker-view.component.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeakerViewComponent": () => (/* binding */ SpeakerViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/janus/janus.service */ 465);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gallery-view/gallery-view.component */ 8149);





function SpeakerViewComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](3, "app-gallery-view", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
  }

  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("isTinyView", true)("skipAnimations", true)("allowNavigation", true)("cameraStreams", ctx_r0.nonTalkingFeedStreams);
  }
}

const _c0 = function (a0) {
  return [a0];
};

let SpeakerViewComponent = /*#__PURE__*/(() => {
  class SpeakerViewComponent {
    constructor(janusService) {
      this.janusService = janusService;
      this.talkingFeedId = '';
    }

    set cameraStreams(value) {
      var _a;

      const currentCameraStreamsAmount = ((_a = this._cameraStreams) === null || _a === void 0 ? void 0 : _a.length) || -1;
      this._cameraStreams = value;

      if (currentCameraStreamsAmount !== value.length) {
        this.refreshViews(this.janusService.talkingFeeds);
      }
    }

    ngOnInit() {}

    ngAfterContentInit() {
      if (!this.talkingFeedId && !this.talkingFeedStream && this._cameraStreams.length > 0) {
        this.talkingFeedId = this._cameraStreams[0].feedId;
        this.talkingFeedStream = this._cameraStreams[0];
        this.nonTalkingFeedStreams = this.nonTalkingFeeds;
      }

      this.janusService.talkingFeedsSubject.subscribe(talkingFeeds => {
        this.refreshViews(talkingFeeds);
      });
    }

    refreshViews(talkingFeeds) {
      const tmpId = Object.keys(talkingFeeds).filter(e => talkingFeeds[e])[0];

      const screenshareStream = this._cameraStreams.find(e => e.isScreenshare === true);

      console.log(talkingFeeds);

      if (this.janusService.screensharingIsActive && screenshareStream) {
        this.talkingFeedId = screenshareStream.feedId;
        this.talkingFeedStream = screenshareStream;
        this.nonTalkingFeedStreams = this.nonTalkingFeeds;
      } else {
        if (this._cameraStreams.length === 1) {
          this.talkingFeedId = this._cameraStreams[0].feedId;
        }

        if (tmpId && tmpId != '' && this.talkingFeedId !== tmpId) {
          this.talkingFeedId = tmpId;
          console.log('(Speaker View) Active speaker changed: ', this.talkingFeedId);
          const feedStr = this.talkingFeed;

          if (feedStr) {
            this.talkingFeedStream = feedStr;
          }

          this.nonTalkingFeedStreams = this.nonTalkingFeeds;
          console.log('Non talking feed streams: ', this.nonTalkingFeedStreams);
        } else {
          const mediaStream = this._cameraStreams.find(e => !e.isScreenshare);

          if (mediaStream) {
            this.talkingFeedId = mediaStream.feedId;
            this.talkingFeedStream = mediaStream;
            this.nonTalkingFeedStreams = this.nonTalkingFeeds;
          }
        }
      }
    }

    get talkingFeed() {
      return this._cameraStreams.find(e => e.feedId == this.talkingFeedId);
    }

    get nonTalkingFeeds() {
      return this._cameraStreams.filter(e => e.feedId != this.talkingFeedId);
    }

  }

  SpeakerViewComponent.ɵfac = function SpeakerViewComponent_Factory(t) {
    return new (t || SpeakerViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_services_janus_janus_service__WEBPACK_IMPORTED_MODULE_0__.JanusService));
  };

  SpeakerViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
    type: SpeakerViewComponent,
    selectors: [["app-speaker-view"]],
    inputs: {
      cameraStreams: "cameraStreams"
    },
    decls: 4,
    vars: 6,
    consts: [[1, "conferenceContainer"], ["class", "topBar", 4, "ngIf"], [1, "speakerContainer"], [3, "skipAnimations", "allowNavigation", "cameraStreams"], [1, "topBar"], [1, "me"], [1, "attendants"], [3, "isTinyView", "skipAnimations", "allowNavigation", "cameraStreams"]],
    template: function SpeakerViewComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtemplate"](1, SpeakerViewComponent_div_1_Template, 4, 4, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](3, "app-gallery-view", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngIf", ctx._cameraStreams.length > 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("skipAnimations", true)("allowNavigation", false)("cameraStreams", _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpureFunction1"](4, _c0, ctx.talkingFeedStream));
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgIf, _gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_1__.GalleryViewComponent],
    styles: ["[_nghost-%COMP%] {\n  display: flex;\n  flex: 1;\n}\n\n.conferenceContainer[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.topBar[_ngcontent-%COMP%] {\n  display: flex;\n  max-height: 10vh;\n  margin-bottom: 0.75em;\n}\n\n.attendants[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  min-height: 12vh;\n}\n\n.attendantStreams[_ngcontent-%COMP%] {\n  flex: 1;\n}\n\n.buttonContainer[_ngcontent-%COMP%] {\n  display: flex;\n}\n\nmat-icon[_ngcontent-%COMP%] {\n  color: white;\n}\n\n.button[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0.5em;\n  max-width: 10vw;\n  width: 100%;\n}\n\n.button[_ngcontent-%COMP%]:hover {\n  background-color: #555555;\n}\n\n.attendantStreams[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  max-height: 100%;\n  max-width: 95%;\n}\n\n.speakerContainer[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n}\n\n.attendantStreamContainer[_ngcontent-%COMP%] {\n  display: flex;\n  overflow: hidden;\n  max-height: 100%;\n  aspect-ratio: 4/3;\n  padding-right: 1em;\n}\n\n.attendantStreamContainer[_ngcontent-%COMP%]:first-of-type   [_ngcontent-%COMP%]:last-of-type {\n  padding: 0;\n}\n\nvideo[_ngcontent-%COMP%] {\n  background: transparent;\n  border-radius: 10px;\n  overflow: hidden;\n}"]
  });
  return SpeakerViewComponent;
})();

/***/ }),

/***/ 2988:
/*!*************************************!*\
  !*** ./src/app/event/size-event.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SizeEvent": () => (/* binding */ SizeEvent)
/* harmony export */ });
class SizeEvent {
  constructor(size) {
    this._size = size;
  }

  get size() {
    return this._size;
  }

}



/***/ }),

/***/ 8106:
/*!***************************************************!*\
  !*** ./src/app/extension/context-2d.extension.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _geometry_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/transform */ 8696);

const _getTransform = CanvasRenderingContext2D.prototype.getTransform;

CanvasRenderingContext2D.prototype.getTransformExt = function () {
  if (_getTransform) {
    // This is the DOMMatrix.
    const m = _getTransform.apply(this, Array.from(arguments));

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.setValues(m.a, m.b, m.c, m.d, m.e, m.f);
  }

  return this._transform_ext;
};

if (!_getTransform) {
  const _resetTransform = CanvasRenderingContext2D.prototype.resetTransform;
  const _rotate = CanvasRenderingContext2D.prototype.rotate;
  const _scale = CanvasRenderingContext2D.prototype.scale;
  const _setTransform = CanvasRenderingContext2D.prototype.setTransform;
  const _transform = CanvasRenderingContext2D.prototype.transform;
  const _translate = CanvasRenderingContext2D.prototype.translate;
  const _save = CanvasRenderingContext2D.prototype.save;
  const _restore = CanvasRenderingContext2D.prototype.restore;

  CanvasRenderingContext2D.prototype.resetTransform = function () {
    if (_resetTransform) {
      _resetTransform.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.reset();
  };

  CanvasRenderingContext2D.prototype.rotate = function (angle) {
    if (_rotate) {
      // @ts-ignore
      _rotate.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.rotate(angle);
  };

  CanvasRenderingContext2D.prototype.scale = function (x, y) {
    if (_scale) {
      // @ts-ignore
      _scale.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.scale(x, y);
  };

  CanvasRenderingContext2D.prototype.setTransform = function (a, b, c, d, e, f) {
    if (_setTransform) {
      // @ts-ignore
      _setTransform.apply(this, Array.from(arguments));
    }

    if (b) {
      a = a;
    } else {
      const domMatrix = a;
      a = domMatrix.a;
      b = domMatrix.b;
      c = domMatrix.c;
      d = domMatrix.d;
      e = domMatrix.e;
      f = domMatrix.f;
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.setValues(a, b, c, d, e, f);
  };

  CanvasRenderingContext2D.prototype.transform = function (a, b, c, d, e, f) {
    if (_transform) {
      // @ts-ignore
      _transform.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.multiply(new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform([a, b, c, d, e, f]));
  };

  CanvasRenderingContext2D.prototype.translate = function (x, y) {
    if (_translate) {
      // @ts-ignore
      _translate.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext.translate(x, y);
  };

  CanvasRenderingContext2D.prototype.save = function () {
    if (_save) {
      // @ts-ignore
      _save.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext_stack) {
      this._transform_ext_stack = [];
    }

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }

    this._transform_ext_stack.push(this._transform_ext.clone());
  };

  CanvasRenderingContext2D.prototype.restore = function () {
    if (_restore) {
      // @ts-ignore
      _restore.apply(this, Array.from(arguments));
    }

    if (!this._transform_ext_stack) {
      this._transform_ext_stack = [];
    }

    this._transform_ext = this._transform_ext_stack.pop();

    if (!this._transform_ext) {
      this._transform_ext = new _geometry_transform__WEBPACK_IMPORTED_MODULE_0__.Transform();
    }
  };
}

/***/ }),

/***/ 2363:
/*!***************************************!*\
  !*** ./src/app/geometry/dimension.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dimension": () => (/* binding */ Dimension)
/* harmony export */ });
/**
 * A Dimension specifies a size through its width and height.
 */
class Dimension {
  /**
   * Constructs a new Dimension with the specified size.
   *
   * @param width the width of the dimension.
   * @param height the height of the dimension.
   */
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }
  /**
   * Tests whether the provided dimension describes the same dimension.
   *
   * @param other the dimension to compare this dimension to.
   *
   * @return true if the dimensions are equal, false otherwise.
   */


  equals(other) {
    if (!other) {
      return false;
    }

    return this.width === other.height && this.height === other.height;
  }
  /**
   * @return a string representation of this dimension.
   */


  toString() {
    return `[${this.height}, ${this.width}]`;
  }

}



/***/ }),

/***/ 7640:
/*!*************************************!*\
  !*** ./src/app/geometry/ellipse.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ellipse": () => (/* binding */ Ellipse)
/* harmony export */ });
class Ellipse {
  /**
   * Constructs an Ellipse from the specified coordinates.
   *
   * @param x the X coordinate of the upper-left corner of the Ellipse.
   * @param y the Y coordinate of the upper-left corner of the Ellipse.
   * @param width the width of the Ellipse.
   * @param height the height of the Ellipse.
   */
  constructor(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.radiusX = width * 0.5;
    this.radiusY = height * 0.5;
    this.centerX = x + this.radiusX;
    this.centerY = y + this.radiusY;
  }
  /**
   * Tests if the specified coordinates are inside the boundary of the Ellipse.
   *
   * @param x the specified X coordinate to be tested.
   * @param y the specified Y coordinate to be tested.
   *
   * @return true if the specified coordinates are inside the Ellipse boundary,
   *         false otherwise.
   */


  containsPoint(x, y) {
    const w = this.width;

    if (w <= 0.0) {
      return false;
    }

    const h = this.height;

    if (h <= 0.0) {
      return false;
    }

    const normX = (x - this.x) / w - 0.5;
    const normY = (y - this.y) / h - 0.5;
    return normX * normX + normY * normY < 0.25;
  }
  /**
   * Tests if the Ellipse entirely contains the specified rectangle.
   *
   * @param x the X coordinate of the upper-left corner of the specified rectangle.
   * @param y the Y coordinate of the upper-left corner of the specified rectangle.
   * @param w the width of the specified rectangle.
   * @param h the height of the specified rectangle.
   *
   * @return true if the Ellipse entirely contains the specified rectangle,
   *         false otherwise.
   */


  containsRect(x, y, width, height) {
    return this.containsPoint(x, y) && this.containsPoint(x + width, y) && this.containsPoint(x, y + height) && this.containsPoint(x + width, y + height);
  }
  /**
   * Tests if the Ellipse intersects the specified rectangle.
   *
   * @param x the X coordinate of the upper-left corner of the specified rectangle.
   * @param y the Y coordinate of the upper-left corner of the specified rectangle.
   * @param w the width of the specified rectangle.
   * @param h the height of the specified rectangle.
   *
   * @return true if the Ellipse and the rectangle intersect each other,
   *         false otherwise.
   */


  intersectsRect(x, y, width, height) {
    if (width <= 0.0 || height <= 0.0) {
      return false;
    }

    if (this.width <= 0.0 || this.height <= 0.0) {
      return false;
    } // Test whether the rectangle encloses the ellipse center.


    if (this.centerX >= x && this.centerY >= y && this.centerX <= x + width && this.centerY <= y + height) {
      return true;
    }

    return this.intersectsLine(x, y, x + width, y) || this.intersectsLine(x, y + height, x + width, y + height) || this.intersectsLine(x, y, x, y + height) || this.intersectsLine(x + width, y, x + width, y + height);
  }
  /**
   * Tests if the Ellipse intersects the line segment (x1,y1) to (x2,y2).
   *
   * @param x1 the X coordinate of the start point of the line segment.
   * @param y1 the Y coordinate of the start point of the line segment.
   * @param x2 the X coordinate of the end point of the line segment.
   * @param y2 the Y coordinate of the end point of the line segment.
   *
   * @return true if the Ellipse and the line segment intersect each other,
   *         false otherwise.
   */


  intersectsLine(x1, y1, x2, y2) {
    if (this.width <= 0.0 || this.height <= 0.0) {
      return false;
    }

    x1 -= this.centerX;
    x2 -= this.centerX;
    y1 -= this.centerY;
    y2 -= this.centerY;
    const rxsq = this.radiusX * this.radiusX;
    const rysq = this.radiusY * this.radiusY;
    const A = Math.pow(x2 - x1, 2) / rxsq + Math.pow(y2 - y1, 2) / rysq;
    const B = 2 * x1 * (x2 - x1) / rxsq + 2 * y1 * (y2 - y1) / rysq;
    const C = x1 * x1 / rxsq + y1 * y1 / rysq - 1;
    const D = B * B - 4 * A * C;

    if (D === 0) {
      const t = -B / 2 / A;
      return t >= 0 && t <= 1;
    } else if (D > 0) {
      const sqrt = Math.sqrt(D);
      const t1 = (-B + sqrt) / 2 / A;
      const t2 = (-B - sqrt) / 2 / A;
      return t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1;
    }

    return false;
  }

}



/***/ }),

/***/ 1017:
/*!**********************************!*\
  !*** ./src/app/geometry/line.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Line": () => (/* binding */ Line)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ 6374);


class Line {
  /**
   * Constructs a Line from the start point (x1,y1) to the end point (x2,y2).
   *
   * @param x1 the X coordinate of the start point.
   * @param y1 the Y coordinate of the start point.
   * @param x2 the X coordinate of the end point.
   * @param y2 the Y coordinate of the end point.
   */
  constructor(x1, y1, x2, y2) {
    this.set(x1, y1, x2, y2);
  }
  /**
   * Sets new start (x1,y1) and end (x2,y2) coordinates.
   *
   * @param start the start point (x1,y1) of the line.
   * @param end the end point (x2,y2) of the line.
   */


  set(x1, y1, x2, y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }
  /**
   * The start point (x1,y1) of the line represented by {@link Point}.
   *
   * @return the start point (x1,y1).
   */


  getStartPoint() {
    return new _point__WEBPACK_IMPORTED_MODULE_0__.Point(this.x1, this.y1);
  }
  /**
   * The end point (x2,y2) of the line represented by {@link Point}.
   *
   * @return the end point (x2,y2).
   */


  getEndPoint() {
    return new _point__WEBPACK_IMPORTED_MODULE_0__.Point(this.x2, this.y2);
  }
  /**
   * Returns the shortest distance from the specified point to this line.
   *
   * @param x the X coordinate of the point.
   * @param y the Y coordinate of the point.
   *
   * @return the shortest distance from a point to this line.
   */


  distance(x, y) {
    const dx = this.x2 - this.x1;
    const dy = this.y2 - this.y1;
    const length = Math.sqrt(dx * dx + dy * dy);
    return Math.abs(((this.y1 - this.y2) * x + dx * y + (this.x1 * this.y2 - this.x2 * this.y1)) / length);
  }
  /**
   * Tests if the specified line intersects this line.
   *
   * @param line the line to check the intersection with.
   *
   * @return true if the lines intersect each other, false otherwise.
   */


  intersects(line) {
    return Line.intersects(this.x1, this.y1, this.x2, this.y2, line.x1, line.y1, line.x2, line.y2);
  }
  /**
   * Computes the intersection point of this line segment and the provided line
   * segment.
   *
   * @param x3 the X coordinate of the start point of the specified line segment.
   * @param y3 the Y coordinate of the start point of the specified line segment.
   * @param x4 the X coordinate of the end point of the specified line segment.
   * @param y4 the Y coordinate of the end point of the specified line segment.
   *
   * @return the intersection point of the two line segments, null if the line
   *         segments do not intersect each other.
   */


  getIntersectionPoint(x3, y3, x4, y4) {
    const d = (y4 - y3) * (this.x2 - this.x1) - (x4 - x3) * (this.y2 - this.y1); // Are the lines parallel.

    if (Math.abs(d) < 0.01) {
      return null;
    } // Calculate the intermediate fractional point.


    const a = (x4 - x3) * (this.y1 - y3) - (y4 - y3) * (this.x1 - x3);
    const b = (this.x2 - this.x1) * (this.y1 - y3) - (this.y2 - this.y1) * (this.x1 - x3);
    const ua = a / d;
    const ub = b / d; // Test for intersection along the the segments.

    if (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {
      const A1 = this.y2 - this.y1;
      const B1 = this.x1 - this.x2;
      const C1 = A1 * this.x1 + B1 * this.y1;
      const A2 = y4 - y3;
      const B2 = x3 - x4;
      const C2 = A2 * x3 + B2 * y3;
      return new _point__WEBPACK_IMPORTED_MODULE_0__.Point((B2 * C1 - B1 * C2) / d, (A1 * C2 - A2 * C1) / d);
    }

    return null;
  }
  /**
   * Tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment
   * from (x3,y3) to (x4,y4).
   *
   * @param x1 the X coordinate of the start point of the first specified line segment.
   * @param y1 the Y coordinate of the start point of the first specified line segment.
   * @param x2 the X coordinate of the end point of the first specified line segment.
   * @param y2 the Y coordinate of the end point of the first specified line segment.
   * @param x3 the X coordinate of the start point of the second specified line segment.
   * @param y3 the Y coordinate of the start point of the second specified line segment.
   * @param x4 the X coordinate of the end point of the second specified line segment.
   * @param y4 the Y coordinate of the end point of the second specified line segment.
   *
   * @return true if the line segments intersect each other, false otherwise.
   */


  static intersects(x1, y1, x2, y2, x3, y3, x4, y4) {
    const d = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1); // Are the lines parallel.

    if (d == 0) {
      return false;
    } // Calculate the intermediate fractional point.


    const a = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    const b = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
    const ua = a / d;
    const ub = b / d; // Test for intersection along the the segments.

    if (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {
      return true;
    }

    return false;
  }

}



/***/ }),

/***/ 7578:
/*!***************************************!*\
  !*** ./src/app/geometry/pen-point.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenPoint": () => (/* binding */ PenPoint)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ 6374);


class PenPoint extends _point__WEBPACK_IMPORTED_MODULE_0__.Point {
  constructor(x, y, p) {
    super(x, y);
    this.p = p;
  }

  clone() {
    return new PenPoint(this.x, this.y, this.p);
  }

  equals(other) {
    if (!other) {
      return false;
    }

    return this.x === other.x && this.y === other.y && this.p === other.p;
  }

  static createZero() {
    return new PenPoint(0, 0, 0);
  }

}



/***/ }),

/***/ 3098:
/*!****************************************!*\
  !*** ./src/app/geometry/pen-stroke.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenStroke": () => (/* binding */ PenStroke)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ 6374);
/* harmony import */ var _pen_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pen-point */ 7578);
/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line */ 1017);




class PenStroke {
  constructor(strokeWidth) {
    /** Temporary working space. */
    this.vector = new _point__WEBPACK_IMPORTED_MODULE_0__.Point(0, 0);
    this.normal = new _point__WEBPACK_IMPORTED_MODULE_0__.Point(0, 0);
    this.miter = new _point__WEBPACK_IMPORTED_MODULE_0__.Point(0, 0);
    this.offsetA = new _point__WEBPACK_IMPORTED_MODULE_0__.Point(0, 0);
    this.offsetB = new _point__WEBPACK_IMPORTED_MODULE_0__.Point(0, 0);
    this.lastLineTop = new _line__WEBPACK_IMPORTED_MODULE_2__.Line(0, 0, 0, 0);
    this.lastLineBottom = new _line__WEBPACK_IMPORTED_MODULE_2__.Line(0, 0, 0, 0);
    /** Bottom line of the stroke. */

    this.A = new Array();
    /** Top line of the stroke. */

    this.B = new Array();
    /** Last two inserted points. */

    this.points = new Array();
    this.strokeWidth = strokeWidth;
  }

  getStrokeList() {
    if (this.points.length === 0) {
      return null;
    }

    const stroke = new Array(); // Special case with only one point.

    if (this.points.length == 1) {
      this.capOnePoint(stroke, this.points[0], this.strokeWidth);
      return stroke;
    } // Get bottom line.


    stroke.push(...this.A); // Cap last point.

    this.capEndpoint(stroke, this.points[1], this.points[0], false); // Get top line.

    stroke.push(...this.B);
    return stroke;
  }

  addPoint(point) {
    this.points.push(point.clone());
    const pSize = this.points.length;

    if (pSize > 1) {
      if (pSize > 2) {
        // Keep track only of two last observed points.
        this.points.shift();
      }

      const p0 = this.points[0];

      if (this.A.length === 0 || this.B.length === 0) {
        // Cap first point.
        this.capEndpoint(this.A, p0, point, false);
        this.beginPath(p0, point);
      } else {
        this.advance(p0, point);
      }
    }
  }

  intersects(rect) {
    // Handle simple cases.
    if (this.points.length === 0) {
      return false;
    } else if (this.points.length === 1) {
      return rect.containsPoint(this.points[0]);
    }

    if (this.intersectsRect(this.A, rect)) {
      return true;
    }

    if (this.intersectsRect(this.B, rect)) {
      return true;
    }

    return false;
  }

  moveByDelta(delta) {
    for (let point of this.A) {
      point.subtract(delta);
    }

    for (let point of this.B) {
      point.subtract(delta);
    }

    for (let point of this.points) {
      point.subtract(delta);
    }
  }

  clone() {
    const stroke = new PenStroke(this.strokeWidth);

    for (let point of this.A) {
      stroke.A.push(point.clone());
    }

    for (let point of this.B) {
      stroke.B.push(point.clone());
    }

    for (let point of this.points) {
      stroke.points.push(point.clone());
    }

    return stroke;
  }

  advance(p0, p1) {
    this.advancePath(this.A, p0, p1, false);
    this.advancePath(this.B, p0, p1, true);
  }

  advancePath(target, p0, p1, reverse) {
    this.vector.set(p1.x, p1.y).subtract(p0).normalize();
    this.normal.set(-this.vector.y, this.vector.x).normalize();
    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p0) / 2);
    this.offsetA.set(p0.x, p0.y);
    this.offset(this.offsetA, this.miter, reverse);
    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p1) / 2);
    this.offsetB.set(p1.x, p1.y);
    this.offset(this.offsetB, this.miter, reverse);
    const line = new _line__WEBPACK_IMPORTED_MODULE_2__.Line(this.offsetA.x, this.offsetA.y, this.offsetB.x, this.offsetB.y);
    const lastLine = reverse ? this.lastLineTop : this.lastLineBottom;
    const inter = lastLine.getIntersectionPoint(line.x1, line.y1, line.x2, line.y2);

    if (inter != null) {
      this.intersect(target, inter, reverse);
    } else {
      const a = lastLine.getEndPoint();
      const b = line.getStartPoint();
      let s = this.toDegrees(a, p0);
      let e = this.toDegrees(b, p0);
      const d = Math.abs(s - e);

      if (d > 180) {
        s %= 360;
        e %= 360;
      }

      this.cap(target, p0, s, e, this.strokeWidth * this.toPressure(p0) / 2, 2, reverse);
    }

    lastLine.set(line.x1, line.y1, line.x2, line.y2);
  }

  beginPath(p0, p1) {
    this.vector.set(p1.x, p1.y).subtract(p0).normalize();
    this.normal.set(-this.vector.y, this.vector.x).normalize(); // Bottom

    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p0) / 2);
    this.offsetA.set(p0.x, p0.y).add(this.miter);
    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p1) / 2);
    this.offsetB.set(p1.x, p1.y).add(this.miter);
    this.addPathPoint(this.A, this.offsetB.x, this.offsetB.y, false);
    this.lastLineBottom.set(this.offsetA.x, this.offsetA.y, this.offsetB.x, this.offsetB.y); // Top

    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p0) / 2);
    this.offsetA.set(p0.x, p0.y).subtract(this.miter);
    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p1) / 2);
    this.offsetB.set(p1.x, p1.y).subtract(this.miter);
    this.addPathPoint(this.B, this.offsetA.x, this.offsetA.y, true);
    this.addPathPoint(this.B, this.offsetB.x, this.offsetB.y, true);
    this.lastLineTop.set(this.offsetA.x, this.offsetA.y, this.offsetB.x, this.offsetB.y);
  }

  cap(target, center, start, end, radius, step, reverse) {
    if (start > end) {
      for (let angle = start; angle >= end; angle -= step) {
        const rad = Math.PI * angle / 180;
        const x = center.x + radius * Math.cos(rad);
        const y = center.y + radius * Math.sin(rad);
        this.addPathPoint(target, x, y, reverse);
      }
    } else {
      for (let angle = start; angle <= end; angle += step) {
        const rad = Math.PI * angle / 180;
        const x = center.x + radius * Math.cos(rad);
        const y = center.y + radius * Math.sin(rad);
        this.addPathPoint(target, x, y, reverse);
      }
    }
  }

  capOnePoint(target, center, strokeWidth) {
    this.addPathPoint(target, center.x + strokeWidth * this.toPressure(center) / 2, center.y, false);
    this.cap(target, center, 0, 360, strokeWidth * this.toPressure(center) / 2, 2, false);
  }

  capEndpoint(target, p0, p1, reverse) {
    this.vector.set(p1.x, p1.y).subtract(p0).normalize();
    this.normal.set(-this.vector.y, this.vector.x).normalize();
    this.miter.set(this.normal.x, this.normal.y).multiply(this.strokeWidth * this.toPressure(p0) / 2);
    this.offsetA.set(p0.x, p0.y).add(this.miter);
    this.offsetB.set(p0.x, p0.y).subtract(this.miter); // First/Last point offset.

    this.addPathPoint(target, this.offsetB.x, this.offsetB.y, reverse); // Cap point with 180 degrees.

    const s = this.toDegrees(this.offsetB, this.offsetA);
    const e = s - 180;
    this.cap(target, p0, s, e, this.strokeWidth * this.toPressure(p0) / 2, 2, reverse);
  }

  addPathPoint(target, x, y, reverse) {
    if (reverse) {
      target.unshift(new _pen_point__WEBPACK_IMPORTED_MODULE_1__.PenPoint(x, y, 1));
    } else {
      target.push(new _pen_point__WEBPACK_IMPORTED_MODULE_1__.PenPoint(x, y, 1));
    }
  }

  intersect(target, inter, reverse) {
    if (reverse) {
      target[0].set(inter.x, inter.y);
    } else {
      target[target.length - 1].set(inter.x, inter.y);
    }
  }

  offset(center, miter, reverse) {
    if (reverse) {
      center.subtract(miter);
    } else {
      center.add(miter);
    }
  }

  toPressure(point) {
    return Math.min(1.0, Math.sqrt(point.p + 0.1));
  }

  toDegrees(p1, p2) {
    const degrees = Math.atan2(p1.y - p2.y, p1.x - p2.x);
    return (2 * Math.PI + degrees) * 180 / Math.PI;
  }

  intersectsRect(path, rect) {
    let index = 0;
    let p1 = path[index++];
    let p2 = null;

    while (index < path.length) {
      p2 = path[index++];

      if (rect.intersectsLine(p1.x, p1.y, p2.x, p2.y)) {
        return true;
      }

      p1 = p2;
    }

    return false;
  }

}



/***/ }),

/***/ 6374:
/*!***********************************!*\
  !*** ./src/app/geometry/point.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Point": () => (/* binding */ Point)
/* harmony export */ });
/**
 * A Point object describes a point in the two dimensional space through
 * its (x,y) properties.
 */
class Point {
  /**
   * Creates a new instance of Point with specified coordinates.
   *
   * @param x The x coordinate of the point.
   * @param y The y coordinate of the point.
   */
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  /**
   * Returns the distance from this Point to a specified Point.
   *
   * @param p The point to which the distance should be measured.
   *
   * @return The distance to the given point.
   */


  distance(point) {
    const dx = point.x - this.x;
    const dy = point.y - this.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  add(point) {
    this.x += point.x;
    this.y += point.y;
    return this;
  }

  subtract(point) {
    this.x -= point.x;
    this.y -= point.y;
    return this;
  }

  multiply(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }

  normalize() {
    const length = Math.sqrt(this.x * this.x + this.y * this.y);
    this.x /= length;
    this.y /= length;
    return this;
  }
  /**
   * Tests whether the provided point describes the same point.
   *
   * @param other the point to compare this point to.
   *
   * @return true if the points are equal, false otherwise.
   */


  equals(other) {
    if (!other) {
      return false;
    }

    return this.x === other.x && this.y === other.y;
  }

}



/***/ }),

/***/ 7723:
/*!***************************************!*\
  !*** ./src/app/geometry/rectangle.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rectangle": () => (/* binding */ Rectangle)
/* harmony export */ });
const INSIDE = 0;
const LEFT = 1;
const RIGHT = 2;
const BOTTOM = 4;
const TOP = 8;
/**
 * A Rectangle specifies an area that is enclosed by it's top-left point (x,y)
 * and its width and height.
 */

class Rectangle {
  /**
   * Creates a new instance of Rectangle with specified location coordinates and size.
   *
   * @param x the x coordinate of the rectangle.
   * @param y the y coordinate of the rectangle.
   * @param width the width of the rectangle.
   * @param height the height of the rectangle.
   */
  constructor(x, y, width, height) {
    this.set(x, y, width, height);
  }
  /**
   * Set new location coordinates and size of this rectangle.
   *
   * @param x the x coordinate of the rectangle.
   * @param y the y coordinate of the rectangle.
   * @param width the width of the rectangle.
   * @param height the height of the rectangle.
   */


  set(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  /**
   * Determines whether the rectangle encloses some area.
   *
   * @return true if the rectangle is empty, false otherwise.
   */


  isEmpty() {
    return this.width <= 0.0 || this.height <= 0.0;
  }
  /**
   * Tests if the specified point is inside the boundary of the rectangle.
   *
   * @param point the point that represents a x and y coordinate pair.
   *
   * @return true if the specified point is inside the boundary, false otherwise.
   */


  containsPoint(point) {
    const px = point.x;
    const py = point.y;
    return px >= this.x && py >= this.y && px < this.x + this.width && py < this.y + this.height;
  }
  /**
   * Tests if the interior of this rectangle entirely encloses the specified
   * rectangle.
   *
   * @param rect The rectangle to check, whether it is enclosed by this rectangle.
   *
   * @return true if the interior of this rectangle entirely contains the
   *         specified area, false otherwise.
   */


  containsRect(rect) {
    if (this.isEmpty() || rect.isEmpty()) {
      return false;
    }

    const x = rect.x;
    const y = rect.y;
    const w = rect.width;
    const h = rect.height;
    const x0 = this.x;
    const y0 = this.y;
    return x >= x0 && y >= y0 && x + w <= x0 + this.width && y + h <= y0 + this.height;
  }
  /**
   * Tests if the line segment from (x1,y1) to (x2,y2) intersects this rectangle.
   *
   * @param x1 the X coordinate of the start point of the line segment.
   * @param y1 the Y coordinate of the start point of the line segment.
   * @param x2 the X coordinate of the end point of the line segment.
   * @param y2 the Y coordinate of the end point of the line segment.
   *
   * @return true if the line segment intersects this rectangle, false otherwise.
   */


  intersectsLine(x1, y1, x2, y2) {
    const xmin = this.x;
    const xmax = this.x + this.width;
    const ymin = this.y;
    const ymax = this.y + this.height;
    let outcode0 = this.computeCode(x1, y1, xmin, xmax, ymin, ymax);
    let outcode1 = this.computeCode(x2, y2, xmin, xmax, ymin, ymax);

    while (true) {
      if (!(outcode0 | outcode1)) {
        return true;
      } else if (outcode0 & outcode1) {
        return false;
      } else {
        let outcodeOut = outcode0 ? outcode0 : outcode1;
        let x, y;

        if (outcodeOut & TOP) {
          x = x1 + (x2 - x1) * (ymax - y1) / (y2 - y1);
          y = ymax;
        } else if (outcodeOut & BOTTOM) {
          x = x1 + (x2 - x1) * (ymin - y1) / (y2 - y1);
          y = ymin;
        } else if (outcodeOut & RIGHT) {
          y = y1 + (y2 - y1) * (xmax - x1) / (x2 - x1);
          x = xmax;
        } else if (outcodeOut & LEFT) {
          y = y1 + (y2 - y1) * (xmin - x1) / (x2 - x1);
          x = xmin;
        }

        if (x !== undefined && y !== undefined && outcodeOut == outcode0) {
          x1 = x;
          y1 = y;
          outcode0 = this.computeCode(x1, y1, xmin, xmax, ymin, ymax);
        } else if (x !== undefined && y !== undefined) {
          x2 = x;
          y2 = y;
          outcode1 = this.computeCode(x2, y2, xmin, xmax, ymin, ymax);
        }
      }
    }
  }
  /**
   * Intersects the provided rectangle with this one and puts the result into the
   * returned rectangle object.
   *
   * @param rect The rectangle to be intersected with this one.
   *
   * @return the intersection rectangle, or null if the rectangles don't intersect
   *         each other.
   */


  intersection(rect) {
    const iX = Math.max(this.x, rect.x);
    const iY = Math.max(this.y, rect.y);
    const iW = Math.min(this.x + this.width, rect.x + rect.width) - iX;
    const iH = Math.min(this.y + this.height, rect.y + rect.height) - iY;

    if (iW <= 0) {
      return null;
    }

    if (iH <= 0) {
      return null;
    }

    return new Rectangle(iX, iY, iW, iH);
  }
  /**
   * Unions the provided rectangle with this one and puts the result into
   * this rectangle object.
   *
   * @param rect The rectangle to be combined with this one.
   */


  union(rect) {
    const x1 = Math.min(this.x, rect.x);
    const y1 = Math.min(this.y, rect.y);
    const x2 = Math.max(this.x + this.width, rect.x + rect.width);
    const y2 = Math.max(this.y + this.height, rect.y + rect.height);
    this.set(x1, y1, x2 - x1, y2 - y1);
  }
  /**
   * Tests whether the provided rectangle describes the same rectangle.
   *
   * @param other the rectangle to compare this rectangle to.
   *
   * @return true if the rectangles are equal, false otherwise.
   */


  equals(other) {
    if (!other) {
      return false;
    }

    return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
  }
  /**
   * @return a string representation of this rectangle.
   */


  toString() {
    return `[${this.x}, ${this.y}, ${this.height}, ${this.width}]`;
  }
  /**
   * @return a new empty rectangle which encloses no area.
   */


  static empty() {
    return new Rectangle(0, 0, 0, 0);
  }

  computeCode(x, y, xmin, xmax, ymin, ymax) {
    let code = INSIDE;

    if (x < xmin) {
      code |= LEFT;
    } else if (x > xmax) {
      code |= RIGHT;
    }

    if (y < ymin) {
      code |= BOTTOM;
    } else if (y > ymax) {
      code |= TOP;
    }

    return code;
  }

}



/***/ }),

/***/ 8696:
/*!***************************************!*\
  !*** ./src/app/geometry/transform.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transform": () => (/* binding */ Transform)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ 6374);


class Transform {
  /**
   * Creates a new Transform with a transformation matrix specified by an array
   * consisting of [a, b, c, d, e, f] where the elements have the following
   * representation:
   *
   * @value a: the horizontal scaling factor
   * @value b: the horizontal shearing factor
   * @value c: the vertical shearing factor
   * @value d: the vertical scaling factor
   * @value e: the horizontal translation factor
   * @value f: the vertical translation factor
   *
   * If no transformation matrix is provided, the new transform is set to the
   * identity transform.
   *
   * @param m The transformation matrix elements.
   */
  constructor(m) {
    this.m = m ? m.slice(0, 6) : [1, 0, 0, 1, 0, 0];
  }
  /**
   * @returns the horizontal scaling factor.
   */


  getScaleX() {
    return this.m[0];
  }
  /**
   * @returns the vertical scaling factor.
   */


  getScaleY() {
    return this.m[3];
  }
  /**
   * @returns the horizontal shearing factor.
   */


  getShearX() {
    return this.m[1];
  }
  /**
   * @returns the vertical shearing factor.
   */


  getShearY() {
    return this.m[2];
  }
  /**
   * @returns the horizontal translation factor.
   */


  getTranslateX() {
    return this.m[4];
  }
  /**
   * @returns the vertical translation factor.
   */


  getTranslateY() {
    return this.m[5];
  }
  /**
   * Creates a deep copy of this transform.
   *
   * @return a copy of this transform.
   */


  clone() {
    return new Transform(this.m);
  }
  /**
   * Resets this transform to the identity transform.
   */


  reset() {
    this.setValues(1, 0, 0, 1, 0, 0);
  }
  /**
   * Sets the matrix elements of this transform to the matrix elements provided
   * by the specified transform.
   *
   * @param transform The transform to copy the matrix elements from.
   */


  setTransform(transform) {
    this.m[0] = transform.getScaleX();
    this.m[1] = transform.getShearX();
    this.m[2] = transform.getShearY();
    this.m[3] = transform.getScaleY();
    this.m[4] = transform.getTranslateX();
    this.m[5] = transform.getTranslateY();
  }
  /**
   * Sets the matrix elements of this transform to the provided 2D matrix elements.
   *
   * @param a the horizontal scaling factor.
   * @param b the horizontal shearing factor.
   * @param c the vertical shearing factor.
   * @param d the vertical scaling factor.
   * @param e the horizontal translation factor.
   * @param f the vertical translation factor.
   */


  setValues(a, b, c, d, e, f) {
    this.m[0] = a;
    this.m[1] = b;
    this.m[2] = c;
    this.m[3] = d;
    this.m[4] = e;
    this.m[5] = f;
  }
  /**
   * Inverts this transform in place.
   */


  invert() {
    const d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
    this.m[0] = this.m[3] * d;
    this.m[1] = -this.m[1] * d;
    this.m[2] = -this.m[2] * d;
    this.m[3] = this.m[0] * d;
    this.m[4] = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
    this.m[5] = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
  }
  /**
   * Multiplies this transform with the provided transform in place.
   *
   * @param transform The transform to multiply with.
   */


  multiply(transform) {
    this.m[0] = this.m[0] * transform.m[0] + this.m[2] * transform.m[1];
    this.m[1] = this.m[1] * transform.m[0] + this.m[3] * transform.m[1];
    this.m[2] = this.m[0] * transform.m[2] + this.m[2] * transform.m[3];
    this.m[3] = this.m[1] * transform.m[2] + this.m[3] * transform.m[3];
    this.m[4] = this.m[0] * transform.m[4] + this.m[2] * transform.m[5] + this.m[4];
    this.m[5] = this.m[1] * transform.m[4] + this.m[3] * transform.m[5] + this.m[5];
  }
  /**
   * Concatenates this transform with a rotation transformation.
   *
   * @param angle The angle of rotation measured in radians.
   */


  rotate(angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    this.m[0] = this.m[0] * c + this.m[1] * s;
    this.m[1] = this.m[0] * -s + this.m[1] * c;
    this.m[2] = this.m[2] * c + this.m[3] * s;
    this.m[3] = this.m[2] * -s + this.m[3] * c;
  }
  /**
   * Concatenates this transform with a scaling transformation.
   *
   * @param sx the horizontal scaling factor.
   * @param sy the vertical scaling factor.
   */


  scale(sx, sy) {
    this.m[0] *= sx;
    this.m[1] *= sx;
    this.m[2] *= sy;
    this.m[3] *= sy;
  }
  /**
   * Concatenates this transform with a translate transformation.
   *
   * @param x the distance to translate in the x direction.
   * @param y the distance to translate in the y direction.
   */


  translate(x, y) {
    this.m[4] += this.m[0] * x + this.m[2] * y;
    this.m[5] += this.m[1] * x + this.m[3] * y;
  }
  /**
   * Transforms a point represented by (x,y) coordinates.
   *
   * @param px the x coordinate of the point to transform.
   * @param py the y coordinate of the point to transform.
   *
   * @return the transformed point.
   */


  transformPoint(px, py) {
    const x = px;
    const y = py;
    px = x * this.m[0] + y * this.m[2] + this.m[4];
    py = x * this.m[1] + y * this.m[3] + this.m[5];
    return new _point__WEBPACK_IMPORTED_MODULE_0__.Point(px, py);
  }
  /**
   * Tests whether the provided transform describes the same transform.
   *
   * @param other the transform to compare this transform to.
   *
   * @return true if the transforms are equal, false otherwise.
   */


  equals(other) {
    if (!other) {
      return false;
    }

    return this.m.length === other.m.length && this.m.every(function (value, index) {
      return value === other.m[index];
    });
  }
  /**
   * @return a string representation of this transform.
   */


  toString() {
    return "[" + this.m.join(", ") + "]";
  }

}



/***/ }),

/***/ 8098:
/*!************************************************!*\
  !*** ./src/app/model/action/action-handler.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionHandler": () => (/* binding */ ActionHandler)
/* harmony export */ });
class ActionHandler {
  constructor(model) {
    this.undoActions = [];
    this.redoActions = [];
    this.model = model;
  }

  executeAction(action) {
    this.undoActions.push(action);
    this.redoActions.length = 0;
    action.execute(this.model);
  }

  undo() {
    if (this.undoActions.length < 1) {
      return;
    }

    const action = this.undoActions.pop();

    if (action) {
      this.redoActions.push(action);
      action.undo(this.model);
    }
  }

  redo() {
    if (this.redoActions.length < 1) {
      return;
    }

    const action = this.redoActions.pop();

    if (action) {
      this.undoActions.push(action);
      action.redo(this.model);
    }
  }

  clear() {
    this.undoActions.length = 0;
    this.redoActions.length = 0;
  }

}



/***/ }),

/***/ 6867:
/*!**************************************************!*\
  !*** ./src/app/model/action/add-shape.action.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddShapeAction": () => (/* binding */ AddShapeAction)
/* harmony export */ });
/* harmony import */ var _shape_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape.action */ 1500);


class AddShapeAction extends _shape_action__WEBPACK_IMPORTED_MODULE_0__.ShapeAction {
  constructor(shapes) {
    super(shapes);
  }

  execute(page) {
    for (let shape of this.shapes) {
      page.addShape(shape);
    }
  }

  undo(page) {
    for (let shape of this.shapes) {
      page.removeShape(shape);
    }
  }

  redo(page) {
    this.execute(page);
  }

}



/***/ }),

/***/ 7472:
/*!*****************************************************!*\
  !*** ./src/app/model/action/remove-shape.action.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RemoveShapeAction": () => (/* binding */ RemoveShapeAction)
/* harmony export */ });
/* harmony import */ var _shape_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape.action */ 1500);


class RemoveShapeAction extends _shape_action__WEBPACK_IMPORTED_MODULE_0__.ShapeAction {
  constructor(shapes) {
    super(shapes);
  }

  execute(page) {
    for (let shape of this.shapes) {
      page.removeShape(shape);
    }
  }

  undo(page) {
    for (let shape of this.shapes) {
      page.addShape(shape);
    }
  }

  redo(page) {
    this.execute(page);
  }

}



/***/ }),

/***/ 1500:
/*!**********************************************!*\
  !*** ./src/app/model/action/shape.action.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShapeAction": () => (/* binding */ ShapeAction)
/* harmony export */ });
class ShapeAction {
  constructor(shapes) {
    this.shapes = shapes;
  }

}



/***/ }),

/***/ 8079:
/*!***********************************!*\
  !*** ./src/app/model/document.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlideDocument": () => (/* binding */ SlideDocument)
/* harmony export */ });
class SlideDocument {
  constructor() {}

  getDocumentId() {
    return this.documentId;
  }

  setDocumentId(id) {
    this.documentId = id;
  }

  getPageCount() {
    return this.pages.length;
  }

  getPage(pageNumber) {
    if (pageNumber < 0 || pageNumber > this.pages.length - 1) {
      throw new Error(`Page number ${pageNumber} out of bounds.`);
    }

    return this.pages[pageNumber];
  }

}



/***/ }),

/***/ 8538:
/*!****************************************!*\
  !*** ./src/app/model/document.type.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentType": () => (/* binding */ DocumentType)
/* harmony export */ });
var DocumentType = /*#__PURE__*/(() => {
  (function (DocumentType) {
    DocumentType[DocumentType["PDF"] = 0] = "PDF";
    DocumentType[DocumentType["WHITEBOARD"] = 1] = "WHITEBOARD";
    DocumentType[DocumentType["QUIZ"] = 2] = "QUIZ";
  })(DocumentType || (DocumentType = {}));

  return DocumentType;
})();


/***/ }),

/***/ 7558:
/*!*************************************!*\
  !*** ./src/app/model/page-event.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageChangeType": () => (/* binding */ PageChangeType),
/* harmony export */   "PageEvent": () => (/* binding */ PageEvent)
/* harmony export */ });
class PageEvent {
  constructor(page, changeType, shape, dirtyRegion) {
    this._page = page;
    this._changeType = changeType;

    if (shape) {
      this._shape = shape;
    }

    if (dirtyRegion) {
      this._dirtyRegion = dirtyRegion;
    }
  }

  get changeType() {
    return this._changeType;
  }

  get page() {
    return this._page;
  }

  get shape() {
    return this._shape;
  }

  get dirtyRegion() {
    return this._dirtyRegion;
  }

}

var PageChangeType = /*#__PURE__*/(() => {
  (function (PageChangeType) {
    PageChangeType["Clear"] = "Clear";
    PageChangeType["ShapeAdded"] = "ShapeAdded";
    PageChangeType["ShapeRemoved"] = "ShapeRemoved";
    PageChangeType["ShapeModified"] = "ShapeModified";
    PageChangeType["PageTransform"] = "PageTransform";
  })(PageChangeType || (PageChangeType = {}));

  return PageChangeType;
})();


/***/ }),

/***/ 4570:
/*!*******************************!*\
  !*** ./src/app/model/page.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Page": () => (/* binding */ Page)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _page_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page-event */ 7558);
/* harmony import */ var _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/event-listener */ 7345);
/* harmony import */ var _action_action_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./action/action-handler */ 8098);
/* harmony import */ var _shape_slide_shape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shape/slide.shape */ 9805);






class Page {
  constructor(document, pageNumber) {
    this.actionHandler = new _action_action_handler__WEBPACK_IMPORTED_MODULE_3__.ActionHandler(this);
    this.changeEvent = new _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__.TypedEvent();
    this.shapes = [];
    this.document = document;
    this.pageNumber = pageNumber;
    this.slideShape = new _shape_slide_shape__WEBPACK_IMPORTED_MODULE_4__.SlideShape(this);
    this.slideShape.addChangeListener(this.onSlideTransform.bind(this));
    this.shapeChangeListener = this.onShapeModified.bind(this);
  }

  render(context, viewRect, dirtyRegion) {
    return this.document.renderPage(this.pageNumber, context, viewRect, dirtyRegion);
  }

  renderText(root, size) {
    this.document.renderPageText(this.pageNumber, root, size, this.getSlideShape().bounds);
  }

  addChangeListener(listener) {
    return this.changeEvent.subscribe(listener);
  }

  removeChangeListener(listener) {
    this.changeEvent.unsubscribe(listener);
  }

  addShape(shape) {
    const prevCount = this.shapes.length;

    if (this.shapes.push(shape) > prevCount) {
      shape.addChangeListener(this.shapeChangeListener);
      this.firePageEvent(new _page_event__WEBPACK_IMPORTED_MODULE_1__.PageEvent(this, _page_event__WEBPACK_IMPORTED_MODULE_1__.PageChangeType.ShapeAdded, shape));
    }
  }

  removeShape(shape) {
    const shapeIndex = this.shapes.indexOf(shape);

    if (shapeIndex > -1) {
      const deleted = this.shapes.splice(shapeIndex, 1);

      if (deleted.length > 0) {
        shape.removeChangeListener(this.shapeChangeListener);
        this.firePageEvent(new _page_event__WEBPACK_IMPORTED_MODULE_1__.PageEvent(this, _page_event__WEBPACK_IMPORTED_MODULE_1__.PageChangeType.ShapeRemoved, shape));
      }
    }
  }

  getSlideShape() {
    return this.slideShape;
  }

  getShapes() {
    return this.shapes;
  }

  hasShapes() {
    return this.shapes.length > 0;
  }

  addAction(action) {
    this.actionHandler.executeAction(action);
  }

  undo() {
    this.actionHandler.undo();
  }

  redo() {
    this.actionHandler.redo();
  }

  clear() {
    this.actionHandler.clear();
    this.shapes.length = 0;
    this.firePageEvent(new _page_event__WEBPACK_IMPORTED_MODULE_1__.PageEvent(this, _page_event__WEBPACK_IMPORTED_MODULE_1__.PageChangeType.Clear, undefined));
  }

  getPageNumber() {
    return this.pageNumber;
  }

  getDocument() {
    return this.document;
  }

  onSlideTransform(event) {
    this.firePageEvent(new _page_event__WEBPACK_IMPORTED_MODULE_1__.PageEvent(this, _page_event__WEBPACK_IMPORTED_MODULE_1__.PageChangeType.PageTransform, event.shape, event.dirtyRegion));
  }

  onShapeModified(event) {
    this.firePageEvent(new _page_event__WEBPACK_IMPORTED_MODULE_1__.PageEvent(this, _page_event__WEBPACK_IMPORTED_MODULE_1__.PageChangeType.ShapeModified, event.shape, event.dirtyRegion));
  }

  firePageEvent(event) {
    this.changeEvent.publish(event);
  }

  getPageBounds() {
    var _this = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return yield _this.document.getPageBounds(_this.pageNumber);
    })();
  }

}



/***/ }),

/***/ 5893:
/*!******************************************!*\
  !*** ./src/app/model/pdf-js-document.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PdfJsDocument": () => (/* binding */ PdfJsDocument)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page */ 4570);
/* harmony import */ var _document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./document */ 8079);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geometry/rectangle */ 7723);
/* harmony import */ var _render_pdf_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../render/pdf.renderer */ 5050);
/* harmony import */ var _render_pdf_text_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/pdf.text.renderer */ 9319);







class PdfJsDocument extends _document__WEBPACK_IMPORTED_MODULE_2__.SlideDocument {
  constructor(document) {
    super();
    this.document = document;
    this.renderer = new _render_pdf_renderer__WEBPACK_IMPORTED_MODULE_4__.PdfRenderer();
    this.textRenderer = new _render_pdf_text_renderer__WEBPACK_IMPORTED_MODULE_5__.PdfTextRenderer();
    this.loadPages(document);
  }

  getPageBounds(pageNumber) {
    var _this = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const page = yield _this.getPdfPage(pageNumber);
      const bounds = page.view;
      return new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle(bounds[0], bounds[1], bounds[2], bounds[3]);
    })();
  }

  getPageText(pageNumber) {
    var _this2 = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const page = yield _this2.document.getPage(pageNumber + 1);
      const content = yield page.getTextContent();
      return content.items.map(function (s) {
        return s.str;
      }).join(' ');
    })();
  }

  renderPage(pageNumber, context, viewRect, dirtyRegion) {
    var _this3 = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const pageProxy = yield _this3.getPdfPage(pageNumber); // @ts-ignore

      return _this3.renderer.render(pageProxy, context, viewRect, dirtyRegion);
    })();
  }

  renderPageText(pageNumber, root, size, viewRect) {
    var _this4 = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const pageProxy = yield _this4.getPdfPage(pageNumber);

      _this4.textRenderer.render(pageProxy, root, size, viewRect);
    })();
  }

  getPdfPage(pageNumber) {
    return this.document.getPage(pageNumber + 1);
  }

  loadPages(document) {
    this.pages = [];

    for (let i = 0; i < document.numPages; i++) {
      this.pages.push(new _page__WEBPACK_IMPORTED_MODULE_1__.Page(this, i));
    }
  }

}



/***/ }),

/***/ 90:
/*!*****************************************!*\
  !*** ./src/app/model/playback-model.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlaybackModel": () => (/* binding */ PlaybackModel)
/* harmony export */ });
/* harmony import */ var _utils_property__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/property */ 8301);


class PlaybackModel {
  constructor() {
    this._elementA = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._raisedHand = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._showQuiz = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._showChat = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._showQuizActive = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._webrtcConnected = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._webrtcPublisherConnected = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._videoAvailable = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._mainVideoAvailable = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._localVideoAvailable = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._selectedPageIndex = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._duration = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._time = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._volume = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
    this._muted = new _utils_property__WEBPACK_IMPORTED_MODULE_0__.Property();
  }

  get elementAProperty() {
    return this._elementA;
  }

  get selectedPageIndexProperty() {
    return this._selectedPageIndex;
  }

  get selectedPageIndex() {
    return this._selectedPageIndex.value;
  }

  set selectedPageIndex(index) {
    this._selectedPageIndex.value = index;
  }

  get raisedHandProperty() {
    return this._raisedHand;
  }

  set raisedHand(raised) {
    this._raisedHand.value = raised;
  }

  get showChatProperty() {
    return this._showChat;
  }

  get showChat() {
    return this._showChat.value;
  }

  set showChat(show) {
    this._showChat.value = show;
  }

  get showQuizProperty() {
    return this._showQuiz;
  }

  set showQuiz(show) {
    this._showQuiz.value = show;
  }

  get showQuizActiveProperty() {
    return this._showQuizActive;
  }

  set showQuizActive(active) {
    this._showQuizActive.value = active;
  }

  get webrtcConnectedProperty() {
    return this._webrtcConnected;
  }

  set webrtcConnected(connected) {
    this._webrtcConnected.value = connected;
  }

  get webrtcPublisherConnectedProperty() {
    return this._webrtcPublisherConnected;
  }

  set webrtcPublisherConnected(connected) {
    this._webrtcPublisherConnected.value = connected;
  }

  get videoAvailableProperty() {
    return this._videoAvailable;
  }

  get videoAvailable() {
    return this._videoAvailable.value;
  }

  set videoAvailable(available) {
    this._videoAvailable.value = available;
  }

  get mainVideoAvailableProperty() {
    return this._mainVideoAvailable;
  }

  get mainVideoAvailable() {
    return this._mainVideoAvailable.value;
  }

  set mainVideoAvailable(available) {
    this._mainVideoAvailable.value = available;
  }

  get localVideoAvailableProperty() {
    return this._localVideoAvailable;
  }

  get localVideoAvailable() {
    return this._localVideoAvailable.value;
  }

  set localVideoAvailable(available) {
    this._localVideoAvailable.value = available;
  }

  get durationProperty() {
    return this._duration;
  }

  getDuration() {
    return this._duration.value;
  }

  setDuration(duration) {
    this._duration.value = duration;
  }

  get timeProperty() {
    return this._time;
  }

  getTime() {
    return this._time.value;
  }

  setTime(time) {
    this._time.value = time;
  }

  get volumeProperty() {
    return this._volume;
  }

  getVolume() {
    return this._volume.value;
  }

  setVolume(volume) {
    this._volume.value = volume;
  }

  get mutedProperty() {
    return this._muted;
  }

  getMuted() {
    return this._muted.value;
  }

  setMuted(muted) {
    this._muted.value = muted;
  }

}



/***/ }),

/***/ 6137:
/*!****************************************!*\
  !*** ./src/app/model/recorded-page.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecordedPage": () => (/* binding */ RecordedPage)
/* harmony export */ });
class RecordedPage {
  constructor() {
    this.staticActions = [];
    this.playbackActions = [];
  }

}



/***/ }),

/***/ 8888:
/*!********************************************!*\
  !*** ./src/app/model/shape/arrow.shape.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrowShape": () => (/* binding */ ArrowShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);


class ArrowShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  clone() {
    const shape = new ArrowShape(this.handle, this.brush.clone());
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());

    for (let point of this.points) {
      shape.points.push(point.clone());
    }

    return shape;
  }

}



/***/ }),

/***/ 6500:
/*!**********************************************!*\
  !*** ./src/app/model/shape/ellipse.shape.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EllipseShape": () => (/* binding */ EllipseShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);
/* harmony import */ var _geometry_ellipse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../geometry/ellipse */ 7640);



class EllipseShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  contains(point) {
    if (this.points.length < 2) {
      return false;
    }

    const ellipse = new _geometry_ellipse__WEBPACK_IMPORTED_MODULE_1__.Ellipse(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);

    if (this.fill()) {
      return ellipse.containsPoint(point.x, point.y);
    }

    return ellipse.intersectsLine(point.x, point.y, point.x + this.brush.width, point.y + this.brush.width);
  }

  intersects(rect) {
    if (this.points.length < 2) {
      return false;
    }

    const ellipse = new _geometry_ellipse__WEBPACK_IMPORTED_MODULE_1__.Ellipse(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    return ellipse.intersectsRect(rect.x, rect.y, rect.width, rect.height);
  }

  clone() {
    const shape = new EllipseShape(this.handle, this.brush.clone());
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());

    for (let point of this.points) {
      shape.points.push(point.clone());
    }

    return shape;
  }

}



/***/ }),

/***/ 9550:
/*!*******************************************!*\
  !*** ./src/app/model/shape/form.shape.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormShape": () => (/* binding */ FormShape)
/* harmony export */ });
/* harmony import */ var _stroke_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stroke.shape */ 5547);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);



class FormShape extends _stroke_shape__WEBPACK_IMPORTED_MODULE_0__.StrokeShape {
  setP0(point) {
    if (this.points.length > 0) {
      let prev = this.points[0];

      if (point.equals(prev)) {
        return false;
      }

      this.points[0] = point;
    } else {
      this.points.push(point);
    }

    return true;
  }

  setP1(point) {
    if (this.points.length > 1) {
      let prev = this.points[1];

      if (point.equals(prev)) {
        return false;
      }

      this.points[1] = point;
    } else {
      this.points.push(point);
    }

    this.updateBounds();
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
    return true;
  }

  updateBounds() {
    if (this.points.length < 2) {
      return;
    }

    const p0 = this.points[0];
    const p1 = this.points[1];

    if (p1.x < p0.x) {
      this.bounds.x = p1.x;
      this.bounds.width = p0.x - p1.x;
    } else {
      this.bounds.x = p0.x;
      this.bounds.width = p1.x - p0.x;
    }

    if (p1.y < p0.y) {
      this.bounds.y = p1.y;
      this.bounds.height = p0.y - p1.y;
    } else {
      this.bounds.y = p0.y;
      this.bounds.height = p1.y - p0.y;
    }
  }
  /**
   * Indicates whether to fill the interior of the shape.
   */


  fill() {
    const keyEvent = this.getKeyEvent();
    return keyEvent != null && keyEvent.altKey;
  }

}



/***/ }),

/***/ 1767:
/*!********************************************!*\
  !*** ./src/app/model/shape/latex.shape.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexShape": () => (/* binding */ LatexShape)
/* harmony export */ });
/* harmony import */ var _typesetting_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typesetting.shape */ 760);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);
/* harmony import */ var _geometry_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../geometry/point */ 6374);




class LatexShape extends _typesetting_shape__WEBPACK_IMPORTED_MODULE_0__.TypesettingShape {
  setFont(font) {
    if (this.font && this.font.equals(font)) {
      return;
    }

    this.font = font;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getFont() {
    return this.font;
  }

  clone() {
    const shape = new LatexShape(this.handle);
    shape.setLocation(new _geometry_point__WEBPACK_IMPORTED_MODULE_2__.Point(this.bounds.x, this.bounds.y));
    shape.setFont(this.font);
    shape.setTextColor(this.getTextColor());
    shape.setTextAttributes(new Map(this.getTextAttributes()));
    return shape;
  }

}



/***/ }),

/***/ 449:
/*!*******************************************!*\
  !*** ./src/app/model/shape/line.shape.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineShape": () => (/* binding */ LineShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);


class LineShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  clone() {
    const shape = new LineShape(this.handle, this.brush.clone());
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());

    for (let point of this.points) {
      shape.points.push(point.clone());
    }

    return shape;
  }

}



/***/ }),

/***/ 4259:
/*!******************************************!*\
  !*** ./src/app/model/shape/pen.shape.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenShape": () => (/* binding */ PenShape)
/* harmony export */ });
/* harmony import */ var _stroke_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stroke.shape */ 5547);
/* harmony import */ var _geometry_pen_stroke__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../geometry/pen-stroke */ 3098);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shape-event */ 6858);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../geometry/rectangle */ 7723);





class PenShape extends _stroke_shape__WEBPACK_IMPORTED_MODULE_0__.StrokeShape {
  constructor(shapeHandle, brush) {
    super(shapeHandle, brush);
    this.stroke = new _geometry_pen_stroke__WEBPACK_IMPORTED_MODULE_1__.PenStroke(brush.width);
  }

  addPoint(point) {
    // Keep only one point at a time.
    if (this.points.length > 0) {
      const prev = this.points[0];

      if (point.equals(prev)) {
        return false;
      }

      this.points[0] = point;
    } else {
      this.points.push(point);
    }

    this.stroke.addPoint(point);
    this.updateBounds();
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_2__.ShapeEvent(this, this.bounds));
    console.log('I added a point.', this.bounds, point);
    return true;
  }

  contains(point) {
    return this.stroke.intersects(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle(point.x, point.y, point.x, point.y));
  }

  intersects(rect) {
    return this.stroke.intersects(rect);
  }

  getPenStroke() {
    return this.stroke;
  }

  moveByDelta(delta) {
    this.stroke.moveByDelta(delta);
    this.updateBoundsByDelta(delta);
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_2__.ShapeEvent(this, this.bounds));
  }

  clone() {
    const shape = new PenShape(this.handle, this.brush.clone());
    shape.stroke = this.stroke.clone();
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());
    return shape;
  }

}



/***/ }),

/***/ 2337:
/*!**********************************************!*\
  !*** ./src/app/model/shape/pointer.shape.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PointerShape": () => (/* binding */ PointerShape)
/* harmony export */ });
/* harmony import */ var _stroke_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stroke.shape */ 5547);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);



class PointerShape extends _stroke_shape__WEBPACK_IMPORTED_MODULE_0__.StrokeShape {
  addPoint(point) {
    // Keep only one point at a time.
    if (this.points.length > 0) {
      let prev = this.points[0];

      if (point.equals(prev)) {
        return false;
      }

      this.points[0] = point;
    } else {
      this.points.push(point);
    }

    this.updateBounds();
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
    return true;
  }

  updateBounds() {
    const p0 = this.points[0];
    const d = this.brush.width;
    this.bounds.set(p0.x - d, p0.y - d, p0.x + d * 2, p0.y + d * 2);
  }

}



/***/ }),

/***/ 4614:
/*!************************************************!*\
  !*** ./src/app/model/shape/rectangle.shape.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RectangleShape": () => (/* binding */ RectangleShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);
/* harmony import */ var _geometry_line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../geometry/line */ 1017);



class RectangleShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  contains(point) {
    // Handle simple cases.
    if (this.points.length < 2) {
      return false;
    }

    if (this.fill()) {
      return this.bounds.containsPoint(point);
    }

    const delta = this.brush.width;
    let x1 = this.bounds.x;
    let y1 = this.bounds.y;
    let x2 = this.bounds.x + this.bounds.width;
    let y2 = this.bounds.y;

    if (this.intersectsSegment(delta, x1, y1, x2, y2, point)) {
      return true;
    }

    x1 = this.bounds.x + this.bounds.width;
    y1 = this.bounds.y;
    x2 = this.bounds.x + this.bounds.width;
    y2 = this.bounds.y + this.bounds.height;

    if (this.intersectsSegment(delta, x1, y1, x2, y2, point)) {
      return true;
    }

    x1 = this.bounds.x + this.bounds.width;
    y1 = this.bounds.y + this.bounds.height;
    x2 = this.bounds.x;
    y2 = this.bounds.y + this.bounds.height;

    if (this.intersectsSegment(delta, x1, y1, x2, y2, point)) {
      return true;
    }

    x1 = this.bounds.x;
    y1 = this.bounds.y;
    x2 = this.bounds.x;
    y2 = this.bounds.y + this.bounds.height;

    if (this.intersectsSegment(delta, x1, y1, x2, y2, point)) {
      return true;
    }

    return false;
  }

  intersects(rect) {
    return this.bounds.intersection(rect) != null;
  }

  clone() {
    const shape = new RectangleShape(this.handle, this.brush.clone());
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());

    for (let point of this.points) {
      shape.points.push(point.clone());
    }

    return shape;
  }

  intersectsSegment(delta, x1, y1, x2, y2, p) {
    let x3 = p.x + delta;
    let y3 = p.y + delta;
    let x4 = p.x - delta;
    let y4 = p.y - delta;

    if (_geometry_line__WEBPACK_IMPORTED_MODULE_1__.Line.intersects(x1, y1, x2, y2, x3, y3, x4, y4)) {
      return true;
    }

    x3 = p.x - delta;
    y3 = p.y + delta;
    x4 = p.x + delta;
    y4 = p.y - delta;

    if (_geometry_line__WEBPACK_IMPORTED_MODULE_1__.Line.intersects(x1, y1, x2, y2, x3, y3, x4, y4)) {
      return true;
    }

    return false;
  }

}



/***/ }),

/***/ 2348:
/*!*********************************************!*\
  !*** ./src/app/model/shape/select.shape.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectShape": () => (/* binding */ SelectShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);


class SelectShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  constructor() {
    super(0, null);
  }

}



/***/ }),

/***/ 6858:
/*!********************************************!*\
  !*** ./src/app/model/shape/shape-event.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ShapeEvent": () => (/* binding */ ShapeEvent)
/* harmony export */ });
class ShapeEvent {
  constructor(shape, dirtyRegion) {
    this._shape = shape;
    this._dirtyRegion = dirtyRegion;
  }

  get shape() {
    return this._shape;
  }

  get dirtyRegion() {
    return this._dirtyRegion;
  }

}



/***/ }),

/***/ 9112:
/*!**************************************!*\
  !*** ./src/app/model/shape/shape.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Shape": () => (/* binding */ Shape)
/* harmony export */ });
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape-event */ 6858);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../geometry/rectangle */ 7723);
/* harmony import */ var _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/event-listener */ 7345);




class Shape {
  constructor(handle) {
    this._points = [];
    this._bounds = _geometry_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle.empty();
    this.changeEvent = new _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__.TypedEvent();
    this._handle = handle;
  }

  get handle() {
    return this._handle;
  }

  addPoint(point) {
    const count = this._points.length;
    let last = null;

    if (count > 0) {
      last = this._points[count - 1];
    }

    if (last && point.equals(last)) {
      return false;
    }

    this._points.push(point);

    return true;
  }

  get points() {
    return this._points;
  }

  contains(point) {
    return this._bounds.containsPoint(point);
  }

  intersects(rect) {
    return this._bounds.intersection(rect) != null;
  }

  get bounds() {
    return this._bounds;
  }

  getKeyEvent() {
    return this.keyEvent;
  }

  setKeyEvent(event) {
    this.keyEvent = event;
  }

  isSelected() {
    return this.selected;
  }

  setSelected(selected) {
    if (this.selected == selected) {
      return;
    }

    this.selected = selected;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_0__.ShapeEvent(this, this.bounds));
  }

  moveByDelta(delta) {
    for (let point of this._points) {
      point.subtract(delta);
    }

    this.updateBoundsByDelta(delta);
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_0__.ShapeEvent(this, this.bounds));
  }

  clone() {
    return Object.create(this);
  }

  addChangeListener(listener) {
    return this.changeEvent.subscribe(listener);
  }

  removeChangeListener(listener) {
    this.changeEvent.unsubscribe(listener);
  }

  updateBoundsByDelta(delta) {
    this.bounds.x -= delta.x;
    this.bounds.y -= delta.y;
  }

  fireShapeEvent(event) {
    this.changeEvent.publish(event);
  }

}



/***/ }),

/***/ 9805:
/*!********************************************!*\
  !*** ./src/app/model/shape/slide.shape.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlideShape": () => (/* binding */ SlideShape)
/* harmony export */ });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ 9112);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);



class SlideShape extends _shape__WEBPACK_IMPORTED_MODULE_0__.Shape {
  constructor(page) {
    super(0);
    this.page = page;
    this.updateBounds();
  }

  getPage() {
    return this.page;
  }

  setPageRect(rect) {
    if (this.bounds.equals(rect)) {
      return;
    }

    this.bounds.set(rect.x, rect.y, rect.width, rect.height);
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  updateBounds() {
    this.bounds.set(0, 0, 1, 1);
  }

}



/***/ }),

/***/ 5547:
/*!*********************************************!*\
  !*** ./src/app/model/shape/stroke.shape.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StrokeShape": () => (/* binding */ StrokeShape)
/* harmony export */ });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ 9112);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);
/* harmony import */ var _geometry_line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../geometry/line */ 1017);
/* harmony import */ var _geometry_point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../geometry/point */ 6374);





class StrokeShape extends _shape__WEBPACK_IMPORTED_MODULE_0__.Shape {
  constructor(shapeHandle, brush) {
    super(shapeHandle);
    this.minPoint = new _geometry_point__WEBPACK_IMPORTED_MODULE_3__.Point(0, 0);
    this.maxPoint = new _geometry_point__WEBPACK_IMPORTED_MODULE_3__.Point(0, 0);

    if (brush) {
      this._brush = brush;
    }
  }

  get brush() {
    return this._brush;
  }

  addPoint(point) {
    const added = super.addPoint(point);

    if (added) {
      this.minPoint.x = Math.min(this.minPoint.x, point.x);
      this.minPoint.y = Math.min(this.minPoint.y, point.y);
      this.maxPoint.x = Math.max(this.maxPoint.x, point.x);
      this.maxPoint.y = Math.max(this.maxPoint.y, point.y);
      this.updateBounds();
      this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
    }

    return added;
  }

  contains(point) {
    const delta = this.brush.width / 2; // Handle simple cases.

    if (this.points.length === 0) {
      return false;
    } else if (this.points.length === 1) {
      return this.points[0].distance(point) <= delta;
    } // One of these lines must be crossed by a segment of our stroke.


    const l1 = new _geometry_line__WEBPACK_IMPORTED_MODULE_2__.Line(point.x + delta, point.y + delta, point.x - delta, point.y - delta);
    const l2 = new _geometry_line__WEBPACK_IMPORTED_MODULE_2__.Line(point.x - delta, point.y + delta, point.x + delta, point.y - delta);
    let index = 0;
    let p1 = this.points[index++];
    let p2 = null;
    let segment = null;

    while (index < this.points.length) {
      p2 = this.points[index++];
      segment = new _geometry_line__WEBPACK_IMPORTED_MODULE_2__.Line(p1.x, p1.y, p2.x, p2.y);

      if (segment.intersects(l1)) {
        return true;
      }

      if (segment.intersects(l2)) {
        return true;
      }

      p1 = p2;
    }

    return false;
  }

  intersects(rect) {
    // Handle simple cases.
    if (this.points.length === 0) {
      return false;
    } else if (this.points.length === 1) {
      return rect.containsPoint(this.points[0]);
    }

    let index = 0;
    let p1 = this.points[index++];
    let p2 = null;

    while (index < this.points.length) {
      p2 = this.points[index++];

      if (rect.intersectsLine(p1.x, p1.y, p2.x, p2.y)) {
        return true;
      }

      p1 = p2;
    }

    return false;
  }

  updateBounds() {
    const x = this.minPoint.x;
    const y = this.minPoint.y;
    const width = this.maxPoint.x - this.minPoint.x;
    const height = this.maxPoint.y - this.minPoint.y;
    this.bounds.set(x, y, width, height);
  }

  clone() {
    const shape = new StrokeShape(this.handle, this.brush.clone());
    shape.bounds.set(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    shape.setKeyEvent(this.getKeyEvent());
    shape.setSelected(this.isSelected());

    for (let point of this.points) {
      shape.points.push(point.clone());
    }

    return shape;
  }

}



/***/ }),

/***/ 8153:
/*!*****************************************************!*\
  !*** ./src/app/model/shape/text-highlight.shape.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextHighlightShape": () => (/* binding */ TextHighlightShape)
/* harmony export */ });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ 9112);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);



class TextHighlightShape extends _shape__WEBPACK_IMPORTED_MODULE_0__.Shape {
  constructor(shapeHandle, color) {
    super(shapeHandle);
    this.color = color;
  }

  addTextBounds(rect) {
    if (this.bounds.isEmpty()) {
      this.bounds.set(rect.x, rect.y, rect.width, rect.height);
    } else {
      this.bounds.union(rect);
    }

    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getColor() {
    return this.color;
  }

  contains(point) {
    return this.bounds.containsPoint(point);
  }

  intersects(rect) {
    return this.bounds.intersection(rect) != null;
  }

  clone() {
    const shape = new TextHighlightShape(this.handle, this.color);
    shape.setKeyEvent(this.getKeyEvent());
    return shape;
  }

  updateBounds() {// No-op
  }

}



/***/ }),

/***/ 7890:
/*!*******************************************!*\
  !*** ./src/app/model/shape/text.shape.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextShape": () => (/* binding */ TextShape)
/* harmony export */ });
/* harmony import */ var _typesetting_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typesetting.shape */ 760);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);
/* harmony import */ var _geometry_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../geometry/point */ 6374);




class TextShape extends _typesetting_shape__WEBPACK_IMPORTED_MODULE_0__.TypesettingShape {
  setFont(font) {
    if (this.font && this.font.equals(font)) {
      return;
    }

    this.font = font;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getFont() {
    return this.font;
  }

  clone() {
    const shape = new TextShape(this.handle);
    shape.setLocation(new _geometry_point__WEBPACK_IMPORTED_MODULE_2__.Point(this.bounds.x, this.bounds.y));
    shape.setFont(this.font);
    shape.setTextColor(this.getTextColor());
    shape.setTextAttributes(new Map(this.getTextAttributes()));
    return shape;
  }

}



/***/ }),

/***/ 760:
/*!**************************************************!*\
  !*** ./src/app/model/shape/typesetting.shape.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TypesettingShape": () => (/* binding */ TypesettingShape)
/* harmony export */ });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ 9112);
/* harmony import */ var _shape_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape-event */ 6858);



class TypesettingShape extends _shape__WEBPACK_IMPORTED_MODULE_0__.Shape {
  setText(text) {
    if (this.text === text) {
      return;
    }

    this.text = text;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getText() {
    return this.text;
  }

  setTextColor(color) {
    if (this.textColor && this.textColor.equals(color)) {
      return;
    }

    this.textColor = color;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getTextColor() {
    return this.textColor;
  }

  setTextAttributes(attributes) {
    //if (this.textAttributes.equals(attributes)) {
    //	return;
    //}
    this.textAttributes = new Map(attributes);
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
  }

  getTextAttributes() {
    return this.textAttributes;
  }

  isUnderline() {
    var _a;

    return (_a = this.textAttributes.get("underline")) !== null && _a !== void 0 ? _a : false;
  }

  isStrikethrough() {
    var _a;

    return (_a = this.textAttributes.get("strikethrough")) !== null && _a !== void 0 ? _a : false;
  }

  setLocation(point) {
    if (this.bounds.x === point.x && this.bounds.y === point.y) {
      return false;
    }

    this.bounds.x = point.x;
    this.bounds.y = point.y;
    this.fireShapeEvent(new _shape_event__WEBPACK_IMPORTED_MODULE_1__.ShapeEvent(this, this.bounds));
    return true;
  }

  updateBounds() {}

}



/***/ }),

/***/ 4206:
/*!*******************************************!*\
  !*** ./src/app/model/shape/zoom.shape.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomShape": () => (/* binding */ ZoomShape)
/* harmony export */ });
/* harmony import */ var _form_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.shape */ 9550);


class ZoomShape extends _form_shape__WEBPACK_IMPORTED_MODULE_0__.FormShape {
  constructor() {
    super(0, null);
  }

  updateBounds() {
    super.updateBounds(); // Keep aspect ratio with width bias.

    const width = this.bounds.width;
    const height = Math.abs(width * 3.0 / 4.0) * Math.sign(this.bounds.height);
    this.bounds.height = height;
  }

}



/***/ }),

/***/ 7477:
/*!**********************************************!*\
  !*** ./src/app/model/whiteboard.document.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WhiteboardDocument": () => (/* binding */ WhiteboardDocument)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page */ 4570);
/* harmony import */ var _document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./document */ 8079);
/* harmony import */ var _render_whiteboard_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/whiteboard.renderer */ 6578);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geometry/rectangle */ 7723);






class WhiteboardDocument extends _document__WEBPACK_IMPORTED_MODULE_2__.SlideDocument {
  constructor() {
    super();
    this.renderer = new _render_whiteboard_renderer__WEBPACK_IMPORTED_MODULE_3__.WhiteboardRenderer();
    this.loadPages();
  }

  getPageBounds(pageNumber) {
    return new Promise(resolve => {
      resolve(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle(0, 0, 640, 480));
    });
  }

  getPageText(pageNumber) {
    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return Promise.resolve("");
    })();
  }

  renderPage(pageNumber, context, viewRect, dirtyRegion) {
    return this.renderer.render(context, viewRect, dirtyRegion);
  }

  renderPageText(pageNumber, root, size, viewRect) {// No-op
  }

  loadPages() {
    this.pages = [];

    for (let i = 0; i < 300; i++) {
      this.pages.push(new _page__WEBPACK_IMPORTED_MODULE_1__.Page(this, i));
    }
  }

}



/***/ }),

/***/ 7513:
/*!**********************************************!*\
  !*** ./src/app/pages/home/home.component.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HomeComponent": () => (/* binding */ HomeComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ 4202);


let HomeComponent = /*#__PURE__*/(() => {
  class HomeComponent {
    constructor(router) {
      this.router = router;
    }

    ngOnInit() {}

    buttonPressed() {
      this.router.navigate(['/course/1']);
    }

  }

  HomeComponent.ɵfac = function HomeComponent_Factory(t) {
    return new (t || HomeComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_1__.Router));
  };

  HomeComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: HomeComponent,
    selectors: [["app-home"]],
    decls: 11,
    vars: 0,
    consts: [["placeholder", "Room ID"], ["placeholder", "Room Password"], ["placeholder", "Your name"], [3, "click"]],
    template: function HomeComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](0, "Please enter your room details.");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "br")(2, "br")(3, "input", 0)(4, "br")(5, "input", 1)(6, "br")(7, "input", 2)(8, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "button", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function HomeComponent_Template_button_click_9_listener() {
          return ctx.buttonPressed();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](10, "Join Room");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    },
    styles: [""]
  });
  return HomeComponent;
})();

/***/ }),

/***/ 3500:
/*!**************************************************!*\
  !*** ./src/app/pages/player/player.component.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlayerComponent": () => (/* binding */ PlayerComponent)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../action/stream.page.selected.action */ 1);
/* harmony import */ var _action_page_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../action/page.action */ 8078);
/* harmony import */ var _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../action/stream.document.selected.action */ 3239);
/* harmony import */ var _action_stream_playback_action__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../action/stream.playback.action */ 4725);
/* harmony import */ var _action_stream_document_closed_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../action/stream.document.closed.action */ 2726);
/* harmony import */ var _model_whiteboard_document__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../model/whiteboard.document */ 7477);
/* harmony import */ var _action_stream_document_created_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../action/stream.document.created.action */ 6806);
/* harmony import */ var _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../action/parser/stream.action.parser */ 1317);
/* harmony import */ var _action_parser_progressive_data_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../action/parser/progressive-data-view */ 8843);
/* harmony import */ var _services_course_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/course.service */ 6102);
/* harmony import */ var _services_playback_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../services/playback.service */ 8818);
/* harmony import */ var _model_playback_model__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../model/playback-model */ 90);
/* harmony import */ var _components_document_view_document_view_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/document-view/document-view.component */ 3144);
/* harmony import */ var _components_settings_settings_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../components/settings/settings.component */ 6577);
/* harmony import */ var _model_document_type__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../model/document.type */ 8538);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _services_janus_janus_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../services/janus/janus.service */ 465);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/router */ 4202);
/* harmony import */ var _services_select_overlay_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../services/select-overlay.service */ 6148);
/* harmony import */ var _ngneat_dialog__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @ngneat/dialog */ 9087);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/common/http */ 520);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _components_gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../components/gallery-view/gallery-view.component */ 8149);
/* harmony import */ var _components_speaker_view_speaker_view_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../components/speaker-view/speaker-view.component */ 9662);
/* harmony import */ var _components_menubar_menubar_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../components/menubar/menubar.component */ 1511);
/* harmony import */ var _components_menubar_menubar_buttongroup_menubar_buttongroup_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../components/menubar/menubar-buttongroup/menubar-buttongroup.component */ 7703);
/* harmony import */ var _components_menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../components/menubar/menubar-button/menubar-button.component */ 6604);
/* harmony import */ var _components_select_overlay_select_overlay_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../components/select-overlay/select-overlay.component */ 8726);






























const _c0 = ["slideView"];
const _c1 = ["fileInput"];

function PlayerComponent_app_gallery_view_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "app-gallery-view", 2);
  }

  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("cameraStreams", ctx_r0.videoStreams);
  }
}

function PlayerComponent_app_speaker_view_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "app-speaker-view", 2);
  }

  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("cameraStreams", ctx_r1.videoStreams);
  }
}

function PlayerComponent_ng_container_18_audio_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "audio", 16);
  }

  if (rf & 2) {
    const audioStream_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("srcObject", audioStream_r5.stream);
  }
}

function PlayerComponent_ng_container_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, PlayerComponent_ng_container_18_audio_1_Template, 1, 1, "audio", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerEnd"]();
  }

  if (rf & 2) {
    const audioStream_r5 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", !ctx_r3.janusService.locallyMutedRemoteAudioFeeds[audioStream_r5.feedId]);
  }
}

let PlayerComponent = /*#__PURE__*/(() => {
  class PlayerComponent {
    constructor(janusService, router, selectOverlayService, activatedRoute, dialog, http) {
      var _this = this;

      var _a;

      this.janusService = janusService;
      this.router = router;
      this.selectOverlayService = selectOverlayService;
      this.activatedRoute = activatedRoute;
      this.dialog = dialog;
      this.http = http;
      this.chosenViewMode = 'gallery';
      this.prevViewMode = 'gallery';
      this.screenShareActive = false;
      this.availableViewModes = {
        gallery: 'Gallery view',
        speaker: 'Speaker view',
        document: 'Document view'
      };

      this.showAvailableMicrophones = event => {
        this.selectOverlayService.trigger(event, Object.keys(this.janusService.audioDevices).map(e => {
          return {
            key: e,
            value: this.janusService.audioDevices[e]
          };
        }), selectedOption => {
          this.janusService.selectAudioDevice(selectedOption.key);
        }, this.janusService.currentlyChosenOverrideAudioDeviceId);
      };

      this.showAvailableCameras = event => {
        this.selectOverlayService.trigger(event, Object.keys(this.janusService.videoDevices).map(e => {
          return {
            key: e,
            value: this.janusService.videoDevices[e]
          };
        }), selectedOption => {
          this.janusService.selectVideoDevice(selectedOption.key);
        }, this.janusService.currentlyChosenOverrideVideoDeviceId);
      };

      this.showAvailableViewModes = event => {
        const options = [{
          key: "gallery",
          value: this.availableViewModes.gallery
        }, {
          key: "speaker",
          value: this.availableViewModes.speaker
        }];

        if (_services_playback_service__WEBPACK_IMPORTED_MODULE_11__.PlaybackService.getInstance().renderController) {
          options.push({
            key: "document",
            value: this.availableViewModes.document
          });
        }

        this.selectOverlayService.trigger(event, options, selectedOption => {
          this.chosenViewMode = selectedOption.key;
        }, this.chosenViewMode);
      };

      this.openDocumentView = /*#__PURE__*/function () {
        var _ref = (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (event) {
          // Ask user what kind of document to open
          const options = [{
            key: "pdf",
            value: 'Upload a PDF file'
          }, {
            key: "whiteboard",
            value: "Open a blank whiteboard"
          }]; // Also has to know about currently open documents

          console.log('Open docs: ', _this.playbackService.getDocuments());

          for (const [docId, doc] of _this.playbackService.getDocuments().entries()) {
            options.push({
              key: `opendoc_${docId}`,
              value: `${docId}`
            });
          }

          _this.selectOverlayService.trigger(event, options, selectedOption => {
            if (selectedOption.key === "pdf") {
              _this.fileInput.nativeElement.click();
            } else if (selectedOption.key === "whiteboard") {
              // Open whiteboard
              const documentCreateAction = new _action_stream_document_created_action__WEBPACK_IMPORTED_MODULE_7__.StreamDocumentCreatedAction(BigInt(1), _model_document_type__WEBPACK_IMPORTED_MODULE_15__.DocumentType.WHITEBOARD, '', '');
              console.log('Action: ', documentCreateAction);
              const parsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(documentCreateAction);

              _this.janusService.sendData(parsed);

              const whiteboardDocument = new _model_whiteboard_document__WEBPACK_IMPORTED_MODULE_6__.WhiteboardDocument();
              whiteboardDocument.setDocumentId(BigInt(1));

              _this.playbackService.addDocument(whiteboardDocument);

              _this.playbackService.selectDocument(BigInt(1));

              const pageAction = new _action_page_action__WEBPACK_IMPORTED_MODULE_2__.PageAction(0);
              pageAction.timestamp = 0;

              _this.playbackService.addAction(pageAction); // Send open instruction


              const docSeletedAction = new _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction(BigInt(1), _model_document_type__WEBPACK_IMPORTED_MODULE_15__.DocumentType.WHITEBOARD, '', '');
              const parsedSelectionAction = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(docSeletedAction);

              _this.janusService.sendData(parsedSelectionAction); // Send page selection instruction


              const documentSelectedAction = new _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__.StreamPageSelectedAction(BigInt(1), 0);
              const docSelParsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(documentSelectedAction);

              _this.janusService.sendData(docSelParsed);

              _this.chosenViewMode = 'document';
              /*const testAction = new PointerAction(0, new Brush(new Color(0,0,0,0), 1));
                   console.log("Created ZoomAction", testAction);
                   const ajwhdhbvujawdhj = ActionParser.parseActionToBinary(testAction);
              this.janusService.sendData(ajwhdhbvujawdhj);*/
            } else if (selectedOption.key.includes('opendoc')) {
              const docId = selectedOption.key.split('_')[1];

              _this.playbackService.selectDocument(BigInt(docId)); // Send open instruction


              const docSeletedAction = new _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction(BigInt(docId), _model_document_type__WEBPACK_IMPORTED_MODULE_15__.DocumentType.WHITEBOARD, '', '');
              const parsedSelectionAction = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(docSeletedAction);

              _this.janusService.sendData(parsedSelectionAction);

              const pageAction = new _action_page_action__WEBPACK_IMPORTED_MODULE_2__.PageAction(0);
              pageAction.timestamp = 0;

              _this.playbackService.addAction(pageAction);

              const documentSelectedAction = new _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__.StreamPageSelectedAction(BigInt(1), 0);
              const docSelParsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(documentSelectedAction);

              _this.janusService.sendData(docSelParsed);
            }
          });
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }(); // @ts-ignore


      this.janusService.myRoomId = (_a = Number(this.activatedRoute.snapshot.params.courseId)) !== null && _a !== void 0 ? _a : 1;
      console.log('Read room id: ', this.janusService.myRoomId);
      this.courseStateService = new _services_course_service__WEBPACK_IMPORTED_MODULE_10__.CourseStateService("");
      this.playbackModel = new _model_playback_model__WEBPACK_IMPORTED_MODULE_12__.PlaybackModel();
      this.playbackService = new _services_playback_service__WEBPACK_IMPORTED_MODULE_11__.PlaybackService(this.playbackModel);
    }

    ngOnInit() {
      this.janusService.start();
      this.janusService.setOnData(data => {
        if (data instanceof Blob) {
          // Firefox...
          data.arrayBuffer().then(buffer => {
            this.processData(buffer);
          });
        } else {
          this.processData(data);
        }
      });
      document.addEventListener('click', () => {
        this.selectOverlayService.hideAll();
      });
      this.janusService.screenshareStateSubject.subscribe(val => {
        if (val === "start") {
          if (!this.screenShareActive) {
            this.prevViewMode = this.chosenViewMode;
            this.chosenViewMode = 'speaker';
            this.screenShareActive = true;
          }
        } else {
          if (this.screenShareActive) {
            this.chosenViewMode = this.prevViewMode;
            this.screenShareActive = false;
          }
        }
      });
      this.courseStateService.getCourseState(this.janusService.myRoomId || 0).then(courseState => {
        console.log("Course state", courseState); // Load all initially opened documents.

        const promises = [];

        try {
          for (const value of Object.values(courseState.documentMap)) {
            const promise = this.courseStateService.getStateDocument(this.janusService.myRoomId || 0, value);
            promises.push(promise);
          }

          if (promises.length === 0) {// this.playbackService.initialize(this.slideView, courseState, [], BigInt(0));
          }
        } catch (e) {
          console.log('CourseState documentMap is probably empty.', e);
        }

        Promise.all(promises).then(documents => {
          // console.log(documents);
          try {
            // this.setDocuments(courseState, documents);
            this.playbackService.initialize(this.slideView, courseState, documents, BigInt(0));
          } catch (e) {
            console.log('Error initializing: ', e);
            return;
          }
        }).catch(error => {
          console.log('Error initializing 2: ', error);
        });
      }).catch(e => {
        console.error('Error getting course state: ', e);
      });
    }

    ngOnDestroy() {
      this.janusService.end();
    }

    ngAfterViewInit() {// @ts-ignore
      // this.playbackService.initialize(this.slideView, {}, [], 0);
    }

    get audioStreams() {
      return Object.values(this.janusService.remoteTracks).filter(e => e.stream.getAudioTracks().length > 0);
    }

    get videoStreams() {
      return Object.values(Object.assign(Object.assign({}, this.janusService.remoteTracks), this.janusService.localTracks)).filter(e => e.stream.getVideoTracks().length > 0);
    }

    leave() {
      try {
        this.janusService.end();
      } catch (e) {
        console.log('Could not end janus session: ', e);
      }

      document.location.href = '';
    }

    openSettingsDialog() {
      const dialogRef = this.dialog.open(_components_settings_settings_component__WEBPACK_IMPORTED_MODULE_14__.SettingsComponent);
    }

    onFileInputChange(changeEvent) {
      var _this2 = this;

      return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        const selectedFile = _this2.fileInput.nativeElement.files[0];
        console.log('Selected file: ', selectedFile);
        const formData = new FormData();
        formData.append("file", selectedFile, selectedFile.name);

        _this2.http.post('/course/file/upload', formData, {
          responseType: 'text' // headers: new HttpHeaders({
          //     "ApiKey": "4W3ImBmZoJbyDx4LfjVZXYkreYjLoCLO"
          // })

        }).subscribe(ret => {
          console.log('Gotten link: ', ret);
          const documentCreateAction = new _action_stream_document_created_action__WEBPACK_IMPORTED_MODULE_7__.StreamDocumentCreatedAction(BigInt(0), _model_document_type__WEBPACK_IMPORTED_MODULE_15__.DocumentType.PDF, selectedFile.name, ret);
          console.log('Action: ', documentCreateAction);
          const parsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(documentCreateAction);

          _this2.janusService.sendData(parsed);

          _this2.processData(parsed); // TODO do this properly! This is a quick workaround for testing purposes


          const docSeletedAction = new _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction(BigInt(0), _model_document_type__WEBPACK_IMPORTED_MODULE_15__.DocumentType.PDF, selectedFile.name, ret);
          const parsedSelectionAction = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(docSeletedAction);

          _this2.janusService.sendData(parsedSelectionAction);

          _this2.processData(parsedSelectionAction);

          const documentSelectedAction = new _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__.StreamPageSelectedAction(BigInt(0), 0);
          const docSelParsed = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parseActionToBinary(documentSelectedAction);

          _this2.janusService.sendData(docSelParsed);

          _this2.processData(docSelParsed);
        });
      })();
    }

    processData(data) {
      if (!this.janusService.myRoomId) {
        return;
      }

      const dataView = new _action_parser_progressive_data_view__WEBPACK_IMPORTED_MODULE_9__.ProgressiveDataView(data);
      const length = dataView.getInt32();
      const type = dataView.getInt8();
      const action = _action_parser_stream_action_parser__WEBPACK_IMPORTED_MODULE_8__.StreamActionParser.parse(dataView, type, length);
      console.log('Stream action parsing: ', action);

      if (action instanceof _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction) {
        if (!this.bufferAction(action, action.documentId)) {
          this.playbackService.selectDocument(action.documentId);
        }
      } else if (action instanceof _action_stream_document_created_action__WEBPACK_IMPORTED_MODULE_7__.StreamDocumentCreatedAction) {
        if (action.documentType === 1) {
          const slideDoc = new _model_whiteboard_document__WEBPACK_IMPORTED_MODULE_6__.WhiteboardDocument();
          slideDoc.setDocumentId(action.documentId);
          this.playbackService.addDocument(slideDoc);
        } else {
          this.streamActionBuffer = {
            bufferedActions: [],
            docId: BigInt(action.documentId)
          };
          const stateDoc = {
            activePage: null,
            documentFile: action.documentFile,
            documentId: action.documentId,
            documentName: action.documentTitle,
            pages: null,
            type: "pdf"
          };
          this.courseStateService.getStateDocument(this.janusService.myRoomId, stateDoc).then(doc => {
            this.playbackService.addDocument(doc);
            this.flushActionBuffer(doc.getDocumentId());
          }).catch(error => {
            console.error(error);
          });
        }
      } else if (action instanceof _action_stream_document_closed_action__WEBPACK_IMPORTED_MODULE_5__.StreamDocumentClosedAction) {
        this.playbackService.removeDocument(action.documentId);
      } else if (action instanceof _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__.StreamPageSelectedAction) {
        if (!this.bufferAction(action, action.documentId)) {
          const pageAction = new _action_page_action__WEBPACK_IMPORTED_MODULE_2__.PageAction(action.pageNumber);
          pageAction.timestamp = 0;
          this.playbackService.addAction(pageAction);
          this.chosenViewMode = 'document';
        }
      } else if (action instanceof _action_stream_playback_action__WEBPACK_IMPORTED_MODULE_4__.StreamPagePlaybackAction) {
        if (!this.bufferAction(action, action.documentId)) {
          this.playbackService.addAction(action.action);
        }
      }
    }

    bufferAction(action, docId) {
      if (this.streamActionBuffer && this.streamActionBuffer.docId === BigInt(docId)) {
        this.streamActionBuffer.bufferedActions.push(action);
        return true;
      }

      return false;
    }

    flushActionBuffer(docId) {
      if (this.streamActionBuffer && this.streamActionBuffer.docId === BigInt(docId)) {
        this.streamActionBuffer.bufferedActions.forEach(action => {
          if (action instanceof _action_stream_document_selected_action__WEBPACK_IMPORTED_MODULE_3__.StreamDocumentSelectedAction) {
            this.playbackService.selectDocument(action.documentId);
          } else if (action instanceof _action_stream_page_selected_action__WEBPACK_IMPORTED_MODULE_1__.StreamPageSelectedAction) {
            const pageAction = new _action_page_action__WEBPACK_IMPORTED_MODULE_2__.PageAction(action.pageNumber);
            pageAction.timestamp = 0;
            this.playbackService.addAction(pageAction);
            this.chosenViewMode = 'document';
          } else if (action instanceof _action_stream_playback_action__WEBPACK_IMPORTED_MODULE_4__.StreamPagePlaybackAction) {
            this.playbackService.addAction(action.action);
          }
        });
      }

      this.streamActionBuffer = null;
    }

  }

  PlayerComponent.ɵfac = function PlayerComponent_Factory(t) {
    return new (t || PlayerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_services_janus_janus_service__WEBPACK_IMPORTED_MODULE_16__.JanusService), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_25__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_services_select_overlay_service__WEBPACK_IMPORTED_MODULE_17__.SelectOverlayService), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_25__.ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_ngneat_dialog__WEBPACK_IMPORTED_MODULE_26__.DialogService), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_27__.HttpClient));
  };

  PlayerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdefineComponent"]({
    type: PlayerComponent,
    selectors: [["app-player"]],
    viewQuery: function PlayerComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵviewQuery"](_c0, 5, _components_document_view_document_view_component__WEBPACK_IMPORTED_MODULE_13__.DocumentViewComponent);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵviewQuery"](_c1, 5);
      }

      if (rf & 2) {
        let _t;

        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵloadQuery"]()) && (ctx.slideView = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵloadQuery"]()) && (ctx.fileInput = _t.first);
      }
    },
    decls: 21,
    vars: 14,
    consts: [["xmlns", "http://www.w3.org/1999/html", 1, "conferenceContainer"], [3, "cameraStreams", 4, "ngIf"], [3, "cameraStreams"], ["slideView", ""], ["caption", "Microphone off", "captionHighlightedToggleState", "Microphone on", "matIconName", "mic", "matIconNameHighlightedToggleState", "mic_off", 3, "highlightToggleStateActive", "subButtonClickAction", "clicked"], ["caption", "Camera off", "captionHighlightedToggleState", "Camera on", "matIconName", "videocam", "matIconNameHighlightedToggleState", "videocam_off", 3, "highlightToggleStateActive", "subButtonClickAction", "clicked"], ["caption", "Screenshare", "captionHighlightedToggleState", "Screenshare", "matIconName", "screen_share", "matIconNameHighlightedToggleState", "stop_screen_share", 3, "highlightToggleStateActive", "clicked"], ["caption", "Documents", "matIconName", "edit", 3, "clickAction"], ["caption", "View mode", "matIconName", "image", 3, "clickAction"], ["caption", "Settings", "matIconName", "settings", 3, "clicked"], ["captionHighlightedToggleState", "Leave", "matIconNameHighlightedToggleState", "exit_to_app", 3, "highlightToggleStateActive", "clicked"], [1, "not-rendered"], [4, "ngFor", "ngForOf"], ["type", "file", "id", "input", 1, "fileInput", 3, "change"], ["fileInput", ""], ["autoplay", "", 3, "srcObject", 4, "ngIf"], ["autoplay", "", 3, "srcObject"]],
    template: function PlayerComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, PlayerComponent_app_gallery_view_1_Template, 1, 1, "app-gallery-view", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, PlayerComponent_app_speaker_view_2_Template, 1, 1, "app-speaker-view", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](3, "app-document-view", 2, 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](5, "app-menubar")(6, "app-menubar-buttongroup")(7, "app-menubar-button", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("clicked", function PlayerComponent_Template_app_menubar_button_clicked_7_listener() {
          return ctx.janusService.toggleMute();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](8, "app-menubar-button", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("clicked", function PlayerComponent_Template_app_menubar_button_clicked_8_listener() {
          return ctx.janusService.toggleCamera();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](9, "app-menubar-buttongroup")(10, "app-menubar-button", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("clicked", function PlayerComponent_Template_app_menubar_button_clicked_10_listener() {
          return ctx.janusService.toggleScreenshare();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](11, "app-menubar-button", 7)(12, "app-menubar-button", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](13, "app-menubar-buttongroup")(14, "app-menubar-button", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("clicked", function PlayerComponent_Template_app_menubar_button_clicked_14_listener() {
          return ctx.openSettingsDialog();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](15, "app-menubar-button", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("clicked", function PlayerComponent_Template_app_menubar_button_clicked_15_listener() {
          return ctx.leave();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](16, "app-select-overlay");
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](17, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](18, PlayerComponent_ng_container_18_Template, 2, 1, "ng-container", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](19, "input", 13, 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("change", function PlayerComponent_Template_input_change_19_listener($event) {
          return ctx.onFileInputChange($event);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx.chosenViewMode === "gallery");
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx.chosenViewMode === "speaker");
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵstyleProp"]("display", ctx.chosenViewMode !== "document" ? "none" : "");
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("cameraStreams", ctx.videoStreams);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("highlightToggleStateActive", ctx.janusService.isMuted)("subButtonClickAction", ctx.showAvailableMicrophones);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("highlightToggleStateActive", ctx.janusService.isVideoMuted)("subButtonClickAction", ctx.showAvailableCameras);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("highlightToggleStateActive", ctx.janusService.myScreenshareIsActive);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("clickAction", ctx.openDocumentView);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("clickAction", ctx.showAvailableViewModes);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("highlightToggleStateActive", true);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngForOf", ctx.audioStreams);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_28__.NgIf, _components_gallery_view_gallery_view_component__WEBPACK_IMPORTED_MODULE_18__.GalleryViewComponent, _components_speaker_view_speaker_view_component__WEBPACK_IMPORTED_MODULE_19__.SpeakerViewComponent, _components_document_view_document_view_component__WEBPACK_IMPORTED_MODULE_13__.DocumentViewComponent, _components_menubar_menubar_component__WEBPACK_IMPORTED_MODULE_20__.MenubarComponent, _components_menubar_menubar_buttongroup_menubar_buttongroup_component__WEBPACK_IMPORTED_MODULE_21__.MenubarButtongroupComponent, _components_menubar_menubar_button_menubar_button_component__WEBPACK_IMPORTED_MODULE_22__.MenubarButtonComponent, _components_select_overlay_select_overlay_component__WEBPACK_IMPORTED_MODULE_23__.SelectOverlayComponent, _angular_common__WEBPACK_IMPORTED_MODULE_28__.NgForOf],
    styles: ["body[_ngcontent-%COMP%] {\n  background: #222222;\n  overflow: hidden;\n}\n\n.conferenceContainer[_ngcontent-%COMP%] {\n  background-color: #333;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: hidden;\n  max-height: 100vh;\n  height: 100%;\n  width: 100%;\n}\n\n.videoFeedContainer[_ngcontent-%COMP%] {\n  background: #222222;\n  flex: 1;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(min(33.3333333333%, max(64px, 20%)), 1fr));\n  grid-auto-columns: min-content;\n  align-items: center;\n  max-height: 90vh;\n}\n\n.videoContainer[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  aspect-ratio: 4/3;\n}\n\nvideo[_ngcontent-%COMP%] {\n  object-fit: contain;\n  border-radius: 0.75em;\n  overflow: hidden;\n  max-height: 90vh;\n  border: 2px solid transparent;\n}\n\n.isTalking[_ngcontent-%COMP%] {\n  border-color: lawngreen;\n}\n\n.not-rendered[_ngcontent-%COMP%] {\n  visibility: hidden;\n  display: none;\n}"]
  });
  return PlayerComponent;
})();

/***/ }),

/***/ 5035:
/*!********************************!*\
  !*** ./src/app/paint/brush.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Brush": () => (/* binding */ Brush)
/* harmony export */ });
/* harmony import */ var _paint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint */ 8224);


class Brush extends _paint__WEBPACK_IMPORTED_MODULE_0__.Paint {
  constructor(color, width) {
    super(color);
    this.width = width;
  }

  clone() {
    return new Brush(this.color, this.width);
  }

}



/***/ }),

/***/ 6428:
/*!********************************!*\
  !*** ./src/app/paint/color.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Color": () => (/* binding */ Color)
/* harmony export */ });
const RGB_COLOR_REGEX = /\((\d+),\s*(\d+),\s*(\d+)(,\s*(\d*.\d*))?\)/;

class Color {
  constructor(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a || 1;
  }

  toHex() {
    return '#' + this.r.toString(16) + this.g.toString(16) + this.b.toString(16);
  }

  toRgb() {
    return `rgb(${this.r}, ${this.g}, ${this.b})`;
  }

  toRgba() {
    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;
  }

  toAlpha(alpha) {
    return `rgba(${this.r}, ${this.g}, ${this.b}, ${alpha})`;
  }

  equals(other) {
    return this.a === other.a && this.r === other.r && this.g === other.g && this.b === other.b;
  }

  static fromHex(hex) {
    let s = hex.trim();

    if (s.indexOf('#') !== 0) {
      throw new Error("Not a hex color representation");
    }

    s = s.substr(s.indexOf('#') + 1);
    const r = parseInt(s.substr(0, 2), 16);
    const g = parseInt(s.substr(2, 2), 16);
    const b = parseInt(s.substr(4, 2), 16);
    return new Color(r, g, b);
  }

  static fromRGBString(hex) {
    let s = hex.trim();

    if (s.indexOf('rgb') !== 0) {
      throw new Error("Not a rgb color representation");
    }

    const res = RGB_COLOR_REGEX.exec(s);

    if (res) {
      const r = parseInt(res[1], 10);
      const g = parseInt(res[2], 10);
      const b = parseInt(res[3], 10);
      const a = res[5] ? parseFloat(res[5]) : 1;
      return new Color(r, g, b, a);
    }

    return null;
  }

  static fromRGBNumber(rgba) {
    const a = (rgba >> 24 & 0xFF) / 0xFF;
    const r = rgba >> 16 & 0xFF;
    const g = rgba >> 8 & 0xFF;
    const b = rgba & 0xFF;
    return new Color(r, g, b, a);
  }

}



/***/ }),

/***/ 8783:
/*!*******************************!*\
  !*** ./src/app/paint/font.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Font": () => (/* binding */ Font)
/* harmony export */ });
class Font {
  constructor(family, size, style, weight) {
    this.family = family;
    this.size = size;

    if (style) {
      this.style = style;
    }

    if (weight) {
      this.weight = weight;
    }
  }

  equals(other) {
    if (!other) {
      return false;
    }

    if (this === other) {
      return true;
    }

    return this.family === other.family && this.size === other.size && this.style === other.style && this.weight === other.weight;
  }

  toString() {
    let str = this.size + "px " + this.family;

    if (this.weight) {
      str = this.weight + " " + str;
    }

    if (this.style) {
      str = this.style + " " + str;
    }

    return str;
  }

}



/***/ }),

/***/ 8224:
/*!********************************!*\
  !*** ./src/app/paint/paint.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Paint": () => (/* binding */ Paint)
/* harmony export */ });
class Paint {
  constructor(color) {
    this.color = color;
  }

}



/***/ }),

/***/ 2758:
/*!******************************************!*\
  !*** ./src/app/render/arrow.renderer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrowRenderer": () => (/* binding */ ArrowRenderer)
/* harmony export */ });
class ArrowRenderer {
  render(context, shape, dirtyRegion) {
    const p0 = shape.points[0];
    const p1 = shape.points[1];

    if (!p0 || !p1) {
      return;
    }

    const keyEvent = shape.getKeyEvent();
    const brush = shape.brush;
    context.save();
    this.createArrowPath(context, keyEvent, p0, p1, brush.width);
    context.fillStyle = brush.color.toRgba();
    context.fill();
    context.restore();

    if (shape.isSelected()) {
      // @ts-ignore
      const scale = context.getTransformExt().getScaleX();
      this.createArrowPath(context, keyEvent, p0, p1, brush.width);
      context.strokeStyle = "rgb(255, 0, 100)";
      context.lineWidth = 2 / scale;
      context.setLineDash([5 / scale]);
      context.stroke();
    }
  }

  createArrowPath(context, keyEvent, p1, p2, width) {
    const bold = keyEvent != null && keyEvent.altKey;
    const twoSided = keyEvent != null && keyEvent.shiftKey;
    const x1 = p1.x;
    const y1 = p1.y;
    const x2 = p2.x;
    const y2 = p2.y;
    const w = bold ? width * 2 : width;
    const wd = w / 2;
    const dx = x2 - x1;
    const dy = y2 - y1;
    const angle = Math.atan2(dy, dx);
    const length = Math.sqrt(dx * dx + dy * dy);
    const arrowRatio = 0.5;
    const arrowLength = w * 5;
    const waisting = 0.35;
    const veeX = length - w * 0.5 / arrowRatio;
    const waistX = length - arrowLength * 0.5;
    const waistY = arrowRatio * arrowLength * 0.5 * waisting;
    const arrowWidth = arrowRatio * arrowLength;
    const x = twoSided ? w * 0.5 / arrowRatio + arrowLength * 0.75 : 0;
    context.translate(x1, y1);
    context.rotate(angle);
    context.beginPath();
    context.moveTo(x, -wd);
    context.lineTo(veeX - arrowLength * 0.75, -wd);
    context.lineTo(veeX - arrowLength, -arrowWidth);
    context.quadraticCurveTo(waistX, -waistY, length, 0);
    context.quadraticCurveTo(waistX, waistY, veeX - arrowLength, arrowWidth);
    context.lineTo(veeX - arrowLength * 0.75, wd);
    context.lineTo(x, wd);

    if (twoSided) {
      const waistX = x - arrowLength * 0.5;
      const waistY = arrowRatio * arrowLength * 0.5 * waisting;
      context.lineTo(x + arrowLength * 0.25, arrowWidth);
      context.quadraticCurveTo(waistX, waistY, 0, 0);
      context.quadraticCurveTo(waistX, -waistY, x + arrowLength * 0.25, -arrowWidth);
    }

    context.closePath();
  }

}



/***/ }),

/***/ 2459:
/*!********************************************!*\
  !*** ./src/app/render/ellipse.renderer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EllipseRenderer": () => (/* binding */ EllipseRenderer)
/* harmony export */ });
class EllipseRenderer {
  render(context, shape, dirtyRegion) {
    const p0 = shape.points[0];
    const p1 = shape.points[1];

    if (!p0 || !p1) {
      return;
    }

    const keyEvent = shape.getKeyEvent();
    const brush = shape.brush;
    const color = brush.color.toRgba();
    const fill = keyEvent && keyEvent.altKey;
    const minX = Math.min(p0.x, p1.x);
    const minY = Math.min(p0.y, p1.y);
    const maxX = Math.max(p0.x, p1.x);
    const maxY = Math.max(p0.y, p1.y);
    const radiusX = Math.abs(maxX - minX) * 0.5;
    const radiusY = Math.abs(maxY - minY) * 0.5;
    const centerX = minX + radiusX;
    const centerY = minY + radiusY;
    context.beginPath();

    if (fill) {
      context.fillStyle = color;
      context.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, Math.PI * 2);
      context.fill();
    } else {
      context.strokeStyle = color;
      context.lineWidth = brush.width;
      context.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, Math.PI * 2);
      context.stroke();
    }

    if (shape.isSelected()) {
      let w = 0;

      if (fill) {
        // Draw the selection indicator inside the ellipse.
        w = brush.width / 2;
      }

      context.beginPath();
      context.strokeStyle = "rgb(255, 0, 100)";
      context.lineWidth = brush.width; // @ts-ignore

      context.setLineDash([5 / context.getTransformExt().getScaleX()]);
      context.ellipse(centerX, centerY, radiusX - w, radiusY - w, 0, 0, Math.PI * 2);
      context.stroke();
    }
  }

}



/***/ }),

/***/ 1074:
/*!************************************************!*\
  !*** ./src/app/render/highlighter.renderer.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HighlighterRenderer": () => (/* binding */ HighlighterRenderer)
/* harmony export */ });
class HighlighterRenderer {
  render(context, shape, dirtyRegion) {
    const points = shape.points;
    const pointCount = points.length;

    if (pointCount < 1) {
      return;
    }

    const brush = shape.brush;
    const color = shape.isSelected() ? "rgba(255, 0, 100, 0.5)" : brush.color.toRgba();
    let index = 0;
    let p0 = points[index++];

    if (index === pointCount) {
      this.drawCircle(context, brush, p0.x, p0.y, p0.p);
      return;
    }

    context.beginPath();
    context.strokeStyle = color;
    context.lineWidth = brush.width;
    context.lineCap = "round";
    context.lineJoin = "round";
    context.globalAlpha = 1;
    context.globalCompositeOperation = "multiply";
    context.moveTo(p0.x, p0.y);

    while (index < pointCount) {
      p0 = points[index++];
      context.lineTo(p0.x, p0.y);
    }

    context.stroke();
  }

  drawCircle(context, brush, x, y, p) {
    const w = p * brush.width;
    const d = w / 2;
    context.beginPath();
    context.fillStyle = brush.color.toRgba();
    context.arc(x, y, d, 0, 2 * Math.PI);
    context.fill();
  }

}



/***/ }),

/***/ 5972:
/*!******************************************!*\
  !*** ./src/app/render/latex.renderer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexRenderer": () => (/* binding */ LatexRenderer)
/* harmony export */ });
/* harmony import */ var _paint_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../paint/font */ 8783);


class LatexRenderer {
  render(context, shape, dirtyRegion) {
    const text = shape.getText();

    if (!text || text.length === 0) {
      return;
    }

    const bounds = shape.bounds;
    const font = shape.getFont(); // @ts-ignore

    const transform = context.getTransformExt();
    const scale = transform.getScaleX();
    /*
     * Render with identity transform and scaled font, since normalized
     * font size won't give us the desired result as the text will be
     * misplaced and missized.
     */

    const scaledHeight = font.size * scale;
    const x = transform.getTranslateX() + bounds.x * scale;
    const y = transform.getTranslateY() + bounds.y * scale;
    const scaledFont = new _paint_font__WEBPACK_IMPORTED_MODULE_0__.Font(font.family, scaledHeight, font.style, font.weight);
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.font = scaledFont.toString();
    context.fillStyle = shape.getTextColor().toRgba();
    context.fillText(text, x, y + scaledHeight);
  }

}



/***/ }),

/***/ 6795:
/*!*****************************************!*\
  !*** ./src/app/render/line.renderer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineRenderer": () => (/* binding */ LineRenderer)
/* harmony export */ });
class LineRenderer {
  render(context, shape, dirtyRegion) {
    const p0 = shape.points[0];
    const p1 = shape.points[1];

    if (!p0 || !p1) {
      return;
    }

    const keyEvent = shape.getKeyEvent();
    const brush = shape.brush;
    const bold = keyEvent != null && keyEvent.altKey;
    const width = bold ? brush.width * 2 : brush.width;
    context.beginPath();
    context.strokeStyle = brush.color.toRgba();
    context.lineWidth = width;
    context.lineCap = "round";
    context.moveTo(p0.x, p0.y);
    context.lineTo(p1.x, p1.y);
    context.stroke();

    if (shape.isSelected()) {
      const scale = context.getTransformExt().getScaleX();
      const dashWidth = bold ? 7 / scale : 5 / scale;
      const dashDist = bold ? 15 / scale : 12 / scale;
      context.beginPath();
      context.strokeStyle = "rgb(255, 0, 100)";
      context.lineWidth = width;
      context.setLineDash([dashWidth, dashDist]);
      context.moveTo(p0.x, p0.y);
      context.lineTo(p1.x, p1.y);
      context.stroke();
    }
  }

}



/***/ }),

/***/ 5050:
/*!****************************************!*\
  !*** ./src/app/render/pdf.renderer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PdfRenderer": () => (/* binding */ PdfRenderer)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);


class PdfRenderer {
  constructor() {
    this.backCanvas = document.createElement('canvas');
  }

  render(pageProxy, context, viewRect, dirtyRegion) {
    var _this = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.renderTask) {
        return null;
      }

      const scaleX = 1.0 / viewRect.width;
      const scaleTx = dirtyRegion.width * scaleX;
      const tx = viewRect.x * scaleTx;
      const ty = viewRect.y * scaleTx;
      const width = pageProxy.view[2] - pageProxy.view[0];
      const scale = scaleX * (dirtyRegion.width / width);
      const viewport = pageProxy.getViewport({
        scale: scale,
        dontFlip: false
      });
      viewport.transform[4] -= tx;
      viewport.transform[5] -= ty;
      _this.backCanvas.width = dirtyRegion.width;
      _this.backCanvas.height = dirtyRegion.height;
      _this.renderTask = pageProxy.render({
        // @ts-ignore
        canvasContext: _this.backCanvas.getContext('2d'),
        viewport: viewport
      });
      return _this.renderTask.promise.then(() => {
        context.canvas.width = _this.backCanvas.width;
        context.canvas.height = _this.backCanvas.height;

        try {
          context.drawImage(_this.backCanvas, 0, 0);
        } catch (e) {
          console.log('Could not draw pdf: ', e);
        }

        _this.renderTask = null;
        return _this.backCanvas;
      }, reason => {//console.error(reason);
      });
    })();
  }

}



/***/ }),

/***/ 9319:
/*!*********************************************!*\
  !*** ./src/app/render/pdf.text.renderer.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PdfTextRenderer": () => (/* binding */ PdfTextRenderer)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pdfjs-dist */ 6036);
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pdfjs_dist_web_pdf_viewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pdfjs-dist/web/pdf_viewer */ 2813);
/* harmony import */ var pdfjs_dist_web_pdf_viewer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pdfjs_dist_web_pdf_viewer__WEBPACK_IMPORTED_MODULE_2__);




class PdfTextRenderer {
  render(pageProxy, root, size, viewRect) {
    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const textContent = yield pageProxy.getTextContent();
      const scaleX = 1.0 / viewRect.width;
      const scaleTx = size.width * scaleX;
      const tx = viewRect.x * scaleTx;
      const ty = viewRect.y * scaleTx;
      const width = pageProxy.view[2] - pageProxy.view[0];
      const scale = scaleX * (size.width / width);
      const viewport = pageProxy.getViewport({
        scale: scale,
        dontFlip: false
      });
      viewport.transform[4] -= tx;
      viewport.transform[5] -= ty;
      (0,pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__.renderTextLayer)({
        textContent: textContent,
        // @ts-ignore
        container: root,
        viewport: viewport,
        enhanceTextSelection: true,
        textDivs: []
      }).promise.catch(reason => {
        console.error(reason);
      });
      const linkService = new pdfjs_dist_web_pdf_viewer__WEBPACK_IMPORTED_MODULE_2__.SimpleLinkService(); // Open links in new tab.
      // @ts-ignore

      linkService.externalLinkTarget = 2;
      const annotationLayer = new pdfjs_dist_web_pdf_viewer__WEBPACK_IMPORTED_MODULE_2__.AnnotationLayerBuilder({
        // @ts-ignore
        pageDiv: root,
        pdfPage: pageProxy,
        linkService: linkService
      });
      annotationLayer.render(viewport);
    })();
  }

}



/***/ }),

/***/ 1822:
/*!****************************************!*\
  !*** ./src/app/render/pen.renderer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenRenderer": () => (/* binding */ PenRenderer)
/* harmony export */ });
class PenRenderer {
  render(context, shape, dirtyRegion) {
    const brush = shape.brush;
    const color = shape.isSelected() ? "rgb(255, 0, 100)" : brush.color.toRgb();
    const stroke = shape.getPenStroke();
    const points = stroke.getStrokeList();

    if (points) {
      const size = points.length;
      let index = 0;
      let point = points[index++];
      context.beginPath();
      context.fillStyle = color;
      context.beginPath();
      context.moveTo(point.x, point.y);

      for (; index < size;) {
        point = points[index++];

        if (index < size) {
          context.lineTo(point.x, point.y);
        }
      }
    }

    context.fill();
  }

}



/***/ }),

/***/ 4956:
/*!********************************************!*\
  !*** ./src/app/render/pointer.renderer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PointerRenderer": () => (/* binding */ PointerRenderer)
/* harmony export */ });
class PointerRenderer {
  render(context, shape, dirtyRegion) {
    const point = shape.points[0];

    if (!point) {
      return;
    }

    const brush = shape.brush;
    const w = brush.width;
    const w2 = w / 2;
    context.beginPath();
    context.fillStyle = brush.color.toAlpha(0.4);
    context.arc(point.x, point.y, w, 0, 2 * Math.PI);
    context.fill(); // Draw inner ring.

    context.beginPath();
    context.strokeStyle = brush.color.toRgb();
    context.lineWidth = w / 4;
    context.arc(point.x, point.y, w2, 0, 2 * Math.PI);
    context.stroke();
  }

}



/***/ }),

/***/ 2273:
/*!**********************************************!*\
  !*** ./src/app/render/rectangle.renderer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RectangleRenderer": () => (/* binding */ RectangleRenderer)
/* harmony export */ });
class RectangleRenderer {
  render(context, shape, dirtyRegion) {
    const bounds = shape.bounds;

    if (bounds.isEmpty()) {
      return;
    }

    const keyEvent = shape.getKeyEvent();
    const brush = shape.brush;
    const color = brush.color.toRgba();
    const fill = keyEvent && keyEvent.altKey;
    let x = bounds.x;
    let y = bounds.y;
    let w = bounds.width;
    let h = bounds.height;
    context.beginPath();

    if (fill) {
      context.fillStyle = color;
      context.rect(x, y, w, h);
      context.fill();
    } else {
      context.strokeStyle = color;
      context.lineWidth = brush.width;
      context.rect(x, y, w, h);
      context.stroke();
    }

    if (shape.isSelected()) {
      if (fill) {
        // Draw the selection indicator inside the rectangle.
        x += brush.width / 2;
        y += brush.width / 2;
        w -= brush.width;
        h -= brush.width;
      }

      context.beginPath();
      context.strokeStyle = "rgb(255, 0, 100)";
      context.lineWidth = brush.width;
      context.setLineDash([5 / context.getTransformExt().getScaleX()]);
      context.rect(x, y, w, h);
      context.stroke();
    }
  }

}



/***/ }),

/***/ 4708:
/*!*********************************************!*\
  !*** ./src/app/render/render-controller.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderController": () => (/* binding */ RenderController)
/* harmony export */ });
/* harmony import */ var _model_page_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/page-event */ 7558);
/* harmony import */ var _model_shape_stroke_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/stroke.shape */ 5547);
/* harmony import */ var _highlighter_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./highlighter.renderer */ 1074);
/* harmony import */ var _model_shape_slide_shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/shape/slide.shape */ 9805);
/* harmony import */ var _slide_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slide.renderer */ 9544);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geometry/rectangle */ 7723);
/* harmony import */ var _pointer_renderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pointer.renderer */ 4956);
/* harmony import */ var _arrow_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arrow.renderer */ 2758);
/* harmony import */ var _rectangle_renderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectangle.renderer */ 2273);
/* harmony import */ var _line_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./line.renderer */ 6795);
/* harmony import */ var _ellipse_renderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ellipse.renderer */ 2459);
/* harmony import */ var _model_shape_pointer_shape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../model/shape/pointer.shape */ 2337);
/* harmony import */ var _model_shape_arrow_shape__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../model/shape/arrow.shape */ 8888);
/* harmony import */ var _model_shape_rectangle_shape__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../model/shape/rectangle.shape */ 4614);
/* harmony import */ var _model_shape_line_shape__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../model/shape/line.shape */ 449);
/* harmony import */ var _model_shape_ellipse_shape__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../model/shape/ellipse.shape */ 6500);
/* harmony import */ var _model_shape_select_shape__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../model/shape/select.shape */ 2348);
/* harmony import */ var _select_renderer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./select.renderer */ 2434);
/* harmony import */ var _model_shape_zoom_shape__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../model/shape/zoom.shape */ 4206);
/* harmony import */ var _zoom_renderer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./zoom.renderer */ 9822);
/* harmony import */ var _model_shape_text_shape__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../model/shape/text.shape */ 7890);
/* harmony import */ var _text_renderer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./text.renderer */ 3789);
/* harmony import */ var _geometry_transform__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../geometry/transform */ 8696);
/* harmony import */ var _model_shape_text_highlight_shape__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../model/shape/text-highlight.shape */ 8153);
/* harmony import */ var _text_highlight_renderer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./text-highlight.renderer */ 6077);
/* harmony import */ var _model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../model/shape/latex.shape */ 1767);
/* harmony import */ var _latex_renderer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./latex.renderer */ 5972);
/* harmony import */ var _model_shape_pen_shape__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../model/shape/pen.shape */ 4259);
/* harmony import */ var _pen_renderer__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./pen.renderer */ 1822);






























class RenderController {
  constructor() {
    this.seek = false;
    this.counter = 0;
    this.pageChangeListener = this.pageChanged.bind(this);
    this.lastTransform = new _geometry_transform__WEBPACK_IMPORTED_MODULE_22__.Transform();
  }

  setPage(page) {
    if (this.page) {
      // Disable rendering for previous page.
      this.disableRendering();
    }

    this.page = page;
    this.updateSurfaceSize(page).then(() => {
      if (!this.seek) {
        this.enableRendering();
      }

      this.renderAllLayers();
    }).catch(error => {
      console.error(error);
    });
  }

  setSeek(seek) {
    this.seek = seek;

    if (seek) {
      this.disableRendering();
    } else {
      this.enableRendering(); // Finished seeking step. Render current state.

      if (this.lastTransform.equals(this.getPageTransform())) {
        // Render slide and text layer only if we have to: see page transform.
        this.refreshAnnotationLayers();
      } else {
        // Page transform changed. Update all layers.
        this.renderAllLayers();
      }
    }
  }

  setSlideRenderSurface(renderSurface) {
    this.slideRenderSurface = renderSurface;
    this.slideRenderSurface.registerRenderer(_model_shape_slide_shape__WEBPACK_IMPORTED_MODULE_3__.SlideShape.name, new _slide_renderer__WEBPACK_IMPORTED_MODULE_4__.SlideRenderer());
    this.slideRenderSurface.addSizeListener(this.slideRenderSurfaceSizeChanged.bind(this));
  }

  setActionRenderSurface(renderSurface) {
    this.actionRenderSurface = renderSurface;
    this.actionRenderSurface.addSizeListener(this.actionRenderSurfaceSizeChanged.bind(this));
    this.registerShapeRenderers(renderSurface);
  }

  setVolatileRenderSurface(renderSurface) {
    this.volatileRenderSurface = renderSurface;
    this.registerShapeRenderers(renderSurface);
  }

  setTextLayerSurface(textLayerSurface) {
    this.textLayerSurface = textLayerSurface;
  }

  updateSurfaceSize(page) {
    return page.getPageBounds().then(bounds => {
      this.slideRenderSurface.setPageSize(bounds);
      this.actionRenderSurface.setPageSize(bounds);
      this.volatileRenderSurface.setPageSize(bounds);
      this.textLayerSurface.setPageSize(bounds);
    });
  }

  beginBulkRender() {
    if (!this.seek) {
      this.disableRendering();
    }
  }

  endBulkRender() {
    if (!this.seek) {
      this.refreshAnnotationLayers();
      this.enableRendering();
    }
  }

  getPage() {
    return this.page;
  }

  enableRendering() {
    this.page.addChangeListener(this.pageChangeListener);
  }

  disableRendering() {
    this.page.removeChangeListener(this.pageChangeListener);
  }

  slideRenderSurfaceSizeChanged(event) {
    if (!this.page) {
      console.log('(RenderController) I do not have a page.');
      return;
    }

    this.renderAllLayers();
  }

  actionRenderSurfaceSizeChanged(event) {
    if (!this.page) {
      console.log('(RenderController) I do not have a page.');
      return;
    }

    this.refreshAnnotationLayers();
  }

  pageChanged(event) {
    switch (event.changeType) {
      case _model_page_event__WEBPACK_IMPORTED_MODULE_0__.PageChangeType.PageTransform:
        this.renderAllLayers();
        break;

      case _model_page_event__WEBPACK_IMPORTED_MODULE_0__.PageChangeType.Clear:
        this.clearAnnotationLayers();
        break;

      case _model_page_event__WEBPACK_IMPORTED_MODULE_0__.PageChangeType.ShapeAdded:
        if (this.lastShape && this.lastShape != event.shape) {
          const size = this.actionRenderSurface.getSize();
          const bounds = new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_5__.Rectangle(0, 0, size.width, size.height);
          this.renderPermanentLayer(this.lastShape, bounds);
        }

        this.renderVolatileLayer(event.shape, event.dirtyRegion);
        break;

      case _model_page_event__WEBPACK_IMPORTED_MODULE_0__.PageChangeType.ShapeRemoved:
        this.refreshAnnotationLayers();
        break;

      case _model_page_event__WEBPACK_IMPORTED_MODULE_0__.PageChangeType.ShapeModified:
        this.renderVolatileLayer(event.shape, event.dirtyRegion);
        break;
    }
  }

  clearAnnotationLayers() {
    this.volatileRenderSurface.clear();
    this.actionRenderSurface.renderSurface(this.slideRenderSurface);
    this.lastShape = null;
  }

  refreshAnnotationLayers() {
    const shapes = this.page.getShapes();
    const lastIndex = shapes.length - 1;

    if (lastIndex >= 0) {
      // The page contains at least one shape.
      this.actionRenderSurface.renderSurface(this.slideRenderSurface);

      if (lastIndex > 0) {
        // Render all shapes except the last one on the permanent surface.
        this.actionRenderSurface.renderShapes(shapes.slice(0, lastIndex));
      } // Always render the last shape on the volatile surface.


      const lastShape = shapes[lastIndex];
      this.renderVolatileLayer(lastShape, lastShape.bounds);
    } else {
      // The page contains no shapes.
      this.volatileRenderSurface.clear();
      this.actionRenderSurface.renderSurface(this.slideRenderSurface);
      this.lastShape = null;
    }
  }

  renderAllLayers() {
    if (!this.page) {
      console.log('(RenderController) No page available.');
      return;
    }

    const promise = this.renderSlideLayer(this.page);
    promise.then(imageSource => {
      if (imageSource) {
        const pageTransform = this.getPageTransform();
        this.lastTransform.setTransform(pageTransform);
        this.actionRenderSurface.setTransform(pageTransform);
        this.volatileRenderSurface.setTransform(pageTransform);
        this.actionRenderSurface.renderImageSource(imageSource);
        this.actionRenderSurface.renderShapes(this.page.getShapes());
        this.volatileRenderSurface.clear();
        this.textLayerSurface.render(this.page);
        this.lastShape = null;
        console.log('RendererController Rendered image source: ', imageSource);
      }
    }).catch(error => {
      console.log('RendererController error: ', error);

      if (++this.counter < 5) {
        this.renderAllLayers();
      } else {
        this.counter = 0;
      }
    });
  }

  renderPermanentLayer(shape, dirtyRegion) {
    this.actionRenderSurface.renderShape(shape, dirtyRegion);
  }

  renderVolatileLayer(shape, dirtyRegion) {
    this.volatileRenderSurface.renderSurface(this.actionRenderSurface);
    this.volatileRenderSurface.renderShape(shape, dirtyRegion);
    this.lastShape = shape;
  }

  renderSlideLayer(page) {
    const size = this.slideRenderSurface.getSize();

    if (!size) {
      return this.slideRenderSurface.renderSlideShape(page.getSlideShape(), new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_5__.Rectangle(0, 0, 0, 0));
    }

    const bounds = new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_5__.Rectangle(0, 0, size.width, size.height);
    return this.slideRenderSurface.renderSlideShape(page.getSlideShape(), bounds);
  }

  getPageTransform() {
    const pageBounds = this.page.getSlideShape().bounds;
    const pageTransform = new _geometry_transform__WEBPACK_IMPORTED_MODULE_22__.Transform();
    pageTransform.translate(pageBounds.x, pageBounds.y);
    pageTransform.scale(1.0 / pageBounds.width, 1.0 / pageBounds.height);
    return pageTransform;
  }

  registerShapeRenderers(renderSurface) {
    renderSurface.registerRenderer(_model_shape_pen_shape__WEBPACK_IMPORTED_MODULE_27__.PenShape.name, new _pen_renderer__WEBPACK_IMPORTED_MODULE_28__.PenRenderer());
    renderSurface.registerRenderer(_model_shape_stroke_shape__WEBPACK_IMPORTED_MODULE_1__.StrokeShape.name, new _highlighter_renderer__WEBPACK_IMPORTED_MODULE_2__.HighlighterRenderer());
    renderSurface.registerRenderer(_model_shape_pointer_shape__WEBPACK_IMPORTED_MODULE_11__.PointerShape.name, new _pointer_renderer__WEBPACK_IMPORTED_MODULE_6__.PointerRenderer());
    renderSurface.registerRenderer(_model_shape_arrow_shape__WEBPACK_IMPORTED_MODULE_12__.ArrowShape.name, new _arrow_renderer__WEBPACK_IMPORTED_MODULE_7__.ArrowRenderer());
    renderSurface.registerRenderer(_model_shape_rectangle_shape__WEBPACK_IMPORTED_MODULE_13__.RectangleShape.name, new _rectangle_renderer__WEBPACK_IMPORTED_MODULE_8__.RectangleRenderer());
    renderSurface.registerRenderer(_model_shape_line_shape__WEBPACK_IMPORTED_MODULE_14__.LineShape.name, new _line_renderer__WEBPACK_IMPORTED_MODULE_9__.LineRenderer());
    renderSurface.registerRenderer(_model_shape_ellipse_shape__WEBPACK_IMPORTED_MODULE_15__.EllipseShape.name, new _ellipse_renderer__WEBPACK_IMPORTED_MODULE_10__.EllipseRenderer());
    renderSurface.registerRenderer(_model_shape_select_shape__WEBPACK_IMPORTED_MODULE_16__.SelectShape.name, new _select_renderer__WEBPACK_IMPORTED_MODULE_17__.SelectRenderer());
    renderSurface.registerRenderer(_model_shape_text_shape__WEBPACK_IMPORTED_MODULE_20__.TextShape.name, new _text_renderer__WEBPACK_IMPORTED_MODULE_21__.TextRenderer());
    renderSurface.registerRenderer(_model_shape_text_highlight_shape__WEBPACK_IMPORTED_MODULE_23__.TextHighlightShape.name, new _text_highlight_renderer__WEBPACK_IMPORTED_MODULE_24__.TextHighlightRenderer());
    renderSurface.registerRenderer(_model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_25__.LatexShape.name, new _latex_renderer__WEBPACK_IMPORTED_MODULE_26__.LatexRenderer());
    renderSurface.registerRenderer(_model_shape_zoom_shape__WEBPACK_IMPORTED_MODULE_18__.ZoomShape.name, new _zoom_renderer__WEBPACK_IMPORTED_MODULE_19__.ZoomRenderer());
  }

}



/***/ }),

/***/ 4741:
/*!******************************************!*\
  !*** ./src/app/render/render-surface.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderSurface": () => (/* binding */ RenderSurface)
/* harmony export */ });
/* harmony import */ var _geometry_dimension__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/dimension */ 2363);
/* harmony import */ var _event_size_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event/size-event */ 2988);
/* harmony import */ var _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/event-listener */ 7345);
/* harmony import */ var _geometry_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geometry/transform */ 8696);





class RenderSurface {
  constructor(canvas) {
    this.sizeEvent = new _utils_event_listener__WEBPACK_IMPORTED_MODULE_2__.TypedEvent();
    this.canvas = canvas;
    this.canvasContext = canvas.getContext("2d");
    this.renderers = new Map();
    this.transform = new _geometry_transform__WEBPACK_IMPORTED_MODULE_3__.Transform();
  }

  clear() {
    if (this.canvasContext) {
      this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
  }

  registerRenderer(shapeName, render) {
    this.renderers.set(shapeName, render);
  }

  renderImageSource(canvas) {
    if (this.canvasContext) {
      this.canvasContext.drawImage(canvas, 0, 0);
    }
  }

  renderSurface(surface) {
    if (surface.canvas.width === 0 || surface.canvas.height === 0) {
      return;
    }

    if (this.canvasContext) {
      this.canvasContext.drawImage(surface.canvas, 0, 0);
    }
  }

  renderShapes(shapes) {
    for (let shape of shapes) {
      this.renderShape(shape, null);
    }
  }

  renderShape(shape, dirtyRegion) {
    const renderer = this.renderers.get(shape.constructor.name);

    if (renderer) {
      const s = this.canvas.width * this.transform.getScaleX();
      const tx = this.transform.getTranslateX();
      const ty = this.transform.getTranslateY();

      if (this.canvasContext) {
        this.canvasContext.save();
        this.canvasContext.scale(s, s);
        this.canvasContext.translate(-tx, -ty);

        if (dirtyRegion) {
          renderer.render(this.canvasContext, shape, dirtyRegion);
        }

        this.canvasContext.restore();
      }
    }
  }

  getSize() {
    return this.size;
  }

  setSize(width, height) {
    if (width < 1 || height < 1) {
      return;
    } // HiDPI handling


    const dpr = window.devicePixelRatio || 1;
    this.size = new _geometry_dimension__WEBPACK_IMPORTED_MODULE_0__.Dimension(width * dpr, height * dpr);
    this.resizeCanvas(width, height, dpr);
    this.fireSizeEvent(new _event_size_event__WEBPACK_IMPORTED_MODULE_1__.SizeEvent(this.size));
  }

  setPageSize(bounds) {
    let width = this.canvas.clientWidth;
    let height = this.canvas.clientHeight;
    const slideRatio = bounds.width / bounds.height;
    const viewRatio = width / height;

    if (viewRatio > slideRatio) {
      width = height * slideRatio;
    } else {
      height = width / slideRatio;
    }

    if (width === 0 || height === 0) {
      return;
    }

    this.setSize(width, height);
  }

  setTransform(transform) {
    this.transform.setTransform(transform);
  }

  addSizeListener(listener) {
    return this.sizeEvent.subscribe(listener);
  }

  removeSizeListener(listener) {
    this.sizeEvent.unsubscribe(listener);
  }

  fireSizeEvent(event) {
    this.sizeEvent.publish(event);
  }

  resizeCanvas(width, height, devicePixelRatio) {
    const scaleMode = this.canvas.getAttribute("scale");

    if (scaleMode && scaleMode === "full") {
      this.canvas.width = width * devicePixelRatio;
      this.canvas.height = height * devicePixelRatio;
    }

    this.canvas.style.width = width + "px";
    this.canvas.style.height = height + "px";
  }

}



/***/ }),

/***/ 2434:
/*!*******************************************!*\
  !*** ./src/app/render/select.renderer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectRenderer": () => (/* binding */ SelectRenderer)
/* harmony export */ });
class SelectRenderer {
  constructor() {
    this.FRAME_COLOR = "#FF0064";
  }

  render(context, shape, dirtyRegion) {
    const p0 = shape.points[0];
    const p1 = shape.points[1];

    if (!p0 || !p1) {
      return;
    }

    const width = 2 / context.getTransformExt().getScaleX();
    const dash = 4 / context.getTransformExt().getScaleY();
    context.beginPath();
    context.strokeStyle = this.FRAME_COLOR;
    context.lineWidth = width;
    context.lineDashOffset = 0;
    context.setLineDash([dash]);
    context.lineCap = "butt";
    context.lineJoin = "bevel";
    context.rect(p0.x, p0.y, p1.x - p0.x, p1.y - p0.y);
    context.stroke();
  }

}



/***/ }),

/***/ 4177:
/*!************************************************!*\
  !*** ./src/app/render/slide-render-surface.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlideRenderSurface": () => (/* binding */ SlideRenderSurface)
/* harmony export */ });
/* harmony import */ var _render_surface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render-surface */ 4741);


class SlideRenderSurface extends _render_surface__WEBPACK_IMPORTED_MODULE_0__.RenderSurface {
  renderSlideShape(shape, dirtyRegion) {
    const renderer = this.renderers.get(shape.constructor.name);
    let promise;

    if (renderer) {
      const pageRect = shape.bounds;
      const sx = this.canvas.width / pageRect.width; //const sy = this.canvas.height / pageRect.height;

      if (this.canvasContext) {
        this.canvasContext.save();
        this.canvasContext.scale(sx, sx);
        promise = renderer.render(this.canvasContext, shape, dirtyRegion);
        this.canvasContext.restore();
      }
    }

    return promise;
  }

}



/***/ }),

/***/ 9544:
/*!******************************************!*\
  !*** ./src/app/render/slide.renderer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlideRenderer": () => (/* binding */ SlideRenderer)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);


class SlideRenderer {
  render(context, shape, dirtyRegion) {
    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const page = shape.getPage();
      return page.render(context, shape.bounds, dirtyRegion);
    })();
  }

}



/***/ }),

/***/ 6077:
/*!***************************************************!*\
  !*** ./src/app/render/text-highlight.renderer.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextHighlightRenderer": () => (/* binding */ TextHighlightRenderer)
/* harmony export */ });
class TextHighlightRenderer {
  render(context, shape, dirtyRegion) {
    const bounds = shape.bounds;

    if (bounds.isEmpty()) {
      return;
    }

    context.beginPath();
    context.globalAlpha = 1;
    context.globalCompositeOperation = "multiply";
    context.fillStyle = shape.getColor().toRgba();
    context.rect(bounds.x, bounds.y, bounds.width, bounds.height);
    context.fill();
  }

}



/***/ }),

/***/ 41:
/*!**********************************************!*\
  !*** ./src/app/render/text-layer-surface.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextLayerSurface": () => (/* binding */ TextLayerSurface)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var _geometry_dimension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/dimension */ 2363);



class TextLayerSurface {
  constructor(root) {
    this.root = root;
  }

  clear() {
    while (this.root.firstChild) {
      this.root.removeChild(this.root.firstChild);
    }
  }

  render(page) {
    var _this = this;

    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.clear();

      page.renderText(_this.root, _this.size);
    })();
  }

  getSize() {
    return this.size;
  }

  setSize(width, height) {
    this.size = new _geometry_dimension__WEBPACK_IMPORTED_MODULE_1__.Dimension(width, height);
    this.root.style.width = width + "px";
    this.root.style.height = height + "px";
  }

  setPageSize(bounds) {
    let width = this.root.clientWidth;
    let height = this.root.clientHeight;
    const slideRatio = bounds.width / bounds.height;
    const viewRatio = width / height;

    if (viewRatio > slideRatio) {
      width = height * slideRatio;
    } else {
      height = width / slideRatio;
    }

    if (width === 0 || height === 0) {
      return;
    }

    this.setSize(width, height);
  }

}



/***/ }),

/***/ 3789:
/*!*****************************************!*\
  !*** ./src/app/render/text.renderer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextRenderer": () => (/* binding */ TextRenderer)
/* harmony export */ });
/* harmony import */ var _paint_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../paint/font */ 8783);


class TextRenderer {
  render(context, shape, dirtyRegion) {
    const text = shape.getText();

    if (!text || text.length === 0) {
      return;
    }

    const bounds = shape.bounds;
    const font = shape.getFont();
    const transform = context.getTransformExt();
    const scale = transform.getScaleX();
    /*
     * Render with identity transform and scaled font, since normalized
     * font size won't give us the desired result as the text will be
     * misplaced and missized.
     */

    const scaledHeight = font.size * scale;
    const x = transform.getTranslateX() + bounds.x * scale;
    const y = transform.getTranslateY() + bounds.y * scale;
    const scaledFont = new _paint_font__WEBPACK_IMPORTED_MODULE_0__.Font(font.family, scaledHeight, font.style, font.weight);
    context.setTransform(1, 0, 0, 1, 0, 0);
    context.font = scaledFont.toString();
    context.fillStyle = shape.getTextColor().toRgba();
    context.fillText(text, x, y + scaledHeight);
  }

}



/***/ }),

/***/ 6578:
/*!***********************************************!*\
  !*** ./src/app/render/whiteboard.renderer.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WhiteboardRenderer": () => (/* binding */ WhiteboardRenderer)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);


class WhiteboardRenderer {
  render(context, viewRect, dirtyRegion) {
    return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise(resolve => {
        context.canvas.width = dirtyRegion.width;
        context.canvas.height = dirtyRegion.height;
        context.fillStyle = "white";
        context.fillRect(dirtyRegion.x, dirtyRegion.y, dirtyRegion.width, dirtyRegion.height);
        resolve(context.canvas);
      });
    })();
  }

}



/***/ }),

/***/ 9822:
/*!*****************************************!*\
  !*** ./src/app/render/zoom.renderer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomRenderer": () => (/* binding */ ZoomRenderer)
/* harmony export */ });
class ZoomRenderer {
  constructor() {
    this.FILL_COLOR = "rgba(0, 163, 232, 0.4)";
    this.FRAME_COLOR = "rgb(255, 0, 100)";
  }

  render(context, shape, dirtyRegion) {
    const bounds = shape.bounds;
    context.fillStyle = this.FILL_COLOR;
    context.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);
    context.beginPath();
    context.strokeStyle = this.FRAME_COLOR;
    context.lineWidth = 2 / context.getTransformExt().getScaleX();
    context.rect(bounds.x, bounds.y, bounds.width, bounds.height);
    context.stroke();
  }

}



/***/ }),

/***/ 9698:
/*!************************************************!*\
  !*** ./src/app/services/annotation.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnnotationService": () => (/* binding */ AnnotationService)
/* harmony export */ });
/* harmony import */ var _paint_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../paint/color */ 6428);
/* harmony import */ var _action_action_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../action/action-type */ 7653);
/* harmony import */ var _action_pointer_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../action/pointer.action */ 3448);
/* harmony import */ var _playback_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./playback.service */ 8818);
/* harmony import */ var _action_parser_action_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../action/parser/action.parser */ 7758);
/* harmony import */ var _action_tool_begin_action__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../action/tool-begin.action */ 7479);
/* harmony import */ var _geometry_pen_point__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../geometry/pen-point */ 7578);
/* harmony import */ var _action_tool_execute_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../action/tool-execute.action */ 2656);
/* harmony import */ var _action_tool_end_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../action/tool-end.action */ 1100);
/* harmony import */ var _action_pen_action__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../action/pen.action */ 1373);
/* harmony import */ var _paint_brush__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../paint/brush */ 5035);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _janus_janus_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./janus/janus.service */ 465);













let AnnotationService = /*#__PURE__*/(() => {
  class AnnotationService {
    constructor(janusService) {
      this.janusService = janusService;
      this.availableColors = [new _paint_color__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0, 1), new _paint_color__WEBPACK_IMPORTED_MODULE_0__.Color(255, 0, 0, 1), new _paint_color__WEBPACK_IMPORTED_MODULE_0__.Color(0, 255, 0, 1), new _paint_color__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 255, 1)];
      this.currentColorId = 0;
      this.isMouseDown = false;
    }

    setColor(colorId) {
      this.currentColorId = colorId;
      this.setTool(this.currentTool);
    }

    setTool(tool) {
      this.currentTool = tool;
      let action = undefined;

      switch (this.currentTool) {
        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.CLEAR_SHAPES:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.UNDO:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.REDO:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.KEY:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.PEN:
          console.log('MAKING A BRUSH WITH COLOR ID ', this.currentColorId, ' which is ', this.availableColors[this.currentColorId]);
          action = new _action_pen_action__WEBPACK_IMPORTED_MODULE_9__.PenAction(1, new _paint_brush__WEBPACK_IMPORTED_MODULE_10__.Brush(this.availableColors[this.currentColorId], 0.01));
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.HIGHLIGHTER:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.POINTER:
          action = new _action_pointer_action__WEBPACK_IMPORTED_MODULE_2__.PointerAction(0);
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.ARROW:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.LINE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.RECTANGLE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.ELLIPSE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.CLONE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.SELECT:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.SELECT_GROUP:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.LATEX:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.LATEX_FONT_CHANGE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT_CHANGE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT_FONT_CHANGE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT_LOCATION_CHANGE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT_REMOVE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TEXT_SELECTION_EXT:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_BEGIN:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_EXECUTE:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.TOOL_END:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.PANNING:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.EXTEND_VIEW:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.ZOOM:
          if (length < 1) {} else {}

          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.ZOOM_OUT:
          break;

        case _action_action_type__WEBPACK_IMPORTED_MODULE_1__.ActionType.RUBBER_EXT:
          break;
      }

      if (action) {
        _playback_service__WEBPACK_IMPORTED_MODULE_3__.PlaybackService.getInstance().addAction(action); // Send

        const parsedAction = _action_parser_action_parser__WEBPACK_IMPORTED_MODULE_4__.ActionParser.parseActionToBinary(action);
        this.janusService.sendData(parsedAction);
      }
    }

    mouseDown(event) {
      console.log('MOUSE DOWN!', event);
      this.isMouseDown = true;
      const toolBeginAction = new _action_tool_begin_action__WEBPACK_IMPORTED_MODULE_5__.ToolBeginAction(this.eventToPenPoint(event));
      _playback_service__WEBPACK_IMPORTED_MODULE_3__.PlaybackService.getInstance().addAction(toolBeginAction); // Send

      const parsedAction = _action_parser_action_parser__WEBPACK_IMPORTED_MODULE_4__.ActionParser.parseActionToBinary(toolBeginAction);
      this.janusService.sendData(parsedAction);
    }

    drag(event) {
      if (this.isMouseDown) {
        console.log('MOUSE DRAG!', event);
        const toolExecuteAction = new _action_tool_execute_action__WEBPACK_IMPORTED_MODULE_7__.ToolExecuteAction(this.eventToPenPoint(event));
        _playback_service__WEBPACK_IMPORTED_MODULE_3__.PlaybackService.getInstance().addAction(toolExecuteAction); // Send

        const parsedAction = _action_parser_action_parser__WEBPACK_IMPORTED_MODULE_4__.ActionParser.parseActionToBinary(toolExecuteAction);
        this.janusService.sendData(parsedAction);
      }
    }

    mouseUp(event) {
      if (this.isMouseDown) {
        this.isMouseDown = false;
        console.log('MOUSE UP!', event);
        const toolEndAction = new _action_tool_end_action__WEBPACK_IMPORTED_MODULE_8__.ToolEndAction(this.eventToPenPoint(event));
        _playback_service__WEBPACK_IMPORTED_MODULE_3__.PlaybackService.getInstance().addAction(toolEndAction); // Send

        const parsedAction = _action_parser_action_parser__WEBPACK_IMPORTED_MODULE_4__.ActionParser.parseActionToBinary(toolEndAction);
        this.janusService.sendData(parsedAction);
      }
    }

    eventToPenPoint(event) {
      const rect = event.target.getBoundingClientRect();
      const realX = event.clientX - rect.left;
      const realY = event.clientY - rect.top;
      console.log(event);
      console.log('REAL: ', realX / rect.width, realY / rect.height); // return new PenPoint(1, 0.5, 1);

      return new _geometry_pen_point__WEBPACK_IMPORTED_MODULE_6__.PenPoint(realX / rect.width, realY / rect.height, 1);
    }

  }

  AnnotationService.ɵfac = function AnnotationService_Factory(t) {
    return new (t || AnnotationService)(_angular_core__WEBPACK_IMPORTED_MODULE_12__["ɵɵinject"](_janus_janus_service__WEBPACK_IMPORTED_MODULE_11__.JanusService));
  };

  AnnotationService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_12__["ɵɵdefineInjectable"]({
    token: AnnotationService,
    factory: AnnotationService.ɵfac,
    providedIn: 'root'
  });
  return AnnotationService;
})();

/***/ }),

/***/ 6102:
/*!********************************************!*\
  !*** ./src/app/services/course.service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CourseStateService": () => (/* binding */ CourseStateService)
/* harmony export */ });
/* harmony import */ var _action_parser_progressive_data_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../action/parser/progressive-data-view */ 8843);
/* harmony import */ var _action_parser_recorded_page_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../action/parser/recorded-page.parser */ 9015);
/* harmony import */ var _action_simple_action_executor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../action/simple-action-executor */ 2827);
/* harmony import */ var _model_whiteboard_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/whiteboard.document */ 7477);
/* harmony import */ var _utils_http_request__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/http-request */ 1969);
/* harmony import */ var _document_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./document.service */ 2026);






class CourseStateService {
  constructor(host) {
    this.apiPath = "/course/state";
    this.host = host;
  }

  getCourseState(courseId) {
    return new _utils_http_request__WEBPACK_IMPORTED_MODULE_4__.HttpRequest().get(this.getFullPath("/" + courseId));
  }

  getStateDocument(courseId, stateDoc) {
    if (stateDoc.documentFile) {
      return new Promise((resolve, reject) => {
        new _utils_http_request__WEBPACK_IMPORTED_MODULE_4__.HttpRequest().setResponseType("arraybuffer").get(stateDoc.documentFile).then(dataBuffer => {
          if (!dataBuffer) {
            throw new Error("Received empty course document");
          }

          const byteBuffer = new Uint8Array(dataBuffer);
          const docService = new _document_service__WEBPACK_IMPORTED_MODULE_5__.DocumentService();
          return docService.loadDocument(byteBuffer);
        }).then(slideDoc => {
          slideDoc.setDocumentId(stateDoc.documentId);
          resolve(slideDoc); // this.preloadSlideDocument(courseId, stateDoc, slideDoc)
          // 	.then(() => {
          // 		resolve(slideDoc);
          // 	})
          // 	.catch((error: any) => {
          // 		reject(error);
          // 	});
        }).catch(error => {
          reject(error);
        });
      });
    }

    return new Promise((resolve, reject) => {
      const slideDoc = new _model_whiteboard_document__WEBPACK_IMPORTED_MODULE_3__.WhiteboardDocument();
      slideDoc.setDocumentId(stateDoc.documentId); // this.preloadSlideDocument(courseId, stateDoc, slideDoc)
      // 	.then(() => {
      // 		resolve(slideDoc);
      // 	})
      // 	.catch((error: any) => {
      // 		reject(error);
      // 	});
    });
  }

  getStateDocumentActions(courseId, stateDoc) {
    return new Promise((resolve, reject) => {
      return new _utils_http_request__WEBPACK_IMPORTED_MODULE_4__.HttpRequest().setResponseType("arraybuffer").get(this.getFullPath("/" + courseId + "/pages/" + stateDoc.documentId)).then(dataBuffer => {
        if (!dataBuffer) {
          reject("Received empty course document");
          return;
        }

        const dataView = new _action_parser_progressive_data_view__WEBPACK_IMPORTED_MODULE_0__.ProgressiveDataView(dataBuffer);
        const bufferLength = dataBuffer.byteLength;
        const recordedPages = [];

        while (dataView.byteOffset < bufferLength) {
          const entryLength = dataView.getInt32();
          const pageParser = new _action_parser_recorded_page_parser__WEBPACK_IMPORTED_MODULE_1__.RecordedPageParser();
          const recordedPage = pageParser.parse(dataView);

          if (recordedPage) {
            recordedPages.push(recordedPage);
          }
        }

        resolve(recordedPages);
      }).catch(error => {
        reject(error);
      });
    });
  }

  preloadSlideDocument(courseId, stateDoc, slideDoc) {
    return this.getStateDocumentActions(courseId, stateDoc).then(pages => {
      // Pre-load actions for all pages in the document.
      const executor = new _action_simple_action_executor__WEBPACK_IMPORTED_MODULE_2__.SimpleActionExecutor(slideDoc);

      for (const page of pages) {
        this.loadActions(executor, page);
      }
    });
  }

  loadActions(executor, recPage) {
    const actions = recPage.playbackActions;
    let actionCount = actions.length;

    if (actionCount < 1) {
      return;
    } // Select the page on which to execute the actions.


    executor.setPageNumber(recPage.pageNumber);

    for (let action of actions) {
      try {
        action.execute(executor);
      } catch (e) {
        console.error(e);
      }
    }
  }

  getFullPath(path) {
    return this.host + this.apiPath + path;
  }

}

/***/ }),

/***/ 2026:
/*!**********************************************!*\
  !*** ./src/app/services/document.service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DocumentService": () => (/* binding */ DocumentService)
/* harmony export */ });
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdfjs-dist */ 6036);
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _model_pdf_js_document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/pdf-js-document */ 5893);


class DocumentService {
  loadDocument(source) {
    return new Promise((resolve, reject) => {
      (0,pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.getDocument)(source).promise.then(pdf => {
        resolve(new _model_pdf_js_document__WEBPACK_IMPORTED_MODULE_1__.PdfJsDocument(pdf));
      }, reason => {
        reject(reason);
      });
    });
  }

}

/***/ }),

/***/ 465:
/*!*************************************************!*\
  !*** ./src/app/services/janus/janus.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JanusService": () => (/* binding */ JanusService)
/* harmony export */ });
/* harmony import */ var _Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 5861);
/* harmony import */ var janus_gateway__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! janus-gateway */ 1198);
/* harmony import */ var hark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hark */ 5164);
/* harmony import */ var hark__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(hark__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 5000);

// @ts-ignore




let JanusService = /*#__PURE__*/(() => {
  class JanusService {
    constructor(ngZone) {
      this.ngZone = ngZone;
      this.serverUrl = (window.location.hostname === 'localhost' ? 'http://' : 'https://') + window.location.hostname + (window.location.hostname === 'localhost' ? ':8088' : ':8099') + '/janus';
      this.subscriberJanusHandle = null;
      this.screensharingIsActive = false;
      this.myScreenshareIsActive = false;
      this.feedStreams = {};
      this.localTracks = {};
      this.isMuted = false;
      this.isVideoMuted = false;
      this.isCurrentlyCreatingASubscription = false;
      this.subscriptions = {};
      this.feeds = {};
      this.remoteTracks = {};
      this.simulcastStarted = {};
      this.mids = {};
      this.slots = {};
      this.subStreams = {};
      this.audioDevices = {};
      this.videoDevices = {};
      this.currentlyChosenOverrideAudioDeviceId = '';
      this.currentlyChosenOverrideVideoDeviceId = '';
      this.talkingFeeds = {};
      this.talkingFeedsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
      this.screenshareStateSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
      this.doSimulcast = false;
      this.subscriberMode = false;
      this.locallyMutedRemoteAudioFeeds = {};

      this.initDeviceList = devices => {
        this.audioDevices = {};
        this.videoDevices = {};

        for (const device of devices) {
          let label = device.label;

          if (!label || label === "") {
            label = device.deviceId;
          }

          console.log('Device found: ', label, device);

          if (device.kind === "audioinput") {
            this.audioDevices[device.deviceId] = label;
            console.log('audio devices', this.audioDevices);
          } else if (device.kind === "videoinput") {
            this.videoDevices[device.deviceId] = label;
          }
        }
      };

      this.opaqueId = "course-" + janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.randomString(12);
      this.myUsername = janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.randomString(12); // @ts-ignore

      window.janusService = this;
    }

    setUsername(username) {
      if (username && username !== '') {
        this.myUsername = username;
        console.log('(JanusService) Set username to ', this.myUsername);
      }
    }

    start() {
      this.isCurrentlyCreatingASubscription = false;
      this.subscriptions = {};
      this.feeds = {};
      this.remoteTracks = {};
      this.simulcastStarted = {};
      this.mids = {};
      this.slots = {};
      this.subStreams = {};
      this.subscriberJanusHandle = null;
      this.publisherJanusHandle = null;
      this.screenshareJanusHandle = null;
      this.janus = null; // Initialize the library (all console debuggers enabled).

      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.init({
        debug: "all",
        callback: () => {
          // Make sure the browser supports WebRTC.
          console.log('Does browser support webrtc?');

          if (!janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.isWebrtcSupported()) {
            console.error("No WebRTC support...");
            return;
          } else {
            console.log("WebRTC is supported.");
          }

          this.createSession();
        }
      });
    }

    end() {
      this.unpublishOwnFeed();

      for (const [id, value] of Object.entries(this.feedStreams)) {
        this.unsubscribeFrom(id);
      }

      this.publisherJanusHandle.hangup();

      if (this.screenshareJanusHandle) {
        this.screenshareJanusHandle.hangup();
      }

      if (this.subscriberJanusHandle) {
        this.subscriberJanusHandle.hangup();
      }

      this.janus.destroy();
    }

    createSession() {
      this.janus = new janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus({
        server: this.serverUrl,
        success: () => {
          console.log('Janus handle created!');
          this.janus.attach({
            plugin: "janus.plugin.videoroom",
            opaqueId: this.opaqueId,
            success: pluginHandle => {
              this.publisherJanusHandle = pluginHandle;
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Plugin attached!" + this.publisherJanusHandle.getPlugin() + ", id=" + this.publisherJanusHandle.getId() + ")"); // NOTE: probably a debug thing to leave this here. TODO remove

              this.registerUsernameToJoinAsPublisher();
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.listDevices(this.initDeviceList);
            },
            iceState: state => {
              console.log('ICE state changed to ' + state);
            },
            webrtcState: on => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Janus says our WebRTC PeerConnection is " + (on ? "up" : "down") + " now");
            },
            onmessage: (msg, jsep) => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug('::: Got a message (publisher) :::');
              const event = msg["videoroom"];

              if (event) {
                if (event === "joined") {
                  this.messageHandle_OnJoinedEvent(msg);
                } else if (event === "destroyed") {
                  this.messageHandle_OnDestroyedEvent(msg);
                } else if (event === "event") {
                  this.messageHandle_OnGeneralEvent(msg);
                }
              }

              if (jsep) {
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Handling SDP as well...", jsep);
                this.publisherJanusHandle.handleRemoteJsep({
                  jsep
                });
                const audio = msg["audio_codec"];

                if (this.myStream && this.myStream.getAudioStracks() && this.myStream.getAudioTracks().length > 0 && !audio) {
                  // Our audio has been rejected
                  janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Our audio stream has been rejected, viewers won't hear us.");
                }

                const video = msg["video_codec"];

                if (this.myStream && this.myStream.getVideoTracks() && this.myStream.getVideoTracks().length > 0 && !video) {
                  janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Our video stream has been rejected, viewers won't see us.");
                }
              }
            },
            error: cause => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error(cause);
            },
            destroyed: () => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Janus destroyed");
            },
            onlocaltrack: (track, on) => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a local track event");
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Local track " + (on ? "added" : "removed") + ":", track);
              var trackId = track.id.replace(/[{}]/g, "");

              if (!on) {
                // Track removed, get rid of the stream and the rendering
                const removedStream = this.localTracks[trackId];

                if (removedStream) {
                  try {
                    var tracks = removedStream.stream.getTracks();

                    for (var i in tracks) {
                      var mst = tracks[i];
                      if (mst) mst.stop();
                    }
                  } catch (e) {}
                }

                if (track.kind === "video") {}

                delete this.localTracks[trackId];
                return;
              } // If we're here, a new track was added


              var stream = this.localTracks[trackId];

              if (stream) {
                // We've been here already
                return;
              } // Make sure there's a mute button and stuff


              if (track.kind === "audio") {
                // Local audio is ignored
                for (const [key, value] of Object.entries(this.audioDevices)) {
                  if (value == track.label) {
                    this.currentlyChosenOverrideAudioDeviceId = key;
                    return;
                  }
                }
              } else {
                // New local video track, create a stream out of it
                const newStream = new MediaStream();
                newStream.addTrack(track.clone());
                this.localTracks[trackId] = {
                  stream: newStream,
                  feedId: trackId,
                  userName: this.myUsername + ' (You)',
                  isMyStream: true
                };
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Created local stream:", stream);
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(newStream.getTracks());
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(newStream.getVideoTracks());

                for (const [key, value] of Object.entries(this.videoDevices)) {
                  if (value == track.label) {
                    this.currentlyChosenOverrideVideoDeviceId = key;
                    return;
                  }
                }
              }
            },
            onremotetrack: (track, mid, on) => {// Pub stream is sendonly
            },
            oncleanup: () => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(" ::: Got a cleanup notification: we are unpublished now :::");
              this.myStream = null;

              if (this.myId) {
                delete this.feedStreams[this.myId];
              }
            }
          });
        },
        error: error => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error(error);
        },
        destroyed: () => {
          console.log('Janus instance destroyed.');
        }
      });
    }

    registerUsernameToJoinAsPublisher() {
      const register = {
        request: "join",
        room: this.myRoomId,
        ptype: "publisher",
        display: this.myUsername
      };
      this.publisherJanusHandle.send({
        message: register
      });
    }

    publishOwnFeed(useAudio, audioDeviceIdOverride, videoDeviceIdOverride) {
      const mediaObject = {};

      if (audioDeviceIdOverride) {
        // @ts-ignore
        if (!mediaObject.audio) {
          // @ts-ignore
          mediaObject.audio = {};
        } // @ts-ignore


        mediaObject.audio = {
          deviceId: {
            exact: audioDeviceIdOverride
          }
        }; // @ts-ignore

        mediaObject.replaceAudio = true;
      }

      if (videoDeviceIdOverride) {
        // @ts-ignore
        if (!mediaObject.video) {
          // @ts-ignore
          mediaObject.video = {};
        } //@ts-ignore


        mediaObject.video = {
          deviceId: {
            exact: videoDeviceIdOverride
          }
        }; // @ts-ignore

        mediaObject.replaceVideo = true;
      }

      this.publisherJanusHandle.createOffer({
        media: Object.assign(Object.assign({}, mediaObject), {
          audioRecv: false,
          videoRecv: false,
          audioSend: useAudio,
          videoSend: true,
          data: true
        }),
        simulcast: this.doSimulcast,
        success: jsep => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a publisher SDP!", jsep);
          const publish = {
            request: "configure",
            audio: useAudio,
            video: true
          }; // TODO you can force a codec here, check demo code

          this.publisherJanusHandle.send({
            message: publish,
            jsep
          });
        },
        error: error => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error("WebRTC error: ", error);

          if (useAudio) {
            this.publishOwnFeed(false);
          } else {// ?
          }
        }
      });
    }

    toggleMute() {
      this.isMuted = this.publisherJanusHandle.isAudioMuted();
      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log((this.isMuted ? "Unmuting" : "Muting") + " local stream...");
      if (this.isMuted) this.publisherJanusHandle.unmuteAudio();else this.publisherJanusHandle.muteAudio();
      this.isMuted = this.publisherJanusHandle.isAudioMuted();
    }

    toggleCamera() {
      this.isVideoMuted = this.publisherJanusHandle.isVideoMuted();
      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log((this.isMuted ? "Unmuting" : "Muting") + " local video stream...");
      if (this.isVideoMuted) this.publisherJanusHandle.unmuteVideo();else this.publisherJanusHandle.muteVideo();
      this.isVideoMuted = this.publisherJanusHandle.isVideoMuted();
    }

    selectAudioDevice(key) {
      this.currentlyChosenOverrideAudioDeviceId = key;
      this.publishOwnFeed(true, key);
    }

    selectVideoDevice(key) {
      this.currentlyChosenOverrideVideoDeviceId = key;
      this.publishOwnFeed(true, undefined, key);
    }

    unpublishOwnFeed() {
      const unpublish = {
        request: "unpublish"
      };
      this.publisherJanusHandle.send({
        message: unpublish
      });
    }

    messageHandle_OnJoinedEvent(msg) {
      this.myId = msg["id"];
      this.myPrivateId = msg["private_id"];
      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Successfully joined room " + msg["room"] + " with ID " + this.myId + " and private ID " + this.myPrivateId); // Here, if subscriber_mode === true hide videojoin, else publishOwnFeed

      if (this.subscriberMode) {// ?
      } else {
        this.publishOwnFeed(true);
      }

      if (msg["publishers"]) {
        this.handlePublisherEvent(msg);
      }
    }

    messageHandle_OnDestroyedEvent(msg) {
      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("The room has been destroyed.");
    }

    messageHandle_OnGeneralEvent(msg) {
      if (msg["streams"]) {
        // Could be a new stream to subscribe to
        const streams = msg["streams"];

        for (const streamIdx in streams) {
          const stream = streams[streamIdx];
          stream["id"] = this.myId;
          stream["display"] = this.myUsername;
        }

        if (!this.myId) return;
        this.feedStreams[this.myId] = {
          id: this.myId,
          display: this.myUsername,
          streams
        };
      } else if (msg["publishers"]) {
        const publisherList = msg["publishers"];
        janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a list of available pubs: ", publisherList);
        this.handlePublisherEvent(msg);
      } else if (msg["leaving"]) {
        const leavingPublisher = msg["leaving"];
        janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("A publisher left: " + leavingPublisher, msg);
        this.unsubscribeFrom(leavingPublisher);
      } else if (msg["unpublished"]) {
        const publisherLeft = msg["unpublished"];
        janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Publisher left: " + publisherLeft, msg);

        if (publisherLeft === 'ok') {// Apparently, we left if this is the cast? (Local instance)
          // thispluginhandle.hangup(); return;
        }

        this.unsubscribeFrom(publisherLeft);
      } else if (msg["error"]) {
        janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Some kind of error occurred.", msg["error"]);
      }
    }

    handlePublisherEvent(msg) {
      const list = msg["publishers"];
      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a list of available publishers: ", list);
      let sources;

      for (const entryIdx in list) {
        if (list[entryIdx]["dummy"]) {
          continue;
        }

        const id = list[entryIdx]["id"];
        const display = list[entryIdx]["display"];
        const streams = list[entryIdx]["streams"];

        for (const streamIdx in streams) {
          const stream = streams[streamIdx];
          stream["id"] = id;
          stream["display"] = display;
        }

        this.feedStreams[id] = {
          id,
          display,
          streams
        };
        janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Stream " + id + " display: " + display + " streams: ", streams);

        if (!sources) {
          sources = [];
        }

        if (id === this.screenshareId || id === this.myId) {
          continue;
        }

        sources.push(streams);
      }

      if (sources) {
        this.subscribeTo(sources);
      }
    }

    subscribeTo(sources) {
      if (this.isCurrentlyCreatingASubscription) {
        setTimeout(() => {
          this.subscribeTo(sources);
        }, 500);
        return;
      } // Plugin handle for sub already exists


      if (this.subscriberJanusHandle) {
        const subscription = this.subscriber_HandleSubscription(sources);

        if (subscription.length > 0) {
          this.subscriberJanusHandle.send({
            message: {
              request: "subscribe",
              streams: subscription
            }
          });
        }

        return;
      }

      this.isCurrentlyCreatingASubscription = true;
      this.janus.attach({
        plugin: "janus.plugin.videoroom",
        opaqueId: this.opaqueId,
        success: pluginHandle => {
          this.subscriberJanusHandle = pluginHandle;
          this.remoteTracks = {};
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Plugin attached! (" + this.subscriberJanusHandle.getPlugin() + ", id=" + this.subscriberJanusHandle.getId() + ")");
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("  -- This is a multistream subscriber");
          const subscription = this.subscriber_HandleSubscription(sources);
          const subscribe = {
            request: "join",
            room: this.myRoomId,
            ptype: "subscriber",
            streams: subscription,
            private_id: this.myPrivateId
          };
          this.subscriberJanusHandle.send({
            message: subscribe
          });
        },
        error: error => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error("Error attaching plugin...", error);
        },
        iceState: state => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("ICE state (remote feed) changed to " + state);
        },
        webrtcState: on => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Janus says this WebRTC PeerConnection (remote feed) is " + (on ? "up" : "down") + " now");
        },
        slowLink: (uplink, lost, mid) => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Janus reports problems " + (uplink ? "sending" : "receiving") + " packets on mid " + mid + " (" + lost + " lost packets)");
        },
        onmessage: (msg, jsep) => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a message (subscriber)", msg);
          const event = msg["videoroom"];
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Event: ", event);

          if (msg["error"]) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Subscriber error: ", msg["error"]);
          } else if (event) {
            if (event === "attached") {
              // Now we have a working subscription, next requests will update this one
              this.isCurrentlyCreatingASubscription = false;
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Successfully attached to feed in room " + msg["room"]);
            } else if (event === "event") {
              this.subscriber_HandleGeneralEvent(msg);
            }
          }

          if (msg["streams"]) {
            this.subscriber_HandleStreamsEvent(msg);
          }

          if (jsep) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Handling SDP as well...", jsep); // Answer and attach

            const myRoom = this.myRoomId;
            const remoteFeed = this.subscriberJanusHandle;
            this.subscriberJanusHandle.createAnswer({
              jsep: jsep,
              // Add data:true here if you want to subscribe to datachannels as well
              // (obviously only works if the publisher offered them in the first place)
              media: {
                audioSend: false,
                videoSend: false,
                data: true
              },
              success: function (jsep) {
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got SDP!");
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug(jsep);
                const body = {
                  request: "start",
                  room: myRoom
                };
                remoteFeed.send({
                  message: body,
                  jsep: jsep
                });
              },
              error: function (error) {
                janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error("WebRTC error:", error);
              }
            });
          }
        },
        onlocaltrack: (track, on) => {// Subscriber only receives data
        },
        onremotetrack: (track, mid, on) => {
          const sub = this.subStreams[mid];
          const feed = this.feedStreams[sub.feed_id];
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("This track is coming from feed " + sub.feed_id + ":", feed);
          let slot = this.slots[mid];

          if (feed && !slot) {
            slot = feed.slot;
            this.slots[mid] = feed.slot;
            this.mids[feed.slot] = mid;
          }

          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("mid " + mid + " is in slot " + slot);

          if (!on) {
            // Track was removed, get rid of the stream and the rendering in the UI
            const stream = this.remoteTracks[mid];

            if (stream) {
              try {
                const tracks = stream.stream.getTracks();

                for (const trackIdx in tracks) {
                  const mst = tracks[trackIdx];

                  if (mst) {
                    mst.stop();
                  }
                }
              } catch (e) {}
            } // Remove from UI!!!! (They are calling a jquery remove here TODO)


            if (track.kind === "video" && feed) {
              feed.remoteVideos--;

              if (feed.remoteVideos === 0) {// NO videos, show a placeholder instead!
              }
            }

            this.ngZone.run(() => {
              delete this.remoteTracks[mid];
            });
            delete this.mids[this.slots];
            return;
          } // If we are here, a new track was added


          if (feed.spinner) {
            feed.spinner.stop();
            feed.spinner = null;
          }

          if (track.kind === "audio") {
            // New audio track, create a stream out of it and use a hidden <audio> element to play it
            const newStream = new MediaStream();
            newStream.addTrack(track.clone());
            this.ngZone.run(() => {
              this.remoteTracks[mid] = {
                stream: newStream,
                feedId: feed.id,
                userName: feed.display
              };
            });
            const speechEvents = hark__WEBPACK_IMPORTED_MODULE_2__(newStream, {});
            const that = this;
            speechEvents.on('speaking', function () {
              that.ngZone.run(() => {
                that.talkingFeeds[feed.id] = true;
                that.talkingFeedsSubject.next(that.talkingFeeds);
              });
              console.log('speaking: ', feed.id, that.talkingFeeds);
            });
            speechEvents.on('stopped_speaking', function () {
              that.ngZone.run(() => {
                that.talkingFeeds[feed.id] = false;
                that.talkingFeedsSubject.next(that.talkingFeeds);
              });
              console.log('stopped_speaking: ', feed.id);
            });
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Created remote audio stream: ", newStream); // They are calling:
            // ($('#videoremote' + slot).append('<audio class="hide" id="remotevideo' + slot + '-' + mid + '" autoplay playsinline/>');
            // Janus.attachMediaStream($('#remotevideo' + slot + '-' + mid).get(0), stream);

            if (feed.remoteVideos === 0) {// There is no video, at least for now. Show a placeholder in the video UI
            }
          } else {
            // New video track, create a stream out of it
            feed.remoteVideos++;
            const newStream = new MediaStream();
            newStream.addTrack(track.clone());
            let isScreenshare = false;

            if (feed.display.includes("_screen")) {
              isScreenshare = true;
              this.screensharingIsActive = true;
              this.screenshareStateSubject.next("start");
              this.talkingFeedsSubject.next(this.talkingFeeds);
            }

            this.ngZone.run(() => {
              this.remoteTracks[mid] = {
                stream: newStream,
                feedId: feed.id,
                isScreenshare: isScreenshare,
                userName: feed.display.replace("_screen", "'s Screen")
              };
            });
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Created remote video stream: ", newStream, "for feed: ", feed); // Append video stream! (they are calling jquery)
            // Bitrate timer stuff?
            // TODO Does this just display the bitrate of the streams?
          }
        },
        ondataopen: (label, protocol) => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("The DataChannel is available!" + " - " + label + " - " + protocol);
        },
        oncleanup: () => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Got a cleanup notification (remote feed)");
        },
        ondata: data => {
          this.dataCallback(data);
        }
      });
    }

    unsubscribeFrom(id) {
      const feed = this.feedStreams[id];

      if (!feed) {
        return;
      }

      janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Feed " + id + " (" + feed.display + ") has left the room, detaching");
      delete this.simulcastStarted[feed.slot];
      delete this.feeds[feed.slot];
      delete this.feedStreams[id];
      const unsubscribe = {
        request: "unsubscribe",
        streams: [{
          feed: id
        }]
      };

      if (this.subscriberJanusHandle !== null) {
        this.subscriberJanusHandle.send({
          message: unsubscribe
        });
      }

      delete this.subscriptions[id];

      if (feed.display.includes("_screen")) {
        this.screensharingIsActive = false;
        this.screenshareStateSubject.next("stop");
        this.talkingFeedsSubject.next(this.talkingFeeds);
      }
    }

    subscriber_HandleSubscription(sources) {
      var _a;

      const subscription = [];

      for (const sourceIdx in sources) {
        const streams = sources[sourceIdx];

        for (const streamIdx in streams) {
          const stream = streams[streamIdx]; // If the publisher is VP8/VP9 and this is an older Safari, let's avoid video

          if (stream.type === "video" && janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.webRTCAdapter.browserDetails.browser === "safari" && (stream.codec === "vp9" || stream.codec === "vp8" && !janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.safariVp8)) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Publisher is using " + stream.codec.toUpperCase + ", but Safari doesn't support it: disabling video stream #" + stream.mindex);
            continue;
          }

          if (stream.disabled) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Disabled stream:", stream); // TODO Skipping for now, we should unsubscribe

            continue;
          }

          if (this.subscriptions[stream.id] && this.subscriptions[stream.id][stream.mid]) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Already subscribed to stream, skipping:", stream);
            continue;
          } // Find an empty slot in the UI for each new source


          if (!((_a = this.feedStreams[stream.id]) === null || _a === void 0 ? void 0 : _a.slot)) {
            let slot;

            for (let i = 1; i < 6; i++) {
              if (!this.feeds[i]) {
                slot = i;
                this.feeds[slot] = stream.id;
                this.feedStreams[stream.id].slot = slot;
                this.feedStreams[stream.id].remoteVideos = 0;
              }
            }
          }

          subscription.push({
            feed: stream.id,
            mid: stream.mid // This is optional (all streams, if missing)

          });
          if (!this.subscriptions[stream.id]) this.subscriptions[stream.id] = {};
          this.subscriptions[stream.id][stream.mid] = true;
        }
      }

      return subscription;
    }

    subscriber_HandleGeneralEvent(msg) {
      const mid = msg["mid"];
      const substream = msg["substream"];
      const temporal = msg["temporal"];

      if (substream !== null && substream !== undefined || temporal !== null && temporal !== undefined) {
        // Check which this feed this refers to
        const sub = this.subStreams[mid];
        const feed = this.feedStreams[sub.feed_id];
        const slot = this.slots[mid];

        if (!this.simulcastStarted[slot]) {
          this.simulcastStarted[slot] = true; // Add some new buttons
          // addSimulcastButtons(slot, true);
        } // We just received notice that there's been a switch, update the buttons
        // updateSimulcastButtons(slot, substream, temporal);

      } else {// ?
      }
    }

    subscriber_HandleStreamsEvent(msg) {
      for (const streamIdx in msg["streams"]) {
        const mid = msg["streams"][streamIdx]["mid"];
        this.subStreams[mid] = msg["streams"][streamIdx];
        const feed = this.feedStreams[msg["streams"][streamIdx]["feed_id"]];

        if (feed && feed.slot) {
          this.slots[mid] = feed.slot;
          this.mids[feed.slot] = mid;
        }
      }
    }

    startScreenshare() {
      var _this = this;

      return (0,_Users_sebastianfelger_Documents_TUD_SS22_PSSS_lecturePlayer_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        if (!_this.screenshareJanusHandle) {
          _this.attachScreenshareHandle();
        } else {
          // const displayMedia = await navigator.mediaDevices.getDisplayMedia({video: true, audio: false});
          _this.screenshareJanusHandle.createOffer({
            media: {
              audioRecv: false,
              videoRecv: false,
              audioSend: false,
              videoSend: true,
              video: "screen",
              screenshareFrameRate: 25
            },
            simulcast: _this.doSimulcast,
            success: jsep => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a publisher SDP!", jsep);
              const publish = {
                request: "configure",
                audio: true,
                video: true
              }; // TODO you can force a codec here, check demo code

              _this.screenshareJanusHandle.send({
                message: publish,
                jsep
              });

              _this.myScreenshareIsActive = true;
            },
            error: error => {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error("WebRTC error: ", error); // TODO Notify that something went wrong
            }
          });
        }
      })();
    }

    stopScreenshare() {
      if (this.myScreenshareIsActive) {
        const unpublish = {
          request: "unpublish"
        };
        this.screenshareJanusHandle.send({
          message: unpublish
        });
        this.screenshareJanusHandle.hangup();
        this.myScreenshareIsActive = false;
      }
    }

    attachScreenshareHandle() {
      this.janus.attach({
        plugin: "janus.plugin.videoroom",
        opaqueId: this.opaqueId,
        success: pluginHandle => {
          this.screenshareJanusHandle = pluginHandle;
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Plugin attached!" + this.screenshareJanusHandle.getPlugin() + ", id=" + this.screenshareJanusHandle.getId() + ")"); // NOTE: probably a debug thing to leave this here. TODO remove

          const register = {
            request: "join",
            room: this.myRoomId,
            ptype: "publisher",
            display: this.myUsername + "_screen"
          };
          this.screenshareJanusHandle.send({
            message: register
          }); //Janus.listDevices(this.initDeviceList);
        },
        iceState: state => {
          console.log('ICE state changed to ' + state);
        },
        webrtcState: on => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Janus says our WebRTC PeerConnection is " + (on ? "up" : "down") + " now");
        },
        onmessage: (msg, jsep) => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug('::: Got a message (publisher) :::');
          const event = msg["videoroom"];

          if (event) {
            if (event === "joined") {
              this.screenshareId = msg["id"];
              this.privateScreenshareId = msg["private_id"];
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Successfully joined room " + msg["room"] + " with ID " + this.screenshareId + " and private ID " + this.privateScreenshareId); // Here, if subscriber_mode === true hide videojoin, else publishOwnFeed

              this.startScreenshare();

              if (this.subscriberMode) {// ?
              } else {}

              if (msg["publishers"]) {//this.handlePublisherEvent(msg);
              }
            } else if (event === "destroyed") {
              this.messageHandle_OnDestroyedEvent(msg);
            } else if (event === "event") {
              this.messageHandle_OnGeneralEvent(msg);
            }
          }

          if (jsep) {
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Handling SDP as well...", jsep);
            this.screenshareJanusHandle.handleRemoteJsep({
              jsep
            });
            const audio = msg["audio_codec"];

            if (this.myScreenshareStream && this.myScreenshareStream.getAudioStracks() && this.myScreenshareStream.getAudioTracks().length > 0 && !audio) {
              // Our audio has been rejected
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Our audio stream has been rejected, viewers won't hear us.");
            }

            const video = msg["video_codec"];

            if (this.myScreenshareStream && this.myScreenshareStream.getVideoTracks() && this.myScreenshareStream.getVideoTracks().length > 0 && !video) {
              janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.warn("Our video stream has been rejected, viewers won't see us.");
            }
          }
        },
        error: cause => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.error(cause);
        },
        destroyed: () => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Janus destroyed");
        },
        onlocaltrack: (track, on) => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Got a local track event");
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.debug("Local track " + (on ? "added" : "removed") + ":", track);
          track.addEventListener('ended', () => {
            this.stopScreenshare();
          });
          var trackId = track.id.replace(/[{}]/g, "");

          if (!on) {
            // Track removed, get rid of the stream and the rendering
            const removedStream = this.localTracks[trackId];

            if (removedStream) {
              try {
                var tracks = removedStream.stream.getTracks();

                for (var i in tracks) {
                  var mst = tracks[i];
                  if (mst) mst.stop();
                }
              } catch (e) {}
            }

            if (track.kind === "video") {}

            delete this.localTracks[trackId];
            return;
          } // If we're here, a new track was added


          var stream = this.localTracks[trackId];

          if (stream) {
            // We've been here already
            return;
          } // Make sure there's a mute button and stuff


          if (track.kind === "audio") {// Local audio is ignored
          } else {
            // New local video track, create a stream out of it
            const newStream = new MediaStream();
            newStream.addTrack(track.clone());
            this.localTracks[trackId] = {
              stream: newStream,
              feedId: trackId,
              isScreenshare: true,
              userName: 'My Screenshare',
              isMyStream: true
            };
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log("Created local stream:", stream);
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(newStream.getTracks());
            janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(newStream.getVideoTracks());
          }
        },
        onremotetrack: (track, mid, on) => {// Pub stream is sendonly
        },
        oncleanup: () => {
          janus_gateway__WEBPACK_IMPORTED_MODULE_1__.Janus.log(" ::: Got a cleanup notification: we are unpublished now :::");
          this.myScreenshareStream = null;

          if (this.screenshareId) {
            delete this.feedStreams[this.screenshareId];
          }
        }
      });
    }

    toggleScreenshare() {
      if (!this.myScreenshareIsActive) {
        this.startScreenshare();
      } else if (this.myScreenshareIsActive) {
        for (const [key, value] of Object.entries(this.localTracks)) {
          if (value.isScreenshare) {
            for (var i of value.stream.getTracks()) {
              if (i) {
                i.stop();
              }
            }

            delete this.localTracks[key];
          }
        }

        this.stopScreenshare();
      } else {
        console.error("Something went horribly wrong with screenshare!");
      }
    }

    muteRemoteAudioLocallyForFeedId(feedId) {
      let mute = true;

      if (this.locallyMutedRemoteAudioFeeds[feedId]) {
        mute = false;
      }

      this.locallyMutedRemoteAudioFeeds[feedId] = mute;
    }

    setOnData(consumer) {
      this.dataCallback = consumer;
    }

    sendData(data) {
      this.publisherJanusHandle.data({
        data: data
      });
    }

  }

  JanusService.ɵfac = function JanusService_Factory(t) {
    return new (t || JanusService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgZone));
  };

  JanusService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: JanusService,
    factory: JanusService.ɵfac,
    providedIn: 'root'
  });
  return JanusService;
})();

/***/ }),

/***/ 8818:
/*!**********************************************!*\
  !*** ./src/app/services/playback.service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlaybackService": () => (/* binding */ PlaybackService)
/* harmony export */ });
/* harmony import */ var _action_action_executor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../action/action.executor */ 8031);
/* harmony import */ var _action_stream_action_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../action/stream-action-player */ 486);
/* harmony import */ var _render_render_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/render-controller */ 4708);
/* harmony import */ var _utils_sync_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/sync-state */ 8535);




class PlaybackService {
  constructor(playbackModel) {
    this.playbackModel = playbackModel;
    this.documents = new Map();
    PlaybackService._instance = this;
  }

  static getInstance() {
    return this._instance;
  }

  initialize(slideView, courseState, documents, startTime) {
    this._slideView = slideView;
    documents.forEach(doc => {
      this.addDocument(doc);
    });
    const startTimeMs = Number(startTime); // const mediaPlayer = new MediaPlayer(playerView.getMediaElement());
    // mediaPlayer.muted = this.playbackModel.getMuted();
    // mediaPlayer.addTimeListener(() => {
    //
    // });
    // Select active document.

    const activeStateDoc = courseState.avtiveDocument;
    let activeDoc = null;

    if (activeStateDoc) {
      for (const doc of documents) {
        if (doc.getDocumentId() === activeStateDoc.documentId) {
          activeDoc = doc;
          break;
        }
      }
    }

    this.renderController = new _render_render_controller__WEBPACK_IMPORTED_MODULE_2__.RenderController();
    this.renderController.setActionRenderSurface(slideView.getActionRenderSurface());
    this.renderController.setSlideRenderSurface(slideView.getSlideRenderSurface());
    this.renderController.setVolatileRenderSurface(slideView.getVolatileRenderSurface());
    this.renderController.setTextLayerSurface(slideView.getTextLayerSurface());
    const executor = new _action_action_executor__WEBPACK_IMPORTED_MODULE_0__.StreamActionExecutor(this.renderController);

    if (activeDoc) {
      executor.setDocument(activeDoc);
    }

    if (activeStateDoc && activeStateDoc.activePage) {
      executor.setPageNumber(activeStateDoc.activePage.pageNumber);
    }

    this.actionPlayer = new _action_stream_action_player__WEBPACK_IMPORTED_MODULE_1__.StreamActionPlayer(executor, new _utils_sync_state__WEBPACK_IMPORTED_MODULE_3__.SyncState());
    this.actionPlayer.start();
    console.log('PlaybackService initialized. Action player is there.');
  }

  addAction(action) {
    this.actionPlayer.addAction(action);
  }

  addDocument(document) {
    this.documents.set(BigInt(document.getDocumentId()), document);
  }

  removeDocument(docId) {
    this.documents.delete(BigInt(docId));
  }

  selectDocument(docId) {
    this._slideView.repaint();

    const document = this.documents.get(BigInt(docId));

    if (document) {
      this.actionPlayer.setDocument(document);
    }
  }

  getDocuments() {
    return this.documents;
  }

}

/***/ }),

/***/ 6148:
/*!****************************************************!*\
  !*** ./src/app/services/select-overlay.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectOverlayService": () => (/* binding */ SelectOverlayService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

let SelectOverlayService = /*#__PURE__*/(() => {
  class SelectOverlayService {
    constructor() {
      this.isOverlayVisible = false;
      this.options = [];
    }

    trigger(event, options, callback, activeKey) {
      event.stopPropagation(); // @ts-ignore

      const rect = event.target.getBoundingClientRect(); // @ts-ignore

      const osL = rect.left; // @ts-ignore

      const osT = rect.top;
      this.topPx = osT + 'px';
      this.leftPx = osL + 'px';
      this.isOverlayVisible = true;
      this.options = options;
      this.callback = callback;
      this.activeKey = activeKey;
    }

    hideAll() {
      this.options = [];
      this.callback = undefined;
      this.activeKey = '';
      this.isOverlayVisible = false;
    }

    optionSelected(option) {
      if (this.callback) {
        this.callback(option);
        this.callback = undefined;
      }
    }

  }

  SelectOverlayService.ɵfac = function SelectOverlayService_Factory(t) {
    return new (t || SelectOverlayService)();
  };

  SelectOverlayService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: SelectOverlayService,
    factory: SelectOverlayService.ɵfac,
    providedIn: 'root'
  });
  return SelectOverlayService;
})();

/***/ }),

/***/ 9329:
/*!************************************!*\
  !*** ./src/app/tool/arrow.tool.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrowTool": () => (/* binding */ ArrowTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_arrow_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/arrow.shape */ 8888);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);




class ArrowTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_arrow_shape__WEBPACK_IMPORTED_MODULE_1__.ArrowShape(this.shapeHandle, this.brush);
    this.shape.setP0(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.setKeyEvent(this.context.keyEvent);
    this.shape.setP1(point);
  }

}



/***/ }),

/***/ 8534:
/*!*************************************!*\
  !*** ./src/app/tool/atomic.tool.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AtomicTool": () => (/* binding */ AtomicTool)
/* harmony export */ });
class AtomicTool {
  execute(point) {// No action
  }

  end(point) {// No action
  }

}



/***/ }),

/***/ 5496:
/*!*******************************************!*\
  !*** ./src/app/tool/clear-shapes.tool.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClearShapesTool": () => (/* binding */ ClearShapesTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_action_remove_shape_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/action/remove-shape.action */ 7472);



class ClearShapesTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  begin(point, context) {
    const shapes = Object.assign([], context.page.getShapes());
    context.page.addAction(new _model_action_remove_shape_action__WEBPACK_IMPORTED_MODULE_1__.RemoveShapeAction(shapes));
  }

}



/***/ }),

/***/ 10:
/*!************************************!*\
  !*** ./src/app/tool/clone.tool.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CloneTool": () => (/* binding */ CloneTool)
/* harmony export */ });
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);


class CloneTool {
  begin(point, context) {
    this.sourcePoint = point.clone();
    this.context = context;
    this.getSelectedShapes();

    if (this.hasSelectedShapes()) {
      if (this.hitSelected(point)) {
        const cloned = new Array();

        for (let shape of this.selectedShapes) {
          const clonedShape = shape.clone();
          cloned.push(clonedShape);
        }

        context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_0__.AddShapeAction(cloned));
      } else {
        this.removeSelection();
      }
    } else {
      const selectedShape = this.getTopLevelShape(point);

      if (selectedShape != null) {
        const clonedShape = selectedShape.clone();
        context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_0__.AddShapeAction([clonedShape]));
        this.addSelection(clonedShape);
      }
    }
  }

  execute(point) {
    this.sourcePoint.subtract(point);
    this.moveShapes(point, this.sourcePoint);
    this.sourcePoint = point.clone();
  }

  end(point) {// No-op
  }

  getTopLevelShape(point) {
    let shape = null;

    for (let s of this.context.page.getShapes()) {
      if (s.contains(point)) {
        shape = s;
      }
    }

    return shape;
  }

  getSelectedShapes() {
    this.selectedShapes = new Array();

    for (let shape of this.context.page.getShapes()) {
      if (shape.isSelected()) {
        this.selectedShapes.push(shape);
      }
    }
  }

  moveShapes(point, delta) {
    if (!this.hasSelectedShapes()) {
      return;
    }

    this.context.beginBulkRender();

    for (let shape of this.selectedShapes) {
      shape.moveByDelta(delta);
    }

    this.context.endBulkRender();
  }

  hasSelectedShapes() {
    return this.selectedShapes.length != 0;
  }

  addSelection(shape) {
    shape.setSelected(true);
    this.selectedShapes.push(shape);
  }

  removeSelection() {
    this.context.beginBulkRender();

    for (let shape of this.selectedShapes) {
      shape.setSelected(false);
    }

    this.selectedShapes.length = 0;
    this.context.endBulkRender();
  }

  hitSelected(point) {
    for (let shape of this.selectedShapes) {
      if (shape.contains(point)) {
        return true;
      }
    }

    return false;
  }

}



/***/ }),

/***/ 2065:
/*!*******************************************!*\
  !*** ./src/app/tool/delete.shape.tool.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeleteShapeTool": () => (/* binding */ DeleteShapeTool)
/* harmony export */ });
/* harmony import */ var _model_action_remove_shape_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/action/remove-shape.action */ 7472);


class DeleteShapeTool {
  constructor(shapeHandle) {
    this.shapeHandle = shapeHandle;
  }

  begin(point, context) {
    for (const shape of context.page.getShapes()) {
      if (shape.handle === this.shapeHandle) {
        context.page.addAction(new _model_action_remove_shape_action__WEBPACK_IMPORTED_MODULE_0__.RemoveShapeAction(new Array(shape)));
        break;
      }
    }
  }

  execute(point) {// No-op
  }

  end(point) {// No-op
  }

}



/***/ }),

/***/ 2817:
/*!**************************************!*\
  !*** ./src/app/tool/ellipse.tool.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EllipseTool": () => (/* binding */ EllipseTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_ellipse_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/ellipse.shape */ 6500);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);




class EllipseTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_ellipse_shape__WEBPACK_IMPORTED_MODULE_1__.EllipseShape(this.shapeHandle, this.brush);
    this.shape.setP0(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.setKeyEvent(this.context.keyEvent);
    this.shape.setP1(point);
  }

}



/***/ }),

/***/ 1562:
/*!******************************************!*\
  !*** ./src/app/tool/extend-view.tool.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtendViewTool": () => (/* binding */ ExtendViewTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);


class ExtendViewTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(rect) {
    super();
    this.rect = rect;
  }

  begin(point, context) {
    context.page.getSlideShape().setPageRect(this.rect);
  }

}



/***/ }),

/***/ 7062:
/*!******************************************!*\
  !*** ./src/app/tool/highlighter.tool.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HighlighterTool": () => (/* binding */ HighlighterTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_stroke_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/stroke.shape */ 5547);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);




class HighlighterTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.shape = new _model_shape_stroke_shape__WEBPACK_IMPORTED_MODULE_1__.StrokeShape(this.shapeHandle, this.brush);
    this.shape.addPoint(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.addPoint(point);
  }

}



/***/ }),

/***/ 6444:
/*!*****************************************!*\
  !*** ./src/app/tool/latex-font.tool.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexFontTool": () => (/* binding */ LatexFontTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/latex.shape */ 1767);



class LatexFontTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(handle, font, textColor, textAttributes) {
    super();
    this.handle = handle;
    this.font = font;
    this.textColor = textColor;
    this.textAttributes = textAttributes;
  }

  begin(point, context) {
    const shapes = context.page.getShapes();

    for (let shape of shapes) {
      if (shape instanceof _model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_1__.LatexShape && shape.handle === this.handle) {
        shape.setFont(this.font);
        shape.setTextColor(this.textColor);
        shape.setTextAttributes(this.textAttributes);
        break;
      }
    }
  }

}



/***/ }),

/***/ 8004:
/*!************************************!*\
  !*** ./src/app/tool/latex.tool.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatexTool": () => (/* binding */ LatexTool)
/* harmony export */ });
/* harmony import */ var _model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/shape/latex.shape */ 1767);


class LatexTool {
  constructor(handle) {
    this.handle = handle;
  }

  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_latex_shape__WEBPACK_IMPORTED_MODULE_0__.LatexShape(this.handle);
  }

  execute(point) {// No-op
  }

  end(point) {
    this.shape.setLocation(point);
    this.context.page.addShape(this.shape);
  }

}



/***/ }),

/***/ 9485:
/*!***********************************!*\
  !*** ./src/app/tool/line.tool.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineTool": () => (/* binding */ LineTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_line_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/line.shape */ 449);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);




class LineTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_line_shape__WEBPACK_IMPORTED_MODULE_1__.LineShape(this.shapeHandle, this.brush);
    this.shape.setP0(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.setKeyEvent(this.context.keyEvent);
    this.shape.setP1(point);
  }

}



/***/ }),

/***/ 5771:
/*!************************************!*\
  !*** ./src/app/tool/paint.tool.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PaintTool": () => (/* binding */ PaintTool)
/* harmony export */ });
class PaintTool {
  begin(point, context) {}

  execute(point) {}

  end(point) {}

}



/***/ }),

/***/ 7989:
/*!**********************************!*\
  !*** ./src/app/tool/pan.tool.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PanTool": () => (/* binding */ PanTool)
/* harmony export */ });
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/rectangle */ 7723);


class PanTool {
  begin(point, context) {
    this.context = context;
    this.lastPoint = point;
  }

  execute(point) {
    const slideShape = this.context.page.getSlideShape();
    const pageRect = slideShape.bounds;
    const x = pageRect.x + (this.lastPoint.x - point.x);
    const y = pageRect.y + (this.lastPoint.y - point.y);
    slideShape.setPageRect(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle(x, y, pageRect.width, pageRect.height));
    this.lastPoint = point;
  }

  end(point) {// No-op
  }

}



/***/ }),

/***/ 8395:
/*!**********************************!*\
  !*** ./src/app/tool/pen.tool.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PenTool": () => (/* binding */ PenTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);
/* harmony import */ var _model_shape_pen_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/shape/pen.shape */ 4259);




class PenTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.shape = new _model_shape_pen_shape__WEBPACK_IMPORTED_MODULE_2__.PenShape(this.shapeHandle, this.brush);
    this.shape.addPoint(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_1__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.addPoint(point);
  }

  end(point) {// No-op
  }

}



/***/ }),

/***/ 5205:
/*!**************************************!*\
  !*** ./src/app/tool/pointer.tool.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PointerTool": () => (/* binding */ PointerTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_pointer_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/pointer.shape */ 2337);



class PointerTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.page = context.page;
    this.shape = new _model_shape_pointer_shape__WEBPACK_IMPORTED_MODULE_1__.PointerShape(this.shapeHandle, this.brush);
    this.shape.addPoint(point);
    this.page.addShape(this.shape);
  }

  execute(point) {
    this.shape.addPoint(point);
  }

  end(point) {
    this.page.removeShape(this.shape);
  }

}



/***/ }),

/***/ 8156:
/*!****************************************!*\
  !*** ./src/app/tool/rectangle.tool.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RectangleTool": () => (/* binding */ RectangleTool)
/* harmony export */ });
/* harmony import */ var _paint_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paint.tool */ 5771);
/* harmony import */ var _model_shape_rectangle_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/rectangle.shape */ 4614);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);




class RectangleTool extends _paint_tool__WEBPACK_IMPORTED_MODULE_0__.PaintTool {
  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_rectangle_shape__WEBPACK_IMPORTED_MODULE_1__.RectangleShape(this.shapeHandle, this.brush);
    this.shape.setP0(point);
    context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_2__.AddShapeAction([this.shape]));
  }

  execute(point) {
    this.shape.setKeyEvent(this.context.keyEvent);
    this.shape.setP1(point);
  }

}



/***/ }),

/***/ 9223:
/*!***********************************!*\
  !*** ./src/app/tool/redo.tool.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RedoTool": () => (/* binding */ RedoTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);


class RedoTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  begin(point, context) {
    context.page.redo();
  }

}



/***/ }),

/***/ 5912:
/*!*******************************************!*\
  !*** ./src/app/tool/select-group.tool.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectGroupTool": () => (/* binding */ SelectGroupTool)
/* harmony export */ });
/* harmony import */ var _model_shape_select_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/shape/select.shape */ 2348);

var Mode = /*#__PURE__*/(() => {
  (function (Mode) {
    Mode[Mode["Select"] = 0] = "Select";
    Mode[Mode["Move"] = 1] = "Move";
  })(Mode || (Mode = {}));

  return Mode;
})();

class SelectGroupTool {
  begin(point, context) {
    this.sourcePoint = point.clone();
    this.context = context;
    this.initialized = false;
    this.shape = new _model_shape_select_shape__WEBPACK_IMPORTED_MODULE_0__.SelectShape();
    this.context.page.addShape(this.shape);
    this.getSelectedShapes();

    if (this.hasSelectedShapes()) {
      if (this.hitSelected(point)) {
        this.mode = Mode.Move;
      } else {
        this.context.beginBulkRender();
        this.removeSelection();
        this.context.endBulkRender();
        this.mode = Mode.Select;
      }
    } else {
      this.mode = Mode.Select;
    }
  }

  execute(point) {
    if (this.mode == Mode.Select) {
      if (!this.initialized) {
        this.shape.setP0(point);
        this.initialized = true;
      }

      this.shape.addPoint(point.clone());
      this.shape.setP1(point);
      this.selectGroup(this.shape.bounds);
    } else if (this.mode == Mode.Move) {
      this.sourcePoint.subtract(point);
      this.moveShapes(this.sourcePoint);
      this.sourcePoint = point.clone();
    }
  }

  end(point) {
    this.context.page.removeShape(this.shape);
    this.initialized = false;
  }

  selectGroup(rect) {
    this.context.beginBulkRender();
    this.removeSelection();

    for (let shape of this.context.page.getShapes()) {
      if (shape === this.shape) {
        continue;
      }

      if (shape.intersects(rect)) {
        this.addSelection(shape);
      }
    }

    this.context.endBulkRender();
  }

  addSelection(shape) {
    shape.setSelected(true);
    this.selectedShapes.push(shape);
  }

  getSelectedShapes() {
    this.selectedShapes = new Array();

    for (let shape of this.context.page.getShapes()) {
      if (shape.isSelected()) {
        this.selectedShapes.push(shape);
      }
    }
  }

  hasSelectedShapes() {
    return this.selectedShapes.length != 0;
  }

  hitSelected(point) {
    for (let shape of this.selectedShapes) {
      if (shape.contains(point)) {
        return true;
      }
    }

    return false;
  }

  removeSelection() {
    for (let shape of this.selectedShapes) {
      shape.setSelected(false);
    }

    this.selectedShapes.length = 0;
  }

  moveShapes(delta) {
    if (!this.hasSelectedShapes()) {
      return;
    }

    this.context.beginBulkRender();

    for (let shape of this.selectedShapes) {
      shape.moveByDelta(delta);
    }

    this.context.endBulkRender();
  }

}



/***/ }),

/***/ 5686:
/*!*************************************!*\
  !*** ./src/app/tool/select.tool.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectTool": () => (/* binding */ SelectTool)
/* harmony export */ });
class SelectTool {
  begin(point, context) {
    this.sourcePoint = point.clone();
    this.context = context;
    this.selectedShape = this.getTopLevelShape(point);
    this.removeSelection();

    if (this.selectedShape != null) {
      this.selectedShape.setSelected(true);
    }
  }

  execute(point) {
    if (this.selectedShape != null) {
      this.sourcePoint.subtract(point);
      this.context.beginBulkRender();
      this.selectedShape.moveByDelta(this.sourcePoint);
      this.context.endBulkRender();
      this.sourcePoint = point.clone();
    }
  }

  end(point) {
    if (this.selectedShape != null) {
      this.context.beginBulkRender();
      this.selectedShape.setSelected(false);
      this.context.endBulkRender();
    }
  }

  getTopLevelShape(point) {
    let shape = null;

    for (let s of this.context.page.getShapes()) {
      if (s.contains(point)) {
        shape = s;
      }
    }

    return shape;
  }

  removeSelection() {
    this.context.beginBulkRender();

    for (let shape of this.context.page.getShapes()) {
      if (shape.isSelected()) {
        shape.setSelected(false);
      }
    }

    this.context.endBulkRender();
  }

}



/***/ }),

/***/ 3774:
/*!******************************************!*\
  !*** ./src/app/tool/text-change.tool.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextChangeTool": () => (/* binding */ TextChangeTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/typesetting.shape */ 760);



class TextChangeTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(handle, text) {
    super();
    this.handle = handle;
    this.text = text;
  }

  begin(point, context) {
    const shapes = context.page.getShapes();

    for (let shape of shapes) {
      if (shape instanceof _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__.TypesettingShape && shape.handle === this.handle) {
        shape.setText(this.text);
        break;
      }
    }
  }

}



/***/ }),

/***/ 2294:
/*!****************************************!*\
  !*** ./src/app/tool/text-font.tool.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFontTool": () => (/* binding */ TextFontTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_shape_text_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/text.shape */ 7890);



class TextFontTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(handle, font, textColor, textAttributes) {
    super();
    this.handle = handle;
    this.font = font;
    this.textColor = textColor;
    this.textAttributes = textAttributes;
  }

  begin(point, context) {
    const shapes = context.page.getShapes();

    for (let shape of shapes) {
      if (shape instanceof _model_shape_text_shape__WEBPACK_IMPORTED_MODULE_1__.TextShape && shape.handle === this.handle) {
        shape.setFont(this.font);
        shape.setTextColor(this.textColor);
        shape.setTextAttributes(this.textAttributes);
        break;
      }
    }
  }

}



/***/ }),

/***/ 9045:
/*!*********************************************!*\
  !*** ./src/app/tool/text-highlight.tool.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextHighlightTool": () => (/* binding */ TextHighlightTool)
/* harmony export */ });
/* harmony import */ var _model_shape_text_highlight_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/shape/text-highlight.shape */ 8153);
/* harmony import */ var _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/action/add-shape.action */ 6867);



class TextHighlightTool {
  constructor(shapeHandle, color, textBounds) {
    this.shapeHandle = shapeHandle;
    this.color = color;
    this.textBounds = textBounds;
  }

  begin(point, context) {
    if (this.textBounds.length < 1) {
      return;
    }

    let selectShape = null;

    for (const shape of context.page.getShapes()) {
      if (shape.handle === this.shapeHandle) {
        selectShape = shape;
        break;
      }
    }

    if (!selectShape) {
      selectShape = new _model_shape_text_highlight_shape__WEBPACK_IMPORTED_MODULE_0__.TextHighlightShape(this.shapeHandle, this.color);
      context.page.addAction(new _model_action_add_shape_action__WEBPACK_IMPORTED_MODULE_1__.AddShapeAction([selectShape]));
    }

    for (const rect of this.textBounds) {
      selectShape.addTextBounds(rect);
    }
  }

  execute(point) {// Do nothing.
  }

  end(point) {// Do nothing.
  }

}



/***/ }),

/***/ 3469:
/*!****************************************!*\
  !*** ./src/app/tool/text-move.tool.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextMoveTool": () => (/* binding */ TextMoveTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/typesetting.shape */ 760);



class TextMoveTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(handle, point) {
    super();
    this.handle = handle;
    this.point = point;
  }

  begin(point, context) {
    const shapes = context.page.getShapes();

    for (let shape of shapes) {
      if (shape instanceof _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__.TypesettingShape && shape.handle === this.handle) {
        context.beginBulkRender();
        shape.setLocation(this.point);
        context.endBulkRender();
        break;
      }
    }
  }

}



/***/ }),

/***/ 7134:
/*!******************************************!*\
  !*** ./src/app/tool/text-remove.tool.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextRemoveTool": () => (/* binding */ TextRemoveTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/shape/typesetting.shape */ 760);



class TextRemoveTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  constructor(handle) {
    super();
    this.handle = handle;
  }

  begin(point, context) {
    const shapes = context.page.getShapes();

    for (let shape of shapes) {
      if (shape instanceof _model_shape_typesetting_shape__WEBPACK_IMPORTED_MODULE_1__.TypesettingShape && shape.handle === this.handle) {
        context.page.removeShape(shape);
        break;
      }
    }
  }

}



/***/ }),

/***/ 7280:
/*!***********************************!*\
  !*** ./src/app/tool/text.tool.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextTool": () => (/* binding */ TextTool)
/* harmony export */ });
/* harmony import */ var _model_shape_text_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/shape/text.shape */ 7890);


class TextTool {
  constructor(handle) {
    this.handle = handle;
  }

  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_text_shape__WEBPACK_IMPORTED_MODULE_0__.TextShape(this.handle);
  }

  execute(point) {// No-op
  }

  end(point) {
    this.shape.setLocation(point);
    this.context.page.addShape(this.shape);
  }

}



/***/ }),

/***/ 2474:
/*!**************************************!*\
  !*** ./src/app/tool/tool-context.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ToolContext": () => (/* binding */ ToolContext)
/* harmony export */ });
class ToolContext {
  constructor(renderController) {
    if (renderController) {
      this.renderController = renderController;
    }
  }

  beginBulkRender() {
    this.renderController.beginBulkRender();
  }

  endBulkRender() {
    this.renderController.endBulkRender();
  }

}



/***/ }),

/***/ 1368:
/*!***********************************!*\
  !*** ./src/app/tool/undo.tool.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UndoTool": () => (/* binding */ UndoTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);


class UndoTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  begin(point, context) {
    context.page.undo();
  }

}



/***/ }),

/***/ 6196:
/*!***************************************!*\
  !*** ./src/app/tool/zoom-out.tool.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomOutTool": () => (/* binding */ ZoomOutTool)
/* harmony export */ });
/* harmony import */ var _atomic_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atomic.tool */ 8534);
/* harmony import */ var _geometry_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/rectangle */ 7723);



class ZoomOutTool extends _atomic_tool__WEBPACK_IMPORTED_MODULE_0__.AtomicTool {
  begin(point, context) {
    context.page.getSlideShape().setPageRect(new _geometry_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle(0, 0, 1, 1));
  }

}



/***/ }),

/***/ 6010:
/*!***********************************!*\
  !*** ./src/app/tool/zoom.tool.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZoomTool": () => (/* binding */ ZoomTool)
/* harmony export */ });
/* harmony import */ var _model_shape_zoom_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/shape/zoom.shape */ 4206);


class ZoomTool {
  begin(point, context) {
    this.context = context;
    this.shape = new _model_shape_zoom_shape__WEBPACK_IMPORTED_MODULE_0__.ZoomShape();
    this.context.page.addShape(this.shape);
  }

  execute(point) {
    if (!this.initialized) {
      this.shape.setP0(point);
      this.initialized = true;
    }

    this.shape.setP1(point);
  }

  end(point) {
    this.initialized = false;
    this.context.page.removeShape(this.shape);
    this.context.page.getSlideShape().setPageRect(this.shape.bounds);
  }

}



/***/ }),

/***/ 7345:
/*!*****************************************!*\
  !*** ./src/app/utils/event-listener.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TypedEvent": () => (/* binding */ TypedEvent)
/* harmony export */ });
class TypedEvent {
  constructor() {
    this.listeners = [];
    this.listenersOncer = [];
  }

  subscribe(listener) {
    this.listeners.push(listener);
    return {
      dispose: () => this.unsubscribe(listener)
    };
  }

  subscribeOnce(listener) {
    this.listenersOncer.push(listener);
  }

  unsubscribe(listener) {
    const callbackIndex = this.listeners.indexOf(listener);

    if (callbackIndex > -1) {
      this.listeners.splice(callbackIndex, 1);
    }
  }

  publish(event) {
    this.listeners.forEach(listener => listener(event));
    this.listenersOncer.forEach(listener => listener(event));
    this.listenersOncer = [];
  }

  pipe(te) {
    return this.subscribe(e => te.publish(e));
  }

} //export { Listener, Disposable, TypedEvent };

/***/ }),

/***/ 1679:
/*!******************************************!*\
  !*** ./src/app/utils/executable-base.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExecutableBase": () => (/* binding */ ExecutableBase)
/* harmony export */ });
/* harmony import */ var _executable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./executable */ 3177);
/* harmony import */ var _executable_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./executable-state */ 1077);



class ExecutableBase extends _executable__WEBPACK_IMPORTED_MODULE_0__.Executable {
  init() {
    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Initializing);

    try {
      this.initInternal();
    } catch (e) {
      this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Error);
      throw new Error(`Failed to init ${this.constructor.name}: ${e}`);
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Initialized);
  }

  start() {
    if (this.created() || this.destroyed()) {
      this.init();
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Starting);

    try {
      this.startInternal();
    } catch (e) {
      this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Error);
      throw new Error(`Failed to start ${this.constructor.name}: ${e}`);
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Started);
  }

  stop() {
    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Stopping);

    try {
      this.stopInternal();
    } catch (e) {
      this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Error);
      throw new Error(`Failed to stop ${this.constructor.name}: ${e}`);
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Stopped);
  }

  suspend() {
    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Suspending);

    try {
      this.suspendInternal();
    } catch (e) {
      this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Error);
      throw new Error(`Failed to suspend ${this.constructor.name}: ${e}`);
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Suspended);
  }

  suspendInternal() {}

  destroy() {
    if (this.started() || this.suspended()) {
      stop();
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Destroying);

    try {
      this.destroyInternal();
    } catch (e) {
      this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Error);
      throw new Error(`Failed to destroy ${this.constructor.name}: ${e}`);
    }

    this.setState(_executable_state__WEBPACK_IMPORTED_MODULE_1__.ExecutableState.Destroyed);
  }

}



/***/ }),

/***/ 1077:
/*!*******************************************!*\
  !*** ./src/app/utils/executable-state.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExecutableState": () => (/* binding */ ExecutableState)
/* harmony export */ });
var ExecutableState = /*#__PURE__*/(() => {
  (function (ExecutableState) {
    ExecutableState["Created"] = "Created";
    ExecutableState["Initializing"] = "Initializing";
    ExecutableState["Initialized"] = "Initialized";
    ExecutableState["Starting"] = "Starting";
    ExecutableState["Started"] = "Started";
    ExecutableState["Stopping"] = "Stopping";
    ExecutableState["Stopped"] = "Stopped";
    ExecutableState["Suspending"] = "Suspending";
    ExecutableState["Suspended"] = "Suspended";
    ExecutableState["Destroying"] = "Destroying";
    ExecutableState["Destroyed"] = "Destroyed";
    ExecutableState["Error"] = "Error";
  })(ExecutableState || (ExecutableState = {}));

  return ExecutableState;
})();


/***/ }),

/***/ 3177:
/*!*************************************!*\
  !*** ./src/app/utils/executable.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Executable": () => (/* binding */ Executable)
/* harmony export */ });
/* harmony import */ var _executable_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./executable-state */ 1077);
/* harmony import */ var _event_listener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-listener */ 7345);



class Executable {
  constructor() {
    this.stateEvent = new _event_listener__WEBPACK_IMPORTED_MODULE_1__.TypedEvent();
    this._state = _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Created;
    this._prevState = _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Created;
  }

  get state() {
    return this._state;
  }

  get previousState() {
    return this._prevState;
  }

  initialized() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initialized;
  }

  created() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Created;
  }

  started() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Started;
  }

  stopped() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopped;
  }

  suspended() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Suspended;
  }

  destroyed() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroyed;
  }

  error() {
    return this._state === _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error;
  }

  addStateListener(listener) {
    return this.stateEvent.subscribe(listener);
  }

  removeStateListener(listener) {
    this.stateEvent.unsubscribe(listener);
  }

  fireStateChanged() {
    this.stateEvent.publish(this._state);
  }

  setState(state) {
    //console.log(`Setting state for ${this.constructor.name} to ${state}`);
    if (!this.validateNextState(state)) {
      throw new Error(`Invalid state transition for ${this.constructor.name}: [${this.state}] -> [${state}].`);
    }

    this._prevState = this._state;
    this._state = state;
    this.fireStateChanged();
  }

  validateNextState(nextState) {
    switch (this._state) {
      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Created:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initializing, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initializing:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initialized, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initialized:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Starting, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Starting:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Started, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Started:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Suspending, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopping, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopping:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopped, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopped:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Starting, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Suspending:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Suspended, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Suspended:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Starting, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopping, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroyed, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroyed:
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Initializing);

      case _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Error:
        // Allow to recover from previous operation failure.
        return this.isAllowed(nextState, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Starting, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Stopping, _executable_state__WEBPACK_IMPORTED_MODULE_0__.ExecutableState.Destroying);

      default:
        return false;
    }
  }

  isAllowed(nextState, ...allowedStates) {
    if (!allowedStates) {
      throw new Error("No allowed states provided.");
    }

    for (let allowedState of allowedStates) {
      if (nextState == allowedState) {
        return true;
      }
    }

    return false;
  }

}



/***/ }),

/***/ 1969:
/*!***************************************!*\
  !*** ./src/app/utils/http-request.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpRequest": () => (/* binding */ HttpRequest)
/* harmony export */ });
class HttpRequest {
  constructor(options) {
    this.requestOptions = options || {
      returnType: "body",
      responseType: "json",
      withCredentials: false,
      timeout: 0
    };
  }

  setHttpParams(params) {
    this.requestOptions.params = params;
    return this;
  }

  setHttpHeaders(headers) {
    this.requestOptions.headers = headers;
    return this;
  }

  setReturnType(returnType) {
    this.requestOptions.returnType = returnType;
    return this;
  }

  setResponseType(responseType) {
    this.requestOptions.responseType = responseType;
    return this;
  }

  setWithCredentials(withCredentials) {
    this.requestOptions.withCredentials = withCredentials;
    return this;
  }

  setTimeout(timeout) {
    this.requestOptions.timeout = timeout;
    return this;
  }

  setOptions(options) {
    this.requestOptions = options;
    return this;
  }

  setOnProgress(onProgress) {
    this.onProgress = onProgress;
    return this;
  }

  delete(url) {
    return this.request("DELETE", url);
  }

  get(url) {
    return this.request("GET", url);
  }

  head(url) {
    return this.request("HEAD", url);
  }

  options(url) {
    return this.request("OPTIONS", url);
  }

  patch(url, body) {
    return this.request("PATCH", url, body);
  }

  post(url, body) {
    return this.request("POST", url, body);
  }

  put(url, body) {
    return this.request("PUT", url, body);
  }

  request(method, url, body) {
    const request = new XMLHttpRequest();
    request.open(method, this.composeUrl(url), true);

    if (this.requestOptions.responseType) {
      request.responseType = this.requestOptions.responseType;
    }

    if (this.requestOptions.timeout) {
      request.timeout = this.requestOptions.timeout;
    }

    if (this.requestOptions.withCredentials) {
      request.withCredentials = this.requestOptions.withCredentials;
    }

    this.setHeaders(body, request);
    return new Promise((resolve, reject) => {
      const errorHandler = () => {
        reject(this.getResponse(request));
      };

      request.onload = () => {
        if (request.status >= 200 && request.status < 400) {
          let returnValue = null;

          if (this.requestOptions.returnType === "response") {
            returnValue = this.getResponse(request);
          } else {
            returnValue = this.decodeBody(request);
          }

          resolve(returnValue);
        } else {
          errorHandler();
        }
      };

      request.ontimeout = errorHandler;
      request.onerror = errorHandler;

      if (this.onProgress) {
        if (body && request.upload) {
          request.upload.onprogress = this.onProgress;
        } else {
          request.onprogress = this.onProgress;
        }
      }

      request.send(this.encodeBody(body));
    });
  }

  getResponse(request) {
    const response = {
      body: this.decodeBody(request),
      headers: this.getHeaders(request),
      status: request.status,
      statusText: request.statusText
    };
    return response;
  }

  composeUrl(url) {
    const params = this.requestOptions.params;

    if (!params) {
      return url;
    }

    const paramsEnc = params ? params.toString() : "";

    if (paramsEnc) {
      const qIndex = url.indexOf("?");
      const sep = qIndex === -1 ? "?" : qIndex < url.length - 1 ? "&" : "";
      url = url + sep + paramsEnc;
    }

    return url;
  }

  getContentType(body) {
    if (body == null) {
      return '';
    }

    if (body instanceof Blob) {
      return body.type;
    } // Rely on the browser's content type assignment.


    if (body instanceof FormData) {
      return '';
    }

    if (typeof body === "string") {
      return "text/plain";
    }

    if (body instanceof URLSearchParams) {
      return "application/x-www-form-urlencoded; charset=UTF-8";
    }

    if (typeof body === "object" || typeof body === "number" || Array.isArray(body)) {
      return "application/json";
    }

    return '';
  }

  encodeBody(body) {
    if (body == null) {
      return null;
    }

    if (body instanceof ArrayBuffer || body instanceof Blob || body instanceof FormData || typeof body === "string") {
      return body;
    }

    if (typeof body === "object" || typeof body === "boolean" || Array.isArray(body)) {
      return JSON.stringify(body);
    }

    return body.toString();
  }

  decodeBody(request) {
    var _a;

    let body = request.response || null;
    let responseType = request.responseType;

    if (!responseType) {
      responseType = (_a = request.getResponseHeader("Content-Type")) !== null && _a !== void 0 ? _a : '';
      const match = new RegExp("^\\w+\/(\\w+);?").exec(responseType);

      if (match) {
        responseType = match[1];
      }
    }

    if (responseType === "json" && typeof body === "string") {
      body = body !== "" ? JSON.parse(body) : null;
    }

    return body;
  }

  setHeaders(body, request) {
    const headers = this.requestOptions.headers;

    if (headers) {
      for (const [key, value] of headers) {
        if (Array.isArray(value)) {
          for (const v of value) {
            request.setRequestHeader(key, v);
          }
        } else {
          request.setRequestHeader(key, value);
        }
      }
    }

    if (!headers || !headers.has("Content-Type")) {
      const contentType = this.getContentType(body);

      if (contentType) {
        request.setRequestHeader("Content-Type", contentType);
      }
    }

    if (!headers || !headers.has("Accept")) {
      request.setRequestHeader("Accept", "application/json, text/plain, */*");
    }
  }

  getHeaders(request) {
    const headers = new Map();
    const responseHeaders = request.getAllResponseHeaders();

    if (responseHeaders) {
      const headerList = responseHeaders.trim().split(/[\r\n]+/);

      for (const line of headerList) {
        const index = line.indexOf(':');

        if (index > 0) {
          const name = line.slice(0, index);
          const value = line.slice(index + 1).trim();
          const header = name.toLowerCase();
          const headerValues = headers.get(header);

          if (headerValues) {
            (typeof headerValues === "string" ? [headerValues] : headerValues).push(value);
          } else {
            headers.set(header, value);
          }
        }
      }
    }

    return headers;
  }

}

/***/ }),

/***/ 3289:
/*!*************************************!*\
  !*** ./src/app/utils/observable.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observable": () => (/* binding */ Observable)
/* harmony export */ });
class Observable {
  constructor() {
    this.observers = [];
  }

  subscribe(observer) {
    this.observers.push(observer);
  }

  unsubscribe(observer) {
    this.observers = this.observers.filter(subscriber => subscriber !== observer);
  }

  notify(data) {
    this.observers.forEach(observer => observer(data));
  }

}

/***/ }),

/***/ 8301:
/*!***********************************!*\
  !*** ./src/app/utils/property.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Property": () => (/* binding */ Property)
/* harmony export */ });
/* harmony import */ var _utils_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/observable */ 3289);


class Property extends _utils_observable__WEBPACK_IMPORTED_MODULE_0__.Observable {
  constructor(defaultValue) {
    super();
    this._value = defaultValue;
  }

  get value() {
    // @ts-ignore
    return this._value;
  }

  set value(newValue) {
    if (this._value === newValue) {
      return;
    }

    this._value = newValue;
    this.notify(this._value);
  }

  notifyObservers() {
    // @ts-ignore
    super.notify(this._value);
  }

}



/***/ }),

/***/ 8535:
/*!*************************************!*\
  !*** ./src/app/utils/sync-state.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SyncState": () => (/* binding */ SyncState)
/* harmony export */ });
class SyncState {
  constructor(mediaPlayer) {
    if (mediaPlayer) {
      this.mediaPlayer = mediaPlayer;
    }
  }

  get audioTime() {
    if (this.mediaPlayer) {
      return this.mediaPlayer.time * 1000;
    } else {
      return 0;
    }
  }

}



/***/ }),

/***/ 2340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": () => (/* binding */ environment)
/* harmony export */ });
const environment = {
  production: true
};

/***/ }),

/***/ 4431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser */ 2313);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 6747);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 2340);
/* harmony import */ var _app_extension_context_2d_extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/extension/context-2d.extension */ 8106);
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pdfjs-dist */ 6036);
/* harmony import */ var pdfjs_dist__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pdfjs_dist__WEBPACK_IMPORTED_MODULE_3__);






pdfjs_dist__WEBPACK_IMPORTED_MODULE_3__.GlobalWorkerOptions.workerSrc = './angular/assets/pdf.worker.js';

if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.enableProdMode)();
}

_angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__.platformBrowser().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule).catch(err => console.error(err));

/***/ }),

/***/ 1198:
/*!**************************************************!*\
  !*** ./node_modules/janus-gateway/html/janus.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Janus": () => (/* binding */ Janus)
/* harmony export */ });
/* provided dependency */ var adapter = __webpack_require__(/*! webrtc-adapter */ 6868)["default"];

/*
	The MIT License (MIT)

	Copyright (c) 2016 Meetecho

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included
	in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
 */
// List of sessions

Janus.sessions = {};

Janus.isExtensionEnabled = function () {
  if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
    // No need for the extension, getDisplayMedia is supported
    return true;
  }

  if (window.navigator.userAgent.match('Chrome')) {
    var chromever = parseInt(window.navigator.userAgent.match(/Chrome\/(.*) /)[1], 10);
    var maxver = 33;
    if (window.navigator.userAgent.match('Linux')) maxver = 35; // "known" crash in chrome 34 and 35 on linux

    if (chromever >= 26 && chromever <= maxver) {
      // Older versions of Chrome don't support this extension-based approach, so lie
      return true;
    }

    return Janus.extension.isInstalled();
  } else {
    // Firefox and others, no need for the extension (but this doesn't mean it will work)
    return true;
  }
};

var defaultExtension = {
  // Screensharing Chrome Extension ID
  extensionId: 'hapfgfdkleiggjjpfpenajgdnfckjpaj',
  isInstalled: function () {
    return document.querySelector('#janus-extension-installed') !== null;
  },
  getScreen: function (callback) {
    var pending = window.setTimeout(function () {
      var error = new Error('NavigatorUserMediaError');
      error.name = 'The required Chrome extension is not installed: click <a href="#">here</a> to install it. (NOTE: this will need you to refresh the page)';
      return callback(error);
    }, 1000);
    this.cache[pending] = callback;
    window.postMessage({
      type: 'janusGetScreen',
      id: pending
    }, '*');
  },
  init: function () {
    var cache = {};
    this.cache = cache; // Wait for events from the Chrome Extension

    window.addEventListener('message', function (event) {
      if (event.origin != window.location.origin) return;

      if (event.data.type == 'janusGotScreen' && cache[event.data.id]) {
        var callback = cache[event.data.id];
        delete cache[event.data.id];

        if (event.data.sourceId === '') {
          // user canceled
          var error = new Error('NavigatorUserMediaError');
          error.name = 'You cancelled the request for permission, giving up...';
          callback(error);
        } else {
          callback(null, event.data.sourceId);
        }
      } else if (event.data.type == 'janusGetScreenPending') {
        console.log('clearing ', event.data.id);
        window.clearTimeout(event.data.id);
      }
    });
  }
};

Janus.useDefaultDependencies = function (deps) {
  var f = deps && deps.fetch || fetch;
  var p = deps && deps.Promise || Promise;
  var socketCls = deps && deps.WebSocket || WebSocket;
  return {
    newWebSocket: function (server, proto) {
      return new socketCls(server, proto);
    },
    extension: deps && deps.extension || defaultExtension,
    isArray: function (arr) {
      return Array.isArray(arr);
    },
    webRTCAdapter: deps && deps.adapter || adapter,
    httpAPICall: function (url, options) {
      var fetchOptions = {
        method: options.verb,
        headers: {
          'Accept': 'application/json, text/plain, */*'
        },
        cache: 'no-cache'
      };

      if (options.verb === "POST") {
        fetchOptions.headers['Content-Type'] = 'application/json';
      }

      if (options.withCredentials !== undefined) {
        fetchOptions.credentials = options.withCredentials === true ? 'include' : options.withCredentials ? options.withCredentials : 'omit';
      }

      if (options.body) {
        fetchOptions.body = JSON.stringify(options.body);
      }

      var fetching = f(url, fetchOptions).catch(function (error) {
        return p.reject({
          message: 'Probably a network error, is the server down?',
          error: error
        });
      });
      /*
       * fetch() does not natively support timeouts.
       * Work around this by starting a timeout manually, and racing it agains the fetch() to see which thing resolves first.
       */

      if (options.timeout) {
        var timeout = new p(function (resolve, reject) {
          var timerId = setTimeout(function () {
            clearTimeout(timerId);
            return reject({
              message: 'Request timed out',
              timeout: options.timeout
            });
          }, options.timeout);
        });
        fetching = p.race([fetching, timeout]);
      }

      fetching.then(function (response) {
        if (response.ok) {
          if (typeof options.success === typeof Janus.noop) {
            return response.json().then(function (parsed) {
              try {
                options.success(parsed);
              } catch (error) {
                Janus.error('Unhandled httpAPICall success callback error', error);
              }
            }, function (error) {
              return p.reject({
                message: 'Failed to parse response body',
                error: error,
                response: response
              });
            });
          }
        } else {
          return p.reject({
            message: 'API call failed',
            response: response
          });
        }
      }).catch(function (error) {
        if (typeof options.error === typeof Janus.noop) {
          options.error(error.message || '<< internal error >>', error);
        }
      });
      return fetching;
    }
  };
};

Janus.useOldDependencies = function (deps) {
  var jq = deps && deps.jQuery || jQuery;
  var socketCls = deps && deps.WebSocket || WebSocket;
  return {
    newWebSocket: function (server, proto) {
      return new socketCls(server, proto);
    },
    isArray: function (arr) {
      return jq.isArray(arr);
    },
    extension: deps && deps.extension || defaultExtension,
    webRTCAdapter: deps && deps.adapter || adapter,
    httpAPICall: function (url, options) {
      var payload = options.body !== undefined ? {
        contentType: 'application/json',
        data: JSON.stringify(options.body)
      } : {};
      var credentials = options.withCredentials !== undefined ? {
        xhrFields: {
          withCredentials: options.withCredentials
        }
      } : {};
      return jq.ajax(jq.extend(payload, credentials, {
        url: url,
        type: options.verb,
        cache: false,
        dataType: 'json',
        async: options.async,
        timeout: options.timeout,
        success: function (result) {
          if (typeof options.success === typeof Janus.noop) {
            options.success(result);
          }
        },
        error: function (xhr, status, err) {
          if (typeof options.error === typeof Janus.noop) {
            options.error(status, err);
          }
        }
      }));
    }
  };
};

Janus.noop = function () {};

Janus.dataChanDefaultLabel = "JanusDataChannel"; // Note: in the future we may want to change this, e.g., as was
// attempted in https://github.com/meetecho/janus-gateway/issues/1670

Janus.endOfCandidates = null; // Stop all tracks from a given stream

Janus.stopAllTracks = function (stream) {
  try {
    // Try a MediaStreamTrack.stop() for each track
    var tracks = stream.getTracks();

    for (var mst of tracks) {
      Janus.log(mst);

      if (mst) {
        mst.stop();
      }
    }
  } catch (e) {// Do nothing if this fails
  }
}; // Initialization


Janus.init = function (options) {
  options = options || {};
  options.callback = typeof options.callback == "function" ? options.callback : Janus.noop;

  if (Janus.initDone) {
    // Already initialized
    options.callback();
  } else {
    if (typeof console.log == "undefined") {
      console.log = function () {};
    } // Console logging (all debugging disabled by default)


    Janus.trace = Janus.noop;
    Janus.debug = Janus.noop;
    Janus.vdebug = Janus.noop;
    Janus.log = Janus.noop;
    Janus.warn = Janus.noop;
    Janus.error = Janus.noop;

    if (options.debug === true || options.debug === "all") {
      // Enable all debugging levels
      Janus.trace = console.trace.bind(console);
      Janus.debug = console.debug.bind(console);
      Janus.vdebug = console.debug.bind(console);
      Janus.log = console.log.bind(console);
      Janus.warn = console.warn.bind(console);
      Janus.error = console.error.bind(console);
    } else if (Array.isArray(options.debug)) {
      for (var d of options.debug) {
        switch (d) {
          case "trace":
            Janus.trace = console.trace.bind(console);
            break;

          case "debug":
            Janus.debug = console.debug.bind(console);
            break;

          case "vdebug":
            Janus.vdebug = console.debug.bind(console);
            break;

          case "log":
            Janus.log = console.log.bind(console);
            break;

          case "warn":
            Janus.warn = console.warn.bind(console);
            break;

          case "error":
            Janus.error = console.error.bind(console);
            break;

          default:
            console.error("Unknown debugging option '" + d + "' (supported: 'trace', 'debug', 'vdebug', 'log', warn', 'error')");
            break;
        }
      }
    }

    Janus.log("Initializing library");
    var usedDependencies = options.dependencies || Janus.useDefaultDependencies();
    Janus.isArray = usedDependencies.isArray;
    Janus.webRTCAdapter = usedDependencies.webRTCAdapter;
    Janus.httpAPICall = usedDependencies.httpAPICall;
    Janus.newWebSocket = usedDependencies.newWebSocket;
    Janus.extension = usedDependencies.extension;
    Janus.extension.init(); // Helper method to enumerate devices

    Janus.listDevices = function (callback, config) {
      callback = typeof callback == "function" ? callback : Janus.noop;
      if (config == null) config = {
        audio: true,
        video: true
      };

      if (Janus.isGetUserMediaAvailable()) {
        navigator.mediaDevices.getUserMedia(config).then(function (stream) {
          navigator.mediaDevices.enumerateDevices().then(function (devices) {
            Janus.debug(devices);
            callback(devices); // Get rid of the now useless stream

            Janus.stopAllTracks(stream);
          });
        }).catch(function (err) {
          Janus.error(err);
          callback([]);
        });
      } else {
        Janus.warn("navigator.mediaDevices unavailable");
        callback([]);
      }
    }; // Helper methods to attach/reattach a stream to a video element (previously part of adapter.js)


    Janus.attachMediaStream = function (element, stream) {
      try {
        element.srcObject = stream;
      } catch (e) {
        try {
          element.src = URL.createObjectURL(stream);
        } catch (e) {
          Janus.error("Error attaching stream to element");
        }
      }
    };

    Janus.reattachMediaStream = function (to, from) {
      try {
        to.srcObject = from.srcObject;
      } catch (e) {
        try {
          to.src = from.src;
        } catch (e) {
          Janus.error("Error reattaching stream to element");
        }
      }
    }; // Detect tab close: make sure we don't loose existing onbeforeunload handlers
    // (note: for iOS we need to subscribe to a different event, 'pagehide', see
    // https://gist.github.com/thehunmonkgroup/6bee8941a49b86be31a787fe8f4b8cfe)


    var iOS = ['iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) >= 0;
    var eventName = iOS ? 'pagehide' : 'beforeunload';
    var oldOBF = window["on" + eventName];
    window.addEventListener(eventName, function () {
      Janus.log("Closing window");

      for (var s in Janus.sessions) {
        if (Janus.sessions[s] && Janus.sessions[s].destroyOnUnload) {
          Janus.log("Destroying session " + s);
          Janus.sessions[s].destroy({
            unload: true,
            notifyDestroyed: false
          });
        }
      }

      if (oldOBF && typeof oldOBF == "function") {
        oldOBF();
      }
    }); // If this is a Safari Technology Preview, check if VP8 is supported

    Janus.safariVp8 = false;

    if (Janus.webRTCAdapter.browserDetails.browser === 'safari' && Janus.webRTCAdapter.browserDetails.version >= 605) {
      // Let's see if RTCRtpSender.getCapabilities() is there
      if (RTCRtpSender && RTCRtpSender.getCapabilities && RTCRtpSender.getCapabilities("video") && RTCRtpSender.getCapabilities("video").codecs && RTCRtpSender.getCapabilities("video").codecs.length) {
        for (var codec of RTCRtpSender.getCapabilities("video").codecs) {
          if (codec && codec.mimeType && codec.mimeType.toLowerCase() === "video/vp8") {
            Janus.safariVp8 = true;
            break;
          }
        }

        if (Janus.safariVp8) {
          Janus.log("This version of Safari supports VP8");
        } else {
          Janus.warn("This version of Safari does NOT support VP8: if you're using a Technology Preview, " + "try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu");
        }
      } else {
        // We do it in a very ugly way, as there's no alternative...
        // We create a PeerConnection to see if VP8 is in an offer
        var testpc = new RTCPeerConnection({});
        testpc.createOffer({
          offerToReceiveVideo: true
        }).then(function (offer) {
          Janus.safariVp8 = offer.sdp.indexOf("VP8") !== -1;

          if (Janus.safariVp8) {
            Janus.log("This version of Safari supports VP8");
          } else {
            Janus.warn("This version of Safari does NOT support VP8: if you're using a Technology Preview, " + "try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu");
          }

          testpc.close();
          testpc = null;
        });
      }
    } // Check if this browser supports Unified Plan and transceivers
    // Based on https://codepen.io/anon/pen/ZqLwWV?editors=0010


    Janus.unifiedPlan = false;

    if (Janus.webRTCAdapter.browserDetails.browser === 'firefox' && Janus.webRTCAdapter.browserDetails.version >= 59) {
      // Firefox definitely does, starting from version 59
      Janus.unifiedPlan = true;
    } else if (Janus.webRTCAdapter.browserDetails.browser === 'chrome' && Janus.webRTCAdapter.browserDetails.version >= 72) {
      // Chrome does, but it's only usable from version 72 on
      Janus.unifiedPlan = true;
    } else if (!window.RTCRtpTransceiver || !('currentDirection' in RTCRtpTransceiver.prototype)) {
      // Safari supports addTransceiver() but not Unified Plan when
      // currentDirection is not defined (see codepen above).
      Janus.unifiedPlan = false;
    } else {
      // Check if addTransceiver() throws an exception
      var tempPc = new RTCPeerConnection();

      try {
        tempPc.addTransceiver('audio');
        Janus.unifiedPlan = true;
      } catch (e) {}

      tempPc.close();
    }

    Janus.initDone = true;
    options.callback();
  }
}; // Helper method to check whether WebRTC is supported by this browser


Janus.isWebrtcSupported = function () {
  return !!window.RTCPeerConnection;
}; // Helper method to check whether devices can be accessed by this browser (e.g., not possible via plain HTTP)


Janus.isGetUserMediaAvailable = function () {
  return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
}; // Helper method to create random identifiers (e.g., transaction)


Janus.randomString = function (len) {
  var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var randomString = '';

  for (var i = 0; i < len; i++) {
    var randomPoz = Math.floor(Math.random() * charSet.length);
    randomString += charSet.substring(randomPoz, randomPoz + 1);
  }

  return randomString;
};

function Janus(gatewayCallbacks) {
  gatewayCallbacks = gatewayCallbacks || {};
  gatewayCallbacks.success = typeof gatewayCallbacks.success == "function" ? gatewayCallbacks.success : Janus.noop;
  gatewayCallbacks.error = typeof gatewayCallbacks.error == "function" ? gatewayCallbacks.error : Janus.noop;
  gatewayCallbacks.destroyed = typeof gatewayCallbacks.destroyed == "function" ? gatewayCallbacks.destroyed : Janus.noop;

  if (!Janus.initDone) {
    gatewayCallbacks.error("Library not initialized");
    return {};
  }

  if (!Janus.isWebrtcSupported()) {
    gatewayCallbacks.error("WebRTC not supported by this browser");
    return {};
  }

  Janus.log("Library initialized: " + Janus.initDone);

  if (!gatewayCallbacks.server) {
    gatewayCallbacks.error("Invalid server url");
    return {};
  }

  var websockets = false;
  var ws = null;
  var wsHandlers = {};
  var wsKeepaliveTimeoutId = null;
  var servers = null;
  var serversIndex = 0;
  var server = gatewayCallbacks.server;

  if (Janus.isArray(server)) {
    Janus.log("Multiple servers provided (" + server.length + "), will use the first that works");
    server = null;
    servers = gatewayCallbacks.server;
    Janus.debug(servers);
  } else {
    if (server.indexOf("ws") === 0) {
      websockets = true;
      Janus.log("Using WebSockets to contact Janus: " + server);
    } else {
      websockets = false;
      Janus.log("Using REST API to contact Janus: " + server);
    }
  }

  var iceServers = gatewayCallbacks.iceServers || [{
    urls: "stun:stun.l.google.com:19302"
  }];
  var iceTransportPolicy = gatewayCallbacks.iceTransportPolicy;
  var bundlePolicy = gatewayCallbacks.bundlePolicy; // Whether IPv6 candidates should be gathered

  var ipv6Support = gatewayCallbacks.ipv6 === true; // Whether we should enable the withCredentials flag for XHR requests

  var withCredentials = false;
  if (gatewayCallbacks.withCredentials !== undefined && gatewayCallbacks.withCredentials !== null) withCredentials = gatewayCallbacks.withCredentials === true; // Optional max events

  var maxev = 10;
  if (gatewayCallbacks.max_poll_events !== undefined && gatewayCallbacks.max_poll_events !== null) maxev = gatewayCallbacks.max_poll_events;
  if (maxev < 1) maxev = 1; // Token to use (only if the token based authentication mechanism is enabled)

  var token = null;
  if (gatewayCallbacks.token !== undefined && gatewayCallbacks.token !== null) token = gatewayCallbacks.token; // API secret to use (only if the shared API secret is enabled)

  var apisecret = null;
  if (gatewayCallbacks.apisecret !== undefined && gatewayCallbacks.apisecret !== null) apisecret = gatewayCallbacks.apisecret; // Whether we should destroy this session when onbeforeunload is called

  this.destroyOnUnload = true;
  if (gatewayCallbacks.destroyOnUnload !== undefined && gatewayCallbacks.destroyOnUnload !== null) this.destroyOnUnload = gatewayCallbacks.destroyOnUnload === true; // Some timeout-related values

  var keepAlivePeriod = 25000;
  if (gatewayCallbacks.keepAlivePeriod !== undefined && gatewayCallbacks.keepAlivePeriod !== null) keepAlivePeriod = gatewayCallbacks.keepAlivePeriod;
  if (isNaN(keepAlivePeriod)) keepAlivePeriod = 25000;
  var longPollTimeout = 60000;
  if (gatewayCallbacks.longPollTimeout !== undefined && gatewayCallbacks.longPollTimeout !== null) longPollTimeout = gatewayCallbacks.longPollTimeout;
  if (isNaN(longPollTimeout)) longPollTimeout = 60000; // overrides for default maxBitrate values for simulcasting

  function getMaxBitrates(simulcastMaxBitrates) {
    var maxBitrates = {
      high: 900000,
      medium: 300000,
      low: 100000
    };

    if (simulcastMaxBitrates !== undefined && simulcastMaxBitrates !== null) {
      if (simulcastMaxBitrates.high) maxBitrates.high = simulcastMaxBitrates.high;
      if (simulcastMaxBitrates.medium) maxBitrates.medium = simulcastMaxBitrates.medium;
      if (simulcastMaxBitrates.low) maxBitrates.low = simulcastMaxBitrates.low;
    }

    return maxBitrates;
  }

  var connected = false;
  var sessionId = null;
  var pluginHandles = {};
  var that = this;
  var retries = 0;
  var transactions = {};
  createSession(gatewayCallbacks); // Public methods

  this.getServer = function () {
    return server;
  };

  this.isConnected = function () {
    return connected;
  };

  this.reconnect = function (callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    callbacks["reconnect"] = true;
    createSession(callbacks);
  };

  this.getSessionId = function () {
    return sessionId;
  };

  this.getInfo = function (callbacks) {
    getInfo(callbacks);
  };

  this.destroy = function (callbacks) {
    destroySession(callbacks);
  };

  this.attach = function (callbacks) {
    createHandle(callbacks);
  };

  function eventHandler() {
    if (sessionId == null) return;
    Janus.debug('Long poll...');

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      return;
    }

    var longpoll = server + "/" + sessionId + "?rid=" + new Date().getTime();
    if (maxev) longpoll = longpoll + "&maxev=" + maxev;
    if (token) longpoll = longpoll + "&token=" + encodeURIComponent(token);
    if (apisecret) longpoll = longpoll + "&apisecret=" + encodeURIComponent(apisecret);
    Janus.httpAPICall(longpoll, {
      verb: 'GET',
      withCredentials: withCredentials,
      success: handleEvent,
      timeout: longPollTimeout,
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown);
        retries++;

        if (retries > 3) {
          // Did we just lose the server? :-(
          connected = false;
          gatewayCallbacks.error("Lost connection to the server (is it down?)");
          return;
        }

        eventHandler();
      }
    });
  } // Private event handler: this will trigger plugin callbacks, if set


  function handleEvent(json, skipTimeout) {
    retries = 0;
    if (!websockets && sessionId !== undefined && sessionId !== null && skipTimeout !== true) eventHandler();

    if (!websockets && Janus.isArray(json)) {
      // We got an array: it means we passed a maxev > 1, iterate on all objects
      for (var i = 0; i < json.length; i++) {
        handleEvent(json[i], true);
      }

      return;
    }

    if (json["janus"] === "keepalive") {
      // Nothing happened
      Janus.vdebug("Got a keepalive on session " + sessionId);
      return;
    } else if (json["janus"] === "server_info") {
      // Just info on the Janus instance
      Janus.debug("Got info on the Janus instance");
      Janus.debug(json);
      const transaction = json["transaction"];

      if (transaction) {
        const reportSuccess = transactions[transaction];
        if (reportSuccess) reportSuccess(json);
        delete transactions[transaction];
      }

      return;
    } else if (json["janus"] === "ack") {
      // Just an ack, we can probably ignore
      Janus.debug("Got an ack on session " + sessionId);
      Janus.debug(json);
      const transaction = json["transaction"];

      if (transaction) {
        const reportSuccess = transactions[transaction];
        if (reportSuccess) reportSuccess(json);
        delete transactions[transaction];
      }

      return;
    } else if (json["janus"] === "success") {
      // Success!
      Janus.debug("Got a success on session " + sessionId);
      Janus.debug(json);
      const transaction = json["transaction"];

      if (transaction) {
        const reportSuccess = transactions[transaction];
        if (reportSuccess) reportSuccess(json);
        delete transactions[transaction];
      }

      return;
    } else if (json["janus"] === "trickle") {
      // We got a trickle candidate from Janus
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.debug("This handle is not attached to this session");
        return;
      }

      var candidate = json["candidate"];
      Janus.debug("Got a trickled candidate on session " + sessionId);
      Janus.debug(candidate);
      var config = pluginHandle.webrtcStuff;

      if (config.pc && config.remoteSdp) {
        // Add candidate right now
        Janus.debug("Adding remote candidate:", candidate);

        if (!candidate || candidate.completed === true) {
          // end-of-candidates
          config.pc.addIceCandidate(Janus.endOfCandidates);
        } else {
          // New candidate
          config.pc.addIceCandidate(candidate);
        }
      } else {
        // We didn't do setRemoteDescription (trickle got here before the offer?)
        Janus.debug("We didn't do setRemoteDescription (trickle got here before the offer?), caching candidate");
        if (!config.candidates) config.candidates = [];
        config.candidates.push(candidate);
        Janus.debug(config.candidates);
      }
    } else if (json["janus"] === "webrtcup") {
      // The PeerConnection with the server is up! Notify this
      Janus.debug("Got a webrtcup event on session " + sessionId);
      Janus.debug(json);
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.debug("This handle is not attached to this session");
        return;
      }

      pluginHandle.webrtcState(true);
      return;
    } else if (json["janus"] === "hangup") {
      // A plugin asked the core to hangup a PeerConnection on one of our handles
      Janus.debug("Got a hangup event on session " + sessionId);
      Janus.debug(json);
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.debug("This handle is not attached to this session");
        return;
      }

      pluginHandle.webrtcState(false, json["reason"]);
      pluginHandle.hangup();
    } else if (json["janus"] === "detached") {
      // A plugin asked the core to detach one of our handles
      Janus.debug("Got a detached event on session " + sessionId);
      Janus.debug(json);
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        // Don't warn here because destroyHandle causes this situation.
        return;
      }

      pluginHandle.ondetached();
      pluginHandle.detach();
    } else if (json["janus"] === "media") {
      // Media started/stopped flowing
      Janus.debug("Got a media event on session " + sessionId);
      Janus.debug(json);
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.debug("This handle is not attached to this session");
        return;
      }

      pluginHandle.mediaState(json["type"], json["receiving"], json["mid"]);
    } else if (json["janus"] === "slowlink") {
      Janus.debug("Got a slowlink event on session " + sessionId);
      Janus.debug(json); // Trouble uplink or downlink

      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.debug("This handle is not attached to this session");
        return;
      }

      pluginHandle.slowLink(json["uplink"], json["lost"], json["mid"]);
    } else if (json["janus"] === "error") {
      // Oops, something wrong happened
      Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

      Janus.debug(json);
      var transaction = json["transaction"];

      if (transaction) {
        var reportSuccess = transactions[transaction];

        if (reportSuccess) {
          reportSuccess(json);
        }

        delete transactions[transaction];
      }

      return;
    } else if (json["janus"] === "event") {
      Janus.debug("Got a plugin event on session " + sessionId);
      Janus.debug(json);
      const sender = json["sender"];

      if (!sender) {
        Janus.warn("Missing sender...");
        return;
      }

      var plugindata = json["plugindata"];

      if (!plugindata) {
        Janus.warn("Missing plugindata...");
        return;
      }

      Janus.debug("  -- Event is coming from " + sender + " (" + plugindata["plugin"] + ")");
      var data = plugindata["data"];
      Janus.debug(data);
      const pluginHandle = pluginHandles[sender];

      if (!pluginHandle) {
        Janus.warn("This handle is not attached to this session");
        return;
      }

      var jsep = json["jsep"];

      if (jsep) {
        Janus.debug("Handling SDP as well...");
        Janus.debug(jsep);
      }

      var callback = pluginHandle.onmessage;

      if (callback) {
        Janus.debug("Notifying application..."); // Send to callback specified when attaching plugin handle

        callback(data, jsep);
      } else {
        // Send to generic callback (?)
        Janus.debug("No provided notification callback");
      }
    } else if (json["janus"] === "timeout") {
      Janus.error("Timeout on session " + sessionId);
      Janus.debug(json);

      if (websockets) {
        ws.close(3504, "Gateway timeout");
      }

      return;
    } else {
      Janus.warn("Unknown message/event  '" + json["janus"] + "' on session " + sessionId);
      Janus.debug(json);
    }
  } // Private helper to send keep-alive messages on WebSockets


  function keepAlive() {
    if (!server || !websockets || !connected) return;
    wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);
    var request = {
      "janus": "keepalive",
      "session_id": sessionId,
      "transaction": Janus.randomString(12)
    };
    if (token) request["token"] = token;
    if (apisecret) request["apisecret"] = apisecret;
    ws.send(JSON.stringify(request));
  } // Private method to create a session


  function createSession(callbacks) {
    var transaction = Janus.randomString(12);
    var request = {
      "janus": "create",
      "transaction": transaction
    };

    if (callbacks["reconnect"]) {
      // We're reconnecting, claim the session
      connected = false;
      request["janus"] = "claim";
      request["session_id"] = sessionId; // If we were using websockets, ignore the old connection

      if (ws) {
        ws.onopen = null;
        ws.onerror = null;
        ws.onclose = null;

        if (wsKeepaliveTimeoutId) {
          clearTimeout(wsKeepaliveTimeoutId);
          wsKeepaliveTimeoutId = null;
        }
      }
    }

    if (token) request["token"] = token;
    if (apisecret) request["apisecret"] = apisecret;

    if (!server && Janus.isArray(servers)) {
      // We still need to find a working server from the list we were given
      server = servers[serversIndex];

      if (server.indexOf("ws") === 0) {
        websockets = true;
        Janus.log("Server #" + (serversIndex + 1) + ": trying WebSockets to contact Janus (" + server + ")");
      } else {
        websockets = false;
        Janus.log("Server #" + (serversIndex + 1) + ": trying REST API to contact Janus (" + server + ")");
      }
    }

    if (websockets) {
      ws = Janus.newWebSocket(server, 'janus-protocol');
      wsHandlers = {
        'error': function () {
          Janus.error("Error connecting to the Janus WebSockets server... " + server);

          if (Janus.isArray(servers) && !callbacks["reconnect"]) {
            serversIndex++;

            if (serversIndex === servers.length) {
              // We tried all the servers the user gave us and they all failed
              callbacks.error("Error connecting to any of the provided Janus servers: Is the server down?");
              return;
            } // Let's try the next server


            server = null;
            setTimeout(function () {
              createSession(callbacks);
            }, 200);
            return;
          }

          callbacks.error("Error connecting to the Janus WebSockets server: Is the server down?");
        },
        'open': function () {
          // We need to be notified about the success
          transactions[transaction] = function (json) {
            Janus.debug(json);

            if (json["janus"] !== "success") {
              Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

              callbacks.error(json["error"].reason);
              return;
            }

            wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);
            connected = true;
            sessionId = json["session_id"] ? json["session_id"] : json.data["id"];

            if (callbacks["reconnect"]) {
              Janus.log("Claimed session: " + sessionId);
            } else {
              Janus.log("Created session: " + sessionId);
            }

            Janus.sessions[sessionId] = that;
            callbacks.success();
          };

          ws.send(JSON.stringify(request));
        },
        'message': function (event) {
          handleEvent(JSON.parse(event.data));
        },
        'close': function () {
          if (!server || !connected) {
            return;
          }

          connected = false; // FIXME What if this is called when the page is closed?

          gatewayCallbacks.error("Lost connection to the server (is it down?)");
        }
      };

      for (var eventName in wsHandlers) {
        ws.addEventListener(eventName, wsHandlers[eventName]);
      }

      return;
    }

    Janus.httpAPICall(server, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.debug(json);

        if (json["janus"] !== "success") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

          callbacks.error(json["error"].reason);
          return;
        }

        connected = true;
        sessionId = json["session_id"] ? json["session_id"] : json.data["id"];

        if (callbacks["reconnect"]) {
          Janus.log("Claimed session: " + sessionId);
        } else {
          Janus.log("Created session: " + sessionId);
        }

        Janus.sessions[sessionId] = that;
        eventHandler();
        callbacks.success();
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME

        if (Janus.isArray(servers) && !callbacks["reconnect"]) {
          serversIndex++;

          if (serversIndex === servers.length) {
            // We tried all the servers the user gave us and they all failed
            callbacks.error("Error connecting to any of the provided Janus servers: Is the server down?");
            return;
          } // Let's try the next server


          server = null;
          setTimeout(function () {
            createSession(callbacks);
          }, 200);
          return;
        }

        if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else if (errorThrown && errorThrown.error) callbacks.error(textStatus + ": " + errorThrown.error.message);else callbacks.error(textStatus + ": " + errorThrown);
      }
    });
  } // Private method to get info on the server


  function getInfo(callbacks) {
    callbacks = callbacks || {}; // FIXME This method triggers a success even when we fail

    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    Janus.log("Getting info on Janus instance");

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      callbacks.error("Is the server down? (connected=false)");
      return;
    } // We just need to send an "info" request


    var transaction = Janus.randomString(12);
    var request = {
      "janus": "info",
      "transaction": transaction
    };
    if (token) request["token"] = token;
    if (apisecret) request["apisecret"] = apisecret;

    if (websockets) {
      transactions[transaction] = function (json) {
        Janus.log("Server info:");
        Janus.debug(json);

        if (json["janus"] !== "server_info") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
        }

        callbacks.success(json);
      };

      ws.send(JSON.stringify(request));
      return;
    }

    Janus.httpAPICall(server, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.log("Server info:");
        Janus.debug(json);

        if (json["janus"] !== "server_info") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
        }

        callbacks.success(json);
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME

        if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else callbacks.error(textStatus + ": " + errorThrown);
      }
    });
  } // Private method to destroy a session


  function destroySession(callbacks) {
    callbacks = callbacks || {}; // FIXME This method triggers a success even when we fail

    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    var unload = callbacks.unload === true;
    var notifyDestroyed = true;
    if (callbacks.notifyDestroyed !== undefined && callbacks.notifyDestroyed !== null) notifyDestroyed = callbacks.notifyDestroyed === true;
    var cleanupHandles = callbacks.cleanupHandles === true;
    Janus.log("Destroying session " + sessionId + " (unload=" + unload + ")");

    if (!sessionId) {
      Janus.warn("No session to destroy");
      callbacks.success();
      if (notifyDestroyed) gatewayCallbacks.destroyed();
      return;
    }

    if (cleanupHandles) {
      for (var handleId in pluginHandles) destroyHandle(handleId, {
        noRequest: true
      });
    }

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      sessionId = null;
      callbacks.success();
      return;
    } // No need to destroy all handles first, Janus will do that itself


    var request = {
      "janus": "destroy",
      "transaction": Janus.randomString(12)
    };
    if (token) request["token"] = token;
    if (apisecret) request["apisecret"] = apisecret;

    if (unload) {
      // We're unloading the page: use sendBeacon for HTTP instead,
      // or just close the WebSocket connection if we're using that
      if (websockets) {
        ws.onclose = null;
        ws.close();
        ws = null;
      } else {
        navigator.sendBeacon(server + "/" + sessionId, JSON.stringify(request));
      }

      Janus.log("Destroyed session:");
      sessionId = null;
      connected = false;
      callbacks.success();
      if (notifyDestroyed) gatewayCallbacks.destroyed();
      return;
    }

    if (websockets) {
      request["session_id"] = sessionId;

      var unbindWebSocket = function () {
        for (var eventName in wsHandlers) {
          ws.removeEventListener(eventName, wsHandlers[eventName]);
        }

        ws.removeEventListener('message', onUnbindMessage);
        ws.removeEventListener('error', onUnbindError);

        if (wsKeepaliveTimeoutId) {
          clearTimeout(wsKeepaliveTimeoutId);
        }

        ws.close();
      };

      var onUnbindMessage = function (event) {
        var data = JSON.parse(event.data);

        if (data.session_id == request.session_id && data.transaction == request.transaction) {
          unbindWebSocket();
          callbacks.success();
          if (notifyDestroyed) gatewayCallbacks.destroyed();
        }
      };

      var onUnbindError = function () {
        unbindWebSocket();
        callbacks.error("Failed to destroy the server: Is the server down?");
        if (notifyDestroyed) gatewayCallbacks.destroyed();
      };

      ws.addEventListener('message', onUnbindMessage);
      ws.addEventListener('error', onUnbindError);

      if (ws.readyState === 1) {
        ws.send(JSON.stringify(request));
      } else {
        onUnbindError();
      }

      return;
    }

    Janus.httpAPICall(server + "/" + sessionId, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.log("Destroyed session:");
        Janus.debug(json);
        sessionId = null;
        connected = false;

        if (json["janus"] !== "success") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
        }

        callbacks.success();
        if (notifyDestroyed) gatewayCallbacks.destroyed();
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME
        // Reset everything anyway

        sessionId = null;
        connected = false;
        callbacks.success();
        if (notifyDestroyed) gatewayCallbacks.destroyed();
      }
    });
  } // Private method to create a plugin handle


  function createHandle(callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    callbacks.dataChannelOptions = callbacks.dataChannelOptions || {
      ordered: true
    };
    callbacks.consentDialog = typeof callbacks.consentDialog == "function" ? callbacks.consentDialog : Janus.noop;
    callbacks.iceState = typeof callbacks.iceState == "function" ? callbacks.iceState : Janus.noop;
    callbacks.mediaState = typeof callbacks.mediaState == "function" ? callbacks.mediaState : Janus.noop;
    callbacks.webrtcState = typeof callbacks.webrtcState == "function" ? callbacks.webrtcState : Janus.noop;
    callbacks.slowLink = typeof callbacks.slowLink == "function" ? callbacks.slowLink : Janus.noop;
    callbacks.onmessage = typeof callbacks.onmessage == "function" ? callbacks.onmessage : Janus.noop;
    callbacks.onlocaltrack = typeof callbacks.onlocaltrack == "function" ? callbacks.onlocaltrack : Janus.noop;
    callbacks.onremotetrack = typeof callbacks.onremotetrack == "function" ? callbacks.onremotetrack : Janus.noop;
    callbacks.ondata = typeof callbacks.ondata == "function" ? callbacks.ondata : Janus.noop;
    callbacks.ondataopen = typeof callbacks.ondataopen == "function" ? callbacks.ondataopen : Janus.noop;
    callbacks.oncleanup = typeof callbacks.oncleanup == "function" ? callbacks.oncleanup : Janus.noop;
    callbacks.ondetached = typeof callbacks.ondetached == "function" ? callbacks.ondetached : Janus.noop;

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      callbacks.error("Is the server down? (connected=false)");
      return;
    }

    var plugin = callbacks.plugin;

    if (!plugin) {
      Janus.error("Invalid plugin");
      callbacks.error("Invalid plugin");
      return;
    }

    var opaqueId = callbacks.opaqueId;
    var loopIndex = callbacks.loopIndex;
    var handleToken = callbacks.token ? callbacks.token : token;
    var transaction = Janus.randomString(12);
    var request = {
      "janus": "attach",
      "plugin": plugin,
      "opaque_id": opaqueId,
      "loop_index": loopIndex,
      "transaction": transaction
    };
    if (handleToken) request["token"] = handleToken;
    if (apisecret) request["apisecret"] = apisecret;

    if (websockets) {
      transactions[transaction] = function (json) {
        Janus.debug(json);

        if (json["janus"] !== "success") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

          callbacks.error("Ooops: " + json["error"].code + " " + json["error"].reason);
          return;
        }

        var handleId = json.data["id"];
        Janus.log("Created handle: " + handleId);
        var pluginHandle = {
          session: that,
          plugin: plugin,
          id: handleId,
          token: handleToken,
          detached: false,
          webrtcStuff: {
            started: false,
            myStream: null,
            streamExternal: false,
            remoteStream: null,
            mySdp: null,
            mediaConstraints: null,
            pc: null,
            dataChannelOptions: callbacks.dataChannelOptions,
            dataChannel: {},
            dtmfSender: null,
            trickle: true,
            iceDone: false,
            bitrate: {}
          },
          getId: function () {
            return handleId;
          },
          getPlugin: function () {
            return plugin;
          },
          getVolume: function (mid, result) {
            return getVolume(handleId, mid, true, result);
          },
          getRemoteVolume: function (mid, result) {
            return getVolume(handleId, mid, true, result);
          },
          getLocalVolume: function (mid, result) {
            return getVolume(handleId, mid, false, result);
          },
          isAudioMuted: function (mid) {
            return isMuted(handleId, mid, false);
          },
          muteAudio: function (mid) {
            return mute(handleId, mid, false, true);
          },
          unmuteAudio: function (mid) {
            return mute(handleId, mid, false, false);
          },
          isVideoMuted: function (mid) {
            return isMuted(handleId, mid, true);
          },
          muteVideo: function (mid) {
            return mute(handleId, mid, true, true);
          },
          unmuteVideo: function (mid) {
            return mute(handleId, mid, true, false);
          },
          getBitrate: function (mid) {
            return getBitrate(handleId, mid);
          },
          send: function (callbacks) {
            sendMessage(handleId, callbacks);
          },
          data: function (callbacks) {
            sendData(handleId, callbacks);
          },
          dtmf: function (callbacks) {
            sendDtmf(handleId, callbacks);
          },
          consentDialog: callbacks.consentDialog,
          iceState: callbacks.iceState,
          mediaState: callbacks.mediaState,
          webrtcState: callbacks.webrtcState,
          slowLink: callbacks.slowLink,
          onmessage: callbacks.onmessage,
          createOffer: function (callbacks) {
            prepareWebrtc(handleId, true, callbacks);
          },
          createAnswer: function (callbacks) {
            prepareWebrtc(handleId, false, callbacks);
          },
          handleRemoteJsep: function (callbacks) {
            prepareWebrtcPeer(handleId, callbacks);
          },
          onlocaltrack: callbacks.onlocaltrack,
          onremotetrack: callbacks.onremotetrack,
          ondata: callbacks.ondata,
          ondataopen: callbacks.ondataopen,
          oncleanup: callbacks.oncleanup,
          ondetached: callbacks.ondetached,
          hangup: function (sendRequest) {
            cleanupWebrtc(handleId, sendRequest === true);
          },
          detach: function (callbacks) {
            destroyHandle(handleId, callbacks);
          }
        };
        pluginHandles[handleId] = pluginHandle;
        callbacks.success(pluginHandle);
      };

      request["session_id"] = sessionId;
      ws.send(JSON.stringify(request));
      return;
    }

    Janus.httpAPICall(server + "/" + sessionId, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.debug(json);

        if (json["janus"] !== "success") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

          callbacks.error("Ooops: " + json["error"].code + " " + json["error"].reason);
          return;
        }

        var handleId = json.data["id"];
        Janus.log("Created handle: " + handleId);
        var pluginHandle = {
          session: that,
          plugin: plugin,
          id: handleId,
          token: handleToken,
          detached: false,
          webrtcStuff: {
            started: false,
            myStream: null,
            streamExternal: false,
            remoteStream: null,
            mySdp: null,
            mediaConstraints: null,
            pc: null,
            dataChannelOptions: callbacks.dataChannelOptions,
            dataChannel: {},
            dtmfSender: null,
            trickle: true,
            iceDone: false,
            bitrate: {}
          },
          getId: function () {
            return handleId;
          },
          getPlugin: function () {
            return plugin;
          },
          getVolume: function (mid, result) {
            return getVolume(handleId, mid, true, result);
          },
          getRemoteVolume: function (mid, result) {
            return getVolume(handleId, mid, true, result);
          },
          getLocalVolume: function (mid, result) {
            return getVolume(handleId, mid, false, result);
          },
          isAudioMuted: function (mid) {
            return isMuted(handleId, mid, false);
          },
          muteAudio: function (mid) {
            return mute(handleId, mid, false, true);
          },
          unmuteAudio: function (mid) {
            return mute(handleId, mid, false, false);
          },
          isVideoMuted: function (mid) {
            return isMuted(handleId, mid, true);
          },
          muteVideo: function (mid) {
            return mute(handleId, mid, true, true);
          },
          unmuteVideo: function (mid) {
            return mute(handleId, mid, true, false);
          },
          getBitrate: function (mid) {
            return getBitrate(handleId, mid);
          },
          send: function (callbacks) {
            sendMessage(handleId, callbacks);
          },
          data: function (callbacks) {
            sendData(handleId, callbacks);
          },
          dtmf: function (callbacks) {
            sendDtmf(handleId, callbacks);
          },
          consentDialog: callbacks.consentDialog,
          iceState: callbacks.iceState,
          mediaState: callbacks.mediaState,
          webrtcState: callbacks.webrtcState,
          slowLink: callbacks.slowLink,
          onmessage: callbacks.onmessage,
          createOffer: function (callbacks) {
            prepareWebrtc(handleId, true, callbacks);
          },
          createAnswer: function (callbacks) {
            prepareWebrtc(handleId, false, callbacks);
          },
          handleRemoteJsep: function (callbacks) {
            prepareWebrtcPeer(handleId, callbacks);
          },
          onlocaltrack: callbacks.onlocaltrack,
          onremotetrack: callbacks.onremotetrack,
          ondata: callbacks.ondata,
          ondataopen: callbacks.ondataopen,
          oncleanup: callbacks.oncleanup,
          ondetached: callbacks.ondetached,
          hangup: function (sendRequest) {
            cleanupWebrtc(handleId, sendRequest === true);
          },
          detach: function (callbacks) {
            destroyHandle(handleId, callbacks);
          }
        };
        pluginHandles[handleId] = pluginHandle;
        callbacks.success(pluginHandle);
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME

        if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else callbacks.error(textStatus + ": " + errorThrown);
      }
    });
  } // Private method to send a message


  function sendMessage(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      callbacks.error("Is the server down? (connected=false)");
      return;
    }

    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var message = callbacks.message;
    var jsep = callbacks.jsep;
    var transaction = Janus.randomString(12);
    var request = {
      "janus": "message",
      "body": message,
      "transaction": transaction
    };
    if (pluginHandle.token) request["token"] = pluginHandle.token;
    if (apisecret) request["apisecret"] = apisecret;

    if (jsep) {
      request.jsep = {
        type: jsep.type,
        sdp: jsep.sdp
      };
      if (jsep.e2ee) request.jsep.e2ee = true;
      if (jsep.rid_order === "hml" || jsep.rid_order === "lmh") request.jsep.rid_order = jsep.rid_order;
      if (jsep.force_relay) request.jsep.force_relay = true;
    }

    Janus.debug("Sending message to plugin (handle=" + handleId + "):");
    Janus.debug(request);

    if (websockets) {
      request["session_id"] = sessionId;
      request["handle_id"] = handleId;

      transactions[transaction] = function (json) {
        Janus.debug("Message sent!");
        Janus.debug(json);

        if (json["janus"] === "success") {
          // We got a success, must have been a synchronous transaction
          var plugindata = json["plugindata"];

          if (!plugindata) {
            Janus.warn("Request succeeded, but missing plugindata...");
            callbacks.success();
            return;
          }

          Janus.log("Synchronous transaction successful (" + plugindata["plugin"] + ")");
          var data = plugindata["data"];
          Janus.debug(data);
          callbacks.success(data);
          return;
        } else if (json["janus"] !== "ack") {
          // Not a success and not an ack, must be an error
          if (json["error"]) {
            Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

            callbacks.error(json["error"].code + " " + json["error"].reason);
          } else {
            Janus.error("Unknown error"); // FIXME

            callbacks.error("Unknown error");
          }

          return;
        } // If we got here, the plugin decided to handle the request asynchronously


        callbacks.success();
      };

      ws.send(JSON.stringify(request));
      return;
    }

    Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.debug("Message sent!");
        Janus.debug(json);

        if (json["janus"] === "success") {
          // We got a success, must have been a synchronous transaction
          var plugindata = json["plugindata"];

          if (!plugindata) {
            Janus.warn("Request succeeded, but missing plugindata...");
            callbacks.success();
            return;
          }

          Janus.log("Synchronous transaction successful (" + plugindata["plugin"] + ")");
          var data = plugindata["data"];
          Janus.debug(data);
          callbacks.success(data);
          return;
        } else if (json["janus"] !== "ack") {
          // Not a success and not an ack, must be an error
          if (json["error"]) {
            Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

            callbacks.error(json["error"].code + " " + json["error"].reason);
          } else {
            Janus.error("Unknown error"); // FIXME

            callbacks.error("Unknown error");
          }

          return;
        } // If we got here, the plugin decided to handle the request asynchronously


        callbacks.success();
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME

        callbacks.error(textStatus + ": " + errorThrown);
      }
    });
  } // Private method to send a trickle candidate


  function sendTrickleCandidate(handleId, candidate) {
    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      return;
    }

    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      return;
    }

    var request = {
      "janus": "trickle",
      "candidate": candidate,
      "transaction": Janus.randomString(12)
    };
    if (pluginHandle.token) request["token"] = pluginHandle.token;
    if (apisecret) request["apisecret"] = apisecret;
    Janus.vdebug("Sending trickle candidate (handle=" + handleId + "):");
    Janus.vdebug(request);

    if (websockets) {
      request["session_id"] = sessionId;
      request["handle_id"] = handleId;
      ws.send(JSON.stringify(request));
      return;
    }

    Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.vdebug("Candidate sent!");
        Janus.vdebug(json);

        if (json["janus"] !== "ack") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME

          return;
        }
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME
      }
    });
  } // Private method to create a data channel


  function createDataChannel(handleId, dclabel, dcprotocol, incoming, pendingData) {
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;

    if (!config.pc) {
      Janus.warn("Invalid PeerConnection");
      return;
    }

    var onDataChannelMessage = function (event) {
      Janus.log('Received message on data channel:', event);
      var label = event.target.label;
      pluginHandle.ondata(event.data, label);
    };

    var onDataChannelStateChange = function (event) {
      Janus.log('Received state change on data channel:', event);
      var label = event.target.label;
      var protocol = event.target.protocol;
      var dcState = config.dataChannel[label] ? config.dataChannel[label].readyState : "null";
      Janus.log('State change on <' + label + '> data channel: ' + dcState);

      if (dcState === 'open') {
        // Any pending messages to send?
        if (config.dataChannel[label].pending && config.dataChannel[label].pending.length > 0) {
          Janus.log("Sending pending messages on <" + label + ">:", config.dataChannel[label].pending.length);

          for (var data of config.dataChannel[label].pending) {
            Janus.log("Sending data on data channel <" + label + ">");
            Janus.debug(data);
            config.dataChannel[label].send(data);
          }

          config.dataChannel[label].pending = [];
        } // Notify the open data channel


        pluginHandle.ondataopen(label, protocol);
      }
    };

    var onDataChannelError = function (error) {
      Janus.error('Got error on data channel:', error); // TODO
    };

    if (!incoming) {
      // FIXME Add options (ordered, maxRetransmits, etc.)
      var dcoptions = config.dataChannelOptions;
      if (dcprotocol) dcoptions.protocol = dcprotocol;
      config.dataChannel[dclabel] = config.pc.createDataChannel(dclabel, dcoptions);
    } else {
      // The channel was created by Janus
      config.dataChannel[dclabel] = incoming;
    }

    config.dataChannel[dclabel].onmessage = onDataChannelMessage;
    config.dataChannel[dclabel].onopen = onDataChannelStateChange;
    config.dataChannel[dclabel].onclose = onDataChannelStateChange;
    config.dataChannel[dclabel].onerror = onDataChannelError;
    config.dataChannel[dclabel].pending = [];
    if (pendingData) config.dataChannel[dclabel].pending.push(pendingData);
  } // Private method to send a data channel message


  function sendData(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    var data = callbacks.text || callbacks.data;

    if (!data) {
      Janus.warn("Invalid data");
      callbacks.error("Invalid data");
      return;
    }

    var label = callbacks.label ? callbacks.label : Janus.dataChanDefaultLabel;

    if (!config.dataChannel[label]) {
      // Create new data channel and wait for it to open
      createDataChannel(handleId, label, callbacks.protocol, false, data, callbacks.protocol);
      callbacks.success();
      return;
    }

    if (config.dataChannel[label].readyState !== "open") {
      config.dataChannel[label].pending.push(data);
      callbacks.success();
      return;
    }

    Janus.log("Sending data on data channel <" + label + ">");
    Janus.debug(data);
    config.dataChannel[label].send(data);
    callbacks.success();
  } // Private method to send a DTMF tone


  function sendDtmf(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;

    if (!config.dtmfSender) {
      // Create the DTMF sender the proper way, if possible
      if (config.pc) {
        var senders = config.pc.getSenders();
        var audioSender = senders.find(function (sender) {
          return sender.track && sender.track.kind === 'audio';
        });

        if (!audioSender) {
          Janus.warn("Invalid DTMF configuration (no audio track)");
          callbacks.error("Invalid DTMF configuration (no audio track)");
          return;
        }

        config.dtmfSender = audioSender.dtmf;

        if (config.dtmfSender) {
          Janus.log("Created DTMF Sender");

          config.dtmfSender.ontonechange = function (tone) {
            Janus.debug("Sent DTMF tone: " + tone.tone);
          };
        }
      }

      if (!config.dtmfSender) {
        Janus.warn("Invalid DTMF configuration");
        callbacks.error("Invalid DTMF configuration");
        return;
      }
    }

    var dtmf = callbacks.dtmf;

    if (!dtmf) {
      Janus.warn("Invalid DTMF parameters");
      callbacks.error("Invalid DTMF parameters");
      return;
    }

    var tones = dtmf.tones;

    if (!tones) {
      Janus.warn("Invalid DTMF string");
      callbacks.error("Invalid DTMF string");
      return;
    }

    var duration = typeof dtmf.duration === 'number' ? dtmf.duration : 500; // We choose 500ms as the default duration for a tone

    var gap = typeof dtmf.gap === 'number' ? dtmf.gap : 50; // We choose 50ms as the default gap between tones

    Janus.debug("Sending DTMF string " + tones + " (duration " + duration + "ms, gap " + gap + "ms)");
    config.dtmfSender.insertDTMF(tones, duration, gap);
    callbacks.success();
  } // Private method to destroy a plugin handle


  function destroyHandle(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    var noRequest = callbacks.noRequest === true;
    Janus.log("Destroying handle " + handleId + " (only-locally=" + noRequest + ")");
    cleanupWebrtc(handleId);
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || pluginHandle.detached) {
      // Plugin was already detached by Janus, calling detach again will return a handle not found error, so just exit here
      delete pluginHandles[handleId];
      callbacks.success();
      return;
    }

    pluginHandle.detached = true;

    if (noRequest) {
      // We're only removing the handle locally
      delete pluginHandles[handleId];
      callbacks.success();
      return;
    }

    if (!connected) {
      Janus.warn("Is the server down? (connected=false)");
      callbacks.error("Is the server down? (connected=false)");
      return;
    }

    var request = {
      "janus": "detach",
      "transaction": Janus.randomString(12)
    };
    if (pluginHandle.token) request["token"] = pluginHandle.token;
    if (apisecret) request["apisecret"] = apisecret;

    if (websockets) {
      request["session_id"] = sessionId;
      request["handle_id"] = handleId;
      ws.send(JSON.stringify(request));
      delete pluginHandles[handleId];
      callbacks.success();
      return;
    }

    Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
      verb: 'POST',
      withCredentials: withCredentials,
      body: request,
      success: function (json) {
        Janus.log("Destroyed handle:");
        Janus.debug(json);

        if (json["janus"] !== "success") {
          Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
        }

        delete pluginHandles[handleId];
        callbacks.success();
      },
      error: function (textStatus, errorThrown) {
        Janus.error(textStatus + ":", errorThrown); // FIXME
        // We cleanup anyway

        delete pluginHandles[handleId];
        callbacks.success();
      }
    });
  } // WebRTC stuff


  function streamsDone(handleId, jsep, media, callbacks, stream) {
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle"); // Close all tracks if the given stream has been created internally

      if (!callbacks.stream) {
        Janus.stopAllTracks(stream);
      }

      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    Janus.debug("streamsDone:", stream);

    if (stream) {
      Janus.debug("  -- Audio tracks:", stream.getAudioTracks());
      Janus.debug("  -- Video tracks:", stream.getVideoTracks());
    } // We're now capturing the new stream: check if we're updating or if it's a new thing


    var addTracks = false;

    if (!config.myStream || !media.update || config.streamExternal && !media.replaceAudio && !media.replaceVideo) {
      config.myStream = stream;
      addTracks = true;
    } else {
      // We only need to update the existing stream
      if ((!media.update && isAudioSendEnabled(media) || media.update && (media.addAudio || media.replaceAudio)) && stream.getAudioTracks() && stream.getAudioTracks().length) {
        config.myStream.addTrack(stream.getAudioTracks()[0]);

        if (Janus.unifiedPlan) {
          // Use Transceivers
          Janus.log((media.replaceAudio ? "Replacing" : "Adding") + " audio track:", stream.getAudioTracks()[0]);
          var audioTransceiver = null;
          const transceivers = config.pc.getTransceivers();

          if (transceivers && transceivers.length > 0) {
            for (const t of transceivers) {
              if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
                audioTransceiver = t;
                break;
              }
            }
          }

          if (audioTransceiver && audioTransceiver.sender) {
            audioTransceiver.sender.replaceTrack(stream.getAudioTracks()[0]);
          } else {
            config.pc.addTrack(stream.getAudioTracks()[0], stream);
          }
        } else {
          Janus.log((media.replaceAudio ? "Replacing" : "Adding") + " audio track:", stream.getAudioTracks()[0]);
          config.pc.addTrack(stream.getAudioTracks()[0], stream);
        }
      }

      if ((!media.update && isVideoSendEnabled(media) || media.update && (media.addVideo || media.replaceVideo)) && stream.getVideoTracks() && stream.getVideoTracks().length) {
        config.myStream.addTrack(stream.getVideoTracks()[0]);

        if (Janus.unifiedPlan) {
          // Use Transceivers
          Janus.log((media.replaceVideo ? "Replacing" : "Adding") + " video track:", stream.getVideoTracks()[0]);
          var videoTransceiver = null;
          const transceivers = config.pc.getTransceivers();

          if (transceivers && transceivers.length > 0) {
            for (const t of transceivers) {
              if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
                videoTransceiver = t;
                break;
              }
            }
          }

          if (videoTransceiver && videoTransceiver.sender) {
            videoTransceiver.sender.replaceTrack(stream.getVideoTracks()[0]);
          } else {
            config.pc.addTrack(stream.getVideoTracks()[0], stream);
          }
        } else {
          Janus.log((media.replaceVideo ? "Replacing" : "Adding") + " video track:", stream.getVideoTracks()[0]);
          config.pc.addTrack(stream.getVideoTracks()[0], stream);
        }
      }
    } // If we still need to create a PeerConnection, let's do that


    if (!config.pc) {
      var pc_config = {
        "iceServers": iceServers,
        "iceTransportPolicy": iceTransportPolicy,
        "bundlePolicy": bundlePolicy
      };

      if (Janus.webRTCAdapter.browserDetails.browser === "chrome") {
        // For Chrome versions before 72, we force a plan-b semantic, and unified-plan otherwise
        pc_config["sdpSemantics"] = Janus.webRTCAdapter.browserDetails.version < 72 ? "plan-b" : "unified-plan";
      }

      var pc_constraints = {
        "optional": [{
          "DtlsSrtpKeyAgreement": true
        }]
      };

      if (ipv6Support) {
        pc_constraints.optional.push({
          "googIPv6": true
        });
      } // Any custom constraint to add?


      if (callbacks.rtcConstraints && typeof callbacks.rtcConstraints === 'object') {
        Janus.debug("Adding custom PeerConnection constraints:", callbacks.rtcConstraints);

        for (var i in callbacks.rtcConstraints) {
          pc_constraints.optional.push(callbacks.rtcConstraints[i]);
        }
      }

      if (Janus.webRTCAdapter.browserDetails.browser === "edge") {
        // This is Edge, enable BUNDLE explicitly
        pc_config.bundlePolicy = "max-bundle";
      } // Check if a sender or receiver transform has been provided


      if (RTCRtpSender && (RTCRtpSender.prototype.createEncodedStreams || RTCRtpSender.prototype.createEncodedAudioStreams && RTCRtpSender.prototype.createEncodedVideoStreams) && (callbacks.senderTransforms || callbacks.receiverTransforms)) {
        config.senderTransforms = callbacks.senderTransforms;
        config.receiverTransforms = callbacks.receiverTransforms;
        pc_config["forceEncodedAudioInsertableStreams"] = true;
        pc_config["forceEncodedVideoInsertableStreams"] = true;
        pc_config["encodedInsertableStreams"] = true;
      }

      Janus.log("Creating PeerConnection");
      Janus.debug(pc_constraints);
      config.pc = new RTCPeerConnection(pc_config, pc_constraints);
      Janus.debug(config.pc);

      if (config.pc.getStats) {
        // FIXME
        config.volume = {};
        config.bitrate.value = "0 kbits/sec";
      }

      Janus.log("Preparing local SDP and gathering candidates (trickle=" + config.trickle + ")");

      config.pc.oniceconnectionstatechange = function () {
        if (config.pc) pluginHandle.iceState(config.pc.iceConnectionState);
      };

      config.pc.onicecandidate = function (event) {
        if (!event.candidate || Janus.webRTCAdapter.browserDetails.browser === 'edge' && event.candidate.candidate.indexOf('endOfCandidates') > 0) {
          Janus.log("End of candidates.");
          config.iceDone = true;

          if (config.trickle === true) {
            // Notify end of candidates
            sendTrickleCandidate(handleId, {
              "completed": true
            });
          } else {
            // No trickle, time to send the complete SDP (including all candidates)
            sendSDP(handleId, callbacks);
          }
        } else {
          // JSON.stringify doesn't work on some WebRTC objects anymore
          // See https://code.google.com/p/chromium/issues/detail?id=467366
          var candidate = {
            "candidate": event.candidate.candidate,
            "sdpMid": event.candidate.sdpMid,
            "sdpMLineIndex": event.candidate.sdpMLineIndex
          };

          if (config.trickle === true) {
            // Send candidate
            sendTrickleCandidate(handleId, candidate);
          }
        }
      };

      config.pc.ontrack = function (event) {
        Janus.log("Handling Remote Track");
        Janus.debug(event);
        if (!event.streams) return;
        config.remoteStream = event.streams[0];
        if (!event.track) return; // Notify about the new track event

        var mid = event.transceiver ? event.transceiver.mid : event.track.id;

        try {
          pluginHandle.onremotetrack(event.track, mid, true);
        } catch (e) {
          Janus.error(e);
        }

        if (event.track.onended) return;

        if (config.receiverTransforms) {
          var receiverStreams = null;

          if (RTCRtpSender.prototype.createEncodedStreams) {
            receiverStreams = event.receiver.createEncodedStreams();
          } else if (RTCRtpSender.prototype.createAudioEncodedStreams || RTCRtpSender.prototype.createEncodedVideoStreams) {
            if (event.track.kind === "audio" && config.receiverTransforms["audio"]) {
              receiverStreams = event.receiver.createEncodedAudioStreams();
            } else if (event.track.kind === "video" && config.receiverTransforms["video"]) {
              receiverStreams = event.receiver.createEncodedVideoStreams();
            }
          }

          if (receiverStreams) {
            console.log(receiverStreams);

            if (receiverStreams.readableStream && receiverStreams.writableStream) {
              receiverStreams.readableStream.pipeThrough(config.receiverTransforms[event.track.kind]).pipeTo(receiverStreams.writableStream);
            } else if (receiverStreams.readable && receiverStreams.writable) {
              receiverStreams.readable.pipeThrough(config.receiverTransforms[event.track.kind]).pipeTo(receiverStreams.writable);
            }
          }
        }

        var trackMutedTimeoutId = null;
        Janus.log("Adding onended callback to track:", event.track);

        event.track.onended = function (ev) {
          Janus.log("Remote track removed:", ev);

          if (config.remoteStream) {
            clearTimeout(trackMutedTimeoutId);
            config.remoteStream.removeTrack(ev.target); // Notify the application

            var mid = ev.target.id;

            if (Janus.unifiedPlan) {
              var transceiver = config.pc.getTransceivers().find(t => t.receiver.track === ev.target);
              mid = transceiver.mid;
            }

            try {
              pluginHandle.onremotetrack(ev.target, mid, false);
            } catch (e) {
              Janus.error(e);
            }
          }
        };

        event.track.onmute = function (ev) {
          Janus.log("Remote track muted:", ev);

          if (config.remoteStream && trackMutedTimeoutId == null) {
            trackMutedTimeoutId = setTimeout(function () {
              Janus.log("Removing remote track");

              if (config.remoteStream) {
                config.remoteStream.removeTrack(ev.target); // Notify the application the track is gone

                var mid = ev.target.id;

                if (Janus.unifiedPlan) {
                  var transceiver = config.pc.getTransceivers().find(t => t.receiver.track === ev.target);
                  mid = transceiver.mid;
                }

                try {
                  pluginHandle.onremotetrack(ev.target, mid, false);
                } catch (e) {
                  Janus.error(e);
                }
              }

              trackMutedTimeoutId = null; // Chrome seems to raise mute events only at multiples of 834ms;
              // we set the timeout to three times this value (rounded to 840ms)
            }, 3 * 840);
          }
        };

        event.track.onunmute = function (ev) {
          Janus.log("Remote track flowing again:", ev);

          if (trackMutedTimeoutId != null) {
            clearTimeout(trackMutedTimeoutId);
            trackMutedTimeoutId = null;
          } else {
            try {
              config.remoteStream.addTrack(ev.target); // Notify the application the track is back

              var mid = ev.target.id;

              if (Janus.unifiedPlan) {
                var transceiver = config.pc.getTransceivers().find(t => t.receiver.track === ev.target);
                mid = transceiver.mid;
              }

              pluginHandle.onremotetrack(ev.target, mid, true);
            } catch (e) {
              Janus.error(e);
            }
          }
        };
      };
    }

    if (addTracks && stream) {
      Janus.log('Adding local stream');
      var simulcast = (callbacks.simulcast === true || callbacks.simulcast2 === true) && Janus.unifiedPlan;
      var svc = callbacks.svc;
      stream.getTracks().forEach(function (track) {
        Janus.log('Adding local track:', track);
        var sender = null;

        if (!simulcast && !svc || track.kind === 'audio') {
          sender = config.pc.addTrack(track, stream);
        } else if (simulcast) {
          Janus.log('Enabling rid-based simulcasting:', track);
          let maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
          let tr = config.pc.addTransceiver(track, {
            direction: "sendrecv",
            streams: [stream],
            sendEncodings: callbacks.sendEncodings || [{
              rid: "h",
              active: true,
              maxBitrate: maxBitrates.high
            }, {
              rid: "m",
              active: true,
              maxBitrate: maxBitrates.medium,
              scaleResolutionDownBy: 2
            }, {
              rid: "l",
              active: true,
              maxBitrate: maxBitrates.low,
              scaleResolutionDownBy: 4
            }]
          });
          if (tr) sender = tr.sender;
        } else {
          Janus.log('Enabling SVC (' + svc + '):', track);
          let tr = config.pc.addTransceiver(track, {
            direction: "sendrecv",
            streams: [stream],
            sendEncodings: [{
              scalabilityMode: svc
            }]
          });
          if (tr) sender = tr.sender;
        } // Check if insertable streams are involved


        if (sender && config.senderTransforms) {
          var senderStreams = null;

          if (RTCRtpSender.prototype.createEncodedStreams) {
            senderStreams = sender.createEncodedStreams();
          } else if (RTCRtpSender.prototype.createAudioEncodedStreams || RTCRtpSender.prototype.createEncodedVideoStreams) {
            if (sender.track.kind === "audio" && config.senderTransforms["audio"]) {
              senderStreams = sender.createEncodedAudioStreams();
            } else if (sender.track.kind === "video" && config.senderTransforms["video"]) {
              senderStreams = sender.createEncodedVideoStreams();
            }
          }

          if (senderStreams) {
            console.log(senderStreams);

            if (senderStreams.readableStream && senderStreams.writableStream) {
              senderStreams.readableStream.pipeThrough(config.senderTransforms[sender.track.kind]).pipeTo(senderStreams.writableStream);
            } else if (senderStreams.readable && senderStreams.writable) {
              senderStreams.readable.pipeThrough(config.senderTransforms[sender.track.kind]).pipeTo(senderStreams.writable);
            }
          }
        }
      });
    } // Any data channel to create?


    if (isDataEnabled(media) && !config.dataChannel[Janus.dataChanDefaultLabel]) {
      Janus.log("Creating default data channel");
      createDataChannel(handleId, Janus.dataChanDefaultLabel, null, false);

      config.pc.ondatachannel = function (event) {
        Janus.log("Data channel created by Janus:", event);
        createDataChannel(handleId, event.channel.label, event.channel.protocol, event.channel);
      };
    } // If there's a new local stream, let's notify the application


    if (config.myStream) {
      var tracks = config.myStream.getTracks();

      for (let i in tracks) {
        var track = tracks[i];

        track.onended = function (ev) {
          Janus.log("Local track removed:", ev);

          try {
            pluginHandle.onlocaltrack(ev.target, false);
          } catch (e) {
            Janus.error(e);
          }
        };

        try {
          pluginHandle.onlocaltrack(track, true);
        } catch (e) {
          Janus.error(e);
        }
      }
    } // Create offer/answer now


    if (!jsep) {
      createOffer(handleId, media, callbacks);
    } else {
      config.pc.setRemoteDescription(jsep).then(function () {
        Janus.log("Remote description accepted!");
        config.remoteSdp = jsep.sdp; // Any trickle candidate we cached?

        if (config.candidates && config.candidates.length > 0) {
          for (var i = 0; i < config.candidates.length; i++) {
            var candidate = config.candidates[i];
            Janus.debug("Adding remote candidate:", candidate);

            if (!candidate || candidate.completed === true) {
              // end-of-candidates
              config.pc.addIceCandidate(Janus.endOfCandidates);
            } else {
              // New candidate
              config.pc.addIceCandidate(candidate);
            }
          }

          config.candidates = [];
        } // Create the answer now


        createAnswer(handleId, media, callbacks);
      }, callbacks.error);
    }
  }

  function prepareWebrtc(handleId, offer, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : webrtcError;
    var jsep = callbacks.jsep;

    if (offer && jsep) {
      Janus.error("Provided a JSEP to a createOffer");
      callbacks.error("Provided a JSEP to a createOffer");
      return;
    } else if (!offer && (!jsep || !jsep.type || !jsep.sdp)) {
      Janus.error("A valid JSEP is required for createAnswer");
      callbacks.error("A valid JSEP is required for createAnswer");
      return;
    }
    /* Check that callbacks.media is a (not null) Object */


    callbacks.media = typeof callbacks.media === 'object' && callbacks.media ? callbacks.media : {
      audio: true,
      video: true
    };
    var media = callbacks.media;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    config.trickle = isTrickleEnabled(callbacks.trickle); // Are we updating a session?

    if (!config.pc) {
      // Nope, new PeerConnection
      media.update = false;
      media.keepAudio = false;
      media.keepVideo = false;
    } else {
      Janus.log("Updating existing media session");
      media.update = true; // Check if there's anything to add/remove/replace, or if we
      // can go directly to preparing the new SDP offer or answer

      if (callbacks.stream) {
        // External stream: is this the same as the one we were using before?
        if (callbacks.stream !== config.myStream) {
          Janus.log("Renegotiation involves a new external stream");
        }
      } else {
        // Check if there are changes on audio
        if (media.addAudio) {
          media.keepAudio = false;
          media.replaceAudio = false;
          media.removeAudio = false;
          media.audioSend = true;

          if (config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {
            Janus.error("Can't add audio stream, there already is one");
            callbacks.error("Can't add audio stream, there already is one");
            return;
          }
        } else if (media.removeAudio) {
          media.keepAudio = false;
          media.replaceAudio = false;
          media.addAudio = false;
          media.audioSend = false;
        } else if (media.replaceAudio) {
          media.keepAudio = false;
          media.addAudio = false;
          media.removeAudio = false;
          media.audioSend = true;
        }

        if (!config.myStream) {
          // No media stream: if we were asked to replace, it's actually an "add"
          if (media.replaceAudio) {
            media.keepAudio = false;
            media.replaceAudio = false;
            media.addAudio = true;
            media.audioSend = true;
          }

          if (isAudioSendEnabled(media)) {
            media.keepAudio = false;
            media.addAudio = true;
          }
        } else {
          if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
            // No audio track: if we were asked to replace, it's actually an "add"
            if (media.replaceAudio) {
              media.keepAudio = false;
              media.replaceAudio = false;
              media.addAudio = true;
              media.audioSend = true;
            }

            if (isAudioSendEnabled(media)) {
              media.keepAudio = false;
              media.addAudio = true;
            }
          } else {
            // We have an audio track: should we keep it as it is?
            if (isAudioSendEnabled(media) && !media.removeAudio && !media.replaceAudio) {
              media.keepAudio = true;
            }
          }
        } // Check if there are changes on video


        if (media.addVideo) {
          media.keepVideo = false;
          media.replaceVideo = false;
          media.removeVideo = false;
          media.videoSend = true;

          if (config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {
            Janus.error("Can't add video stream, there already is one");
            callbacks.error("Can't add video stream, there already is one");
            return;
          }
        } else if (media.removeVideo) {
          media.keepVideo = false;
          media.replaceVideo = false;
          media.addVideo = false;
          media.videoSend = false;
        } else if (media.replaceVideo) {
          media.keepVideo = false;
          media.addVideo = false;
          media.removeVideo = false;
          media.videoSend = true;
        }

        if (!config.myStream) {
          // No media stream: if we were asked to replace, it's actually an "add"
          if (media.replaceVideo) {
            media.keepVideo = false;
            media.replaceVideo = false;
            media.addVideo = true;
            media.videoSend = true;
          }

          if (isVideoSendEnabled(media)) {
            media.keepVideo = false;
            media.addVideo = true;
          }
        } else {
          if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
            // No video track: if we were asked to replace, it's actually an "add"
            if (media.replaceVideo) {
              media.keepVideo = false;
              media.replaceVideo = false;
              media.addVideo = true;
              media.videoSend = true;
            }

            if (isVideoSendEnabled(media)) {
              media.keepVideo = false;
              media.addVideo = true;
            }
          } else {
            // We have a video track: should we keep it as it is?
            if (isVideoSendEnabled(media) && !media.removeVideo && !media.replaceVideo) {
              media.keepVideo = true;
            }
          }
        } // Data channels can only be added


        if (media.addData) {
          media.data = true;
        }
      } // If we're updating and keeping all tracks, let's skip the getUserMedia part


      if (isAudioSendEnabled(media) && media.keepAudio && isVideoSendEnabled(media) && media.keepVideo) {
        pluginHandle.consentDialog(false);
        streamsDone(handleId, jsep, media, callbacks, config.myStream);
        return;
      }
    } // If we're updating, check if we need to remove/replace one of the tracks


    if (media.update && (!config.streamExternal || config.streamExternal && (media.replaceAudio || media.replaceVideo))) {
      if (media.removeAudio || media.replaceAudio) {
        if (config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {
          var at = config.myStream.getAudioTracks()[0];
          Janus.log("Removing audio track:", at);
          config.myStream.removeTrack(at);

          try {
            pluginHandle.onlocaltrack(at, false);
          } catch (e) {
            Janus.error(e);
          }

          try {
            at.stop();
          } catch (e) {}
        }

        if (config.pc.getSenders() && config.pc.getSenders().length) {
          var ra = true;

          if (media.replaceAudio && Janus.unifiedPlan) {
            // We can use replaceTrack
            ra = false;
          }

          if (ra) {
            for (var asnd of config.pc.getSenders()) {
              if (asnd && asnd.track && asnd.track.kind === "audio") {
                Janus.log("Removing audio sender:", asnd);
                config.pc.removeTrack(asnd);
              }
            }
          }
        }
      }

      if (media.removeVideo || media.replaceVideo) {
        if (config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {
          var vt = config.myStream.getVideoTracks()[0];
          Janus.log("Removing video track:", vt);
          config.myStream.removeTrack(vt);

          try {
            pluginHandle.onlocaltrack(vt, false);
          } catch (e) {
            Janus.error(e);
          }

          try {
            vt.stop();
          } catch (e) {}
        }

        if (config.pc.getSenders() && config.pc.getSenders().length) {
          var rv = true;

          if (media.replaceVideo && Janus.unifiedPlan) {
            // We can use replaceTrack
            rv = false;
          }

          if (rv) {
            for (var vsnd of config.pc.getSenders()) {
              if (vsnd && vsnd.track && vsnd.track.kind === "video") {
                Janus.log("Removing video sender:", vsnd);
                config.pc.removeTrack(vsnd);
              }
            }
          }
        }
      }
    } // Was a MediaStream object passed, or do we need to take care of that?


    if (callbacks.stream) {
      var stream = callbacks.stream;
      Janus.log("MediaStream provided by the application");
      Janus.debug(stream); // If this is an update, let's check if we need to release the previous stream

      if (media.update && config.myStream && config.myStream !== callbacks.stream && !config.streamExternal && !media.replaceAudio && !media.replaceVideo) {
        // We're replacing a stream we captured ourselves with an external one
        Janus.stopAllTracks(config.myStream);
        config.myStream = null;
      } // Skip the getUserMedia part


      config.streamExternal = true;
      pluginHandle.consentDialog(false);
      streamsDone(handleId, jsep, media, callbacks, stream);
      return;
    }

    if (isAudioSendEnabled(media) || isVideoSendEnabled(media)) {
      if (!Janus.isGetUserMediaAvailable()) {
        callbacks.error("getUserMedia not available");
        return;
      }

      var constraints = {
        mandatory: {},
        optional: []
      };
      pluginHandle.consentDialog(true);
      var audioSupport = isAudioSendEnabled(media);
      if (audioSupport && media && typeof media.audio === 'object') audioSupport = media.audio;
      var videoSupport = isVideoSendEnabled(media);

      if (videoSupport && media) {
        var simulcast = callbacks.simulcast === true || callbacks.simulcast2 === true;
        var svc = callbacks.svc;
        if ((simulcast || svc) && !jsep && !media.video) media.video = "hires";

        if (media.video && media.video != 'screen' && media.video != 'window') {
          if (typeof media.video === 'object') {
            videoSupport = media.video;
          } else {
            var width = 0;
            var height = 0;

            if (media.video === 'lowres') {
              // Small resolution, 4:3
              height = 240;
              width = 320;
            } else if (media.video === 'lowres-16:9') {
              // Small resolution, 16:9
              height = 180;
              width = 320;
            } else if (media.video === 'hires' || media.video === 'hires-16:9' || media.video === 'hdres') {
              // High(HD) resolution is only 16:9
              height = 720;
              width = 1280;
            } else if (media.video === 'fhdres') {
              // Full HD resolution is only 16:9
              height = 1080;
              width = 1920;
            } else if (media.video === '4kres') {
              // 4K resolution is only 16:9
              height = 2160;
              width = 3840;
            } else if (media.video === 'stdres') {
              // Normal resolution, 4:3
              height = 480;
              width = 640;
            } else if (media.video === 'stdres-16:9') {
              // Normal resolution, 16:9
              height = 360;
              width = 640;
            } else {
              Janus.log("Default video setting is stdres 4:3");
              height = 480;
              width = 640;
            }

            Janus.log("Adding media constraint:", media.video);
            videoSupport = {
              'height': {
                'ideal': height
              },
              'width': {
                'ideal': width
              }
            };
            Janus.log("Adding video constraint:", videoSupport);
          }
        } else if (media.video === 'screen' || media.video === 'window') {
          if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
            // The new experimental getDisplayMedia API is available, let's use that
            // https://groups.google.com/forum/#!topic/discuss-webrtc/Uf0SrR4uxzk
            // https://webrtchacks.com/chrome-screensharing-getdisplaymedia/
            constraints.video = {};

            if (media.screenshareFrameRate) {
              constraints.video.frameRate = media.screenshareFrameRate;
            }

            if (media.screenshareHeight) {
              constraints.video.height = media.screenshareHeight;
            }

            if (media.screenshareWidth) {
              constraints.video.width = media.screenshareWidth;
            }

            constraints.audio = media.captureDesktopAudio;
            navigator.mediaDevices.getDisplayMedia(constraints).then(function (stream) {
              pluginHandle.consentDialog(false);

              if (isAudioSendEnabled(media) && !media.keepAudio) {
                navigator.mediaDevices.getUserMedia({
                  audio: true,
                  video: false
                }).then(function (audioStream) {
                  stream.addTrack(audioStream.getAudioTracks()[0]);
                  streamsDone(handleId, jsep, media, callbacks, stream);
                });
              } else {
                streamsDone(handleId, jsep, media, callbacks, stream);
              }
            }, function (error) {
              pluginHandle.consentDialog(false);
              callbacks.error(error);
            });
            return;
          } // We're going to try and use the extension for Chrome 34+, the old approach
          // for older versions of Chrome, or the experimental support in Firefox 33+


          const callbackUserMedia = function (error, stream) {
            pluginHandle.consentDialog(false);

            if (error) {
              callbacks.error(error);
            } else {
              streamsDone(handleId, jsep, media, callbacks, stream);
            }
          };

          const getScreenMedia = function (constraints, gsmCallback, useAudio) {
            Janus.log("Adding media constraint (screen capture)");
            Janus.debug(constraints);
            navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
              if (useAudio) {
                navigator.mediaDevices.getUserMedia({
                  audio: true,
                  video: false
                }).then(function (audioStream) {
                  stream.addTrack(audioStream.getAudioTracks()[0]);
                  gsmCallback(null, stream);
                });
              } else {
                gsmCallback(null, stream);
              }
            }).catch(function (error) {
              pluginHandle.consentDialog(false);
              gsmCallback(error);
            });
          };

          if (Janus.webRTCAdapter.browserDetails.browser === 'chrome') {
            var chromever = Janus.webRTCAdapter.browserDetails.version;
            var maxver = 33;
            if (window.navigator.userAgent.match('Linux')) maxver = 35; // "known" crash in chrome 34 and 35 on linux

            if (chromever >= 26 && chromever <= maxver) {
              // Chrome 26->33 requires some awkward chrome://flags manipulation
              constraints = {
                video: {
                  mandatory: {
                    googLeakyBucket: true,
                    maxWidth: window.screen.width,
                    maxHeight: window.screen.height,
                    minFrameRate: media.screenshareFrameRate,
                    maxFrameRate: media.screenshareFrameRate,
                    chromeMediaSource: 'screen'
                  }
                },
                audio: isAudioSendEnabled(media) && !media.keepAudio
              };
              getScreenMedia(constraints, callbackUserMedia);
            } else {
              // Chrome 34+ requires an extension
              Janus.extension.getScreen(function (error, sourceId) {
                if (error) {
                  pluginHandle.consentDialog(false);
                  return callbacks.error(error);
                }

                constraints = {
                  audio: false,
                  video: {
                    mandatory: {
                      chromeMediaSource: 'desktop',
                      maxWidth: window.screen.width,
                      maxHeight: window.screen.height,
                      minFrameRate: media.screenshareFrameRate,
                      maxFrameRate: media.screenshareFrameRate
                    },
                    optional: [{
                      googLeakyBucket: true
                    }, {
                      googTemporalLayeredScreencast: true
                    }]
                  }
                };
                constraints.video.mandatory.chromeMediaSourceId = sourceId;
                getScreenMedia(constraints, callbackUserMedia, isAudioSendEnabled(media) && !media.keepAudio);
              });
            }
          } else if (Janus.webRTCAdapter.browserDetails.browser === 'firefox') {
            if (Janus.webRTCAdapter.browserDetails.version >= 33) {
              // Firefox 33+ has experimental support for screen sharing
              constraints = {
                video: {
                  mozMediaSource: media.video,
                  mediaSource: media.video
                },
                audio: isAudioSendEnabled(media) && !media.keepAudio
              };
              getScreenMedia(constraints, function (err, stream) {
                callbackUserMedia(err, stream); // Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1045810

                if (!err) {
                  var lastTime = stream.currentTime;
                  var polly = window.setInterval(function () {
                    if (!stream) window.clearInterval(polly);

                    if (stream.currentTime == lastTime) {
                      window.clearInterval(polly);

                      if (stream.onended) {
                        stream.onended();
                      }
                    }

                    lastTime = stream.currentTime;
                  }, 500);
                }
              });
            } else {
              var error = new Error('NavigatorUserMediaError');
              error.name = 'Your version of Firefox does not support screen sharing, please install Firefox 33 (or more recent versions)';
              pluginHandle.consentDialog(false);
              callbacks.error(error);
              return;
            }
          }

          return;
        }
      } // If we got here, we're not screensharing


      if (!media || media.video !== 'screen') {
        // Check whether all media sources are actually available or not
        navigator.mediaDevices.enumerateDevices().then(function (devices) {
          var audioExist = devices.some(function (device) {
            return device.kind === 'audioinput';
          }),
              videoExist = isScreenSendEnabled(media) || devices.some(function (device) {
            return device.kind === 'videoinput';
          }); // Check whether a missing device is really a problem

          var audioSend = isAudioSendEnabled(media);
          var videoSend = isVideoSendEnabled(media);
          var needAudioDevice = isAudioSendRequired(media);
          var needVideoDevice = isVideoSendRequired(media);

          if (audioSend || videoSend || needAudioDevice || needVideoDevice) {
            // We need to send either audio or video
            var haveAudioDevice = audioSend ? audioExist : false;
            var haveVideoDevice = videoSend ? videoExist : false;

            if (!haveAudioDevice && !haveVideoDevice) {
              // FIXME Should we really give up, or just assume recvonly for both?
              pluginHandle.consentDialog(false);
              callbacks.error('No capture device found');
              return false;
            } else if (!haveAudioDevice && needAudioDevice) {
              pluginHandle.consentDialog(false);
              callbacks.error('Audio capture is required, but no capture device found');
              return false;
            } else if (!haveVideoDevice && needVideoDevice) {
              pluginHandle.consentDialog(false);
              callbacks.error('Video capture is required, but no capture device found');
              return false;
            }
          }

          var gumConstraints = {
            audio: audioExist && !media.keepAudio ? audioSupport : false,
            video: videoExist && !media.keepVideo ? videoSupport : false
          };
          Janus.debug("getUserMedia constraints", gumConstraints);

          if (!gumConstraints.audio && !gumConstraints.video) {
            pluginHandle.consentDialog(false);
            streamsDone(handleId, jsep, media, callbacks, stream);
          } else {
            navigator.mediaDevices.getUserMedia(gumConstraints).then(function (stream) {
              pluginHandle.consentDialog(false);
              streamsDone(handleId, jsep, media, callbacks, stream);
            }).catch(function (error) {
              pluginHandle.consentDialog(false);
              callbacks.error({
                code: error.code,
                name: error.name,
                message: error.message
              });
            });
          }
        }).catch(function (error) {
          pluginHandle.consentDialog(false);
          callbacks.error(error);
        });
      }
    } else {
      // No need to do a getUserMedia, create offer/answer right away
      streamsDone(handleId, jsep, media, callbacks);
    }
  }

  function prepareWebrtcPeer(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : webrtcError;
    callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
    var jsep = callbacks.jsep;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;

    if (jsep) {
      if (!config.pc) {
        Janus.warn("Wait, no PeerConnection?? if this is an answer, use createAnswer and not handleRemoteJsep");
        callbacks.error("No PeerConnection: if this is an answer, use createAnswer and not handleRemoteJsep");
        return;
      }

      callbacks.customizeSdp(jsep);
      config.pc.setRemoteDescription(jsep).then(function () {
        Janus.log("Remote description accepted!");
        config.remoteSdp = jsep.sdp; // Any trickle candidate we cached?

        if (config.candidates && config.candidates.length > 0) {
          for (var i = 0; i < config.candidates.length; i++) {
            var candidate = config.candidates[i];
            Janus.debug("Adding remote candidate:", candidate);

            if (!candidate || candidate.completed === true) {
              // end-of-candidates
              config.pc.addIceCandidate(Janus.endOfCandidates);
            } else {
              // New candidate
              config.pc.addIceCandidate(candidate);
            }
          }

          config.candidates = [];
        } // Done


        callbacks.success();
      }, callbacks.error);
    } else {
      callbacks.error("Invalid JSEP");
    }
  }

  function createOffer(handleId, media, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    var simulcast = callbacks.simulcast === true || callbacks.simulcast2 === true;

    if (!simulcast) {
      Janus.log("Creating offer (iceDone=" + config.iceDone + ")");
    } else {
      Janus.log("Creating offer (iceDone=" + config.iceDone + ", simulcast=" + simulcast + ")");
    } // https://code.google.com/p/webrtc/issues/detail?id=3508


    var mediaConstraints = {};

    if (Janus.unifiedPlan) {
      // We can use Transceivers
      var audioTransceiver = null,
          videoTransceiver = null;
      var transceivers = config.pc.getTransceivers();

      if (transceivers && transceivers.length > 0) {
        for (var t of transceivers) {
          if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
            if (!audioTransceiver) {
              audioTransceiver = t;
            }

            continue;
          }

          if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
            if (!videoTransceiver) {
              videoTransceiver = t;
            }

            continue;
          }
        }
      } // Handle audio (and related changes, if any)


      var audioSend = isAudioSendEnabled(media);
      var audioRecv = isAudioRecvEnabled(media);

      if (!audioSend && !audioRecv) {
        // Audio disabled: have we removed it?
        if (media.removeAudio && audioTransceiver) {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection("inactive");
          } else {
            audioTransceiver.direction = "inactive";
          }

          Janus.log("Setting audio transceiver to inactive:", audioTransceiver);
        }
      } else {
        // Take care of audio m-line
        if (audioSend && audioRecv) {
          if (audioTransceiver) {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection("sendrecv");
            } else {
              audioTransceiver.direction = "sendrecv";
            }

            Janus.log("Setting audio transceiver to sendrecv:", audioTransceiver);
          }
        } else if (audioSend && !audioRecv) {
          if (audioTransceiver) {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection("sendonly");
            } else {
              audioTransceiver.direction = "sendonly";
            }

            Janus.log("Setting audio transceiver to sendonly:", audioTransceiver);
          }
        } else if (!audioSend && audioRecv) {
          if (audioTransceiver) {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection("recvonly");
            } else {
              audioTransceiver.direction = "recvonly";
            }

            Janus.log("Setting audio transceiver to recvonly:", audioTransceiver);
          } else {
            // In theory, this is the only case where we might not have a transceiver yet
            audioTransceiver = config.pc.addTransceiver("audio", {
              direction: "recvonly"
            });
            Janus.log("Adding recvonly audio transceiver:", audioTransceiver);
          }
        }
      } // Handle video (and related changes, if any)


      var videoSend = isVideoSendEnabled(media);
      var videoRecv = isVideoRecvEnabled(media);

      if (!videoSend && !videoRecv) {
        // Video disabled: have we removed it?
        if (media.removeVideo && videoTransceiver) {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection("inactive");
          } else {
            videoTransceiver.direction = "inactive";
          }

          Janus.log("Setting video transceiver to inactive:", videoTransceiver);
        }
      } else {
        // Take care of video m-line
        if (videoSend && videoRecv) {
          if (videoTransceiver) {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection("sendrecv");
            } else {
              videoTransceiver.direction = "sendrecv";
            }

            Janus.log("Setting video transceiver to sendrecv:", videoTransceiver);
          }
        } else if (videoSend && !videoRecv) {
          if (videoTransceiver) {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection("sendonly");
            } else {
              videoTransceiver.direction = "sendonly";
            }

            Janus.log("Setting video transceiver to sendonly:", videoTransceiver);
          }
        } else if (!videoSend && videoRecv) {
          if (videoTransceiver) {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection("recvonly");
            } else {
              videoTransceiver.direction = "recvonly";
            }

            Janus.log("Setting video transceiver to recvonly:", videoTransceiver);
          } else {
            // In theory, this is the only case where we might not have a transceiver yet
            videoTransceiver = config.pc.addTransceiver("video", {
              direction: "recvonly"
            });
            Janus.log("Adding recvonly video transceiver:", videoTransceiver);
          }
        }
      }
    } else {
      mediaConstraints["offerToReceiveAudio"] = isAudioRecvEnabled(media);
      mediaConstraints["offerToReceiveVideo"] = isVideoRecvEnabled(media);
    }

    var iceRestart = callbacks.iceRestart === true;

    if (iceRestart) {
      mediaConstraints["iceRestart"] = true;
    }

    Janus.debug(mediaConstraints); // Check if this is Firefox and we've been asked to do simulcasting

    var sendVideo = isVideoSendEnabled(media);

    if (sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === "firefox") {
      // FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b
      Janus.log("Enabling Simulcasting for Firefox (RID)");
      var sender = config.pc.getSenders().find(function (s) {
        return s.track && s.track.kind === "video";
      });

      if (sender) {
        var parameters = sender.getParameters();

        if (!parameters) {
          parameters = {};
        }

        var maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
        parameters.encodings = callbacks.sendEncodings || [{
          rid: "h",
          active: true,
          maxBitrate: maxBitrates.high
        }, {
          rid: "m",
          active: true,
          maxBitrate: maxBitrates.medium,
          scaleResolutionDownBy: 2
        }, {
          rid: "l",
          active: true,
          maxBitrate: maxBitrates.low,
          scaleResolutionDownBy: 4
        }];
        sender.setParameters(parameters);
      }
    }

    config.pc.createOffer(mediaConstraints).then(function (offer) {
      Janus.debug(offer); // JSON.stringify doesn't work on some WebRTC objects anymore
      // See https://code.google.com/p/chromium/issues/detail?id=467366

      var jsep = {
        "type": offer.type,
        "sdp": offer.sdp
      };
      callbacks.customizeSdp(jsep);
      offer.sdp = jsep.sdp;
      Janus.log("Setting local description");

      if (sendVideo && simulcast && !Janus.unifiedPlan) {
        // We only do simulcast via SDP munging on older versions of Chrome and Safari
        if (Janus.webRTCAdapter.browserDetails.browser === "chrome" || Janus.webRTCAdapter.browserDetails.browser === "safari") {
          Janus.log("Enabling Simulcasting for Chrome (SDP munging)");
          offer.sdp = mungeSdpForSimulcasting(offer.sdp);
        }
      }

      config.mySdp = {
        type: "offer",
        sdp: offer.sdp
      };
      config.pc.setLocalDescription(offer).catch(callbacks.error);
      config.mediaConstraints = mediaConstraints;

      if (!config.iceDone && !config.trickle) {
        // Don't do anything until we have all candidates
        Janus.log("Waiting for all candidates...");
        return;
      } // If transforms are present, notify Janus that the media is end-to-end encrypted


      if (config.senderTransforms || config.receiverTransforms) {
        offer["e2ee"] = true;
      }

      callbacks.success(offer);
    }, callbacks.error);
  }

  function createAnswer(handleId, media, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      callbacks.error("Invalid handle");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    var simulcast = callbacks.simulcast === true || callbacks.simulcast2 === true;

    if (!simulcast) {
      Janus.log("Creating answer (iceDone=" + config.iceDone + ")");
    } else {
      Janus.log("Creating answer (iceDone=" + config.iceDone + ", simulcast=" + simulcast + ")");
    }

    var mediaConstraints = null;

    if (Janus.unifiedPlan) {
      // We can use Transceivers
      mediaConstraints = {};
      var audioTransceiver = null,
          videoTransceiver = null;
      var transceivers = config.pc.getTransceivers();

      if (transceivers && transceivers.length > 0) {
        for (var t of transceivers) {
          if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
            if (!audioTransceiver) audioTransceiver = t;
            continue;
          }

          if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
            if (!videoTransceiver) videoTransceiver = t;
            continue;
          }
        }
      } // Handle audio (and related changes, if any)


      var audioSend = isAudioSendEnabled(media);
      var audioRecv = isAudioRecvEnabled(media);

      if (!audioSend && !audioRecv) {
        // Audio disabled: have we removed it?
        if (media.removeAudio && audioTransceiver) {
          try {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection("inactive");
            } else {
              audioTransceiver.direction = "inactive";
            }

            Janus.log("Setting audio transceiver to inactive:", audioTransceiver);
          } catch (e) {
            Janus.error(e);
          }
        }
      } else {
        // Take care of audio m-line
        if (audioSend && audioRecv) {
          if (audioTransceiver) {
            try {
              if (audioTransceiver.setDirection) {
                audioTransceiver.setDirection("sendrecv");
              } else {
                audioTransceiver.direction = "sendrecv";
              }

              Janus.log("Setting audio transceiver to sendrecv:", audioTransceiver);
            } catch (e) {
              Janus.error(e);
            }
          }
        } else if (audioSend && !audioRecv) {
          try {
            if (audioTransceiver) {
              if (audioTransceiver.setDirection) {
                audioTransceiver.setDirection("sendonly");
              } else {
                audioTransceiver.direction = "sendonly";
              }

              Janus.log("Setting audio transceiver to sendonly:", audioTransceiver);
            }
          } catch (e) {
            Janus.error(e);
          }
        } else if (!audioSend && audioRecv) {
          if (audioTransceiver) {
            try {
              if (audioTransceiver.setDirection) {
                audioTransceiver.setDirection("recvonly");
              } else {
                audioTransceiver.direction = "recvonly";
              }

              Janus.log("Setting audio transceiver to recvonly:", audioTransceiver);
            } catch (e) {
              Janus.error(e);
            }
          } else {
            // In theory, this is the only case where we might not have a transceiver yet
            audioTransceiver = config.pc.addTransceiver("audio", {
              direction: "recvonly"
            });
            Janus.log("Adding recvonly audio transceiver:", audioTransceiver);
          }
        }
      } // Handle video (and related changes, if any)


      var videoSend = isVideoSendEnabled(media);
      var videoRecv = isVideoRecvEnabled(media);

      if (!videoSend && !videoRecv) {
        // Video disabled: have we removed it?
        if (media.removeVideo && videoTransceiver) {
          try {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection("inactive");
            } else {
              videoTransceiver.direction = "inactive";
            }

            Janus.log("Setting video transceiver to inactive:", videoTransceiver);
          } catch (e) {
            Janus.error(e);
          }
        }
      } else {
        // Take care of video m-line
        if (videoSend && videoRecv) {
          if (videoTransceiver) {
            try {
              if (videoTransceiver.setDirection) {
                videoTransceiver.setDirection("sendrecv");
              } else {
                videoTransceiver.direction = "sendrecv";
              }

              Janus.log("Setting video transceiver to sendrecv:", videoTransceiver);
            } catch (e) {
              Janus.error(e);
            }
          }
        } else if (videoSend && !videoRecv) {
          if (videoTransceiver) {
            try {
              if (videoTransceiver.setDirection) {
                videoTransceiver.setDirection("sendonly");
              } else {
                videoTransceiver.direction = "sendonly";
              }

              Janus.log("Setting video transceiver to sendonly:", videoTransceiver);
            } catch (e) {
              Janus.error(e);
            }
          }
        } else if (!videoSend && videoRecv) {
          if (videoTransceiver) {
            try {
              if (videoTransceiver.setDirection) {
                videoTransceiver.setDirection("recvonly");
              } else {
                videoTransceiver.direction = "recvonly";
              }

              Janus.log("Setting video transceiver to recvonly:", videoTransceiver);
            } catch (e) {
              Janus.error(e);
            }
          } else {
            // In theory, this is the only case where we might not have a transceiver yet
            videoTransceiver = config.pc.addTransceiver("video", {
              direction: "recvonly"
            });
            Janus.log("Adding recvonly video transceiver:", videoTransceiver);
          }
        }
      }
    } else {
      if (Janus.webRTCAdapter.browserDetails.browser === "firefox" || Janus.webRTCAdapter.browserDetails.browser === "edge") {
        mediaConstraints = {
          offerToReceiveAudio: isAudioRecvEnabled(media),
          offerToReceiveVideo: isVideoRecvEnabled(media)
        };
      } else {
        mediaConstraints = {
          mandatory: {
            OfferToReceiveAudio: isAudioRecvEnabled(media),
            OfferToReceiveVideo: isVideoRecvEnabled(media)
          }
        };
      }
    }

    Janus.debug(mediaConstraints); // Check if this is Firefox and we've been asked to do simulcasting

    var sendVideo = isVideoSendEnabled(media);

    if (sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === "firefox") {
      // FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b
      Janus.log("Enabling Simulcasting for Firefox (RID)");
      var sender = config.pc.getSenders()[1];
      Janus.log(sender);
      var parameters = sender.getParameters();
      Janus.log(parameters);
      var maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
      sender.setParameters({
        encodings: callbacks.sendEncodings || [{
          rid: "h",
          active: true,
          maxBitrate: maxBitrates.high
        }, {
          rid: "m",
          active: true,
          maxBitrate: maxBitrates.medium,
          scaleResolutionDownBy: 2
        }, {
          rid: "l",
          active: true,
          maxBitrate: maxBitrates.low,
          scaleResolutionDownBy: 4
        }]
      });
    }

    config.pc.createAnswer(mediaConstraints).then(function (answer) {
      Janus.debug(answer); // JSON.stringify doesn't work on some WebRTC objects anymore
      // See https://code.google.com/p/chromium/issues/detail?id=467366

      var jsep = {
        "type": answer.type,
        "sdp": answer.sdp
      };
      callbacks.customizeSdp(jsep);
      answer.sdp = jsep.sdp;
      Janus.log("Setting local description");

      if (sendVideo && simulcast && !Janus.unifiedPlan) {
        // We only do simulcast via SDP munging on older versions of Chrome and Safari
        if (Janus.webRTCAdapter.browserDetails.browser === "chrome") {
          // FIXME Apparently trying to simulcast when answering breaks video in Chrome...
          //~ Janus.log("Enabling Simulcasting for Chrome (SDP munging)");
          //~ answer.sdp = mungeSdpForSimulcasting(answer.sdp);
          Janus.warn("simulcast=true, but this is an answer, and video breaks in Chrome if we enable it");
        }
      }

      config.mySdp = {
        type: "answer",
        sdp: answer.sdp
      };
      config.pc.setLocalDescription(answer).catch(callbacks.error);
      config.mediaConstraints = mediaConstraints;

      if (!config.iceDone && !config.trickle) {
        // Don't do anything until we have all candidates
        Janus.log("Waiting for all candidates...");
        return;
      } // If transforms are present, notify Janus that the media is end-to-end encrypted


      if (config.senderTransforms || config.receiverTransforms) {
        answer["e2ee"] = true;
      }

      callbacks.success(answer);
    }, callbacks.error);
  }

  function sendSDP(handleId, callbacks) {
    callbacks = callbacks || {};
    callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
    callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle, not sending anything");
      return;
    }

    var config = pluginHandle.webrtcStuff;
    Janus.log("Sending offer/answer SDP...");

    if (!config.mySdp) {
      Janus.warn("Local SDP instance is invalid, not sending anything...");
      return;
    }

    config.mySdp = {
      "type": config.pc.localDescription.type,
      "sdp": config.pc.localDescription.sdp
    };
    if (config.trickle === false) config.mySdp["trickle"] = false;
    Janus.debug(callbacks);
    config.sdpSent = true;
    callbacks.success(config.mySdp);
  }

  function getVolume(handleId, mid, remote, result) {
    result = typeof result == "function" ? result : Janus.noop;
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      result(0);
      return;
    }

    var stream = remote ? "remote" : "local";
    var config = pluginHandle.webrtcStuff;
    if (!config.volume[stream]) config.volume[stream] = {
      value: 0
    }; // Start getting the volume, if audioLevel in getStats is supported (apparently
    // they're only available in Chrome/Safari right now: https://webrtc-stats.callstats.io/)

    if (config.pc.getStats && (Janus.webRTCAdapter.browserDetails.browser === "chrome" || Janus.webRTCAdapter.browserDetails.browser === "safari")) {
      if (remote && !config.remoteStream) {
        Janus.warn("Remote stream unavailable");
        result(0);
        return;
      } else if (!remote && !config.myStream) {
        Janus.warn("Local stream unavailable");
        result(0);
        return;
      } // Are we interested in a mid in particular? (only if transceivers are in use)


      var query = config.pc;

      if (mid && Janus.unifiedPlan) {
        var transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "audio");

        if (!transceiver) {
          Janus.warn("No audio transceiver with mid " + mid);
          result(0);
          return;
        }

        if (remote && !transceiver.receiver) {
          Janus.warn("Remote transceiver track unavailable");
          result(0);
          return;
        } else if (!remote && !transceiver.sender) {
          Janus.warn("Local transceiver track unavailable");
          result(0);
          return;
        }

        query = remote ? transceiver.receiver : transceiver.sender;
      }

      query.getStats().then(function (stats) {
        stats.forEach(function (res) {
          if (!res || res.kind !== "audio") return;
          if (remote && !res.remoteSource || !remote && res.type !== "media-source") return;
          result(res.audioLevel ? res.audioLevel : 0);
        });
      });
      return config.volume[stream].value;
    } else {
      // audioInputLevel and audioOutputLevel seem only available in Chrome? audioLevel
      // seems to be available on Chrome and Firefox, but they don't seem to work
      Janus.warn("Getting the " + stream + " volume unsupported by browser");
      result(0);
      return;
    }
  }

  function isMuted(handleId, mid, video) {
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      return true;
    }

    var config = pluginHandle.webrtcStuff;

    if (!config.pc) {
      Janus.warn("Invalid PeerConnection");
      return true;
    }

    if (!config.myStream) {
      Janus.warn("Invalid local MediaStream");
      return true;
    }

    if (video) {
      // Check video track
      if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
        Janus.warn("No video track");
        return true;
      }

      if (mid && Janus.unifiedPlan) {
        let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "video");

        if (!transceiver) {
          Janus.warn("No video transceiver with mid " + mid);
          return true;
        }

        if (!transceiver.sender || !transceiver.sender.track) {
          Janus.warn("No video sender with mid " + mid);
          return true;
        }

        return !transceiver.sender.track.enabled;
      } else {
        return !config.myStream.getVideoTracks()[0].enabled;
      }
    } else {
      // Check audio track
      if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
        Janus.warn("No audio track");
        return true;
      }

      if (mid && Janus.unifiedPlan) {
        let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "audio");

        if (!transceiver) {
          Janus.warn("No audio transceiver with mid " + mid);
          return true;
        }

        if (!transceiver.sender || !transceiver.sender.track) {
          Janus.warn("No audio sender with mid " + mid);
          return true;
        }

        return !transceiver.sender.track.enabled;
      } else {
        return !config.myStream.getAudioTracks()[0].enabled;
      }
    }
  }

  function mute(handleId, mid, video, mute) {
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      return false;
    }

    var config = pluginHandle.webrtcStuff;

    if (!config.pc) {
      Janus.warn("Invalid PeerConnection");
      return false;
    }

    if (!config.myStream) {
      Janus.warn("Invalid local MediaStream");
      return false;
    }

    if (video) {
      // Mute/unmute video track
      if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
        Janus.warn("No video track");
        return false;
      }

      if (mid && Janus.unifiedPlan) {
        let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "video");

        if (!transceiver) {
          Janus.warn("No video transceiver with mid " + mid);
          return false;
        }

        if (!transceiver.sender || !transceiver.sender.track) {
          Janus.warn("No video sender with mid " + mid);
          return false;
        }

        transceiver.sender.track.enabled = mute ? false : true;
      } else {
        config.myStream.getVideoTracks()[0].enabled = mute ? false : true;
      }
    } else {
      // Mute/unmute audio track
      if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
        Janus.warn("No audio track");
        return false;
      }

      if (mid && Janus.unifiedPlan) {
        let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "audio");

        if (!transceiver) {
          Janus.warn("No audio transceiver with mid " + mid);
          return false;
        }

        if (!transceiver.sender || !transceiver.sender.track) {
          Janus.warn("No audio sender with mid " + mid);
          return false;
        }

        transceiver.sender.track.enabled = mute ? false : true;
      } else {
        config.myStream.getAudioTracks()[0].enabled = mute ? false : true;
      }
    }

    return true;
  }

  function getBitrate(handleId, mid) {
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle || !pluginHandle.webrtcStuff) {
      Janus.warn("Invalid handle");
      return "Invalid handle";
    }

    var config = pluginHandle.webrtcStuff;
    if (!config.pc) return "Invalid PeerConnection"; // Start getting the bitrate, if getStats is supported

    if (config.pc.getStats) {
      var query = config.pc;
      var target = mid ? mid : "default";

      if (mid && Janus.unifiedPlan) {
        var transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === "video");

        if (!transceiver) {
          Janus.warn("No video transceiver with mid " + mid);
          return "No video transceiver with mid " + mid;
        }

        if (!transceiver.receiver) {
          Janus.warn("No video receiver with mid " + mid);
          return "No video receiver with mid " + mid;
        }

        query = transceiver.receiver;
      }

      if (!config.bitrate[target]) {
        config.bitrate[target] = {
          timer: null,
          bsnow: null,
          bsbefore: null,
          tsnow: null,
          tsbefore: null,
          value: "0 kbits/sec"
        };
      }

      if (!config.bitrate[target].timer) {
        Janus.log("Starting bitrate timer" + (mid ? " for mid " + mid : "") + " (via getStats)");
        config.bitrate[target].timer = setInterval(function () {
          query.getStats().then(function (stats) {
            stats.forEach(function (res) {
              if (!res) return;
              var inStats = false; // Check if these are statistics on incoming media

              if ((res.mediaType === "video" || res.id.toLowerCase().indexOf("video") > -1) && res.type === "inbound-rtp" && res.id.indexOf("rtcp") < 0) {
                // New stats
                inStats = true;
              } else if (res.type == 'ssrc' && res.bytesReceived && (res.googCodecName === "VP8" || res.googCodecName === "")) {
                // Older Chromer versions
                inStats = true;
              } // Parse stats now


              if (inStats) {
                config.bitrate[target].bsnow = res.bytesReceived;
                config.bitrate[target].tsnow = res.timestamp;

                if (config.bitrate[target].bsbefore === null || config.bitrate[target].tsbefore === null) {
                  // Skip this round
                  config.bitrate[target].bsbefore = config.bitrate[target].bsnow;
                  config.bitrate[target].tsbefore = config.bitrate[target].tsnow;
                } else {
                  // Calculate bitrate
                  var timePassed = config.bitrate[target].tsnow - config.bitrate[target].tsbefore;
                  if (Janus.webRTCAdapter.browserDetails.browser === "safari") timePassed = timePassed / 1000; // Apparently the timestamp is in microseconds, in Safari

                  var bitRate = Math.round((config.bitrate[target].bsnow - config.bitrate[target].bsbefore) * 8 / timePassed);
                  if (Janus.webRTCAdapter.browserDetails.browser === "safari") bitRate = parseInt(bitRate / 1000);
                  config.bitrate[target].value = bitRate + ' kbits/sec'; //~ Janus.log("Estimated bitrate is " + config.bitrate.value);

                  config.bitrate[target].bsbefore = config.bitrate[target].bsnow;
                  config.bitrate[target].tsbefore = config.bitrate[target].tsnow;
                }
              }
            });
          });
        }, 1000);
        return "0 kbits/sec"; // We don't have a bitrate value yet
      }

      return config.bitrate[target].value;
    } else {
      Janus.warn("Getting the video bitrate unsupported by browser");
      return "Feature unsupported by browser";
    }
  }

  function webrtcError(error) {
    Janus.error("WebRTC error:", error);
  }

  function cleanupWebrtc(handleId, hangupRequest) {
    Janus.log("Cleaning WebRTC stuff");
    var pluginHandle = pluginHandles[handleId];

    if (!pluginHandle) {
      // Nothing to clean
      return;
    }

    var config = pluginHandle.webrtcStuff;

    if (config) {
      if (hangupRequest === true) {
        // Send a hangup request (we don't really care about the response)
        var request = {
          "janus": "hangup",
          "transaction": Janus.randomString(12)
        };
        if (pluginHandle.token) request["token"] = pluginHandle.token;
        if (apisecret) request["apisecret"] = apisecret;
        Janus.debug("Sending hangup request (handle=" + handleId + "):");
        Janus.debug(request);

        if (websockets) {
          request["session_id"] = sessionId;
          request["handle_id"] = handleId;
          ws.send(JSON.stringify(request));
        } else {
          Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
            verb: 'POST',
            withCredentials: withCredentials,
            body: request
          });
        }
      } // Cleanup stack


      config.remoteStream = null;

      if (config.volume) {
        if (config.volume["local"] && config.volume["local"].timer) clearInterval(config.volume["local"].timer);
        if (config.volume["remote"] && config.volume["remote"].timer) clearInterval(config.volume["remote"].timer);
      }

      for (var i in config.bitrate) {
        if (config.bitrate[i].timer) clearInterval(config.bitrate[i].timer);
      }

      config.bitrate = {};

      if (!config.streamExternal && config.myStream) {
        Janus.log("Stopping local stream tracks");
        Janus.stopAllTracks(config.myStream);
      }

      config.streamExternal = false;
      config.myStream = null; // Close PeerConnection

      try {
        config.pc.close();
      } catch (e) {// Do nothing
      }

      config.pc = null;
      config.candidates = null;
      config.mySdp = null;
      config.remoteSdp = null;
      config.iceDone = false;
      config.dataChannel = {};
      config.dtmfSender = null;
      config.senderTransforms = null;
      config.receiverTransforms = null;
    }

    pluginHandle.oncleanup();
  } // Helper method to munge an SDP to enable simulcasting (Chrome only)


  function mungeSdpForSimulcasting(sdp) {
    // Let's munge the SDP to add the attributes for enabling simulcasting
    // (based on https://gist.github.com/ggarber/a19b4c33510028b9c657)
    var lines = sdp.split("\r\n");
    var video = false;
    var ssrc = [-1],
        ssrc_fid = [-1];
    var cname = null,
        msid = null,
        mslabel = null,
        label = null;
    var insertAt = -1;

    for (let i = 0; i < lines.length; i++) {
      const mline = lines[i].match(/m=(\w+) */);

      if (mline) {
        const medium = mline[1];

        if (medium === "video") {
          // New video m-line: make sure it's the first one
          if (ssrc[0] < 0) {
            video = true;
          } else {
            // We're done, let's add the new attributes here
            insertAt = i;
            break;
          }
        } else {
          // New non-video m-line: do we have what we were looking for?
          if (ssrc[0] > -1) {
            // We're done, let's add the new attributes here
            insertAt = i;
            break;
          }
        }

        continue;
      }

      if (!video) continue;
      var sim = lines[i].match(/a=ssrc-group:SIM (\d+) (\d+) (\d+)/);

      if (sim) {
        Janus.warn("The SDP already contains a SIM attribute, munging will be skipped");
        return sdp;
      }

      var fid = lines[i].match(/a=ssrc-group:FID (\d+) (\d+)/);

      if (fid) {
        ssrc[0] = fid[1];
        ssrc_fid[0] = fid[2];
        lines.splice(i, 1);
        i--;
        continue;
      }

      if (ssrc[0]) {
        var match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)');

        if (match) {
          cname = match[1];
        }

        match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)');

        if (match) {
          msid = match[1];
        }

        match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)');

        if (match) {
          mslabel = match[1];
        }

        match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)');

        if (match) {
          label = match[1];
        }

        if (lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {
          lines.splice(i, 1);
          i--;
          continue;
        }

        if (lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {
          lines.splice(i, 1);
          i--;
          continue;
        }
      }

      if (lines[i].length == 0) {
        lines.splice(i, 1);
        i--;
        continue;
      }
    }

    if (ssrc[0] < 0) {
      // Couldn't find a FID attribute, let's just take the first video SSRC we find
      insertAt = -1;
      video = false;

      for (let i = 0; i < lines.length; i++) {
        const mline = lines[i].match(/m=(\w+) */);

        if (mline) {
          const medium = mline[1];

          if (medium === "video") {
            // New video m-line: make sure it's the first one
            if (ssrc[0] < 0) {
              video = true;
            } else {
              // We're done, let's add the new attributes here
              insertAt = i;
              break;
            }
          } else {
            // New non-video m-line: do we have what we were looking for?
            if (ssrc[0] > -1) {
              // We're done, let's add the new attributes here
              insertAt = i;
              break;
            }
          }

          continue;
        }

        if (!video) continue;

        if (ssrc[0] < 0) {
          var value = lines[i].match(/a=ssrc:(\d+)/);

          if (value) {
            ssrc[0] = value[1];
            lines.splice(i, 1);
            i--;
            continue;
          }
        } else {
          let match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)');

          if (match) {
            cname = match[1];
          }

          match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)');

          if (match) {
            msid = match[1];
          }

          match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)');

          if (match) {
            mslabel = match[1];
          }

          match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)');

          if (match) {
            label = match[1];
          }

          if (lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {
            lines.splice(i, 1);
            i--;
            continue;
          }

          if (lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {
            lines.splice(i, 1);
            i--;
            continue;
          }
        }

        if (lines[i].length === 0) {
          lines.splice(i, 1);
          i--;
          continue;
        }
      }
    }

    if (ssrc[0] < 0) {
      // Still nothing, let's just return the SDP we were asked to munge
      Janus.warn("Couldn't find the video SSRC, simulcasting NOT enabled");
      return sdp;
    }

    if (insertAt < 0) {
      // Append at the end
      insertAt = lines.length;
    } // Generate a couple of SSRCs (for retransmissions too)
    // Note: should we check if there are conflicts, here?


    ssrc[1] = Math.floor(Math.random() * 0xFFFFFFFF);
    ssrc[2] = Math.floor(Math.random() * 0xFFFFFFFF);
    ssrc_fid[1] = Math.floor(Math.random() * 0xFFFFFFFF);
    ssrc_fid[2] = Math.floor(Math.random() * 0xFFFFFFFF); // Add attributes to the SDP

    for (var i = 0; i < ssrc.length; i++) {
      if (cname) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' cname:' + cname);
        insertAt++;
      }

      if (msid) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' msid:' + msid);
        insertAt++;
      }

      if (mslabel) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' mslabel:' + mslabel);
        insertAt++;
      }

      if (label) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' label:' + label);
        insertAt++;
      } // Add the same info for the retransmission SSRC


      if (cname) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' cname:' + cname);
        insertAt++;
      }

      if (msid) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' msid:' + msid);
        insertAt++;
      }

      if (mslabel) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' mslabel:' + mslabel);
        insertAt++;
      }

      if (label) {
        lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' label:' + label);
        insertAt++;
      }
    }

    lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[2] + ' ' + ssrc_fid[2]);
    lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[1] + ' ' + ssrc_fid[1]);
    lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[0] + ' ' + ssrc_fid[0]);
    lines.splice(insertAt, 0, 'a=ssrc-group:SIM ' + ssrc[0] + ' ' + ssrc[1] + ' ' + ssrc[2]);
    sdp = lines.join("\r\n");
    if (!sdp.endsWith("\r\n")) sdp += "\r\n";
    return sdp;
  } // Helper methods to parse a media object


  function isAudioSendEnabled(media) {
    Janus.debug("isAudioSendEnabled:", media);
    if (!media) return true; // Default

    if (media.audio === false) return false; // Generic audio has precedence

    if (media.audioSend === undefined || media.audioSend === null) return true; // Default

    return media.audioSend === true;
  }

  function isAudioSendRequired(media) {
    Janus.debug("isAudioSendRequired:", media);
    if (!media) return false; // Default

    if (media.audio === false || media.audioSend === false) return false; // If we're not asking to capture audio, it's not required

    if (media.failIfNoAudio === undefined || media.failIfNoAudio === null) return false; // Default

    return media.failIfNoAudio === true;
  }

  function isAudioRecvEnabled(media) {
    Janus.debug("isAudioRecvEnabled:", media);
    if (!media) return true; // Default

    if (media.audio === false) return false; // Generic audio has precedence

    if (media.audioRecv === undefined || media.audioRecv === null) return true; // Default

    return media.audioRecv === true;
  }

  function isVideoSendEnabled(media) {
    Janus.debug("isVideoSendEnabled:", media);
    if (!media) return true; // Default

    if (media.video === false) return false; // Generic video has precedence

    if (media.videoSend === undefined || media.videoSend === null) return true; // Default

    return media.videoSend === true;
  }

  function isVideoSendRequired(media) {
    Janus.debug("isVideoSendRequired:", media);
    if (!media) return false; // Default

    if (media.video === false || media.videoSend === false) return false; // If we're not asking to capture video, it's not required

    if (media.failIfNoVideo === undefined || media.failIfNoVideo === null) return false; // Default

    return media.failIfNoVideo === true;
  }

  function isVideoRecvEnabled(media) {
    Janus.debug("isVideoRecvEnabled:", media);
    if (!media) return true; // Default

    if (media.video === false) return false; // Generic video has precedence

    if (media.videoRecv === undefined || media.videoRecv === null) return true; // Default

    return media.videoRecv === true;
  }

  function isScreenSendEnabled(media) {
    Janus.debug("isScreenSendEnabled:", media);
    if (!media) return false;
    if (typeof media.video !== 'object' || typeof media.video.mandatory !== 'object') return false;
    var constraints = media.video.mandatory;
    if (constraints.chromeMediaSource) return constraints.chromeMediaSource === 'desktop' || constraints.chromeMediaSource === 'screen';else if (constraints.mozMediaSource) return constraints.mozMediaSource === 'window' || constraints.mozMediaSource === 'screen';else if (constraints.mediaSource) return constraints.mediaSource === 'window' || constraints.mediaSource === 'screen';
    return false;
  }

  function isDataEnabled(media) {
    Janus.debug("isDataEnabled:", media);

    if (Janus.webRTCAdapter.browserDetails.browser === "edge") {
      Janus.warn("Edge doesn't support data channels yet");
      return false;
    }

    if (media === undefined || media === null) return false; // Default

    return media.data === true;
  }

  function isTrickleEnabled(trickle) {
    Janus.debug("isTrickleEnabled:", trickle);
    return trickle === false ? false : true;
  }
}
/*** EXPORTS FROM exports-loader ***/




/***/ }),

/***/ 5164:
/*!***********************************!*\
  !*** ./node_modules/hark/hark.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var WildEmitter = __webpack_require__(/*! wildemitter */ 2069);

function getMaxVolume(analyser, fftBins) {
  var maxVolume = -Infinity;
  analyser.getFloatFrequencyData(fftBins);

  for (var i = 4, ii = fftBins.length; i < ii; i++) {
    if (fftBins[i] > maxVolume && fftBins[i] < 0) {
      maxVolume = fftBins[i];
    }
  }

  ;
  return maxVolume;
}

var audioContextType;

if (typeof window !== 'undefined') {
  audioContextType = window.AudioContext || window.webkitAudioContext;
} // use a single audio context due to hardware limits


var audioContext = null;

module.exports = function (stream, options) {
  var harker = new WildEmitter(); // make it not break in non-supported browsers

  if (!audioContextType) return harker; //Config

  var options = options || {},
      smoothing = options.smoothing || 0.1,
      interval = options.interval || 50,
      threshold = options.threshold,
      play = options.play,
      history = options.history || 10,
      running = true; // Ensure that just a single AudioContext is internally created

  audioContext = options.audioContext || audioContext || new audioContextType();
  var sourceNode, fftBins, analyser;
  analyser = audioContext.createAnalyser();
  analyser.fftSize = 512;
  analyser.smoothingTimeConstant = smoothing;
  fftBins = new Float32Array(analyser.frequencyBinCount);
  if (stream.jquery) stream = stream[0];

  if (stream instanceof HTMLAudioElement || stream instanceof HTMLVideoElement) {
    //Audio Tag
    sourceNode = audioContext.createMediaElementSource(stream);
    if (typeof play === 'undefined') play = true;
    threshold = threshold || -50;
  } else {
    //WebRTC Stream
    sourceNode = audioContext.createMediaStreamSource(stream);
    threshold = threshold || -50;
  }

  sourceNode.connect(analyser);
  if (play) analyser.connect(audioContext.destination);
  harker.speaking = false;

  harker.suspend = function () {
    return audioContext.suspend();
  };

  harker.resume = function () {
    return audioContext.resume();
  };

  Object.defineProperty(harker, 'state', {
    get: function () {
      return audioContext.state;
    }
  });

  audioContext.onstatechange = function () {
    harker.emit('state_change', audioContext.state);
  };

  harker.setThreshold = function (t) {
    threshold = t;
  };

  harker.setInterval = function (i) {
    interval = i;
  };

  harker.stop = function () {
    running = false;
    harker.emit('volume_change', -100, threshold);

    if (harker.speaking) {
      harker.speaking = false;
      harker.emit('stopped_speaking');
    }

    analyser.disconnect();
    sourceNode.disconnect();
  };

  harker.speakingHistory = [];

  for (var i = 0; i < history; i++) {
    harker.speakingHistory.push(0);
  } // Poll the analyser node to determine if speaking
  // and emit events if changed


  var looper = function () {
    setTimeout(function () {
      //check if stop has been called
      if (!running) {
        return;
      }

      var currentVolume = getMaxVolume(analyser, fftBins);
      harker.emit('volume_change', currentVolume, threshold);
      var history = 0;

      if (currentVolume > threshold && !harker.speaking) {
        // trigger quickly, short history
        for (var i = harker.speakingHistory.length - 3; i < harker.speakingHistory.length; i++) {
          history += harker.speakingHistory[i];
        }

        if (history >= 2) {
          harker.speaking = true;
          harker.emit('speaking');
        }
      } else if (currentVolume < threshold && harker.speaking) {
        for (var i = 0; i < harker.speakingHistory.length; i++) {
          history += harker.speakingHistory[i];
        }

        if (history == 0) {
          harker.speaking = false;
          harker.emit('stopped_speaking');
        }
      }

      harker.speakingHistory.shift();
      harker.speakingHistory.push(0 + (currentVolume > threshold));
      looper();
    }, interval);
  };

  looper();
  return harker;
};

/***/ }),

/***/ 6036:
/*!**********************************************!*\
  !*** ./node_modules/pdfjs-dist/build/pdf.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 8926)["default"]);

/**
 * @licstart The following is the entire license notice for the
 * JavaScript code in this page
 *
 * Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * JavaScript code in this page
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (true) module.exports = factory();else {}
})(this, () => {
  return (
    /******/
    (() => {
      // webpackBootstrap

      /******/
      "use strict";
      /******/

      var __webpack_modules__ = [
        /* 0 */
      ,
      /* 1 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.VerbosityLevel = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.UNSUPPORTED_FEATURES = exports.TextRenderingMode = exports.StreamType = exports.RenderingIntentFlag = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FeatureTest = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;
        exports.arrayByteLength = arrayByteLength;
        exports.arraysToBytes = arraysToBytes;
        exports.assert = assert;
        exports.bytesToString = bytesToString;
        exports.createPromiseCapability = createPromiseCapability;
        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
        exports.escapeString = escapeString;
        exports.getModificationDate = getModificationDate;
        exports.getVerbosityLevel = getVerbosityLevel;
        exports.info = info;
        exports.isArrayBuffer = isArrayBuffer;
        exports.isArrayEqual = isArrayEqual;
        exports.isAscii = isAscii;
        exports.objectFromMap = objectFromMap;
        exports.objectSize = objectSize;
        exports.setVerbosityLevel = setVerbosityLevel;
        exports.shadow = shadow;
        exports.string32 = string32;
        exports.stringToBytes = stringToBytes;
        exports.stringToPDFString = stringToPDFString;
        exports.stringToUTF16BEString = stringToUTF16BEString;
        exports.stringToUTF8String = stringToUTF8String;
        exports.unreachable = unreachable;
        exports.utf8StringToString = utf8StringToString;
        exports.warn = warn;

        __w_pdfjs_require__(2);

        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
        const RenderingIntentFlag = {
          ANY: 0x01,
          DISPLAY: 0x02,
          PRINT: 0x04,
          ANNOTATIONS_FORMS: 0x10,
          ANNOTATIONS_STORAGE: 0x20,
          ANNOTATIONS_DISABLE: 0x40,
          OPLIST: 0x100
        };
        exports.RenderingIntentFlag = RenderingIntentFlag;
        const AnnotationMode = {
          DISABLE: 0,
          ENABLE: 1,
          ENABLE_FORMS: 2,
          ENABLE_STORAGE: 3
        };
        exports.AnnotationMode = AnnotationMode;
        const PermissionFlag = {
          PRINT: 0x04,
          MODIFY_CONTENTS: 0x08,
          COPY: 0x10,
          MODIFY_ANNOTATIONS: 0x20,
          FILL_INTERACTIVE_FORMS: 0x100,
          COPY_FOR_ACCESSIBILITY: 0x200,
          ASSEMBLE: 0x400,
          PRINT_HIGH_QUALITY: 0x800
        };
        exports.PermissionFlag = PermissionFlag;
        const TextRenderingMode = {
          FILL: 0,
          STROKE: 1,
          FILL_STROKE: 2,
          INVISIBLE: 3,
          FILL_ADD_TO_PATH: 4,
          STROKE_ADD_TO_PATH: 5,
          FILL_STROKE_ADD_TO_PATH: 6,
          ADD_TO_PATH: 7,
          FILL_STROKE_MASK: 3,
          ADD_TO_PATH_FLAG: 4
        };
        exports.TextRenderingMode = TextRenderingMode;
        const ImageKind = {
          GRAYSCALE_1BPP: 1,
          RGB_24BPP: 2,
          RGBA_32BPP: 3
        };
        exports.ImageKind = ImageKind;
        const AnnotationType = {
          TEXT: 1,
          LINK: 2,
          FREETEXT: 3,
          LINE: 4,
          SQUARE: 5,
          CIRCLE: 6,
          POLYGON: 7,
          POLYLINE: 8,
          HIGHLIGHT: 9,
          UNDERLINE: 10,
          SQUIGGLY: 11,
          STRIKEOUT: 12,
          STAMP: 13,
          CARET: 14,
          INK: 15,
          POPUP: 16,
          FILEATTACHMENT: 17,
          SOUND: 18,
          MOVIE: 19,
          WIDGET: 20,
          SCREEN: 21,
          PRINTERMARK: 22,
          TRAPNET: 23,
          WATERMARK: 24,
          THREED: 25,
          REDACT: 26
        };
        exports.AnnotationType = AnnotationType;
        const AnnotationStateModelType = {
          MARKED: "Marked",
          REVIEW: "Review"
        };
        exports.AnnotationStateModelType = AnnotationStateModelType;
        const AnnotationMarkedState = {
          MARKED: "Marked",
          UNMARKED: "Unmarked"
        };
        exports.AnnotationMarkedState = AnnotationMarkedState;
        const AnnotationReviewState = {
          ACCEPTED: "Accepted",
          REJECTED: "Rejected",
          CANCELLED: "Cancelled",
          COMPLETED: "Completed",
          NONE: "None"
        };
        exports.AnnotationReviewState = AnnotationReviewState;
        const AnnotationReplyType = {
          GROUP: "Group",
          REPLY: "R"
        };
        exports.AnnotationReplyType = AnnotationReplyType;
        const AnnotationFlag = {
          INVISIBLE: 0x01,
          HIDDEN: 0x02,
          PRINT: 0x04,
          NOZOOM: 0x08,
          NOROTATE: 0x10,
          NOVIEW: 0x20,
          READONLY: 0x40,
          LOCKED: 0x80,
          TOGGLENOVIEW: 0x100,
          LOCKEDCONTENTS: 0x200
        };
        exports.AnnotationFlag = AnnotationFlag;
        const AnnotationFieldFlag = {
          READONLY: 0x0000001,
          REQUIRED: 0x0000002,
          NOEXPORT: 0x0000004,
          MULTILINE: 0x0001000,
          PASSWORD: 0x0002000,
          NOTOGGLETOOFF: 0x0004000,
          RADIO: 0x0008000,
          PUSHBUTTON: 0x0010000,
          COMBO: 0x0020000,
          EDIT: 0x0040000,
          SORT: 0x0080000,
          FILESELECT: 0x0100000,
          MULTISELECT: 0x0200000,
          DONOTSPELLCHECK: 0x0400000,
          DONOTSCROLL: 0x0800000,
          COMB: 0x1000000,
          RICHTEXT: 0x2000000,
          RADIOSINUNISON: 0x2000000,
          COMMITONSELCHANGE: 0x4000000
        };
        exports.AnnotationFieldFlag = AnnotationFieldFlag;
        const AnnotationBorderStyleType = {
          SOLID: 1,
          DASHED: 2,
          BEVELED: 3,
          INSET: 4,
          UNDERLINE: 5
        };
        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
        const AnnotationActionEventType = {
          E: "Mouse Enter",
          X: "Mouse Exit",
          D: "Mouse Down",
          U: "Mouse Up",
          Fo: "Focus",
          Bl: "Blur",
          PO: "PageOpen",
          PC: "PageClose",
          PV: "PageVisible",
          PI: "PageInvisible",
          K: "Keystroke",
          F: "Format",
          V: "Validate",
          C: "Calculate"
        };
        exports.AnnotationActionEventType = AnnotationActionEventType;
        const DocumentActionEventType = {
          WC: "WillClose",
          WS: "WillSave",
          DS: "DidSave",
          WP: "WillPrint",
          DP: "DidPrint"
        };
        exports.DocumentActionEventType = DocumentActionEventType;
        const PageActionEventType = {
          O: "PageOpen",
          C: "PageClose"
        };
        exports.PageActionEventType = PageActionEventType;
        const StreamType = {
          UNKNOWN: "UNKNOWN",
          FLATE: "FLATE",
          LZW: "LZW",
          DCT: "DCT",
          JPX: "JPX",
          JBIG: "JBIG",
          A85: "A85",
          AHX: "AHX",
          CCF: "CCF",
          RLX: "RLX"
        };
        exports.StreamType = StreamType;
        const FontType = {
          UNKNOWN: "UNKNOWN",
          TYPE1: "TYPE1",
          TYPE1STANDARD: "TYPE1STANDARD",
          TYPE1C: "TYPE1C",
          CIDFONTTYPE0: "CIDFONTTYPE0",
          CIDFONTTYPE0C: "CIDFONTTYPE0C",
          TRUETYPE: "TRUETYPE",
          CIDFONTTYPE2: "CIDFONTTYPE2",
          TYPE3: "TYPE3",
          OPENTYPE: "OPENTYPE",
          TYPE0: "TYPE0",
          MMTYPE1: "MMTYPE1"
        };
        exports.FontType = FontType;
        const VerbosityLevel = {
          ERRORS: 0,
          WARNINGS: 1,
          INFOS: 5
        };
        exports.VerbosityLevel = VerbosityLevel;
        const CMapCompressionType = {
          NONE: 0,
          BINARY: 1,
          STREAM: 2
        };
        exports.CMapCompressionType = CMapCompressionType;
        const OPS = {
          dependency: 1,
          setLineWidth: 2,
          setLineCap: 3,
          setLineJoin: 4,
          setMiterLimit: 5,
          setDash: 6,
          setRenderingIntent: 7,
          setFlatness: 8,
          setGState: 9,
          save: 10,
          restore: 11,
          transform: 12,
          moveTo: 13,
          lineTo: 14,
          curveTo: 15,
          curveTo2: 16,
          curveTo3: 17,
          closePath: 18,
          rectangle: 19,
          stroke: 20,
          closeStroke: 21,
          fill: 22,
          eoFill: 23,
          fillStroke: 24,
          eoFillStroke: 25,
          closeFillStroke: 26,
          closeEOFillStroke: 27,
          endPath: 28,
          clip: 29,
          eoClip: 30,
          beginText: 31,
          endText: 32,
          setCharSpacing: 33,
          setWordSpacing: 34,
          setHScale: 35,
          setLeading: 36,
          setFont: 37,
          setTextRenderingMode: 38,
          setTextRise: 39,
          moveText: 40,
          setLeadingMoveText: 41,
          setTextMatrix: 42,
          nextLine: 43,
          showText: 44,
          showSpacedText: 45,
          nextLineShowText: 46,
          nextLineSetSpacingShowText: 47,
          setCharWidth: 48,
          setCharWidthAndBounds: 49,
          setStrokeColorSpace: 50,
          setFillColorSpace: 51,
          setStrokeColor: 52,
          setStrokeColorN: 53,
          setFillColor: 54,
          setFillColorN: 55,
          setStrokeGray: 56,
          setFillGray: 57,
          setStrokeRGBColor: 58,
          setFillRGBColor: 59,
          setStrokeCMYKColor: 60,
          setFillCMYKColor: 61,
          shadingFill: 62,
          beginInlineImage: 63,
          beginImageData: 64,
          endInlineImage: 65,
          paintXObject: 66,
          markPoint: 67,
          markPointProps: 68,
          beginMarkedContent: 69,
          beginMarkedContentProps: 70,
          endMarkedContent: 71,
          beginCompat: 72,
          endCompat: 73,
          paintFormXObjectBegin: 74,
          paintFormXObjectEnd: 75,
          beginGroup: 76,
          endGroup: 77,
          beginAnnotations: 78,
          endAnnotations: 79,
          beginAnnotation: 80,
          endAnnotation: 81,
          paintJpegXObject: 82,
          paintImageMaskXObject: 83,
          paintImageMaskXObjectGroup: 84,
          paintImageXObject: 85,
          paintInlineImageXObject: 86,
          paintInlineImageXObjectGroup: 87,
          paintImageXObjectRepeat: 88,
          paintImageMaskXObjectRepeat: 89,
          paintSolidColorImageMask: 90,
          constructPath: 91
        };
        exports.OPS = OPS;
        const UNSUPPORTED_FEATURES = {
          unknown: "unknown",
          forms: "forms",
          javaScript: "javaScript",
          signatures: "signatures",
          smask: "smask",
          shadingPattern: "shadingPattern",
          font: "font",
          errorTilingPattern: "errorTilingPattern",
          errorExtGState: "errorExtGState",
          errorXObject: "errorXObject",
          errorFontLoadType3: "errorFontLoadType3",
          errorFontState: "errorFontState",
          errorFontMissing: "errorFontMissing",
          errorFontTranslate: "errorFontTranslate",
          errorColorSpace: "errorColorSpace",
          errorOperatorList: "errorOperatorList",
          errorFontToUnicode: "errorFontToUnicode",
          errorFontLoadNative: "errorFontLoadNative",
          errorFontBuildPath: "errorFontBuildPath",
          errorFontGetPath: "errorFontGetPath",
          errorMarkedContent: "errorMarkedContent",
          errorContentSubStream: "errorContentSubStream"
        };
        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
        const PasswordResponses = {
          NEED_PASSWORD: 1,
          INCORRECT_PASSWORD: 2
        };
        exports.PasswordResponses = PasswordResponses;
        let verbosity = VerbosityLevel.WARNINGS;

        function setVerbosityLevel(level) {
          if (Number.isInteger(level)) {
            verbosity = level;
          }
        }

        function getVerbosityLevel() {
          return verbosity;
        }

        function info(msg) {
          if (verbosity >= VerbosityLevel.INFOS) {
            console.log(`Info: ${msg}`);
          }
        }

        function warn(msg) {
          if (verbosity >= VerbosityLevel.WARNINGS) {
            console.log(`Warning: ${msg}`);
          }
        }

        function unreachable(msg) {
          throw new Error(msg);
        }

        function assert(cond, msg) {
          if (!cond) {
            unreachable(msg);
          }
        }

        function _isValidProtocol(url) {
          if (!url) {
            return false;
          }

          switch (url.protocol) {
            case "http:":
            case "https:":
            case "ftp:":
            case "mailto:":
            case "tel:":
              return true;

            default:
              return false;
          }
        }

        function createValidAbsoluteUrl(url, baseUrl = null, options = null) {
          if (!url) {
            return null;
          }

          try {
            if (options && typeof url === "string") {
              if (options.addDefaultProtocol && url.startsWith("www.")) {
                const dots = url.match(/\./g);

                if (dots && dots.length >= 2) {
                  url = `http://${url}`;
                }
              }

              if (options.tryConvertEncoding) {
                try {
                  url = stringToUTF8String(url);
                } catch (ex) {}
              }
            }

            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);

            if (_isValidProtocol(absoluteUrl)) {
              return absoluteUrl;
            }
          } catch (ex) {}

          return null;
        }

        function shadow(obj, prop, value) {
          Object.defineProperty(obj, prop, {
            value,
            enumerable: true,
            configurable: true,
            writable: false
          });
          return value;
        }

        const BaseException = function BaseExceptionClosure() {
          function BaseException(message, name) {
            if (this.constructor === BaseException) {
              unreachable("Cannot initialize BaseException.");
            }

            this.message = message;
            this.name = name;
          }

          BaseException.prototype = new Error();
          BaseException.constructor = BaseException;
          return BaseException;
        }();

        exports.BaseException = BaseException;

        class PasswordException extends BaseException {
          constructor(msg, code) {
            super(msg, "PasswordException");
            this.code = code;
          }

        }

        exports.PasswordException = PasswordException;

        class UnknownErrorException extends BaseException {
          constructor(msg, details) {
            super(msg, "UnknownErrorException");
            this.details = details;
          }

        }

        exports.UnknownErrorException = UnknownErrorException;

        class InvalidPDFException extends BaseException {
          constructor(msg) {
            super(msg, "InvalidPDFException");
          }

        }

        exports.InvalidPDFException = InvalidPDFException;

        class MissingPDFException extends BaseException {
          constructor(msg) {
            super(msg, "MissingPDFException");
          }

        }

        exports.MissingPDFException = MissingPDFException;

        class UnexpectedResponseException extends BaseException {
          constructor(msg, status) {
            super(msg, "UnexpectedResponseException");
            this.status = status;
          }

        }

        exports.UnexpectedResponseException = UnexpectedResponseException;

        class FormatError extends BaseException {
          constructor(msg) {
            super(msg, "FormatError");
          }

        }

        exports.FormatError = FormatError;

        class AbortException extends BaseException {
          constructor(msg) {
            super(msg, "AbortException");
          }

        }

        exports.AbortException = AbortException;

        function bytesToString(bytes) {
          if (typeof bytes !== "object" || bytes === null || bytes.length === undefined) {
            unreachable("Invalid argument for bytesToString");
          }

          const length = bytes.length;
          const MAX_ARGUMENT_COUNT = 8192;

          if (length < MAX_ARGUMENT_COUNT) {
            return String.fromCharCode.apply(null, bytes);
          }

          const strBuf = [];

          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
            const chunk = bytes.subarray(i, chunkEnd);
            strBuf.push(String.fromCharCode.apply(null, chunk));
          }

          return strBuf.join("");
        }

        function stringToBytes(str) {
          if (typeof str !== "string") {
            unreachable("Invalid argument for stringToBytes");
          }

          const length = str.length;
          const bytes = new Uint8Array(length);

          for (let i = 0; i < length; ++i) {
            bytes[i] = str.charCodeAt(i) & 0xff;
          }

          return bytes;
        }

        function arrayByteLength(arr) {
          if (arr.length !== undefined) {
            return arr.length;
          }

          if (arr.byteLength !== undefined) {
            return arr.byteLength;
          }

          unreachable("Invalid argument for arrayByteLength");
        }

        function arraysToBytes(arr) {
          const length = arr.length;

          if (length === 1 && arr[0] instanceof Uint8Array) {
            return arr[0];
          }

          let resultLength = 0;

          for (let i = 0; i < length; i++) {
            resultLength += arrayByteLength(arr[i]);
          }

          let pos = 0;
          const data = new Uint8Array(resultLength);

          for (let i = 0; i < length; i++) {
            let item = arr[i];

            if (!(item instanceof Uint8Array)) {
              if (typeof item === "string") {
                item = stringToBytes(item);
              } else {
                item = new Uint8Array(item);
              }
            }

            const itemLength = item.byteLength;
            data.set(item, pos);
            pos += itemLength;
          }

          return data;
        }

        function string32(value) {
          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
        }

        function objectSize(obj) {
          return Object.keys(obj).length;
        }

        function objectFromMap(map) {
          const obj = Object.create(null);

          for (const [key, value] of map) {
            obj[key] = value;
          }

          return obj;
        }

        function isLittleEndian() {
          const buffer8 = new Uint8Array(4);
          buffer8[0] = 1;
          const view32 = new Uint32Array(buffer8.buffer, 0, 1);
          return view32[0] === 1;
        }

        function isEvalSupported() {
          try {
            new Function("");
            return true;
          } catch (e) {
            return false;
          }
        }

        class FeatureTest {
          static get isLittleEndian() {
            return shadow(this, "isLittleEndian", isLittleEndian());
          }

          static get isEvalSupported() {
            return shadow(this, "isEvalSupported", isEvalSupported());
          }

          static get isOffscreenCanvasSupported() {
            return shadow(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas !== "undefined");
          }

        }

        exports.FeatureTest = FeatureTest;
        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, "0"));

        class Util {
          static makeHexColor(r, g, b) {
            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;
          }

          static scaleMinMax(transform, minMax) {
            let temp;

            if (transform[0]) {
              if (transform[0] < 0) {
                temp = minMax[0];
                minMax[0] = minMax[1];
                minMax[1] = temp;
              }

              minMax[0] *= transform[0];
              minMax[1] *= transform[0];

              if (transform[3] < 0) {
                temp = minMax[2];
                minMax[2] = minMax[3];
                minMax[3] = temp;
              }

              minMax[2] *= transform[3];
              minMax[3] *= transform[3];
            } else {
              temp = minMax[0];
              minMax[0] = minMax[2];
              minMax[2] = temp;
              temp = minMax[1];
              minMax[1] = minMax[3];
              minMax[3] = temp;

              if (transform[1] < 0) {
                temp = minMax[2];
                minMax[2] = minMax[3];
                minMax[3] = temp;
              }

              minMax[2] *= transform[1];
              minMax[3] *= transform[1];

              if (transform[2] < 0) {
                temp = minMax[0];
                minMax[0] = minMax[1];
                minMax[1] = temp;
              }

              minMax[0] *= transform[2];
              minMax[1] *= transform[2];
            }

            minMax[0] += transform[4];
            minMax[1] += transform[4];
            minMax[2] += transform[5];
            minMax[3] += transform[5];
          }

          static transform(m1, m2) {
            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
          }

          static applyTransform(p, m) {
            const xt = p[0] * m[0] + p[1] * m[2] + m[4];
            const yt = p[0] * m[1] + p[1] * m[3] + m[5];
            return [xt, yt];
          }

          static applyInverseTransform(p, m) {
            const d = m[0] * m[3] - m[1] * m[2];
            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
            return [xt, yt];
          }

          static getAxialAlignedBoundingBox(r, m) {
            const p1 = Util.applyTransform(r, m);
            const p2 = Util.applyTransform(r.slice(2, 4), m);
            const p3 = Util.applyTransform([r[0], r[3]], m);
            const p4 = Util.applyTransform([r[2], r[1]], m);
            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
          }

          static inverseTransform(m) {
            const d = m[0] * m[3] - m[1] * m[2];
            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
          }

          static apply3dTransform(m, v) {
            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
          }

          static singularValueDecompose2dScale(m) {
            const transpose = [m[0], m[2], m[1], m[3]];
            const a = m[0] * transpose[0] + m[1] * transpose[2];
            const b = m[0] * transpose[1] + m[1] * transpose[3];
            const c = m[2] * transpose[0] + m[3] * transpose[2];
            const d = m[2] * transpose[1] + m[3] * transpose[3];
            const first = (a + d) / 2;
            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;
            const sx = first + second || 1;
            const sy = first - second || 1;
            return [Math.sqrt(sx), Math.sqrt(sy)];
          }

          static normalizeRect(rect) {
            const r = rect.slice(0);

            if (rect[0] > rect[2]) {
              r[0] = rect[2];
              r[2] = rect[0];
            }

            if (rect[1] > rect[3]) {
              r[1] = rect[3];
              r[3] = rect[1];
            }

            return r;
          }

          static intersect(rect1, rect2) {
            const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));
            const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));

            if (xLow > xHigh) {
              return null;
            }

            const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));
            const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));

            if (yLow > yHigh) {
              return null;
            }

            return [xLow, yLow, xHigh, yHigh];
          }

          static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {
            const tvalues = [],
                  bounds = [[], []];
            let a, b, c, t, t1, t2, b2ac, sqrtb2ac;

            for (let i = 0; i < 2; ++i) {
              if (i === 0) {
                b = 6 * x0 - 12 * x1 + 6 * x2;
                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
                c = 3 * x1 - 3 * x0;
              } else {
                b = 6 * y0 - 12 * y1 + 6 * y2;
                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                c = 3 * y1 - 3 * y0;
              }

              if (Math.abs(a) < 1e-12) {
                if (Math.abs(b) < 1e-12) {
                  continue;
                }

                t = -c / b;

                if (0 < t && t < 1) {
                  tvalues.push(t);
                }

                continue;
              }

              b2ac = b * b - 4 * c * a;
              sqrtb2ac = Math.sqrt(b2ac);

              if (b2ac < 0) {
                continue;
              }

              t1 = (-b + sqrtb2ac) / (2 * a);

              if (0 < t1 && t1 < 1) {
                tvalues.push(t1);
              }

              t2 = (-b - sqrtb2ac) / (2 * a);

              if (0 < t2 && t2 < 1) {
                tvalues.push(t2);
              }
            }

            let j = tvalues.length,
                mt;
            const jlen = j;

            while (j--) {
              t = tvalues[j];
              mt = 1 - t;
              bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
              bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
            }

            bounds[0][jlen] = x0;
            bounds[1][jlen] = y0;
            bounds[0][jlen + 1] = x3;
            bounds[1][jlen + 1] = y3;
            bounds[0].length = bounds[1].length = jlen + 2;
            return [Math.min(...bounds[0]), Math.min(...bounds[1]), Math.max(...bounds[0]), Math.max(...bounds[1])];
          }

        }

        exports.Util = Util;
        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];

        function stringToPDFString(str) {
          if (str[0] >= "\xEF") {
            let encoding;

            if (str[0] === "\xFE" && str[1] === "\xFF") {
              encoding = "utf-16be";
            } else if (str[0] === "\xFF" && str[1] === "\xFE") {
              encoding = "utf-16le";
            } else if (str[0] === "\xEF" && str[1] === "\xBB" && str[2] === "\xBF") {
              encoding = "utf-8";
            }

            if (encoding) {
              try {
                const decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                const buffer = stringToBytes(str);
                return decoder.decode(buffer);
              } catch (ex) {
                warn(`stringToPDFString: "${ex}".`);
              }
            }
          }

          const strBuf = [];

          for (let i = 0, ii = str.length; i < ii; i++) {
            const code = PDFStringTranslateTable[str.charCodeAt(i)];
            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
          }

          return strBuf.join("");
        }

        function escapeString(str) {
          return str.replace(/([()\\\n\r])/g, match => {
            if (match === "\n") {
              return "\\n";
            } else if (match === "\r") {
              return "\\r";
            }

            return `\\${match}`;
          });
        }

        function isAscii(str) {
          return /^[\x00-\x7F]*$/.test(str);
        }

        function stringToUTF16BEString(str) {
          const buf = ["\xFE\xFF"];

          for (let i = 0, ii = str.length; i < ii; i++) {
            const char = str.charCodeAt(i);
            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));
          }

          return buf.join("");
        }

        function stringToUTF8String(str) {
          return decodeURIComponent(escape(str));
        }

        function utf8StringToString(str) {
          return unescape(encodeURIComponent(str));
        }

        function isArrayBuffer(v) {
          return typeof v === "object" && v !== null && v.byteLength !== undefined;
        }

        function isArrayEqual(arr1, arr2) {
          if (arr1.length !== arr2.length) {
            return false;
          }

          for (let i = 0, ii = arr1.length; i < ii; i++) {
            if (arr1[i] !== arr2[i]) {
              return false;
            }
          }

          return true;
        }

        function getModificationDate(date = new Date()) {
          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
          return buffer.join("");
        }

        function createPromiseCapability() {
          const capability = Object.create(null);
          let isSettled = false;
          Object.defineProperty(capability, "settled", {
            get() {
              return isSettled;
            }

          });
          capability.promise = new Promise(function (resolve, reject) {
            capability.resolve = function (data) {
              isSettled = true;
              resolve(data);
            };

            capability.reject = function (reason) {
              isSettled = true;
              reject(reason);
            };
          });
          return capability;
        }
        /***/

      },
      /* 2 */

      /***/
      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {
        var _is_node = __w_pdfjs_require__(3);

        ;
        /***/
      },
      /* 3 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isNodeJS = void 0;
        const isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
        exports.isNodeJS = isNodeJS;
        /***/
      },
      /* 4 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.build = exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;
        exports.getDocument = getDocument;
        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;
        exports.version = void 0;

        var _util = __w_pdfjs_require__(1);

        var _display_utils = __w_pdfjs_require__(5);

        var _font_loader = __w_pdfjs_require__(7);

        var _annotation_storage = __w_pdfjs_require__(8);

        var _canvas = __w_pdfjs_require__(10);

        var _worker_options = __w_pdfjs_require__(13);

        var _is_node = __w_pdfjs_require__(3);

        var _message_handler = __w_pdfjs_require__(14);

        var _metadata = __w_pdfjs_require__(15);

        var _optional_content_config = __w_pdfjs_require__(16);

        var _transport_stream = __w_pdfjs_require__(17);

        var _xfa_text = __w_pdfjs_require__(18);

        const DEFAULT_RANGE_CHUNK_SIZE = 65536;
        const RENDERING_CANCELLED_TIMEOUT = 100;
        let DefaultCanvasFactory = _display_utils.DOMCanvasFactory;
        exports.DefaultCanvasFactory = DefaultCanvasFactory;
        let DefaultCMapReaderFactory = _display_utils.DOMCMapReaderFactory;
        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
        let DefaultStandardFontDataFactory = _display_utils.DOMStandardFontDataFactory;
        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;

        if (_is_node.isNodeJS) {
          const {
            NodeCanvasFactory,
            NodeCMapReaderFactory,
            NodeStandardFontDataFactory
          } = __w_pdfjs_require__(19);

          exports.DefaultCanvasFactory = DefaultCanvasFactory = NodeCanvasFactory;
          exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory = NodeCMapReaderFactory;
          exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory = NodeStandardFontDataFactory;
        }

        let createPDFNetworkStream;

        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {
          createPDFNetworkStream = pdfNetworkStreamFactory;
        }

        function getDocument(src) {
          const task = new PDFDocumentLoadingTask();
          let source;

          if (typeof src === "string" || src instanceof URL) {
            source = {
              url: src
            };
          } else if ((0, _util.isArrayBuffer)(src)) {
            source = {
              data: src
            };
          } else if (src instanceof PDFDataRangeTransport) {
            source = {
              range: src
            };
          } else {
            if (typeof src !== "object") {
              throw new Error("Invalid parameter in getDocument, " + "need either string, URL, Uint8Array, or parameter object.");
            }

            if (!src.url && !src.data && !src.range) {
              throw new Error("Invalid parameter object: need either .data, .range or .url");
            }

            source = src;
          }

          const params = Object.create(null);
          let rangeTransport = null,
              worker = null;

          for (const key in source) {
            const value = source[key];

            switch (key) {
              case "url":
                if (typeof window !== "undefined") {
                  try {
                    params[key] = new URL(value, window.location).href;
                    continue;
                  } catch (ex) {
                    (0, _util.warn)(`Cannot create valid URL: "${ex}".`);
                  }
                } else if (typeof value === "string" || value instanceof URL) {
                  params[key] = value.toString();
                  continue;
                }

                throw new Error("Invalid PDF url data: " + "either string or URL-object is expected in the url property.");

              case "range":
                rangeTransport = value;
                continue;

              case "worker":
                worker = value;
                continue;

              case "data":
                if (_is_node.isNodeJS && typeof Buffer !== "undefined" && value instanceof Buffer) {
                  params[key] = new Uint8Array(value);
                } else if (value instanceof Uint8Array) {
                  break;
                } else if (typeof value === "string") {
                  params[key] = (0, _util.stringToBytes)(value);
                } else if (typeof value === "object" && value !== null && !isNaN(value.length)) {
                  params[key] = new Uint8Array(value);
                } else if ((0, _util.isArrayBuffer)(value)) {
                  params[key] = new Uint8Array(value);
                } else {
                  throw new Error("Invalid PDF binary data: either typed array, " + "string, or array-like object is expected in the data property.");
                }

                continue;
            }

            params[key] = value;
          }

          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;
          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;
          params.ignoreErrors = params.stopAtErrors !== true;
          params.fontExtraProperties = params.fontExtraProperties === true;
          params.pdfBug = params.pdfBug === true;
          params.enableXfa = params.enableXfa === true;

          if (!Number.isInteger(params.rangeChunkSize) || params.rangeChunkSize < 1) {
            params.rangeChunkSize = DEFAULT_RANGE_CHUNK_SIZE;
          }

          if (typeof params.docBaseUrl !== "string" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {
            params.docBaseUrl = null;
          }

          if (!Number.isInteger(params.maxImageSize) || params.maxImageSize < -1) {
            params.maxImageSize = -1;
          }

          if (typeof params.cMapUrl !== "string") {
            params.cMapUrl = null;
          }

          if (typeof params.standardFontDataUrl !== "string") {
            params.standardFontDataUrl = null;
          }

          if (typeof params.useWorkerFetch !== "boolean") {
            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;
          }

          if (typeof params.isEvalSupported !== "boolean") {
            params.isEvalSupported = true;
          }

          if (typeof params.disableFontFace !== "boolean") {
            params.disableFontFace = _is_node.isNodeJS;
          }

          if (typeof params.useSystemFonts !== "boolean") {
            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;
          }

          if (typeof params.ownerDocument !== "object" || params.ownerDocument === null) {
            params.ownerDocument = globalThis.document;
          }

          if (typeof params.disableRange !== "boolean") {
            params.disableRange = false;
          }

          if (typeof params.disableStream !== "boolean") {
            params.disableStream = false;
          }

          if (typeof params.disableAutoFetch !== "boolean") {
            params.disableAutoFetch = false;
          }

          (0, _util.setVerbosityLevel)(params.verbosity);

          if (!worker) {
            const workerParams = {
              verbosity: params.verbosity,
              port: _worker_options.GlobalWorkerOptions.workerPort
            };
            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
            task._worker = worker;
          }

          const docId = task.docId;
          worker.promise.then(function () {
            if (task.destroyed) {
              throw new Error("Loading aborted");
            }

            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);

            const networkStreamPromise = new Promise(function (resolve) {
              let networkStream;

              if (rangeTransport) {
                networkStream = new _transport_stream.PDFDataTransportStream({
                  length: params.length,
                  initialData: params.initialData,
                  progressiveDone: params.progressiveDone,
                  contentDispositionFilename: params.contentDispositionFilename,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                }, rangeTransport);
              } else if (!params.data) {
                networkStream = createPDFNetworkStream({
                  url: params.url,
                  length: params.length,
                  httpHeaders: params.httpHeaders,
                  withCredentials: params.withCredentials,
                  rangeChunkSize: params.rangeChunkSize,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                });
              }

              resolve(networkStream);
            });
            return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {
              if (task.destroyed) {
                throw new Error("Loading aborted");
              }

              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);
              const transport = new WorkerTransport(messageHandler, task, networkStream, params);
              task._transport = transport;
              messageHandler.send("Ready", null);
            });
          }).catch(task._capability.reject);
          return task;
        }

        function _fetchDocument(_x, _x2, _x3, _x4) {
          return _fetchDocument2.apply(this, arguments);
        }

        function _fetchDocument2() {
          _fetchDocument2 = _asyncToGenerator(function* (worker, source, pdfDataRangeTransport, docId) {
            if (worker.destroyed) {
              throw new Error("Worker was destroyed");
            }

            if (pdfDataRangeTransport) {
              source.length = pdfDataRangeTransport.length;
              source.initialData = pdfDataRangeTransport.initialData;
              source.progressiveDone = pdfDataRangeTransport.progressiveDone;
              source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;
            }

            const workerId = yield worker.messageHandler.sendWithPromise("GetDocRequest", {
              docId,
              apiVersion: '2.14.305',
              source: {
                data: source.data,
                url: source.url,
                password: source.password,
                disableAutoFetch: source.disableAutoFetch,
                rangeChunkSize: source.rangeChunkSize,
                length: source.length
              },
              maxImageSize: source.maxImageSize,
              disableFontFace: source.disableFontFace,
              docBaseUrl: source.docBaseUrl,
              ignoreErrors: source.ignoreErrors,
              isEvalSupported: source.isEvalSupported,
              fontExtraProperties: source.fontExtraProperties,
              enableXfa: source.enableXfa,
              useSystemFonts: source.useSystemFonts,
              cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,
              standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null
            });

            if (worker.destroyed) {
              throw new Error("Worker was destroyed");
            }

            return workerId;
          });
          return _fetchDocument2.apply(this, arguments);
        }

        class PDFDocumentLoadingTask {
          static #docId = 0;

          constructor() {
            this._capability = (0, _util.createPromiseCapability)();
            this._transport = null;
            this._worker = null;
            this.docId = `d${PDFDocumentLoadingTask.#docId++}`;
            this.destroyed = false;
            this.onPassword = null;
            this.onProgress = null;
            this.onUnsupportedFeature = null;
          }

          get promise() {
            return this._capability.promise;
          }

          destroy() {
            var _this = this;

            return _asyncToGenerator(function* () {
              _this.destroyed = true;
              yield _this._transport?.destroy();
              _this._transport = null;

              if (_this._worker) {
                _this._worker.destroy();

                _this._worker = null;
              }
            })();
          }

        }

        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;

        class PDFDataRangeTransport {
          constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {
            this.length = length;
            this.initialData = initialData;
            this.progressiveDone = progressiveDone;
            this.contentDispositionFilename = contentDispositionFilename;
            this._rangeListeners = [];
            this._progressListeners = [];
            this._progressiveReadListeners = [];
            this._progressiveDoneListeners = [];
            this._readyCapability = (0, _util.createPromiseCapability)();
          }

          addRangeListener(listener) {
            this._rangeListeners.push(listener);
          }

          addProgressListener(listener) {
            this._progressListeners.push(listener);
          }

          addProgressiveReadListener(listener) {
            this._progressiveReadListeners.push(listener);
          }

          addProgressiveDoneListener(listener) {
            this._progressiveDoneListeners.push(listener);
          }

          onDataRange(begin, chunk) {
            for (const listener of this._rangeListeners) {
              listener(begin, chunk);
            }
          }

          onDataProgress(loaded, total) {
            this._readyCapability.promise.then(() => {
              for (const listener of this._progressListeners) {
                listener(loaded, total);
              }
            });
          }

          onDataProgressiveRead(chunk) {
            this._readyCapability.promise.then(() => {
              for (const listener of this._progressiveReadListeners) {
                listener(chunk);
              }
            });
          }

          onDataProgressiveDone() {
            this._readyCapability.promise.then(() => {
              for (const listener of this._progressiveDoneListeners) {
                listener();
              }
            });
          }

          transportReady() {
            this._readyCapability.resolve();
          }

          requestDataRange(begin, end) {
            (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
          }

          abort() {}

        }

        exports.PDFDataRangeTransport = PDFDataRangeTransport;

        class PDFDocumentProxy {
          constructor(pdfInfo, transport) {
            var _this2 = this;

            this._pdfInfo = pdfInfo;
            this._transport = transport;
            Object.defineProperty(this, "fingerprint", {
              get() {
                (0, _display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, " + "please use `PDFDocumentProxy.fingerprints` instead.");
                return this.fingerprints[0];
              }

            });
            Object.defineProperty(this, "getStats", {
              value: function () {
                var _ref = _asyncToGenerator(function* () {
                  (0, _display_utils.deprecated)("`PDFDocumentProxy.getStats`, " + "please use the `PDFDocumentProxy.stats`-getter instead.");
                  return _this2.stats || {
                    streamTypes: {},
                    fontTypes: {}
                  };
                });

                return function value() {
                  return _ref.apply(this, arguments);
                };
              }()
            });
          }

          get annotationStorage() {
            return this._transport.annotationStorage;
          }

          get numPages() {
            return this._pdfInfo.numPages;
          }

          get fingerprints() {
            return this._pdfInfo.fingerprints;
          }

          get stats() {
            return this._transport.stats;
          }

          get isPureXfa() {
            return !!this._transport._htmlForXfa;
          }

          get allXfaHtml() {
            return this._transport._htmlForXfa;
          }

          getPage(pageNumber) {
            return this._transport.getPage(pageNumber);
          }

          getPageIndex(ref) {
            return this._transport.getPageIndex(ref);
          }

          getDestinations() {
            return this._transport.getDestinations();
          }

          getDestination(id) {
            return this._transport.getDestination(id);
          }

          getPageLabels() {
            return this._transport.getPageLabels();
          }

          getPageLayout() {
            return this._transport.getPageLayout();
          }

          getPageMode() {
            return this._transport.getPageMode();
          }

          getViewerPreferences() {
            return this._transport.getViewerPreferences();
          }

          getOpenAction() {
            return this._transport.getOpenAction();
          }

          getAttachments() {
            return this._transport.getAttachments();
          }

          getJavaScript() {
            return this._transport.getJavaScript();
          }

          getJSActions() {
            return this._transport.getDocJSActions();
          }

          getOutline() {
            return this._transport.getOutline();
          }

          getOptionalContentConfig() {
            return this._transport.getOptionalContentConfig();
          }

          getPermissions() {
            return this._transport.getPermissions();
          }

          getMetadata() {
            return this._transport.getMetadata();
          }

          getMarkInfo() {
            return this._transport.getMarkInfo();
          }

          getData() {
            return this._transport.getData();
          }

          getDownloadInfo() {
            return this._transport.downloadInfoCapability.promise;
          }

          cleanup(keepLoadedFonts = false) {
            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
          }

          destroy() {
            return this.loadingTask.destroy();
          }

          get loadingParams() {
            return this._transport.loadingParams;
          }

          get loadingTask() {
            return this._transport.loadingTask;
          }

          saveDocument() {
            if (this._transport.annotationStorage.size <= 0) {
              (0, _display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, " + "please use the getData-method instead.");
            }

            return this._transport.saveDocument();
          }

          getFieldObjects() {
            return this._transport.getFieldObjects();
          }

          hasJSActions() {
            return this._transport.hasJSActions();
          }

          getCalculationOrderIds() {
            return this._transport.getCalculationOrderIds();
          }

        }

        exports.PDFDocumentProxy = PDFDocumentProxy;

        class PDFPageProxy {
          constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {
            this._pageIndex = pageIndex;
            this._pageInfo = pageInfo;
            this._ownerDocument = ownerDocument;
            this._transport = transport;
            this._stats = pdfBug ? new _display_utils.StatTimer() : null;
            this._pdfBug = pdfBug;
            this.commonObjs = transport.commonObjs;
            this.objs = new PDFObjects();
            this._bitmaps = new Set();
            this.cleanupAfterRender = false;
            this.pendingCleanup = false;
            this._intentStates = new Map();
            this._annotationPromises = new Map();
            this.destroyed = false;
          }

          get pageNumber() {
            return this._pageIndex + 1;
          }

          get rotate() {
            return this._pageInfo.rotate;
          }

          get ref() {
            return this._pageInfo.ref;
          }

          get userUnit() {
            return this._pageInfo.userUnit;
          }

          get view() {
            return this._pageInfo.view;
          }

          getViewport({
            scale,
            rotation = this.rotate,
            offsetX = 0,
            offsetY = 0,
            dontFlip = false
          } = {}) {
            return new _display_utils.PageViewport({
              viewBox: this.view,
              scale,
              rotation,
              offsetX,
              offsetY,
              dontFlip
            });
          }

          getAnnotations({
            intent = "display"
          } = {}) {
            const intentArgs = this._transport.getRenderingIntent(intent);

            let promise = this._annotationPromises.get(intentArgs.cacheKey);

            if (!promise) {
              promise = this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);

              this._annotationPromises.set(intentArgs.cacheKey, promise);

              promise = promise.then(annotations => {
                for (const annotation of annotations) {
                  if (annotation.titleObj !== undefined) {
                    Object.defineProperty(annotation, "title", {
                      get() {
                        (0, _display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead.");
                        return annotation.titleObj.str;
                      }

                    });
                  }

                  if (annotation.contentsObj !== undefined) {
                    Object.defineProperty(annotation, "contents", {
                      get() {
                        (0, _display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead.");
                        return annotation.contentsObj.str;
                      }

                    });
                  }
                }

                return annotations;
              });
            }

            return promise;
          }

          getJSActions() {
            return this._jsActionsPromise ||= this._transport.getPageJSActions(this._pageIndex);
          }

          getXfa() {
            var _this3 = this;

            return _asyncToGenerator(function* () {
              return _this3._transport._htmlForXfa?.children[_this3._pageIndex] || null;
            })();
          }

          render({
            canvasContext,
            viewport,
            intent = "display",
            annotationMode = _util.AnnotationMode.ENABLE,
            transform = null,
            imageLayer = null,
            canvasFactory = null,
            background = null,
            optionalContentConfigPromise = null,
            annotationCanvasMap = null,
            pageColors = null
          }) {
            if (arguments[0]?.renderInteractiveForms !== undefined) {
              (0, _display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, " + "please use the `annotationMode`-option instead.");

              if (arguments[0].renderInteractiveForms === true && annotationMode === _util.AnnotationMode.ENABLE) {
                annotationMode = _util.AnnotationMode.ENABLE_FORMS;
              }
            }

            if (arguments[0]?.includeAnnotationStorage !== undefined) {
              (0, _display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, " + "please use the `annotationMode`-option instead.");

              if (arguments[0].includeAnnotationStorage === true && annotationMode === _util.AnnotationMode.ENABLE) {
                annotationMode = _util.AnnotationMode.ENABLE_STORAGE;
              }
            }

            if (this._stats) {
              this._stats.time("Overall");
            }

            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode);

            this.pendingCleanup = false;

            if (!optionalContentConfigPromise) {
              optionalContentConfigPromise = this._transport.getOptionalContentConfig();
            }

            let intentState = this._intentStates.get(intentArgs.cacheKey);

            if (!intentState) {
              intentState = Object.create(null);

              this._intentStates.set(intentArgs.cacheKey, intentState);
            }

            if (intentState.streamReaderCancelTimeout) {
              clearTimeout(intentState.streamReaderCancelTimeout);
              intentState.streamReaderCancelTimeout = null;
            }

            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({
              ownerDocument: this._ownerDocument
            });
            const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);

            if (!intentState.displayReadyCapability) {
              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
              intentState.operatorList = {
                fnArray: [],
                argsArray: [],
                lastChunk: false
              };

              if (this._stats) {
                this._stats.time("Page Request");
              }

              this._pumpOperatorList(intentArgs);
            }

            const complete = error => {
              intentState.renderTasks.delete(internalRenderTask);

              if (this.cleanupAfterRender || intentPrint) {
                this.pendingCleanup = true;
              }

              this._tryCleanup();

              if (error) {
                internalRenderTask.capability.reject(error);

                this._abortOperatorList({
                  intentState,
                  reason: error instanceof Error ? error : new Error(error)
                });
              } else {
                internalRenderTask.capability.resolve();
              }

              if (this._stats) {
                this._stats.timeEnd("Rendering");

                this._stats.timeEnd("Overall");
              }
            };

            const internalRenderTask = new InternalRenderTask({
              callback: complete,
              params: {
                canvasContext,
                viewport,
                transform,
                imageLayer,
                background
              },
              objs: this.objs,
              commonObjs: this.commonObjs,
              annotationCanvasMap,
              operatorList: intentState.operatorList,
              pageIndex: this._pageIndex,
              canvasFactory: canvasFactoryInstance,
              useRequestAnimationFrame: !intentPrint,
              pdfBug: this._pdfBug,
              pageColors
            });
            (intentState.renderTasks ||= new Set()).add(internalRenderTask);
            const renderTask = internalRenderTask.task;
            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {
              if (this.pendingCleanup) {
                complete();
                return;
              }

              if (this._stats) {
                this._stats.time("Rendering");
              }

              internalRenderTask.initializeGraphics({
                transparency,
                optionalContentConfig
              });
              internalRenderTask.operatorListChanged();
            }).catch(complete);
            return renderTask;
          }

          getOperatorList({
            intent = "display",
            annotationMode = _util.AnnotationMode.ENABLE
          } = {}) {
            function operatorListChanged() {
              if (intentState.operatorList.lastChunk) {
                intentState.opListReadCapability.resolve(intentState.operatorList);
                intentState.renderTasks.delete(opListTask);
              }
            }

            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, true);

            let intentState = this._intentStates.get(intentArgs.cacheKey);

            if (!intentState) {
              intentState = Object.create(null);

              this._intentStates.set(intentArgs.cacheKey, intentState);
            }

            let opListTask;

            if (!intentState.opListReadCapability) {
              opListTask = Object.create(null);
              opListTask.operatorListChanged = operatorListChanged;
              intentState.opListReadCapability = (0, _util.createPromiseCapability)();
              (intentState.renderTasks ||= new Set()).add(opListTask);
              intentState.operatorList = {
                fnArray: [],
                argsArray: [],
                lastChunk: false
              };

              if (this._stats) {
                this._stats.time("Page Request");
              }

              this._pumpOperatorList(intentArgs);
            }

            return intentState.opListReadCapability.promise;
          }

          streamTextContent({
            disableCombineTextItems = false,
            includeMarkedContent = false
          } = {}) {
            const TEXT_CONTENT_CHUNK_SIZE = 100;
            return this._transport.messageHandler.sendWithStream("GetTextContent", {
              pageIndex: this._pageIndex,
              combineTextItems: disableCombineTextItems !== true,
              includeMarkedContent: includeMarkedContent === true
            }, {
              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,

              size(textContent) {
                return textContent.items.length;
              }

            });
          }

          getTextContent(params = {}) {
            if (this._transport._htmlForXfa) {
              return this.getXfa().then(xfa => {
                return _xfa_text.XfaText.textContent(xfa);
              });
            }

            const readableStream = this.streamTextContent(params);
            return new Promise(function (resolve, reject) {
              function pump() {
                reader.read().then(function ({
                  value,
                  done
                }) {
                  if (done) {
                    resolve(textContent);
                    return;
                  }

                  Object.assign(textContent.styles, value.styles);
                  textContent.items.push(...value.items);
                  pump();
                }, reject);
              }

              const reader = readableStream.getReader();
              const textContent = {
                items: [],
                styles: Object.create(null)
              };
              pump();
            });
          }

          getStructTree() {
            return this._structTreePromise ||= this._transport.getStructTree(this._pageIndex);
          }

          _destroy() {
            this.destroyed = true;
            const waitOn = [];

            for (const intentState of this._intentStates.values()) {
              this._abortOperatorList({
                intentState,
                reason: new Error("Page was destroyed."),
                force: true
              });

              if (intentState.opListReadCapability) {
                continue;
              }

              for (const internalRenderTask of intentState.renderTasks) {
                waitOn.push(internalRenderTask.completed);
                internalRenderTask.cancel();
              }
            }

            this.objs.clear();

            for (const bitmap of this._bitmaps) {
              bitmap.close();
            }

            this._bitmaps.clear();

            this._annotationPromises.clear();

            this._jsActionsPromise = null;
            this._structTreePromise = null;
            this.pendingCleanup = false;
            return Promise.all(waitOn);
          }

          cleanup(resetStats = false) {
            this.pendingCleanup = true;
            return this._tryCleanup(resetStats);
          }

          _tryCleanup(resetStats = false) {
            if (!this.pendingCleanup) {
              return false;
            }

            for (const {
              renderTasks,
              operatorList
            } of this._intentStates.values()) {
              if (renderTasks.size > 0 || !operatorList.lastChunk) {
                return false;
              }
            }

            this._intentStates.clear();

            this.objs.clear();

            this._annotationPromises.clear();

            this._jsActionsPromise = null;
            this._structTreePromise = null;

            if (resetStats && this._stats) {
              this._stats = new _display_utils.StatTimer();
            }

            for (const bitmap of this._bitmaps) {
              bitmap.close();
            }

            this._bitmaps.clear();

            this.pendingCleanup = false;
            return true;
          }

          _startRenderPage(transparency, cacheKey) {
            const intentState = this._intentStates.get(cacheKey);

            if (!intentState) {
              return;
            }

            if (this._stats) {
              this._stats.timeEnd("Page Request");
            }

            if (intentState.displayReadyCapability) {
              intentState.displayReadyCapability.resolve(transparency);
            }
          }

          _renderPageChunk(operatorListChunk, intentState) {
            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {
              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
            }

            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;

            for (const internalRenderTask of intentState.renderTasks) {
              internalRenderTask.operatorListChanged();
            }

            if (operatorListChunk.lastChunk) {
              this._tryCleanup();
            }
          }

          _pumpOperatorList({
            renderingIntent,
            cacheKey
          }) {
            const readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", {
              pageIndex: this._pageIndex,
              intent: renderingIntent,
              cacheKey,
              annotationStorage: renderingIntent & _util.RenderingIntentFlag.ANNOTATIONS_STORAGE ? this._transport.annotationStorage.serializable : null
            });

            const reader = readableStream.getReader();

            const intentState = this._intentStates.get(cacheKey);

            intentState.streamReader = reader;

            const pump = () => {
              reader.read().then(({
                value,
                done
              }) => {
                if (done) {
                  intentState.streamReader = null;
                  return;
                }

                if (this._transport.destroyed) {
                  return;
                }

                this._renderPageChunk(value, intentState);

                pump();
              }, reason => {
                intentState.streamReader = null;

                if (this._transport.destroyed) {
                  return;
                }

                if (intentState.operatorList) {
                  intentState.operatorList.lastChunk = true;

                  for (const internalRenderTask of intentState.renderTasks) {
                    internalRenderTask.operatorListChanged();
                  }

                  this._tryCleanup();
                }

                if (intentState.displayReadyCapability) {
                  intentState.displayReadyCapability.reject(reason);
                } else if (intentState.opListReadCapability) {
                  intentState.opListReadCapability.reject(reason);
                } else {
                  throw reason;
                }
              });
            };

            pump();
          }

          _abortOperatorList({
            intentState,
            reason,
            force = false
          }) {
            if (!intentState.streamReader) {
              return;
            }

            if (!force) {
              if (intentState.renderTasks.size > 0) {
                return;
              }

              if (reason instanceof _display_utils.RenderingCancelledException) {
                intentState.streamReaderCancelTimeout = setTimeout(() => {
                  this._abortOperatorList({
                    intentState,
                    reason,
                    force: true
                  });

                  intentState.streamReaderCancelTimeout = null;
                }, RENDERING_CANCELLED_TIMEOUT);
                return;
              }
            }

            intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {});
            intentState.streamReader = null;

            if (this._transport.destroyed) {
              return;
            }

            for (const [curCacheKey, curIntentState] of this._intentStates) {
              if (curIntentState === intentState) {
                this._intentStates.delete(curCacheKey);

                break;
              }
            }

            this.cleanup();
          }

          get stats() {
            return this._stats;
          }

        }

        exports.PDFPageProxy = PDFPageProxy;

        class LoopbackPort {
          constructor() {
            this._listeners = [];
            this._deferred = Promise.resolve();
          }

          postMessage(obj, transfers) {
            const event = {
              data: structuredClone(obj, transfers)
            };

            this._deferred.then(() => {
              for (const listener of this._listeners) {
                listener.call(this, event);
              }
            });
          }

          addEventListener(name, listener) {
            this._listeners.push(listener);
          }

          removeEventListener(name, listener) {
            const i = this._listeners.indexOf(listener);

            this._listeners.splice(i, 1);
          }

          terminate() {
            this._listeners.length = 0;
          }

        }

        exports.LoopbackPort = LoopbackPort;
        const PDFWorkerUtil = {
          isWorkerDisabled: false,
          fallbackWorkerSrc: null,
          fakeWorkerId: 0
        };
        exports.PDFWorkerUtil = PDFWorkerUtil;
        {
          if (_is_node.isNodeJS && "function" === "function") {
            PDFWorkerUtil.isWorkerDisabled = true;
            PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
          } else if (typeof document === "object") {
            const pdfjsFilePath = document?.currentScript?.src;

            if (pdfjsFilePath) {
              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
            }
          }

          PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {
            let base;

            try {
              base = new URL(baseUrl);

              if (!base.origin || base.origin === "null") {
                return false;
              }
            } catch (e) {
              return false;
            }

            const other = new URL(otherUrl, base);
            return base.origin === other.origin;
          };

          PDFWorkerUtil.createCDNWrapper = function (url) {
            const wrapper = `importScripts("${url}");`;
            return URL.createObjectURL(new Blob([wrapper]));
          };
        }

        class PDFWorker {
          static #workerPorts = new WeakMap();

          constructor({
            name = null,
            port = null,
            verbosity = (0, _util.getVerbosityLevel)()
          } = {}) {
            if (port && PDFWorker.#workerPorts.has(port)) {
              throw new Error("Cannot use more than one PDFWorker per port.");
            }

            this.name = name;
            this.destroyed = false;
            this.verbosity = verbosity;
            this._readyCapability = (0, _util.createPromiseCapability)();
            this._port = null;
            this._webWorker = null;
            this._messageHandler = null;

            if (port) {
              PDFWorker.#workerPorts.set(port, this);

              this._initializeFromPort(port);

              return;
            }

            this._initialize();
          }

          get promise() {
            return this._readyCapability.promise;
          }

          get port() {
            return this._port;
          }

          get messageHandler() {
            return this._messageHandler;
          }

          _initializeFromPort(port) {
            this._port = port;
            this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);

            this._messageHandler.on("ready", function () {});

            this._readyCapability.resolve();
          }

          _initialize() {
            if (typeof Worker !== "undefined" && !PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {
              let workerSrc = PDFWorker.workerSrc;

              try {
                if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {
                  workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);
                }

                const worker = new Worker(workerSrc);
                const messageHandler = new _message_handler.MessageHandler("main", "worker", worker);

                const terminateEarly = () => {
                  worker.removeEventListener("error", onWorkerError);
                  messageHandler.destroy();
                  worker.terminate();

                  if (this.destroyed) {
                    this._readyCapability.reject(new Error("Worker was destroyed"));
                  } else {
                    this._setupFakeWorker();
                  }
                };

                const onWorkerError = () => {
                  if (!this._webWorker) {
                    terminateEarly();
                  }
                };

                worker.addEventListener("error", onWorkerError);
                messageHandler.on("test", data => {
                  worker.removeEventListener("error", onWorkerError);

                  if (this.destroyed) {
                    terminateEarly();
                    return;
                  }

                  if (data) {
                    this._messageHandler = messageHandler;
                    this._port = worker;
                    this._webWorker = worker;

                    this._readyCapability.resolve();

                    messageHandler.send("configure", {
                      verbosity: this.verbosity
                    });
                  } else {
                    this._setupFakeWorker();

                    messageHandler.destroy();
                    worker.terminate();
                  }
                });
                messageHandler.on("ready", data => {
                  worker.removeEventListener("error", onWorkerError);

                  if (this.destroyed) {
                    terminateEarly();
                    return;
                  }

                  try {
                    sendTest();
                  } catch (e) {
                    this._setupFakeWorker();
                  }
                });

                const sendTest = () => {
                  const testObj = new Uint8Array();
                  messageHandler.send("test", testObj, [testObj.buffer]);
                };

                sendTest();
                return;
              } catch (e) {
                (0, _util.info)("The worker has been disabled.");
              }
            }

            this._setupFakeWorker();
          }

          _setupFakeWorker() {
            if (!PDFWorkerUtil.isWorkerDisabled) {
              (0, _util.warn)("Setting up fake worker.");
              PDFWorkerUtil.isWorkerDisabled = true;
            }

            PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {
              if (this.destroyed) {
                this._readyCapability.reject(new Error("Worker was destroyed"));

                return;
              }

              const port = new LoopbackPort();
              this._port = port;
              const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;
              const workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
              WorkerMessageHandler.setup(workerHandler, port);
              const messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
              this._messageHandler = messageHandler;

              this._readyCapability.resolve();

              messageHandler.send("configure", {
                verbosity: this.verbosity
              });
            }).catch(reason => {
              this._readyCapability.reject(new Error(`Setting up fake worker failed: "${reason.message}".`));
            });
          }

          destroy() {
            this.destroyed = true;

            if (this._webWorker) {
              this._webWorker.terminate();

              this._webWorker = null;
            }

            PDFWorker.#workerPorts.delete(this._port);
            this._port = null;

            if (this._messageHandler) {
              this._messageHandler.destroy();

              this._messageHandler = null;
            }
          }

          static fromPort(params) {
            if (!params?.port) {
              throw new Error("PDFWorker.fromPort - invalid method signature.");
            }

            if (this.#workerPorts.has(params.port)) {
              return this.#workerPorts.get(params.port);
            }

            return new PDFWorker(params);
          }

          static get workerSrc() {
            if (_worker_options.GlobalWorkerOptions.workerSrc) {
              return _worker_options.GlobalWorkerOptions.workerSrc;
            }

            if (PDFWorkerUtil.fallbackWorkerSrc !== null) {
              if (!_is_node.isNodeJS) {
                (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
              }

              return PDFWorkerUtil.fallbackWorkerSrc;
            }

            throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
          }

          static get _mainThreadWorkerMessageHandler() {
            try {
              return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
            } catch (ex) {
              return null;
            }
          }

          static get _setupFakeWorkerGlobal() {
            var _this4 = this;

            const loader = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(function* () {
                const mainWorkerMessageHandler = _this4._mainThreadWorkerMessageHandler;

                if (mainWorkerMessageHandler) {
                  return mainWorkerMessageHandler;
                }

                if (_is_node.isNodeJS && "function" === "function") {
                  const worker = eval("require")(_this4.workerSrc);
                  return worker.WorkerMessageHandler;
                }

                yield (0, _display_utils.loadScript)(_this4.workerSrc);
                return window.pdfjsWorker.WorkerMessageHandler;
              });

              return function loader() {
                return _ref2.apply(this, arguments);
              };
            }();

            return (0, _util.shadow)(this, "_setupFakeWorkerGlobal", loader());
          }

        }

        exports.PDFWorker = PDFWorker;
        {
          PDFWorker.getWorkerSrc = function () {
            (0, _display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.");
            return this.workerSrc;
          };
        }

        class WorkerTransport {
          #docStats = null;
          #pageCache = new Map();
          #pagePromises = new Map();
          #metadataPromise = null;

          constructor(messageHandler, loadingTask, networkStream, params) {
            this.messageHandler = messageHandler;
            this.loadingTask = loadingTask;
            this.commonObjs = new PDFObjects();
            this.fontLoader = new _font_loader.FontLoader({
              docId: loadingTask.docId,
              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
              ownerDocument: params.ownerDocument,
              styleElement: params.styleElement
            });
            this._params = params;

            if (!params.useWorkerFetch) {
              this.CMapReaderFactory = new params.CMapReaderFactory({
                baseUrl: params.cMapUrl,
                isCompressed: params.cMapPacked
              });
              this.StandardFontDataFactory = new params.StandardFontDataFactory({
                baseUrl: params.standardFontDataUrl
              });
            }

            this.destroyed = false;
            this.destroyCapability = null;
            this._passwordCapability = null;
            this._networkStream = networkStream;
            this._fullReader = null;
            this._lastProgress = null;
            this.downloadInfoCapability = (0, _util.createPromiseCapability)();
            this.setupMessageHandler();
          }

          get annotationStorage() {
            return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
          }

          get stats() {
            return this.#docStats;
          }

          getRenderingIntent(intent, annotationMode = _util.AnnotationMode.ENABLE, isOpList = false) {
            let renderingIntent = _util.RenderingIntentFlag.DISPLAY;
            let annotationHash = "";

            switch (intent) {
              case "any":
                renderingIntent = _util.RenderingIntentFlag.ANY;
                break;

              case "display":
                break;

              case "print":
                renderingIntent = _util.RenderingIntentFlag.PRINT;
                break;

              default:
                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);
            }

            switch (annotationMode) {
              case _util.AnnotationMode.DISABLE:
                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                break;

              case _util.AnnotationMode.ENABLE:
                break;

              case _util.AnnotationMode.ENABLE_FORMS:
                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                break;

              case _util.AnnotationMode.ENABLE_STORAGE:
                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;
                annotationHash = this.annotationStorage.hash;
                break;

              default:
                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);
            }

            if (isOpList) {
              renderingIntent += _util.RenderingIntentFlag.OPLIST;
            }

            return {
              renderingIntent,
              cacheKey: `${renderingIntent}_${annotationHash}`
            };
          }

          destroy() {
            if (this.destroyCapability) {
              return this.destroyCapability.promise;
            }

            this.destroyed = true;
            this.destroyCapability = (0, _util.createPromiseCapability)();

            if (this._passwordCapability) {
              this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
            }

            const waitOn = [];

            for (const page of this.#pageCache.values()) {
              waitOn.push(page._destroy());
            }

            this.#pageCache.clear();
            this.#pagePromises.clear();

            if (this.hasOwnProperty("annotationStorage")) {
              this.annotationStorage.resetModified();
            }

            const terminated = this.messageHandler.sendWithPromise("Terminate", null);
            waitOn.push(terminated);
            Promise.all(waitOn).then(() => {
              this.commonObjs.clear();
              this.fontLoader.clear();
              this.#metadataPromise = null;
              this._getFieldObjectsPromise = null;
              this._hasJSActionsPromise = null;

              if (this._networkStream) {
                this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));
              }

              if (this.messageHandler) {
                this.messageHandler.destroy();
                this.messageHandler = null;
              }

              this.destroyCapability.resolve();
            }, this.destroyCapability.reject);
            return this.destroyCapability.promise;
          }

          setupMessageHandler() {
            const {
              messageHandler,
              loadingTask
            } = this;
            messageHandler.on("GetReader", (data, sink) => {
              (0, _util.assert)(this._networkStream, "GetReader - no `IPDFStream` instance available.");
              this._fullReader = this._networkStream.getFullReader();

              this._fullReader.onProgress = evt => {
                this._lastProgress = {
                  loaded: evt.loaded,
                  total: evt.total
                };
              };

              sink.onPull = () => {
                this._fullReader.read().then(function ({
                  value,
                  done
                }) {
                  if (done) {
                    sink.close();
                    return;
                  }

                  (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetReader - expected an ArrayBuffer.");
                  sink.enqueue(new Uint8Array(value), 1, [value]);
                }).catch(reason => {
                  sink.error(reason);
                });
              };

              sink.onCancel = reason => {
                this._fullReader.cancel(reason);

                sink.ready.catch(readyReason => {
                  if (this.destroyed) {
                    return;
                  }

                  throw readyReason;
                });
              };
            });
            messageHandler.on("ReaderHeadersReady", data => {
              const headersCapability = (0, _util.createPromiseCapability)();
              const fullReader = this._fullReader;
              fullReader.headersReady.then(() => {
                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                  if (this._lastProgress) {
                    loadingTask.onProgress?.(this._lastProgress);
                  }

                  fullReader.onProgress = evt => {
                    loadingTask.onProgress?.({
                      loaded: evt.loaded,
                      total: evt.total
                    });
                  };
                }

                headersCapability.resolve({
                  isStreamingSupported: fullReader.isStreamingSupported,
                  isRangeSupported: fullReader.isRangeSupported,
                  contentLength: fullReader.contentLength
                });
              }, headersCapability.reject);
              return headersCapability.promise;
            });
            messageHandler.on("GetRangeReader", (data, sink) => {
              (0, _util.assert)(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");

              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);

              if (!rangeReader) {
                sink.close();
                return;
              }

              sink.onPull = () => {
                rangeReader.read().then(function ({
                  value,
                  done
                }) {
                  if (done) {
                    sink.close();
                    return;
                  }

                  (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetRangeReader - expected an ArrayBuffer.");
                  sink.enqueue(new Uint8Array(value), 1, [value]);
                }).catch(reason => {
                  sink.error(reason);
                });
              };

              sink.onCancel = reason => {
                rangeReader.cancel(reason);
                sink.ready.catch(readyReason => {
                  if (this.destroyed) {
                    return;
                  }

                  throw readyReason;
                });
              };
            });
            messageHandler.on("GetDoc", ({
              pdfInfo
            }) => {
              this._numPages = pdfInfo.numPages;
              this._htmlForXfa = pdfInfo.htmlForXfa;
              delete pdfInfo.htmlForXfa;

              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));
            });
            messageHandler.on("DocException", function (ex) {
              let reason;

              switch (ex.name) {
                case "PasswordException":
                  reason = new _util.PasswordException(ex.message, ex.code);
                  break;

                case "InvalidPDFException":
                  reason = new _util.InvalidPDFException(ex.message);
                  break;

                case "MissingPDFException":
                  reason = new _util.MissingPDFException(ex.message);
                  break;

                case "UnexpectedResponseException":
                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                  break;

                case "UnknownErrorException":
                  reason = new _util.UnknownErrorException(ex.message, ex.details);
                  break;

                default:
                  (0, _util.unreachable)("DocException - expected a valid Error.");
              }

              loadingTask._capability.reject(reason);
            });
            messageHandler.on("PasswordRequest", exception => {
              this._passwordCapability = (0, _util.createPromiseCapability)();

              if (loadingTask.onPassword) {
                const updatePassword = password => {
                  if (password instanceof Error) {
                    this._passwordCapability.reject(password);
                  } else {
                    this._passwordCapability.resolve({
                      password
                    });
                  }
                };

                try {
                  loadingTask.onPassword(updatePassword, exception.code);
                } catch (ex) {
                  this._passwordCapability.reject(ex);
                }
              } else {
                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
              }

              return this._passwordCapability.promise;
            });
            messageHandler.on("DataLoaded", data => {
              loadingTask.onProgress?.({
                loaded: data.length,
                total: data.length
              });
              this.downloadInfoCapability.resolve(data);
            });
            messageHandler.on("StartRenderPage", data => {
              if (this.destroyed) {
                return;
              }

              const page = this.#pageCache.get(data.pageIndex);

              page._startRenderPage(data.transparency, data.cacheKey);
            });
            messageHandler.on("commonobj", ([id, type, exportedData]) => {
              if (this.destroyed) {
                return;
              }

              if (this.commonObjs.has(id)) {
                return;
              }

              switch (type) {
                case "Font":
                  const params = this._params;

                  if ("error" in exportedData) {
                    const exportedError = exportedData.error;
                    (0, _util.warn)(`Error during font loading: ${exportedError}`);
                    this.commonObjs.resolve(id, exportedError);
                    break;
                  }

                  let fontRegistry = null;

                  if (params.pdfBug && globalThis.FontInspector?.enabled) {
                    fontRegistry = {
                      registerFont(font, url) {
                        globalThis.FontInspector.fontAdded(font, url);
                      }

                    };
                  }

                  const font = new _font_loader.FontFaceObject(exportedData, {
                    isEvalSupported: params.isEvalSupported,
                    disableFontFace: params.disableFontFace,
                    ignoreErrors: params.ignoreErrors,
                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
                    fontRegistry
                  });
                  this.fontLoader.bind(font).catch(reason => {
                    return messageHandler.sendWithPromise("FontFallback", {
                      id
                    });
                  }).finally(() => {
                    if (!params.fontExtraProperties && font.data) {
                      font.data = null;
                    }

                    this.commonObjs.resolve(id, font);
                  });
                  break;

                case "FontPath":
                case "Image":
                  this.commonObjs.resolve(id, exportedData);
                  break;

                default:
                  throw new Error(`Got unknown common object type ${type}`);
              }
            });
            messageHandler.on("obj", ([id, pageIndex, type, imageData]) => {
              if (this.destroyed) {
                return;
              }

              const pageProxy = this.#pageCache.get(pageIndex);

              if (pageProxy.objs.has(id)) {
                return;
              }

              switch (type) {
                case "Image":
                  pageProxy.objs.resolve(id, imageData);
                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;

                  if (imageData) {
                    let length;

                    if (imageData.bitmap) {
                      const {
                        bitmap,
                        width,
                        height
                      } = imageData;
                      length = width * height * 4;

                      pageProxy._bitmaps.add(bitmap);
                    } else {
                      length = imageData.data?.length || 0;
                    }

                    if (length > MAX_IMAGE_SIZE_TO_STORE) {
                      pageProxy.cleanupAfterRender = true;
                    }
                  }

                  break;

                case "Pattern":
                  pageProxy.objs.resolve(id, imageData);
                  break;

                default:
                  throw new Error(`Got unknown object type ${type}`);
              }
            });
            messageHandler.on("DocProgress", data => {
              if (this.destroyed) {
                return;
              }

              loadingTask.onProgress?.({
                loaded: data.loaded,
                total: data.total
              });
            });
            messageHandler.on("DocStats", data => {
              if (this.destroyed) {
                return;
              }

              this.#docStats = Object.freeze({
                streamTypes: Object.freeze(data.streamTypes),
                fontTypes: Object.freeze(data.fontTypes)
              });
            });
            messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this));
            messageHandler.on("FetchBuiltInCMap", data => {
              if (this.destroyed) {
                return Promise.reject(new Error("Worker was destroyed."));
              }

              if (!this.CMapReaderFactory) {
                return Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."));
              }

              return this.CMapReaderFactory.fetch(data);
            });
            messageHandler.on("FetchStandardFontData", data => {
              if (this.destroyed) {
                return Promise.reject(new Error("Worker was destroyed."));
              }

              if (!this.StandardFontDataFactory) {
                return Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."));
              }

              return this.StandardFontDataFactory.fetch(data);
            });
          }

          _onUnsupportedFeature({
            featureId
          }) {
            if (this.destroyed) {
              return;
            }

            this.loadingTask.onUnsupportedFeature?.(featureId);
          }

          getData() {
            return this.messageHandler.sendWithPromise("GetData", null);
          }

          getPage(pageNumber) {
            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
              return Promise.reject(new Error("Invalid page request."));
            }

            const pageIndex = pageNumber - 1,
                  cachedPromise = this.#pagePromises.get(pageIndex);

            if (cachedPromise) {
              return cachedPromise;
            }

            const promise = this.messageHandler.sendWithPromise("GetPage", {
              pageIndex
            }).then(pageInfo => {
              if (this.destroyed) {
                throw new Error("Transport destroyed");
              }

              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);
              this.#pageCache.set(pageIndex, page);
              return page;
            });
            this.#pagePromises.set(pageIndex, promise);
            return promise;
          }

          getPageIndex(ref) {
            if (typeof ref !== "object" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {
              return Promise.reject(new Error("Invalid pageIndex request."));
            }

            return this.messageHandler.sendWithPromise("GetPageIndex", {
              num: ref.num,
              gen: ref.gen
            });
          }

          getAnnotations(pageIndex, intent) {
            return this.messageHandler.sendWithPromise("GetAnnotations", {
              pageIndex,
              intent
            });
          }

          saveDocument() {
            return this.messageHandler.sendWithPromise("SaveDocument", {
              isPureXfa: !!this._htmlForXfa,
              numPages: this._numPages,
              annotationStorage: this.annotationStorage.serializable,
              filename: this._fullReader?.filename ?? null
            }).finally(() => {
              this.annotationStorage.resetModified();
            });
          }

          getFieldObjects() {
            return this._getFieldObjectsPromise ||= this.messageHandler.sendWithPromise("GetFieldObjects", null);
          }

          hasJSActions() {
            return this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise("HasJSActions", null);
          }

          getCalculationOrderIds() {
            return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
          }

          getDestinations() {
            return this.messageHandler.sendWithPromise("GetDestinations", null);
          }

          getDestination(id) {
            if (typeof id !== "string") {
              return Promise.reject(new Error("Invalid destination request."));
            }

            return this.messageHandler.sendWithPromise("GetDestination", {
              id
            });
          }

          getPageLabels() {
            return this.messageHandler.sendWithPromise("GetPageLabels", null);
          }

          getPageLayout() {
            return this.messageHandler.sendWithPromise("GetPageLayout", null);
          }

          getPageMode() {
            return this.messageHandler.sendWithPromise("GetPageMode", null);
          }

          getViewerPreferences() {
            return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
          }

          getOpenAction() {
            return this.messageHandler.sendWithPromise("GetOpenAction", null);
          }

          getAttachments() {
            return this.messageHandler.sendWithPromise("GetAttachments", null);
          }

          getJavaScript() {
            return this.messageHandler.sendWithPromise("GetJavaScript", null);
          }

          getDocJSActions() {
            return this.messageHandler.sendWithPromise("GetDocJSActions", null);
          }

          getPageJSActions(pageIndex) {
            return this.messageHandler.sendWithPromise("GetPageJSActions", {
              pageIndex
            });
          }

          getStructTree(pageIndex) {
            return this.messageHandler.sendWithPromise("GetStructTree", {
              pageIndex
            });
          }

          getOutline() {
            return this.messageHandler.sendWithPromise("GetOutline", null);
          }

          getOptionalContentConfig() {
            return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(results => {
              return new _optional_content_config.OptionalContentConfig(results);
            });
          }

          getPermissions() {
            return this.messageHandler.sendWithPromise("GetPermissions", null);
          }

          getMetadata() {
            return this.#metadataPromise ||= this.messageHandler.sendWithPromise("GetMetadata", null).then(results => {
              return {
                info: results[0],
                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                contentDispositionFilename: this._fullReader?.filename ?? null,
                contentLength: this._fullReader?.contentLength ?? null
              };
            });
          }

          getMarkInfo() {
            return this.messageHandler.sendWithPromise("GetMarkInfo", null);
          }

          startCleanup(keepLoadedFonts = false) {
            var _this5 = this;

            return _asyncToGenerator(function* () {
              yield _this5.messageHandler.sendWithPromise("Cleanup", null);

              if (_this5.destroyed) {
                return;
              }

              for (const page of _this5.#pageCache.values()) {
                const cleanupSuccessful = page.cleanup();

                if (!cleanupSuccessful) {
                  throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);
                }
              }

              _this5.commonObjs.clear();

              if (!keepLoadedFonts) {
                _this5.fontLoader.clear();
              }

              _this5.#metadataPromise = null;
              _this5._getFieldObjectsPromise = null;
              _this5._hasJSActionsPromise = null;
            })();
          }

          get loadingParams() {
            const params = this._params;
            return (0, _util.shadow)(this, "loadingParams", {
              disableAutoFetch: params.disableAutoFetch,
              enableXfa: params.enableXfa
            });
          }

        }

        class PDFObjects {
          #objs = Object.create(null);

          #ensureObj(objId) {
            const obj = this.#objs[objId];

            if (obj) {
              return obj;
            }

            return this.#objs[objId] = {
              capability: (0, _util.createPromiseCapability)(),
              data: null
            };
          }

          get(objId, callback = null) {
            if (callback) {
              const obj = this.#ensureObj(objId);
              obj.capability.promise.then(() => callback(obj.data));
              return null;
            }

            const obj = this.#objs[objId];

            if (!obj?.capability.settled) {
              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);
            }

            return obj.data;
          }

          has(objId) {
            const obj = this.#objs[objId];
            return obj?.capability.settled || false;
          }

          resolve(objId, data = null) {
            const obj = this.#ensureObj(objId);
            obj.data = data;
            obj.capability.resolve();
          }

          clear() {
            this.#objs = Object.create(null);
          }

        }

        class RenderTask {
          constructor(internalRenderTask) {
            this._internalRenderTask = internalRenderTask;
            this.onContinue = null;
          }

          get promise() {
            return this._internalRenderTask.capability.promise;
          }

          cancel() {
            this._internalRenderTask.cancel();
          }

        }

        exports.RenderTask = RenderTask;

        class InternalRenderTask {
          static #canvasInUse = new WeakSet();

          constructor({
            callback,
            params,
            objs,
            commonObjs,
            annotationCanvasMap,
            operatorList,
            pageIndex,
            canvasFactory,
            useRequestAnimationFrame = false,
            pdfBug = false,
            pageColors = null
          }) {
            this.callback = callback;
            this.params = params;
            this.objs = objs;
            this.commonObjs = commonObjs;
            this.annotationCanvasMap = annotationCanvasMap;
            this.operatorListIdx = null;
            this.operatorList = operatorList;
            this._pageIndex = pageIndex;
            this.canvasFactory = canvasFactory;
            this._pdfBug = pdfBug;
            this.pageColors = pageColors;
            this.running = false;
            this.graphicsReadyCallback = null;
            this.graphicsReady = false;
            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
            this.cancelled = false;
            this.capability = (0, _util.createPromiseCapability)();
            this.task = new RenderTask(this);
            this._cancelBound = this.cancel.bind(this);
            this._continueBound = this._continue.bind(this);
            this._scheduleNextBound = this._scheduleNext.bind(this);
            this._nextBound = this._next.bind(this);
            this._canvas = params.canvasContext.canvas;
          }

          get completed() {
            return this.capability.promise.catch(function () {});
          }

          initializeGraphics({
            transparency = false,
            optionalContentConfig
          }) {
            if (this.cancelled) {
              return;
            }

            if (this._canvas) {
              if (InternalRenderTask.#canvasInUse.has(this._canvas)) {
                throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");
              }

              InternalRenderTask.#canvasInUse.add(this._canvas);
            }

            if (this._pdfBug && globalThis.StepperManager?.enabled) {
              this.stepper = globalThis.StepperManager.create(this._pageIndex);
              this.stepper.init(this.operatorList);
              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
            }

            const {
              canvasContext,
              viewport,
              transform,
              imageLayer,
              background
            } = this.params;
            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig, this.annotationCanvasMap, this.pageColors);
            this.gfx.beginDrawing({
              transform,
              viewport,
              transparency,
              background
            });
            this.operatorListIdx = 0;
            this.graphicsReady = true;

            if (this.graphicsReadyCallback) {
              this.graphicsReadyCallback();
            }
          }

          cancel(error = null) {
            this.running = false;
            this.cancelled = true;

            if (this.gfx) {
              this.gfx.endDrawing();
            }

            if (this._canvas) {
              InternalRenderTask.#canvasInUse.delete(this._canvas);
            }

            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, "canvas"));
          }

          operatorListChanged() {
            if (!this.graphicsReady) {
              if (!this.graphicsReadyCallback) {
                this.graphicsReadyCallback = this._continueBound;
              }

              return;
            }

            if (this.stepper) {
              this.stepper.updateOperatorList(this.operatorList);
            }

            if (this.running) {
              return;
            }

            this._continue();
          }

          _continue() {
            this.running = true;

            if (this.cancelled) {
              return;
            }

            if (this.task.onContinue) {
              this.task.onContinue(this._scheduleNextBound);
            } else {
              this._scheduleNext();
            }
          }

          _scheduleNext() {
            if (this._useRequestAnimationFrame) {
              window.requestAnimationFrame(() => {
                this._nextBound().catch(this._cancelBound);
              });
            } else {
              Promise.resolve().then(this._nextBound).catch(this._cancelBound);
            }
          }

          _next() {
            var _this6 = this;

            return _asyncToGenerator(function* () {
              if (_this6.cancelled) {
                return;
              }

              _this6.operatorListIdx = _this6.gfx.executeOperatorList(_this6.operatorList, _this6.operatorListIdx, _this6._continueBound, _this6.stepper);

              if (_this6.operatorListIdx === _this6.operatorList.argsArray.length) {
                _this6.running = false;

                if (_this6.operatorList.lastChunk) {
                  _this6.gfx.endDrawing();

                  if (_this6._canvas) {
                    InternalRenderTask.#canvasInUse.delete(_this6._canvas);
                  }

                  _this6.callback();
                }
              }
            })();
          }

        }

        const version = '2.14.305';
        exports.version = version;
        const build = 'eaaa8b4ad';
        exports.build = build;
        /***/
      },
      /* 5 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PageViewport = exports.PDFDateString = exports.DOMStandardFontDataFactory = exports.DOMSVGFactory = exports.DOMCanvasFactory = exports.DOMCMapReaderFactory = void 0;
        exports.deprecated = deprecated;
        exports.getFilenameFromUrl = getFilenameFromUrl;
        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
        exports.getXfaPageViewport = getXfaPageViewport;
        exports.isDataScheme = isDataScheme;
        exports.isPdfFile = isPdfFile;
        exports.isValidFetchUrl = isValidFetchUrl;
        exports.loadScript = loadScript;

        var _base_factory = __w_pdfjs_require__(6);

        var _util = __w_pdfjs_require__(1);

        const SVG_NS = "http://www.w3.org/2000/svg";

        class PixelsPerInch {
          static CSS = 96.0;
          static PDF = 72.0;
          static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
        }

        exports.PixelsPerInch = PixelsPerInch;

        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {
          constructor({
            ownerDocument = globalThis.document
          } = {}) {
            super();
            this._document = ownerDocument;
          }

          _createCanvas(width, height) {
            const canvas = this._document.createElement("canvas");

            canvas.width = width;
            canvas.height = height;
            return canvas;
          }

        }

        exports.DOMCanvasFactory = DOMCanvasFactory;

        function fetchData(_x5) {
          return _fetchData.apply(this, arguments);
        }

        function _fetchData() {
          _fetchData = _asyncToGenerator(function* (url, asTypedArray = false) {
            if (isValidFetchUrl(url, document.baseURI)) {
              const response = yield fetch(url);

              if (!response.ok) {
                throw new Error(response.statusText);
              }

              return asTypedArray ? new Uint8Array(yield response.arrayBuffer()) : (0, _util.stringToBytes)(yield response.text());
            }

            return new Promise((resolve, reject) => {
              const request = new XMLHttpRequest();
              request.open("GET", url, true);

              if (asTypedArray) {
                request.responseType = "arraybuffer";
              }

              request.onreadystatechange = () => {
                if (request.readyState !== XMLHttpRequest.DONE) {
                  return;
                }

                if (request.status === 200 || request.status === 0) {
                  let data;

                  if (asTypedArray && request.response) {
                    data = new Uint8Array(request.response);
                  } else if (!asTypedArray && request.responseText) {
                    data = (0, _util.stringToBytes)(request.responseText);
                  }

                  if (data) {
                    resolve(data);
                    return;
                  }
                }

                reject(new Error(request.statusText));
              };

              request.send(null);
            });
          });
          return _fetchData.apply(this, arguments);
        }

        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {
          _fetchData(url, compressionType) {
            return fetchData(url, this.isCompressed).then(data => {
              return {
                cMapData: data,
                compressionType
              };
            });
          }

        }

        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;

        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {
          _fetchData(url) {
            return fetchData(url, true);
          }

        }

        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;

        class DOMSVGFactory extends _base_factory.BaseSVGFactory {
          _createSVG(type) {
            return document.createElementNS(SVG_NS, type);
          }

        }

        exports.DOMSVGFactory = DOMSVGFactory;

        class PageViewport {
          constructor({
            viewBox,
            scale,
            rotation,
            offsetX = 0,
            offsetY = 0,
            dontFlip = false
          }) {
            this.viewBox = viewBox;
            this.scale = scale;
            this.rotation = rotation;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            const centerX = (viewBox[2] + viewBox[0]) / 2;
            const centerY = (viewBox[3] + viewBox[1]) / 2;
            let rotateA, rotateB, rotateC, rotateD;
            rotation %= 360;

            if (rotation < 0) {
              rotation += 360;
            }

            switch (rotation) {
              case 180:
                rotateA = -1;
                rotateB = 0;
                rotateC = 0;
                rotateD = 1;
                break;

              case 90:
                rotateA = 0;
                rotateB = 1;
                rotateC = 1;
                rotateD = 0;
                break;

              case 270:
                rotateA = 0;
                rotateB = -1;
                rotateC = -1;
                rotateD = 0;
                break;

              case 0:
                rotateA = 1;
                rotateB = 0;
                rotateC = 0;
                rotateD = -1;
                break;

              default:
                throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
            }

            if (dontFlip) {
              rotateC = -rotateC;
              rotateD = -rotateD;
            }

            let offsetCanvasX, offsetCanvasY;
            let width, height;

            if (rotateA === 0) {
              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
              width = Math.abs(viewBox[3] - viewBox[1]) * scale;
              height = Math.abs(viewBox[2] - viewBox[0]) * scale;
            } else {
              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
              width = Math.abs(viewBox[2] - viewBox[0]) * scale;
              height = Math.abs(viewBox[3] - viewBox[1]) * scale;
            }

            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
            this.width = width;
            this.height = height;
          }

          clone({
            scale = this.scale,
            rotation = this.rotation,
            offsetX = this.offsetX,
            offsetY = this.offsetY,
            dontFlip = false
          } = {}) {
            return new PageViewport({
              viewBox: this.viewBox.slice(),
              scale,
              rotation,
              offsetX,
              offsetY,
              dontFlip
            });
          }

          convertToViewportPoint(x, y) {
            return _util.Util.applyTransform([x, y], this.transform);
          }

          convertToViewportRectangle(rect) {
            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);

            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);

            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
          }

          convertToPdfPoint(x, y) {
            return _util.Util.applyInverseTransform([x, y], this.transform);
          }

        }

        exports.PageViewport = PageViewport;

        class RenderingCancelledException extends _util.BaseException {
          constructor(msg, type) {
            super(msg, "RenderingCancelledException");
            this.type = type;
          }

        }

        exports.RenderingCancelledException = RenderingCancelledException;

        function isDataScheme(url) {
          const ii = url.length;
          let i = 0;

          while (i < ii && url[i].trim() === "") {
            i++;
          }

          return url.substring(i, i + 5).toLowerCase() === "data:";
        }

        function isPdfFile(filename) {
          return typeof filename === "string" && /\.pdf$/i.test(filename);
        }

        function getFilenameFromUrl(url) {
          const anchor = url.indexOf("#");
          const query = url.indexOf("?");
          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
          return url.substring(url.lastIndexOf("/", end) + 1, end);
        }

        function getPdfFilenameFromUrl(url, defaultFilename = "document.pdf") {
          if (typeof url !== "string") {
            return defaultFilename;
          }

          if (isDataScheme(url)) {
            (0, _util.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
            return defaultFilename;
          }

          const reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
          const reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
          const splitURI = reURI.exec(url);
          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);

          if (suggestedFilename) {
            suggestedFilename = suggestedFilename[0];

            if (suggestedFilename.includes("%")) {
              try {
                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
              } catch (ex) {}
            }
          }

          return suggestedFilename || defaultFilename;
        }

        class StatTimer {
          constructor() {
            this.started = Object.create(null);
            this.times = [];
          }

          time(name) {
            if (name in this.started) {
              (0, _util.warn)(`Timer is already running for ${name}`);
            }

            this.started[name] = Date.now();
          }

          timeEnd(name) {
            if (!(name in this.started)) {
              (0, _util.warn)(`Timer has not been started for ${name}`);
            }

            this.times.push({
              name,
              start: this.started[name],
              end: Date.now()
            });
            delete this.started[name];
          }

          toString() {
            const outBuf = [];
            let longest = 0;

            for (const time of this.times) {
              const name = time.name;

              if (name.length > longest) {
                longest = name.length;
              }
            }

            for (const time of this.times) {
              const duration = time.end - time.start;
              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\n`);
            }

            return outBuf.join("");
          }

        }

        exports.StatTimer = StatTimer;

        function isValidFetchUrl(url, baseUrl) {
          try {
            const {
              protocol
            } = baseUrl ? new URL(url, baseUrl) : new URL(url);
            return protocol === "http:" || protocol === "https:";
          } catch (ex) {
            return false;
          }
        }

        function loadScript(src, removeScriptElement = false) {
          return new Promise((resolve, reject) => {
            const script = document.createElement("script");
            script.src = src;

            script.onload = function (evt) {
              if (removeScriptElement) {
                script.remove();
              }

              resolve(evt);
            };

            script.onerror = function () {
              reject(new Error(`Cannot load script at: ${script.src}`));
            };

            (document.head || document.documentElement).appendChild(script);
          });
        }

        function deprecated(details) {
          console.log("Deprecated API usage: " + details);
        }

        let pdfDateStringRegex;

        class PDFDateString {
          static toDateObject(input) {
            if (!input || typeof input !== "string") {
              return null;
            }

            if (!pdfDateStringRegex) {
              pdfDateStringRegex = new RegExp("^D:" + "(\\d{4})" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "([Z|+|-])?" + "(\\d{2})?" + "'?" + "(\\d{2})?" + "'?");
            }

            const matches = pdfDateStringRegex.exec(input);

            if (!matches) {
              return null;
            }

            const year = parseInt(matches[1], 10);
            let month = parseInt(matches[2], 10);
            month = month >= 1 && month <= 12 ? month - 1 : 0;
            let day = parseInt(matches[3], 10);
            day = day >= 1 && day <= 31 ? day : 1;
            let hour = parseInt(matches[4], 10);
            hour = hour >= 0 && hour <= 23 ? hour : 0;
            let minute = parseInt(matches[5], 10);
            minute = minute >= 0 && minute <= 59 ? minute : 0;
            let second = parseInt(matches[6], 10);
            second = second >= 0 && second <= 59 ? second : 0;
            const universalTimeRelation = matches[7] || "Z";
            let offsetHour = parseInt(matches[8], 10);
            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
            let offsetMinute = parseInt(matches[9], 10) || 0;
            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;

            if (universalTimeRelation === "-") {
              hour += offsetHour;
              minute += offsetMinute;
            } else if (universalTimeRelation === "+") {
              hour -= offsetHour;
              minute -= offsetMinute;
            }

            return new Date(Date.UTC(year, month, day, hour, minute, second));
          }

        }

        exports.PDFDateString = PDFDateString;

        function getXfaPageViewport(xfaPage, {
          scale = 1,
          rotation = 0
        }) {
          const {
            width,
            height
          } = xfaPage.attributes.style;
          const viewBox = [0, 0, parseInt(width), parseInt(height)];
          return new PageViewport({
            viewBox,
            scale,
            rotation
          });
        }
        /***/

      },
      /* 6 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BaseStandardFontDataFactory = exports.BaseSVGFactory = exports.BaseCanvasFactory = exports.BaseCMapReaderFactory = void 0;

        var _util = __w_pdfjs_require__(1);

        class BaseCanvasFactory {
          constructor() {
            if (this.constructor === BaseCanvasFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCanvasFactory.");
            }
          }

          create(width, height) {
            if (width <= 0 || height <= 0) {
              throw new Error("Invalid canvas size");
            }

            const canvas = this._createCanvas(width, height);

            return {
              canvas,
              context: canvas.getContext("2d")
            };
          }

          reset(canvasAndContext, width, height) {
            if (!canvasAndContext.canvas) {
              throw new Error("Canvas is not specified");
            }

            if (width <= 0 || height <= 0) {
              throw new Error("Invalid canvas size");
            }

            canvasAndContext.canvas.width = width;
            canvasAndContext.canvas.height = height;
          }

          destroy(canvasAndContext) {
            if (!canvasAndContext.canvas) {
              throw new Error("Canvas is not specified");
            }

            canvasAndContext.canvas.width = 0;
            canvasAndContext.canvas.height = 0;
            canvasAndContext.canvas = null;
            canvasAndContext.context = null;
          }

          _createCanvas(width, height) {
            (0, _util.unreachable)("Abstract method `_createCanvas` called.");
          }

        }

        exports.BaseCanvasFactory = BaseCanvasFactory;

        class BaseCMapReaderFactory {
          constructor({
            baseUrl = null,
            isCompressed = false
          }) {
            if (this.constructor === BaseCMapReaderFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCMapReaderFactory.");
            }

            this.baseUrl = baseUrl;
            this.isCompressed = isCompressed;
          }

          fetch({
            name
          }) {
            var _this7 = this;

            return _asyncToGenerator(function* () {
              if (!_this7.baseUrl) {
                throw new Error('The CMap "baseUrl" parameter must be specified, ensure that ' + 'the "cMapUrl" and "cMapPacked" API parameters are provided.');
              }

              if (!name) {
                throw new Error("CMap name must be specified.");
              }

              const url = _this7.baseUrl + name + (_this7.isCompressed ? ".bcmap" : "");
              const compressionType = _this7.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;
              return _this7._fetchData(url, compressionType).catch(reason => {
                throw new Error(`Unable to load ${_this7.isCompressed ? "binary " : ""}CMap at: ${url}`);
              });
            })();
          }

          _fetchData(url, compressionType) {
            (0, _util.unreachable)("Abstract method `_fetchData` called.");
          }

        }

        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;

        class BaseStandardFontDataFactory {
          constructor({
            baseUrl = null
          }) {
            if (this.constructor === BaseStandardFontDataFactory) {
              (0, _util.unreachable)("Cannot initialize BaseStandardFontDataFactory.");
            }

            this.baseUrl = baseUrl;
          }

          fetch({
            filename
          }) {
            var _this8 = this;

            return _asyncToGenerator(function* () {
              if (!_this8.baseUrl) {
                throw new Error('The standard font "baseUrl" parameter must be specified, ensure that ' + 'the "standardFontDataUrl" API parameter is provided.');
              }

              if (!filename) {
                throw new Error("Font filename must be specified.");
              }

              const url = `${_this8.baseUrl}${filename}`;
              return _this8._fetchData(url).catch(reason => {
                throw new Error(`Unable to load font data at: ${url}`);
              });
            })();
          }

          _fetchData(url) {
            (0, _util.unreachable)("Abstract method `_fetchData` called.");
          }

        }

        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;

        class BaseSVGFactory {
          constructor() {
            if (this.constructor === BaseSVGFactory) {
              (0, _util.unreachable)("Cannot initialize BaseSVGFactory.");
            }
          }

          create(width, height) {
            if (width <= 0 || height <= 0) {
              throw new Error("Invalid SVG dimensions");
            }

            const svg = this._createSVG("svg:svg");

            svg.setAttribute("version", "1.1");
            svg.setAttribute("width", `${width}px`);
            svg.setAttribute("height", `${height}px`);
            svg.setAttribute("preserveAspectRatio", "none");
            svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
            return svg;
          }

          createElement(type) {
            if (typeof type !== "string") {
              throw new Error("Invalid SVG element type");
            }

            return this._createSVG(type);
          }

          _createSVG(type) {
            (0, _util.unreachable)("Abstract method `_createSVG` called.");
          }

        }

        exports.BaseSVGFactory = BaseSVGFactory;
        /***/
      },
      /* 7 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FontLoader = exports.FontFaceObject = void 0;

        var _util = __w_pdfjs_require__(1);

        class BaseFontLoader {
          constructor({
            docId,
            onUnsupportedFeature,
            ownerDocument = globalThis.document,
            styleElement = null
          }) {
            if (this.constructor === BaseFontLoader) {
              (0, _util.unreachable)("Cannot initialize BaseFontLoader.");
            }

            this.docId = docId;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this._document = ownerDocument;
            this.nativeFontFaces = [];
            this.styleElement = null;
          }

          addNativeFontFace(nativeFontFace) {
            this.nativeFontFaces.push(nativeFontFace);

            this._document.fonts.add(nativeFontFace);
          }

          insertRule(rule) {
            let styleElement = this.styleElement;

            if (!styleElement) {
              styleElement = this.styleElement = this._document.createElement("style");
              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;

              this._document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
            }

            const styleSheet = styleElement.sheet;
            styleSheet.insertRule(rule, styleSheet.cssRules.length);
          }

          clear() {
            for (const nativeFontFace of this.nativeFontFaces) {
              this._document.fonts.delete(nativeFontFace);
            }

            this.nativeFontFaces.length = 0;

            if (this.styleElement) {
              this.styleElement.remove();
              this.styleElement = null;
            }
          }

          bind(font) {
            var _this9 = this;

            return _asyncToGenerator(function* () {
              if (font.attached || font.missingFile) {
                return;
              }

              font.attached = true;

              if (_this9.isFontLoadingAPISupported) {
                const nativeFontFace = font.createNativeFontFace();

                if (nativeFontFace) {
                  _this9.addNativeFontFace(nativeFontFace);

                  try {
                    yield nativeFontFace.loaded;
                  } catch (ex) {
                    _this9._onUnsupportedFeature({
                      featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative
                    });

                    (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);
                    font.disableFontFace = true;
                    throw ex;
                  }
                }

                return;
              }

              const rule = font.createFontFaceRule();

              if (rule) {
                _this9.insertRule(rule);

                if (_this9.isSyncFontLoadingSupported) {
                  return;
                }

                yield new Promise(resolve => {
                  const request = _this9._queueLoadingCallback(resolve);

                  _this9._prepareFontLoadEvent([rule], [font], request);
                });
              }
            })();
          }

          _queueLoadingCallback(callback) {
            (0, _util.unreachable)("Abstract method `_queueLoadingCallback`.");
          }

          get isFontLoadingAPISupported() {
            const hasFonts = !!this._document?.fonts;
            return (0, _util.shadow)(this, "isFontLoadingAPISupported", hasFonts);
          }

          get isSyncFontLoadingSupported() {
            (0, _util.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
          }

          get _loadTestFont() {
            (0, _util.unreachable)("Abstract method `_loadTestFont`.");
          }

          _prepareFontLoadEvent(rules, fontsToLoad, request) {
            (0, _util.unreachable)("Abstract method `_prepareFontLoadEvent`.");
          }

        }

        let FontLoader;
        exports.FontLoader = FontLoader;
        {
          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {
            constructor(params) {
              super(params);
              this.loadingContext = {
                requests: [],
                nextRequestId: 0
              };
              this.loadTestFontId = 0;
            }

            get isSyncFontLoadingSupported() {
              let supported = false;

              if (typeof navigator === "undefined") {
                supported = true;
              } else {
                const m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);

                if (m?.[1] >= 14) {
                  supported = true;
                }
              }

              return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);
            }

            _queueLoadingCallback(callback) {
              function completeRequest() {
                (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");
                request.done = true;

                while (context.requests.length > 0 && context.requests[0].done) {
                  const otherRequest = context.requests.shift();
                  setTimeout(otherRequest.callback, 0);
                }
              }

              const context = this.loadingContext;
              const request = {
                id: `pdfjs-font-loading-${context.nextRequestId++}`,
                done: false,
                complete: completeRequest,
                callback
              };
              context.requests.push(request);
              return request;
            }

            get _loadTestFont() {
              const getLoadTestFont = function () {
                return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
              };

              return (0, _util.shadow)(this, "_loadTestFont", getLoadTestFont());
            }

            _prepareFontLoadEvent(rules, fonts, request) {
              function int32(data, offset) {
                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
              }

              function spliceString(s, offset, remove, insert) {
                const chunk1 = s.substring(0, offset);
                const chunk2 = s.substring(offset + remove);
                return chunk1 + insert + chunk2;
              }

              let i, ii;

              const canvas = this._document.createElement("canvas");

              canvas.width = 1;
              canvas.height = 1;
              const ctx = canvas.getContext("2d");
              let called = 0;

              function isFontReady(name, callback) {
                called++;

                if (called > 30) {
                  (0, _util.warn)("Load test font never loaded.");
                  callback();
                  return;
                }

                ctx.font = "30px " + name;
                ctx.fillText(".", 0, 20);
                const imageData = ctx.getImageData(0, 0, 1, 1);

                if (imageData.data[3] > 0) {
                  callback();
                  return;
                }

                setTimeout(isFontReady.bind(null, name, callback));
              }

              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;
              let data = this._loadTestFont;
              const COMMENT_OFFSET = 976;
              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
              const CFF_CHECKSUM_OFFSET = 16;
              const XXXX_VALUE = 0x58585858;
              let checksum = int32(data, CFF_CHECKSUM_OFFSET);

              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
              }

              if (i < loadTestFontId.length) {
                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
              }

              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
              const url = `url(data:font/opentype;base64,${btoa(data)});`;
              const rule = `@font-face {font-family:"${loadTestFontId}";src:${url}}`;
              this.insertRule(rule);
              const names = [];

              for (const font of fonts) {
                names.push(font.loadedName);
              }

              names.push(loadTestFontId);

              const div = this._document.createElement("div");

              div.style.visibility = "hidden";
              div.style.width = div.style.height = "10px";
              div.style.position = "absolute";
              div.style.top = div.style.left = "0px";

              for (const name of names) {
                const span = this._document.createElement("span");

                span.textContent = "Hi";
                span.style.fontFamily = name;
                div.appendChild(span);
              }

              this._document.body.appendChild(div);

              isFontReady(loadTestFontId, () => {
                div.remove();
                request.complete();
              });
            }

          };
        }

        class FontFaceObject {
          constructor(translatedData, {
            isEvalSupported = true,
            disableFontFace = false,
            ignoreErrors = false,
            onUnsupportedFeature,
            fontRegistry = null
          }) {
            this.compiledGlyphs = Object.create(null);

            for (const i in translatedData) {
              this[i] = translatedData[i];
            }

            this.isEvalSupported = isEvalSupported !== false;
            this.disableFontFace = disableFontFace === true;
            this.ignoreErrors = ignoreErrors === true;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this.fontRegistry = fontRegistry;
          }

          createNativeFontFace() {
            if (!this.data || this.disableFontFace) {
              return null;
            }

            let nativeFontFace;

            if (!this.cssFontInfo) {
              nativeFontFace = new FontFace(this.loadedName, this.data, {});
            } else {
              const css = {
                weight: this.cssFontInfo.fontWeight
              };

              if (this.cssFontInfo.italicAngle) {
                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;
              }

              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);
            }

            if (this.fontRegistry) {
              this.fontRegistry.registerFont(this);
            }

            return nativeFontFace;
          }

          createFontFaceRule() {
            if (!this.data || this.disableFontFace) {
              return null;
            }

            const data = (0, _util.bytesToString)(this.data);
            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;
            let rule;

            if (!this.cssFontInfo) {
              rule = `@font-face {font-family:"${this.loadedName}";src:${url}}`;
            } else {
              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;

              if (this.cssFontInfo.italicAngle) {
                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;
              }

              rule = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${css}src:${url}}`;
            }

            if (this.fontRegistry) {
              this.fontRegistry.registerFont(this, url);
            }

            return rule;
          }

          getPathGenerator(objs, character) {
            if (this.compiledGlyphs[character] !== undefined) {
              return this.compiledGlyphs[character];
            }

            let cmds;

            try {
              cmds = objs.get(this.loadedName + "_path_" + character);
            } catch (ex) {
              if (!this.ignoreErrors) {
                throw ex;
              }

              this._onUnsupportedFeature({
                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath
              });

              (0, _util.warn)(`getPathGenerator - ignoring character: "${ex}".`);
              return this.compiledGlyphs[character] = function (c, size) {};
            }

            if (this.isEvalSupported && _util.FeatureTest.isEvalSupported) {
              const jsBuf = [];

              for (const current of cmds) {
                const args = current.args !== undefined ? current.args.join(",") : "";
                jsBuf.push("c.", current.cmd, "(", args, ");\n");
              }

              return this.compiledGlyphs[character] = new Function("c", "size", jsBuf.join(""));
            }

            return this.compiledGlyphs[character] = function (c, size) {
              for (const current of cmds) {
                if (current.cmd === "scale") {
                  current.args = [size, -size];
                }

                c[current.cmd].apply(c, current.args);
              }
            };
          }

        }

        exports.FontFaceObject = FontFaceObject;
        /***/
      },
      /* 8 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationStorage = void 0;

        var _murmurhash = __w_pdfjs_require__(9);

        var _util = __w_pdfjs_require__(1);

        class AnnotationStorage {
          constructor() {
            this._storage = new Map();
            this._modified = false;
            this.onSetModified = null;
            this.onResetModified = null;
          }

          getValue(key, defaultValue) {
            const value = this._storage.get(key);

            if (value === undefined) {
              return defaultValue;
            }

            return Object.assign(defaultValue, value);
          }

          getRawValue(key) {
            return this._storage.get(key);
          }

          setValue(key, value) {
            const obj = this._storage.get(key);

            let modified = false;

            if (obj !== undefined) {
              for (const [entry, val] of Object.entries(value)) {
                if (obj[entry] !== val) {
                  modified = true;
                  obj[entry] = val;
                }
              }
            } else {
              modified = true;

              this._storage.set(key, value);
            }

            if (modified) {
              this._setModified();
            }
          }

          getAll() {
            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;
          }

          get size() {
            return this._storage.size;
          }

          _setModified() {
            if (!this._modified) {
              this._modified = true;

              if (typeof this.onSetModified === "function") {
                this.onSetModified();
              }
            }
          }

          resetModified() {
            if (this._modified) {
              this._modified = false;

              if (typeof this.onResetModified === "function") {
                this.onResetModified();
              }
            }
          }

          get serializable() {
            return this._storage.size > 0 ? this._storage : null;
          }

          get hash() {
            const hash = new _murmurhash.MurmurHash3_64();

            for (const [key, value] of this._storage) {
              hash.update(`${key}:${JSON.stringify(value)}`);
            }

            return hash.hexdigest();
          }

        }

        exports.AnnotationStorage = AnnotationStorage;
        /***/
      },
      /* 9 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MurmurHash3_64 = void 0;

        var _util = __w_pdfjs_require__(1);

        const SEED = 0xc3d2e1f0;
        const MASK_HIGH = 0xffff0000;
        const MASK_LOW = 0xffff;

        class MurmurHash3_64 {
          constructor(seed) {
            this.h1 = seed ? seed & 0xffffffff : SEED;
            this.h2 = seed ? seed & 0xffffffff : SEED;
          }

          update(input) {
            let data, length;

            if (typeof input === "string") {
              data = new Uint8Array(input.length * 2);
              length = 0;

              for (let i = 0, ii = input.length; i < ii; i++) {
                const code = input.charCodeAt(i);

                if (code <= 0xff) {
                  data[length++] = code;
                } else {
                  data[length++] = code >>> 8;
                  data[length++] = code & 0xff;
                }
              }
            } else if ((0, _util.isArrayBuffer)(input)) {
              data = input.slice();
              length = data.byteLength;
            } else {
              throw new Error("Wrong data format in MurmurHash3_64_update. " + "Input must be a string or array.");
            }

            const blockCounts = length >> 2;
            const tailLength = length - blockCounts * 4;
            const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
            let k1 = 0,
                k2 = 0;
            let h1 = this.h1,
                h2 = this.h2;
            const C1 = 0xcc9e2d51,
                  C2 = 0x1b873593;
            const C1_LOW = C1 & MASK_LOW,
                  C2_LOW = C2 & MASK_LOW;

            for (let i = 0; i < blockCounts; i++) {
              if (i & 1) {
                k1 = dataUint32[i];
                k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                k1 = k1 << 15 | k1 >>> 17;
                k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                h1 ^= k1;
                h1 = h1 << 13 | h1 >>> 19;
                h1 = h1 * 5 + 0xe6546b64;
              } else {
                k2 = dataUint32[i];
                k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
                k2 = k2 << 15 | k2 >>> 17;
                k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
                h2 ^= k2;
                h2 = h2 << 13 | h2 >>> 19;
                h2 = h2 * 5 + 0xe6546b64;
              }
            }

            k1 = 0;

            switch (tailLength) {
              case 3:
                k1 ^= data[blockCounts * 4 + 2] << 16;

              case 2:
                k1 ^= data[blockCounts * 4 + 1] << 8;

              case 1:
                k1 ^= data[blockCounts * 4];
                k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                k1 = k1 << 15 | k1 >>> 17;
                k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;

                if (blockCounts & 1) {
                  h1 ^= k1;
                } else {
                  h2 ^= k1;
                }

            }

            this.h1 = h1;
            this.h2 = h2;
          }

          hexdigest() {
            let h1 = this.h1,
                h2 = this.h2;
            h1 ^= h2 >>> 1;
            h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;
            h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;
            h1 ^= h2 >>> 1;
            h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;
            h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;
            h1 ^= h2 >>> 1;
            const hex1 = (h1 >>> 0).toString(16),
                  hex2 = (h2 >>> 0).toString(16);
            return hex1.padStart(8, "0") + hex2.padStart(8, "0");
          }

        }

        exports.MurmurHash3_64 = MurmurHash3_64;
        /***/
      },
      /* 10 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanvasGraphics = void 0;

        var _util = __w_pdfjs_require__(1);

        var _pattern_helper = __w_pdfjs_require__(11);

        var _image_utils = __w_pdfjs_require__(12);

        var _is_node = __w_pdfjs_require__(3);

        var _display_utils = __w_pdfjs_require__(5);

        const MIN_FONT_SIZE = 16;
        const MAX_FONT_SIZE = 100;
        const MAX_GROUP_SIZE = 4096;
        const EXECUTION_TIME = 15;
        const EXECUTION_STEPS = 10;
        const COMPILE_TYPE3_GLYPHS = true;
        const MAX_SIZE_TO_COMPILE = 1000;
        const FULL_CHUNK_HEIGHT = 16;
        const LINEWIDTH_SCALE_FACTOR = 1.000001;

        function mirrorContextOperations(ctx, destCtx) {
          if (ctx._removeMirroring) {
            throw new Error("Context is already forwarding operations.");
          }

          ctx.__originalSave = ctx.save;
          ctx.__originalRestore = ctx.restore;
          ctx.__originalRotate = ctx.rotate;
          ctx.__originalScale = ctx.scale;
          ctx.__originalTranslate = ctx.translate;
          ctx.__originalTransform = ctx.transform;
          ctx.__originalSetTransform = ctx.setTransform;
          ctx.__originalResetTransform = ctx.resetTransform;
          ctx.__originalClip = ctx.clip;
          ctx.__originalMoveTo = ctx.moveTo;
          ctx.__originalLineTo = ctx.lineTo;
          ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
          ctx.__originalRect = ctx.rect;
          ctx.__originalClosePath = ctx.closePath;
          ctx.__originalBeginPath = ctx.beginPath;

          ctx._removeMirroring = () => {
            ctx.save = ctx.__originalSave;
            ctx.restore = ctx.__originalRestore;
            ctx.rotate = ctx.__originalRotate;
            ctx.scale = ctx.__originalScale;
            ctx.translate = ctx.__originalTranslate;
            ctx.transform = ctx.__originalTransform;
            ctx.setTransform = ctx.__originalSetTransform;
            ctx.resetTransform = ctx.__originalResetTransform;
            ctx.clip = ctx.__originalClip;
            ctx.moveTo = ctx.__originalMoveTo;
            ctx.lineTo = ctx.__originalLineTo;
            ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
            ctx.rect = ctx.__originalRect;
            ctx.closePath = ctx.__originalClosePath;
            ctx.beginPath = ctx.__originalBeginPath;
            delete ctx._removeMirroring;
          };

          ctx.save = function ctxSave() {
            destCtx.save();

            this.__originalSave();
          };

          ctx.restore = function ctxRestore() {
            destCtx.restore();

            this.__originalRestore();
          };

          ctx.translate = function ctxTranslate(x, y) {
            destCtx.translate(x, y);

            this.__originalTranslate(x, y);
          };

          ctx.scale = function ctxScale(x, y) {
            destCtx.scale(x, y);

            this.__originalScale(x, y);
          };

          ctx.transform = function ctxTransform(a, b, c, d, e, f) {
            destCtx.transform(a, b, c, d, e, f);

            this.__originalTransform(a, b, c, d, e, f);
          };

          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
            destCtx.setTransform(a, b, c, d, e, f);

            this.__originalSetTransform(a, b, c, d, e, f);
          };

          ctx.resetTransform = function ctxResetTransform() {
            destCtx.resetTransform();

            this.__originalResetTransform();
          };

          ctx.rotate = function ctxRotate(angle) {
            destCtx.rotate(angle);

            this.__originalRotate(angle);
          };

          ctx.clip = function ctxRotate(rule) {
            destCtx.clip(rule);

            this.__originalClip(rule);
          };

          ctx.moveTo = function (x, y) {
            destCtx.moveTo(x, y);

            this.__originalMoveTo(x, y);
          };

          ctx.lineTo = function (x, y) {
            destCtx.lineTo(x, y);

            this.__originalLineTo(x, y);
          };

          ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);

            this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
          };

          ctx.rect = function (x, y, width, height) {
            destCtx.rect(x, y, width, height);

            this.__originalRect(x, y, width, height);
          };

          ctx.closePath = function () {
            destCtx.closePath();

            this.__originalClosePath();
          };

          ctx.beginPath = function () {
            destCtx.beginPath();

            this.__originalBeginPath();
          };
        }

        function addContextCurrentTransform(ctx) {
          if (ctx._transformStack) {
            ctx._transformStack = [];
          }

          if (ctx.mozCurrentTransform) {
            return;
          }

          ctx._originalSave = ctx.save;
          ctx._originalRestore = ctx.restore;
          ctx._originalRotate = ctx.rotate;
          ctx._originalScale = ctx.scale;
          ctx._originalTranslate = ctx.translate;
          ctx._originalTransform = ctx.transform;
          ctx._originalSetTransform = ctx.setTransform;
          ctx._originalResetTransform = ctx.resetTransform;
          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
          ctx._transformStack = [];

          try {
            const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), "lineWidth");
            ctx._setLineWidth = desc.set;
            ctx._getLineWidth = desc.get;
            Object.defineProperty(ctx, "lineWidth", {
              set: function setLineWidth(width) {
                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);
              },
              get: function getLineWidth() {
                return this._getLineWidth();
              }
            });
          } catch (_) {}

          Object.defineProperty(ctx, "mozCurrentTransform", {
            get: function getCurrentTransform() {
              return this._transformMatrix;
            }
          });
          Object.defineProperty(ctx, "mozCurrentTransformInverse", {
            get: function getCurrentTransformInverse() {
              const [a, b, c, d, e, f] = this._transformMatrix;
              const ad_bc = a * d - b * c;
              const bc_ad = b * c - a * d;
              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
            }
          });

          ctx.save = function ctxSave() {
            const old = this._transformMatrix;

            this._transformStack.push(old);

            this._transformMatrix = old.slice(0, 6);

            this._originalSave();
          };

          ctx.restore = function ctxRestore() {
            if (this._transformStack.length === 0) {
              (0, _util.warn)("Tried to restore a ctx when the stack was already empty.");
            }

            const prev = this._transformStack.pop();

            if (prev) {
              this._transformMatrix = prev;

              this._originalRestore();
            }
          };

          ctx.translate = function ctxTranslate(x, y) {
            const m = this._transformMatrix;
            m[4] = m[0] * x + m[2] * y + m[4];
            m[5] = m[1] * x + m[3] * y + m[5];

            this._originalTranslate(x, y);
          };

          ctx.scale = function ctxScale(x, y) {
            const m = this._transformMatrix;
            m[0] *= x;
            m[1] *= x;
            m[2] *= y;
            m[3] *= y;

            this._originalScale(x, y);
          };

          ctx.transform = function ctxTransform(a, b, c, d, e, f) {
            const m = this._transformMatrix;
            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];

            ctx._originalTransform(a, b, c, d, e, f);
          };

          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
            this._transformMatrix = [a, b, c, d, e, f];

            ctx._originalSetTransform(a, b, c, d, e, f);
          };

          ctx.resetTransform = function ctxResetTransform() {
            this._transformMatrix = [1, 0, 0, 1, 0, 0];

            ctx._originalResetTransform();
          };

          ctx.rotate = function ctxRotate(angle) {
            const cosValue = Math.cos(angle);
            const sinValue = Math.sin(angle);
            const m = this._transformMatrix;
            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];

            this._originalRotate(angle);
          };
        }

        class CachedCanvases {
          constructor(canvasFactory) {
            this.canvasFactory = canvasFactory;
            this.cache = Object.create(null);
          }

          getCanvas(id, width, height, trackTransform) {
            let canvasEntry;

            if (this.cache[id] !== undefined) {
              canvasEntry = this.cache[id];
              this.canvasFactory.reset(canvasEntry, width, height);
              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
            } else {
              canvasEntry = this.canvasFactory.create(width, height);
              this.cache[id] = canvasEntry;
            }

            if (trackTransform) {
              addContextCurrentTransform(canvasEntry.context);
            }

            return canvasEntry;
          }

          delete(id) {
            delete this.cache[id];
          }

          clear() {
            for (const id in this.cache) {
              const canvasEntry = this.cache[id];
              this.canvasFactory.destroy(canvasEntry);
              delete this.cache[id];
            }
          }

        }

        function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {
          const [a, b, c, d, tx, ty] = ctx.mozCurrentTransform;

          if (b === 0 && c === 0) {
            const tlX = destX * a + tx;
            const rTlX = Math.round(tlX);
            const tlY = destY * d + ty;
            const rTlY = Math.round(tlY);
            const brX = (destX + destW) * a + tx;
            const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
            const brY = (destY + destH) * d + ty;
            const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
            ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);
            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);
            ctx.setTransform(a, b, c, d, tx, ty);
            return [rWidth, rHeight];
          }

          if (a === 0 && d === 0) {
            const tlX = destY * c + tx;
            const rTlX = Math.round(tlX);
            const tlY = destX * b + ty;
            const rTlY = Math.round(tlY);
            const brX = (destY + destH) * c + tx;
            const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
            const brY = (destX + destW) * b + ty;
            const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
            ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);
            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);
            ctx.setTransform(a, b, c, d, tx, ty);
            return [rHeight, rWidth];
          }

          ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
          const scaleX = Math.hypot(a, b);
          const scaleY = Math.hypot(c, d);
          return [scaleX * destW, scaleY * destH];
        }

        function compileType3Glyph(imgData) {
          const {
            width,
            height
          } = imgData;

          if (!COMPILE_TYPE3_GLYPHS || width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {
            return null;
          }

          const POINT_TO_PROCESS_LIMIT = 1000;
          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
          const width1 = width + 1;
          let points = new Uint8Array(width1 * (height + 1));
          let i, j, j0;
          const lineSize = width + 7 & ~7;
          let data = new Uint8Array(lineSize * height),
              pos = 0;

          for (const elem of imgData.data) {
            let mask = 128;

            while (mask > 0) {
              data[pos++] = elem & mask ? 0 : 255;
              mask >>= 1;
            }
          }

          let count = 0;
          pos = 0;

          if (data[pos] !== 0) {
            points[0] = 1;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j] = data[pos] ? 2 : 1;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j] = 2;
            ++count;
          }

          for (i = 1; i < height; i++) {
            pos = i * lineSize;
            j0 = i * width1;

            if (data[pos - lineSize] !== data[pos]) {
              points[j0] = data[pos] ? 1 : 8;
              ++count;
            }

            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);

            for (j = 1; j < width; j++) {
              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);

              if (POINT_TYPES[sum]) {
                points[j0 + j] = POINT_TYPES[sum];
                ++count;
              }

              pos++;
            }

            if (data[pos - lineSize] !== data[pos]) {
              points[j0 + j] = data[pos] ? 2 : 4;
              ++count;
            }

            if (count > POINT_TO_PROCESS_LIMIT) {
              return null;
            }
          }

          pos = lineSize * (height - 1);
          j0 = i * width1;

          if (data[pos] !== 0) {
            points[j0] = 8;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j0 + j] = data[pos] ? 4 : 8;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j0 + j] = 4;
            ++count;
          }

          if (count > POINT_TO_PROCESS_LIMIT) {
            return null;
          }

          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
          let path, outlines, coords;

          if (!_is_node.isNodeJS) {
            path = new Path2D();
          } else {
            outlines = [];
          }

          for (i = 0; count && i <= height; i++) {
            let p = i * width1;
            const end = p + width;

            while (p < end && !points[p]) {
              p++;
            }

            if (p === end) {
              continue;
            }

            if (path) {
              path.moveTo(p % width1, i);
            } else {
              coords = [p % width1, i];
            }

            const p0 = p;
            let type = points[p];

            do {
              const step = steps[type];

              do {
                p += step;
              } while (!points[p]);

              const pp = points[p];

              if (pp !== 5 && pp !== 10) {
                type = pp;
                points[p] = 0;
              } else {
                type = pp & 0x33 * type >> 4;
                points[p] &= type >> 2 | type << 2;
              }

              if (path) {
                path.lineTo(p % width1, p / width1 | 0);
              } else {
                coords.push(p % width1, p / width1 | 0);
              }

              if (!points[p]) {
                --count;
              }
            } while (p0 !== p);

            if (!path) {
              outlines.push(coords);
            }

            --i;
          }

          data = null;
          points = null;

          const drawOutline = function (c) {
            c.save();
            c.scale(1 / width, -1 / height);
            c.translate(0, -height);

            if (path) {
              c.fill(path);
            } else {
              c.beginPath();

              for (const o of outlines) {
                c.moveTo(o[0], o[1]);

                for (let l = 2, ll = o.length; l < ll; l += 2) {
                  c.lineTo(o[l], o[l + 1]);
                }
              }

              c.fill();
            }

            c.beginPath();
            c.restore();
          };

          return drawOutline;
        }

        class CanvasExtraState {
          constructor(width, height) {
            this.alphaIsShape = false;
            this.fontSize = 0;
            this.fontSizeScale = 1;
            this.textMatrix = _util.IDENTITY_MATRIX;
            this.textMatrixScale = 1;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.leading = 0;
            this.x = 0;
            this.y = 0;
            this.lineX = 0;
            this.lineY = 0;
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.textHScale = 1;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.textRise = 0;
            this.fillColor = "#000000";
            this.strokeColor = "#000000";
            this.patternFill = false;
            this.fillAlpha = 1;
            this.strokeAlpha = 1;
            this.lineWidth = 1;
            this.activeSMask = null;
            this.transferMaps = null;
            this.startNewPathAndClipBox([0, 0, width, height]);
          }

          clone() {
            const clone = Object.create(this);
            clone.clipBox = this.clipBox.slice();
            return clone;
          }

          setCurrentPoint(x, y) {
            this.x = x;
            this.y = y;
          }

          updatePathMinMax(transform, x, y) {
            [x, y] = _util.Util.applyTransform([x, y], transform);
            this.minX = Math.min(this.minX, x);
            this.minY = Math.min(this.minY, y);
            this.maxX = Math.max(this.maxX, x);
            this.maxY = Math.max(this.maxY, y);
          }

          updateRectMinMax(transform, rect) {
            const p1 = _util.Util.applyTransform(rect, transform);

            const p2 = _util.Util.applyTransform(rect.slice(2), transform);

            this.minX = Math.min(this.minX, p1[0], p2[0]);
            this.minY = Math.min(this.minY, p1[1], p2[1]);
            this.maxX = Math.max(this.maxX, p1[0], p2[0]);
            this.maxY = Math.max(this.maxY, p1[1], p2[1]);
          }

          updateScalingPathMinMax(transform, minMax) {
            _util.Util.scaleMinMax(transform, minMax);

            this.minX = Math.min(this.minX, minMax[0]);
            this.maxX = Math.max(this.maxX, minMax[1]);
            this.minY = Math.min(this.minY, minMax[2]);
            this.maxY = Math.max(this.maxY, minMax[3]);
          }

          updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
            const box = _util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);

            if (minMax) {
              minMax[0] = Math.min(minMax[0], box[0], box[2]);
              minMax[1] = Math.max(minMax[1], box[0], box[2]);
              minMax[2] = Math.min(minMax[2], box[1], box[3]);
              minMax[3] = Math.max(minMax[3], box[1], box[3]);
              return;
            }

            this.updateRectMinMax(transform, box);
          }

          getPathBoundingBox(pathType = _pattern_helper.PathType.FILL, transform = null) {
            const box = [this.minX, this.minY, this.maxX, this.maxY];

            if (pathType === _pattern_helper.PathType.STROKE) {
              if (!transform) {
                (0, _util.unreachable)("Stroke bounding box must include transform.");
              }

              const scale = _util.Util.singularValueDecompose2dScale(transform);

              const xStrokePad = scale[0] * this.lineWidth / 2;
              const yStrokePad = scale[1] * this.lineWidth / 2;
              box[0] -= xStrokePad;
              box[1] -= yStrokePad;
              box[2] += xStrokePad;
              box[3] += yStrokePad;
            }

            return box;
          }

          updateClipFromPath() {
            const intersect = _util.Util.intersect(this.clipBox, this.getPathBoundingBox());

            this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
          }

          isEmptyClip() {
            return this.minX === Infinity;
          }

          startNewPathAndClipBox(box) {
            this.clipBox = box;
            this.minX = Infinity;
            this.minY = Infinity;
            this.maxX = 0;
            this.maxY = 0;
          }

          getClippedPathBoundingBox(pathType = _pattern_helper.PathType.FILL, transform = null) {
            return _util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));
          }

        }

        function putBinaryImageData(ctx, imgData, transferMaps = null) {
          if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
            ctx.putImageData(imgData, 0, 0);
            return;
          }

          const height = imgData.height,
                width = imgData.width;
          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
          let srcPos = 0,
              destPos;
          const src = imgData.data;
          const dest = chunkImgData.data;
          let i, j, thisChunkHeight, elemsInThisChunk;
          let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;

          if (transferMaps) {
            switch (transferMaps.length) {
              case 1:
                transferMapRed = transferMaps[0];
                transferMapGreen = transferMaps[0];
                transferMapBlue = transferMaps[0];
                transferMapGray = transferMaps[0];
                break;

              case 4:
                transferMapRed = transferMaps[0];
                transferMapGreen = transferMaps[1];
                transferMapBlue = transferMaps[2];
                transferMapGray = transferMaps[3];
                break;
            }
          }

          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
            const srcLength = src.byteLength;
            const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
            const dest32DataLength = dest32.length;
            const fullSrcDiff = width + 7 >> 3;
            let white = 0xffffffff;
            let black = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;

            if (transferMapGray) {
              if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {
                [white, black] = [black, white];
              }
            }

            for (i = 0; i < totalChunks; i++) {
              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
              destPos = 0;

              for (j = 0; j < thisChunkHeight; j++) {
                const srcDiff = srcLength - srcPos;
                let k = 0;
                const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                const kEndUnrolled = kEnd & ~7;
                let mask = 0;
                let srcByte = 0;

                for (; k < kEndUnrolled; k += 8) {
                  srcByte = src[srcPos++];
                  dest32[destPos++] = srcByte & 128 ? white : black;
                  dest32[destPos++] = srcByte & 64 ? white : black;
                  dest32[destPos++] = srcByte & 32 ? white : black;
                  dest32[destPos++] = srcByte & 16 ? white : black;
                  dest32[destPos++] = srcByte & 8 ? white : black;
                  dest32[destPos++] = srcByte & 4 ? white : black;
                  dest32[destPos++] = srcByte & 2 ? white : black;
                  dest32[destPos++] = srcByte & 1 ? white : black;
                }

                for (; k < kEnd; k++) {
                  if (mask === 0) {
                    srcByte = src[srcPos++];
                    mask = 128;
                  }

                  dest32[destPos++] = srcByte & mask ? white : black;
                  mask >>= 1;
                }
              }

              while (destPos < dest32DataLength) {
                dest32[destPos++] = 0;
              }

              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
            j = 0;
            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;

            for (i = 0; i < fullChunks; i++) {
              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
              srcPos += elemsInThisChunk;

              if (hasTransferMaps) {
                for (let k = 0; k < elemsInThisChunk; k += 4) {
                  if (transferMapRed) {
                    dest[k + 0] = transferMapRed[dest[k + 0]];
                  }

                  if (transferMapGreen) {
                    dest[k + 1] = transferMapGreen[dest[k + 1]];
                  }

                  if (transferMapBlue) {
                    dest[k + 2] = transferMapBlue[dest[k + 2]];
                  }
                }
              }

              ctx.putImageData(chunkImgData, 0, j);
              j += FULL_CHUNK_HEIGHT;
            }

            if (i < totalChunks) {
              elemsInThisChunk = width * partialChunkHeight * 4;
              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));

              if (hasTransferMaps) {
                for (let k = 0; k < elemsInThisChunk; k += 4) {
                  if (transferMapRed) {
                    dest[k + 0] = transferMapRed[dest[k + 0]];
                  }

                  if (transferMapGreen) {
                    dest[k + 1] = transferMapGreen[dest[k + 1]];
                  }

                  if (transferMapBlue) {
                    dest[k + 2] = transferMapBlue[dest[k + 2]];
                  }
                }
              }

              ctx.putImageData(chunkImgData, 0, j);
            }
          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
            thisChunkHeight = FULL_CHUNK_HEIGHT;
            elemsInThisChunk = width * thisChunkHeight;

            for (i = 0; i < totalChunks; i++) {
              if (i >= fullChunks) {
                thisChunkHeight = partialChunkHeight;
                elemsInThisChunk = width * thisChunkHeight;
              }

              destPos = 0;

              for (j = elemsInThisChunk; j--;) {
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = 255;
              }

              if (hasTransferMaps) {
                for (let k = 0; k < destPos; k += 4) {
                  if (transferMapRed) {
                    dest[k + 0] = transferMapRed[dest[k + 0]];
                  }

                  if (transferMapGreen) {
                    dest[k + 1] = transferMapGreen[dest[k + 1]];
                  }

                  if (transferMapBlue) {
                    dest[k + 2] = transferMapBlue[dest[k + 2]];
                  }
                }
              }

              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          } else {
            throw new Error(`bad image kind: ${imgData.kind}`);
          }
        }

        function putBinaryImageMask(ctx, imgData) {
          if (imgData.bitmap) {
            ctx.drawImage(imgData.bitmap, 0, 0);
            return;
          }

          const height = imgData.height,
                width = imgData.width;
          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
          let srcPos = 0;
          const src = imgData.data;
          const dest = chunkImgData.data;

          for (let i = 0; i < totalChunks; i++) {
            const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
            ({
              srcPos
            } = (0, _image_utils.applyMaskImageData)({
              src,
              srcPos,
              dest,
              width,
              height: thisChunkHeight
            }));
            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
          }
        }

        function copyCtxState(sourceCtx, destCtx) {
          const properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];

          for (let i = 0, ii = properties.length; i < ii; i++) {
            const property = properties[i];

            if (sourceCtx[property] !== undefined) {
              destCtx[property] = sourceCtx[property];
            }
          }

          if (sourceCtx.setLineDash !== undefined) {
            destCtx.setLineDash(sourceCtx.getLineDash());
            destCtx.lineDashOffset = sourceCtx.lineDashOffset;
          }
        }

        function resetCtxToDefault(ctx, foregroundColor) {
          ctx.strokeStyle = ctx.fillStyle = foregroundColor || "#000000";
          ctx.fillRule = "nonzero";
          ctx.globalAlpha = 1;
          ctx.lineWidth = 1;
          ctx.lineCap = "butt";
          ctx.lineJoin = "miter";
          ctx.miterLimit = 10;
          ctx.globalCompositeOperation = "source-over";
          ctx.font = "10px sans-serif";

          if (ctx.setLineDash !== undefined) {
            ctx.setLineDash([]);
            ctx.lineDashOffset = 0;
          }
        }

        function composeSMaskBackdrop(bytes, r0, g0, b0) {
          const length = bytes.length;

          for (let i = 3; i < length; i += 4) {
            const alpha = bytes[i];

            if (alpha === 0) {
              bytes[i - 3] = r0;
              bytes[i - 2] = g0;
              bytes[i - 1] = b0;
            } else if (alpha < 255) {
              const alpha_ = 255 - alpha;
              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
            }
          }
        }

        function composeSMaskAlpha(maskData, layerData, transferMap) {
          const length = maskData.length;
          const scale = 1 / 255;

          for (let i = 3; i < length; i += 4) {
            const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
            layerData[i] = layerData[i] * alpha * scale | 0;
          }
        }

        function composeSMaskLuminosity(maskData, layerData, transferMap) {
          const length = maskData.length;

          for (let i = 3; i < length; i += 4) {
            const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
          }
        }

        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {
          const hasBackdrop = !!backdrop;
          const r0 = hasBackdrop ? backdrop[0] : 0;
          const g0 = hasBackdrop ? backdrop[1] : 0;
          const b0 = hasBackdrop ? backdrop[2] : 0;
          let composeFn;

          if (subtype === "Luminosity") {
            composeFn = composeSMaskLuminosity;
          } else {
            composeFn = composeSMaskAlpha;
          }

          const PIXELS_TO_PROCESS = 1048576;
          const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));

          for (let row = 0; row < height; row += chunkSize) {
            const chunkHeight = Math.min(chunkSize, height - row);
            const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);
            const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);

            if (hasBackdrop) {
              composeSMaskBackdrop(maskData.data, r0, g0, b0);
            }

            composeFn(maskData.data, layerData.data, transferMap);
            layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
          }
        }

        function composeSMask(ctx, smask, layerCtx, layerBox) {
          const layerOffsetX = layerBox[0];
          const layerOffsetY = layerBox[1];
          const layerWidth = layerBox[2] - layerOffsetX;
          const layerHeight = layerBox[3] - layerOffsetY;

          if (layerWidth === 0 || layerHeight === 0) {
            return;
          }

          genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);
          ctx.save();
          ctx.globalAlpha = 1;
          ctx.globalCompositeOperation = "source-over";
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(layerCtx.canvas, 0, 0);
          ctx.restore();
        }

        function getImageSmoothingEnabled(transform, interpolate) {
          const scale = _util.Util.singularValueDecompose2dScale(transform);

          scale[0] = Math.fround(scale[0]);
          scale[1] = Math.fround(scale[1]);
          const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);

          if (interpolate !== undefined) {
            return interpolate;
          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {
            return true;
          }

          return false;
        }

        const LINE_CAP_STYLES = ["butt", "round", "square"];
        const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
        const NORMAL_CLIP = {};
        const EO_CLIP = {};

        class CanvasGraphics {
          constructor(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig, annotationCanvasMap, pageColors) {
            this.ctx = canvasCtx;
            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
            this.stateStack = [];
            this.pendingClip = null;
            this.pendingEOFill = false;
            this.res = null;
            this.xobjs = null;
            this.commonObjs = commonObjs;
            this.objs = objs;
            this.canvasFactory = canvasFactory;
            this.imageLayer = imageLayer;
            this.groupStack = [];
            this.processingType3 = null;
            this.baseTransform = null;
            this.baseTransformStack = [];
            this.groupLevel = 0;
            this.smaskStack = [];
            this.smaskCounter = 0;
            this.tempSMask = null;
            this.suspendedCtx = null;
            this.contentVisible = true;
            this.markedContentStack = [];
            this.optionalContentConfig = optionalContentConfig;
            this.cachedCanvases = new CachedCanvases(this.canvasFactory);
            this.cachedPatterns = new Map();
            this.annotationCanvasMap = annotationCanvasMap;
            this.viewportScale = 1;
            this.outputScaleX = 1;
            this.outputScaleY = 1;
            this.backgroundColor = pageColors?.background || null;
            this.foregroundColor = pageColors?.foreground || null;

            if (canvasCtx) {
              addContextCurrentTransform(canvasCtx);
            }

            this._cachedScaleForStroking = null;
            this._cachedGetSinglePixelWidth = null;
            this._cachedBitmapsMap = new Map();
          }

          getObject(data, fallback = null) {
            if (typeof data === "string") {
              return data.startsWith("g_") ? this.commonObjs.get(data) : this.objs.get(data);
            }

            return fallback;
          }

          beginDrawing({
            transform,
            viewport,
            transparency = false,
            background = null
          }) {
            const width = this.ctx.canvas.width;
            const height = this.ctx.canvas.height;
            const defaultBackgroundColor = background || "#ffffff";
            this.ctx.save();

            if (this.foregroundColor && this.backgroundColor) {
              this.ctx.fillStyle = this.foregroundColor;
              const fg = this.foregroundColor = this.ctx.fillStyle;
              this.ctx.fillStyle = this.backgroundColor;
              const bg = this.backgroundColor = this.ctx.fillStyle;
              let isValidDefaultBg = true;
              let defaultBg = defaultBackgroundColor;
              this.ctx.fillStyle = defaultBackgroundColor;
              defaultBg = this.ctx.fillStyle;
              isValidDefaultBg = typeof defaultBg === "string" && /^#[0-9A-Fa-f]{6}$/.test(defaultBg);

              if (fg === "#000000" && bg === "#ffffff" || fg === bg || !isValidDefaultBg) {
                this.foregroundColor = this.backgroundColor = null;
              } else {
                const cB = parseInt(defaultBg.slice(1), 16);
                const rB = (cB && 0xff0000) >> 16;
                const gB = (cB && 0x00ff00) >> 8;
                const bB = cB && 0x0000ff;

                const newComp = x => {
                  x /= 255;
                  return x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;
                };

                const lumB = Math.round(0.2126 * newComp(rB) + 0.7152 * newComp(gB) + 0.0722 * newComp(bB));

                this.selectColor = (r, g, b) => {
                  const lumC = 0.2126 * newComp(r) + 0.7152 * newComp(g) + 0.0722 * newComp(b);
                  return Math.round(lumC) === lumB ? bg : fg;
                };
              }
            }

            this.ctx.fillStyle = this.backgroundColor || defaultBackgroundColor;
            this.ctx.fillRect(0, 0, width, height);
            this.ctx.restore();

            if (transparency) {
              const transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);
              this.compositeCtx = this.ctx;
              this.transparentCanvas = transparentCanvas.canvas;
              this.ctx = transparentCanvas.context;
              this.ctx.save();
              this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
            }

            this.ctx.save();
            resetCtxToDefault(this.ctx, this.foregroundColor);

            if (transform) {
              this.ctx.transform.apply(this.ctx, transform);
              this.outputScaleX = transform[0];
              this.outputScaleY = transform[0];
            }

            this.ctx.transform.apply(this.ctx, viewport.transform);
            this.viewportScale = viewport.scale;
            this.baseTransform = this.ctx.mozCurrentTransform.slice();

            if (this.imageLayer) {
              this.imageLayer.beginLayout();
            }
          }

          executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
            const argsArray = operatorList.argsArray;
            const fnArray = operatorList.fnArray;
            let i = executionStartIdx || 0;
            const argsArrayLen = argsArray.length;

            if (argsArrayLen === i) {
              return i;
            }

            const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
            const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
            let steps = 0;
            const commonObjs = this.commonObjs;
            const objs = this.objs;
            let fnId;

            while (true) {
              if (stepper !== undefined && i === stepper.nextBreakPoint) {
                stepper.breakIt(i, continueCallback);
                return i;
              }

              fnId = fnArray[i];

              if (fnId !== _util.OPS.dependency) {
                this[fnId].apply(this, argsArray[i]);
              } else {
                for (const depObjId of argsArray[i]) {
                  const objsPool = depObjId.startsWith("g_") ? commonObjs : objs;

                  if (!objsPool.has(depObjId)) {
                    objsPool.get(depObjId, continueCallback);
                    return i;
                  }
                }
              }

              i++;

              if (i === argsArrayLen) {
                return i;
              }

              if (chunkOperations && ++steps > EXECUTION_STEPS) {
                if (Date.now() > endTime) {
                  continueCallback();
                  return i;
                }

                steps = 0;
              }
            }
          }

          endDrawing() {
            while (this.stateStack.length || this.inSMaskMode) {
              this.restore();
            }

            this.ctx.restore();

            if (this.transparentCanvas) {
              this.ctx = this.compositeCtx;
              this.ctx.save();
              this.ctx.setTransform(1, 0, 0, 1, 0, 0);
              this.ctx.drawImage(this.transparentCanvas, 0, 0);
              this.ctx.restore();
              this.transparentCanvas = null;
            }

            this.cachedCanvases.clear();
            this.cachedPatterns.clear();

            for (const cache of this._cachedBitmapsMap.values()) {
              for (const canvas of cache.values()) {
                if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
                  canvas.width = canvas.height = 0;
                }
              }

              cache.clear();
            }

            this._cachedBitmapsMap.clear();

            if (this.imageLayer) {
              this.imageLayer.endLayout();
            }
          }

          _scaleImage(img, inverseTransform) {
            const width = img.width;
            const height = img.height;
            let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
            let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
            let paintWidth = width,
                paintHeight = height;
            let tmpCanvasId = "prescale1";
            let tmpCanvas, tmpCtx;

            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
              let newWidth = paintWidth,
                  newHeight = paintHeight;

              if (widthScale > 2 && paintWidth > 1) {
                newWidth = Math.ceil(paintWidth / 2);
                widthScale /= paintWidth / newWidth;
              }

              if (heightScale > 2 && paintHeight > 1) {
                newHeight = Math.ceil(paintHeight / 2);
                heightScale /= paintHeight / newHeight;
              }

              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight, false);
              tmpCtx = tmpCanvas.context;
              tmpCtx.clearRect(0, 0, newWidth, newHeight);
              tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
              img = tmpCanvas.canvas;
              paintWidth = newWidth;
              paintHeight = newHeight;
              tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
            }

            return {
              img,
              paintWidth,
              paintHeight
            };
          }

          _createMaskCanvas(img) {
            const ctx = this.ctx;
            const {
              width,
              height
            } = img;
            const fillColor = this.current.fillColor;
            const isPatternFill = this.current.patternFill;
            const currentTransform = ctx.mozCurrentTransform;
            let cache, cacheKey, scaled, maskCanvas;

            if ((img.bitmap || img.data) && img.count > 1) {
              const mainKey = img.bitmap || img.data.buffer;
              const withoutTranslation = currentTransform.slice(0, 4);
              cacheKey = JSON.stringify(isPatternFill ? withoutTranslation : [withoutTranslation, fillColor]);
              cache = this._cachedBitmapsMap.get(mainKey);

              if (!cache) {
                cache = new Map();

                this._cachedBitmapsMap.set(mainKey, cache);
              }

              const cachedImage = cache.get(cacheKey);

              if (cachedImage && !isPatternFill) {
                const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);
                const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);
                return {
                  canvas: cachedImage,
                  offsetX,
                  offsetY
                };
              }

              scaled = cachedImage;
            }

            if (!scaled) {
              maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height, false);
              putBinaryImageMask(maskCanvas.context, img);
            }

            let maskToCanvas = _util.Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);

            maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);

            const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);

            const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);

            const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);

            const drawnWidth = Math.round(rect[2] - rect[0]) || 1;
            const drawnHeight = Math.round(rect[3] - rect[1]) || 1;
            const fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight, true);
            const fillCtx = fillCanvas.context;
            const offsetX = Math.min(cord1[0], cord2[0]);
            const offsetY = Math.min(cord1[1], cord2[1]);
            fillCtx.translate(-offsetX, -offsetY);
            fillCtx.transform.apply(fillCtx, maskToCanvas);

            if (!scaled) {
              scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);
              scaled = scaled.img;

              if (cache && isPatternFill) {
                cache.set(cacheKey, scaled);
              }
            }

            fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(fillCtx.mozCurrentTransform, img.interpolate);
            drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);
            fillCtx.globalCompositeOperation = "source-in";

            const inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);

            fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;
            fillCtx.fillRect(0, 0, width, height);

            if (cache && !isPatternFill) {
              this.cachedCanvases.delete("fillCanvas");
              cache.set(cacheKey, fillCanvas.canvas);
            }

            return {
              canvas: fillCanvas.canvas,
              offsetX: Math.round(offsetX),
              offsetY: Math.round(offsetY)
            };
          }

          setLineWidth(width) {
            if (width !== this.current.lineWidth) {
              this._cachedScaleForStroking = null;
            }

            this.current.lineWidth = width;
            this.ctx.lineWidth = width;
          }

          setLineCap(style) {
            this.ctx.lineCap = LINE_CAP_STYLES[style];
          }

          setLineJoin(style) {
            this.ctx.lineJoin = LINE_JOIN_STYLES[style];
          }

          setMiterLimit(limit) {
            this.ctx.miterLimit = limit;
          }

          setDash(dashArray, dashPhase) {
            const ctx = this.ctx;

            if (ctx.setLineDash !== undefined) {
              ctx.setLineDash(dashArray);
              ctx.lineDashOffset = dashPhase;
            }
          }

          setRenderingIntent(intent) {}

          setFlatness(flatness) {}

          setGState(states) {
            for (let i = 0, ii = states.length; i < ii; i++) {
              const state = states[i];
              const key = state[0];
              const value = state[1];

              switch (key) {
                case "LW":
                  this.setLineWidth(value);
                  break;

                case "LC":
                  this.setLineCap(value);
                  break;

                case "LJ":
                  this.setLineJoin(value);
                  break;

                case "ML":
                  this.setMiterLimit(value);
                  break;

                case "D":
                  this.setDash(value[0], value[1]);
                  break;

                case "RI":
                  this.setRenderingIntent(value);
                  break;

                case "FL":
                  this.setFlatness(value);
                  break;

                case "Font":
                  this.setFont(value[0], value[1]);
                  break;

                case "CA":
                  this.current.strokeAlpha = state[1];
                  break;

                case "ca":
                  this.current.fillAlpha = state[1];
                  this.ctx.globalAlpha = state[1];
                  break;

                case "BM":
                  this.ctx.globalCompositeOperation = value;
                  break;

                case "SMask":
                  this.current.activeSMask = value ? this.tempSMask : null;
                  this.tempSMask = null;
                  this.checkSMaskState();
                  break;

                case "TR":
                  this.current.transferMaps = value;
              }
            }
          }

          get inSMaskMode() {
            return !!this.suspendedCtx;
          }

          checkSMaskState() {
            const inSMaskMode = this.inSMaskMode;

            if (this.current.activeSMask && !inSMaskMode) {
              this.beginSMaskMode();
            } else if (!this.current.activeSMask && inSMaskMode) {
              this.endSMaskMode();
            }
          }

          beginSMaskMode() {
            if (this.inSMaskMode) {
              throw new Error("beginSMaskMode called while already in smask mode");
            }

            const drawnWidth = this.ctx.canvas.width;
            const drawnHeight = this.ctx.canvas.height;
            const cacheId = "smaskGroupAt" + this.groupLevel;
            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
            this.suspendedCtx = this.ctx;
            this.ctx = scratchCanvas.context;
            const ctx = this.ctx;
            ctx.setTransform.apply(ctx, this.suspendedCtx.mozCurrentTransform);
            copyCtxState(this.suspendedCtx, ctx);
            mirrorContextOperations(ctx, this.suspendedCtx);
            this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
          }

          endSMaskMode() {
            if (!this.inSMaskMode) {
              throw new Error("endSMaskMode called while not in smask mode");
            }

            this.ctx._removeMirroring();

            copyCtxState(this.ctx, this.suspendedCtx);
            this.ctx = this.suspendedCtx;
            this.suspendedCtx = null;
          }

          compose(dirtyBox) {
            if (!this.current.activeSMask) {
              return;
            }

            if (!dirtyBox) {
              dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
            } else {
              dirtyBox[0] = Math.floor(dirtyBox[0]);
              dirtyBox[1] = Math.floor(dirtyBox[1]);
              dirtyBox[2] = Math.ceil(dirtyBox[2]);
              dirtyBox[3] = Math.ceil(dirtyBox[3]);
            }

            const smask = this.current.activeSMask;
            const suspendedCtx = this.suspendedCtx;
            composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
            this.ctx.save();
            this.ctx.setTransform(1, 0, 0, 1, 0, 0);
            this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
            this.ctx.restore();
          }

          save() {
            if (this.inSMaskMode) {
              copyCtxState(this.ctx, this.suspendedCtx);
              this.suspendedCtx.save();
            } else {
              this.ctx.save();
            }

            const old = this.current;
            this.stateStack.push(old);
            this.current = old.clone();
          }

          restore() {
            if (this.stateStack.length === 0 && this.inSMaskMode) {
              this.endSMaskMode();
            }

            if (this.stateStack.length !== 0) {
              this.current = this.stateStack.pop();

              if (this.inSMaskMode) {
                this.suspendedCtx.restore();
                copyCtxState(this.suspendedCtx, this.ctx);
              } else {
                this.ctx.restore();
              }

              this.checkSMaskState();
              this.pendingClip = null;
              this._cachedScaleForStroking = null;
              this._cachedGetSinglePixelWidth = null;
            }
          }

          transform(a, b, c, d, e, f) {
            this.ctx.transform(a, b, c, d, e, f);
            this._cachedScaleForStroking = null;
            this._cachedGetSinglePixelWidth = null;
          }

          constructPath(ops, args, minMax) {
            const ctx = this.ctx;
            const current = this.current;
            let x = current.x,
                y = current.y;
            let startX, startY;
            const currentTransform = ctx.mozCurrentTransform;
            const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;
            const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;

            for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {
              switch (ops[i] | 0) {
                case _util.OPS.rectangle:
                  x = args[j++];
                  y = args[j++];
                  const width = args[j++];
                  const height = args[j++];
                  const xw = x + width;
                  const yh = y + height;
                  ctx.moveTo(x, y);

                  if (width === 0 || height === 0) {
                    ctx.lineTo(xw, yh);
                  } else {
                    ctx.lineTo(xw, y);
                    ctx.lineTo(xw, yh);
                    ctx.lineTo(x, yh);
                  }

                  if (!isScalingMatrix) {
                    current.updateRectMinMax(currentTransform, [x, y, xw, yh]);
                  }

                  ctx.closePath();
                  break;

                case _util.OPS.moveTo:
                  x = args[j++];
                  y = args[j++];
                  ctx.moveTo(x, y);

                  if (!isScalingMatrix) {
                    current.updatePathMinMax(currentTransform, x, y);
                  }

                  break;

                case _util.OPS.lineTo:
                  x = args[j++];
                  y = args[j++];
                  ctx.lineTo(x, y);

                  if (!isScalingMatrix) {
                    current.updatePathMinMax(currentTransform, x, y);
                  }

                  break;

                case _util.OPS.curveTo:
                  startX = x;
                  startY = y;
                  x = args[j + 4];
                  y = args[j + 5];
                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                  current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);
                  j += 6;
                  break;

                case _util.OPS.curveTo2:
                  startX = x;
                  startY = y;
                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                  current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);
                  x = args[j + 2];
                  y = args[j + 3];
                  j += 4;
                  break;

                case _util.OPS.curveTo3:
                  startX = x;
                  startY = y;
                  x = args[j + 2];
                  y = args[j + 3];
                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                  current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);
                  j += 4;
                  break;

                case _util.OPS.closePath:
                  ctx.closePath();
                  break;
              }
            }

            if (isScalingMatrix) {
              current.updateScalingPathMinMax(currentTransform, minMaxForBezier);
            }

            current.setCurrentPoint(x, y);
          }

          closePath() {
            this.ctx.closePath();
          }

          stroke(consumePath) {
            consumePath = typeof consumePath !== "undefined" ? consumePath : true;
            const ctx = this.ctx;
            const strokeColor = this.current.strokeColor;
            ctx.globalAlpha = this.current.strokeAlpha;

            if (this.contentVisible) {
              if (typeof strokeColor === "object" && strokeColor?.getPattern) {
                ctx.save();
                ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.STROKE);
                this.rescaleAndStroke(false);
                ctx.restore();
              } else {
                this.rescaleAndStroke(true);
              }
            }

            if (consumePath) {
              this.consumePath(this.current.getClippedPathBoundingBox());
            }

            ctx.globalAlpha = this.current.fillAlpha;
          }

          closeStroke() {
            this.closePath();
            this.stroke();
          }

          fill(consumePath) {
            consumePath = typeof consumePath !== "undefined" ? consumePath : true;
            const ctx = this.ctx;
            const fillColor = this.current.fillColor;
            const isPatternFill = this.current.patternFill;
            let needRestore = false;

            if (isPatternFill) {
              ctx.save();
              ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);
              needRestore = true;
            }

            const intersect = this.current.getClippedPathBoundingBox();

            if (this.contentVisible && intersect !== null) {
              if (this.pendingEOFill) {
                ctx.fill("evenodd");
                this.pendingEOFill = false;
              } else {
                ctx.fill();
              }
            }

            if (needRestore) {
              ctx.restore();
            }

            if (consumePath) {
              this.consumePath(intersect);
            }
          }

          eoFill() {
            this.pendingEOFill = true;
            this.fill();
          }

          fillStroke() {
            this.fill(false);
            this.stroke(false);
            this.consumePath();
          }

          eoFillStroke() {
            this.pendingEOFill = true;
            this.fillStroke();
          }

          closeFillStroke() {
            this.closePath();
            this.fillStroke();
          }

          closeEOFillStroke() {
            this.pendingEOFill = true;
            this.closePath();
            this.fillStroke();
          }

          endPath() {
            this.consumePath();
          }

          clip() {
            this.pendingClip = NORMAL_CLIP;
          }

          eoClip() {
            this.pendingClip = EO_CLIP;
          }

          beginText() {
            this.current.textMatrix = _util.IDENTITY_MATRIX;
            this.current.textMatrixScale = 1;
            this.current.x = this.current.lineX = 0;
            this.current.y = this.current.lineY = 0;
          }

          endText() {
            const paths = this.pendingTextPaths;
            const ctx = this.ctx;

            if (paths === undefined) {
              ctx.beginPath();
              return;
            }

            ctx.save();
            ctx.beginPath();

            for (let i = 0; i < paths.length; i++) {
              const path = paths[i];
              ctx.setTransform.apply(ctx, path.transform);
              ctx.translate(path.x, path.y);
              path.addToPath(ctx, path.fontSize);
            }

            ctx.restore();
            ctx.clip();
            ctx.beginPath();
            delete this.pendingTextPaths;
          }

          setCharSpacing(spacing) {
            this.current.charSpacing = spacing;
          }

          setWordSpacing(spacing) {
            this.current.wordSpacing = spacing;
          }

          setHScale(scale) {
            this.current.textHScale = scale / 100;
          }

          setLeading(leading) {
            this.current.leading = -leading;
          }

          setFont(fontRefName, size) {
            const fontObj = this.commonObjs.get(fontRefName);
            const current = this.current;

            if (!fontObj) {
              throw new Error(`Can't find font for ${fontRefName}`);
            }

            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;

            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
              (0, _util.warn)("Invalid font matrix for font " + fontRefName);
            }

            if (size < 0) {
              size = -size;
              current.fontDirection = -1;
            } else {
              current.fontDirection = 1;
            }

            this.current.font = fontObj;
            this.current.fontSize = size;

            if (fontObj.isType3Font) {
              return;
            }

            const name = fontObj.loadedName || "sans-serif";
            let bold = "normal";

            if (fontObj.black) {
              bold = "900";
            } else if (fontObj.bold) {
              bold = "bold";
            }

            const italic = fontObj.italic ? "italic" : "normal";
            const typeface = `"${name}", ${fontObj.fallbackName}`;
            let browserFontSize = size;

            if (size < MIN_FONT_SIZE) {
              browserFontSize = MIN_FONT_SIZE;
            } else if (size > MAX_FONT_SIZE) {
              browserFontSize = MAX_FONT_SIZE;
            }

            this.current.fontSizeScale = size / browserFontSize;
            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;
          }

          setTextRenderingMode(mode) {
            this.current.textRenderingMode = mode;
          }

          setTextRise(rise) {
            this.current.textRise = rise;
          }

          moveText(x, y) {
            this.current.x = this.current.lineX += x;
            this.current.y = this.current.lineY += y;
          }

          setLeadingMoveText(x, y) {
            this.setLeading(-y);
            this.moveText(x, y);
          }

          setTextMatrix(a, b, c, d, e, f) {
            this.current.textMatrix = [a, b, c, d, e, f];
            this.current.textMatrixScale = Math.hypot(a, b);
            this.current.x = this.current.lineX = 0;
            this.current.y = this.current.lineY = 0;
          }

          nextLine() {
            this.moveText(0, this.current.leading);
          }

          paintChar(character, x, y, patternTransform) {
            const ctx = this.ctx;
            const current = this.current;
            const font = current.font;
            const textRenderingMode = current.textRenderingMode;
            const fontSize = current.fontSize / current.fontSizeScale;
            const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
            const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
            const patternFill = current.patternFill && !font.missingFile;
            let addToPath;

            if (font.disableFontFace || isAddToPathSet || patternFill) {
              addToPath = font.getPathGenerator(this.commonObjs, character);
            }

            if (font.disableFontFace || patternFill) {
              ctx.save();
              ctx.translate(x, y);
              ctx.beginPath();
              addToPath(ctx, fontSize);

              if (patternTransform) {
                ctx.setTransform.apply(ctx, patternTransform);
              }

              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                ctx.fill();
              }

              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                ctx.stroke();
              }

              ctx.restore();
            } else {
              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                ctx.fillText(character, x, y);
              }

              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                ctx.strokeText(character, x, y);
              }
            }

            if (isAddToPathSet) {
              const paths = this.pendingTextPaths || (this.pendingTextPaths = []);
              paths.push({
                transform: ctx.mozCurrentTransform,
                x,
                y,
                fontSize,
                addToPath
              });
            }
          }

          get isFontSubpixelAAEnabled() {
            const {
              context: ctx
            } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10, false);
            ctx.scale(1.5, 1);
            ctx.fillText("I", 0, 10);
            const data = ctx.getImageData(0, 0, 10, 10).data;
            let enabled = false;

            for (let i = 3; i < data.length; i += 4) {
              if (data[i] > 0 && data[i] < 255) {
                enabled = true;
                break;
              }
            }

            return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);
          }

          showText(glyphs) {
            const current = this.current;
            const font = current.font;

            if (font.isType3Font) {
              return this.showType3Text(glyphs);
            }

            const fontSize = current.fontSize;

            if (fontSize === 0) {
              return undefined;
            }

            const ctx = this.ctx;
            const fontSizeScale = current.fontSizeScale;
            const charSpacing = current.charSpacing;
            const wordSpacing = current.wordSpacing;
            const fontDirection = current.fontDirection;
            const textHScale = current.textHScale * fontDirection;
            const glyphsLength = glyphs.length;
            const vertical = font.vertical;
            const spacingDir = vertical ? 1 : -1;
            const defaultVMetrics = font.defaultVMetrics;
            const widthAdvanceScale = fontSize * current.fontMatrix[0];
            const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
            ctx.save();
            ctx.transform.apply(ctx, current.textMatrix);
            ctx.translate(current.x, current.y + current.textRise);

            if (fontDirection > 0) {
              ctx.scale(textHScale, -1);
            } else {
              ctx.scale(textHScale, 1);
            }

            let patternTransform;

            if (current.patternFill) {
              ctx.save();
              const pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);
              patternTransform = ctx.mozCurrentTransform;
              ctx.restore();
              ctx.fillStyle = pattern;
            }

            let lineWidth = current.lineWidth;
            const scale = current.textMatrixScale;

            if (scale === 0 || lineWidth === 0) {
              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                lineWidth = this.getSinglePixelWidth();
              }
            } else {
              lineWidth /= scale;
            }

            if (fontSizeScale !== 1.0) {
              ctx.scale(fontSizeScale, fontSizeScale);
              lineWidth /= fontSizeScale;
            }

            ctx.lineWidth = lineWidth;
            let x = 0,
                i;

            for (i = 0; i < glyphsLength; ++i) {
              const glyph = glyphs[i];

              if (typeof glyph === "number") {
                x += spacingDir * glyph * fontSize / 1000;
                continue;
              }

              let restoreNeeded = false;
              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
              const character = glyph.fontChar;
              const accent = glyph.accent;
              let scaledX, scaledY;
              let width = glyph.width;

              if (vertical) {
                const vmetric = glyph.vmetric || defaultVMetrics;
                const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
                const vy = vmetric[2] * widthAdvanceScale;
                width = vmetric ? -vmetric[0] : width;
                scaledX = vx / fontSizeScale;
                scaledY = (x + vy) / fontSizeScale;
              } else {
                scaledX = x / fontSizeScale;
                scaledY = 0;
              }

              if (font.remeasure && width > 0) {
                const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;

                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                  const characterScaleX = width / measuredWidth;
                  restoreNeeded = true;
                  ctx.save();
                  ctx.scale(characterScaleX, 1);
                  scaledX /= characterScaleX;
                } else if (width !== measuredWidth) {
                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;
                }
              }

              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
                if (simpleFillText && !accent) {
                  ctx.fillText(character, scaledX, scaledY);
                } else {
                  this.paintChar(character, scaledX, scaledY, patternTransform);

                  if (accent) {
                    const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                    const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);
                  }
                }
              }

              let charWidth;

              if (vertical) {
                charWidth = width * widthAdvanceScale - spacing * fontDirection;
              } else {
                charWidth = width * widthAdvanceScale + spacing * fontDirection;
              }

              x += charWidth;

              if (restoreNeeded) {
                ctx.restore();
              }
            }

            if (vertical) {
              current.y -= x;
            } else {
              current.x += x * textHScale;
            }

            ctx.restore();
            this.compose();
            return undefined;
          }

          showType3Text(glyphs) {
            const ctx = this.ctx;
            const current = this.current;
            const font = current.font;
            const fontSize = current.fontSize;
            const fontDirection = current.fontDirection;
            const spacingDir = font.vertical ? 1 : -1;
            const charSpacing = current.charSpacing;
            const wordSpacing = current.wordSpacing;
            const textHScale = current.textHScale * fontDirection;
            const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
            const glyphsLength = glyphs.length;
            const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
            let i, glyph, width, spacingLength;

            if (isTextInvisible || fontSize === 0) {
              return;
            }

            this._cachedScaleForStroking = null;
            this._cachedGetSinglePixelWidth = null;
            ctx.save();
            ctx.transform.apply(ctx, current.textMatrix);
            ctx.translate(current.x, current.y);
            ctx.scale(textHScale, fontDirection);

            for (i = 0; i < glyphsLength; ++i) {
              glyph = glyphs[i];

              if (typeof glyph === "number") {
                spacingLength = spacingDir * glyph * fontSize / 1000;
                this.ctx.translate(spacingLength, 0);
                current.x += spacingLength * textHScale;
                continue;
              }

              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
              const operatorList = font.charProcOperatorList[glyph.operatorListId];

              if (!operatorList) {
                (0, _util.warn)(`Type3 character "${glyph.operatorListId}" is not available.`);
                continue;
              }

              if (this.contentVisible) {
                this.processingType3 = glyph;
                this.save();
                ctx.scale(fontSize, fontSize);
                ctx.transform.apply(ctx, fontMatrix);
                this.executeOperatorList(operatorList);
                this.restore();
              }

              const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);

              width = transformed[0] * fontSize + spacing;
              ctx.translate(width, 0);
              current.x += width * textHScale;
            }

            ctx.restore();
            this.processingType3 = null;
          }

          setCharWidth(xWidth, yWidth) {}

          setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
            this.ctx.rect(llx, lly, urx - llx, ury - lly);
            this.ctx.clip();
            this.endPath();
          }

          getColorN_Pattern(IR) {
            let pattern;

            if (IR[0] === "TilingPattern") {
              const color = IR[1];
              const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
              const canvasGraphicsFactory = {
                createCanvasGraphics: ctx => {
                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory);
                }
              };
              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
            } else {
              pattern = this._getPattern(IR[1], IR[2]);
            }

            return pattern;
          }

          setStrokeColorN() {
            this.current.strokeColor = this.getColorN_Pattern(arguments);
          }

          setFillColorN() {
            this.current.fillColor = this.getColorN_Pattern(arguments);
            this.current.patternFill = true;
          }

          setStrokeRGBColor(r, g, b) {
            const color = this.selectColor?.(r, g, b) || _util.Util.makeHexColor(r, g, b);

            this.ctx.strokeStyle = color;
            this.current.strokeColor = color;
          }

          setFillRGBColor(r, g, b) {
            const color = this.selectColor?.(r, g, b) || _util.Util.makeHexColor(r, g, b);

            this.ctx.fillStyle = color;
            this.current.fillColor = color;
            this.current.patternFill = false;
          }

          _getPattern(objId, matrix = null) {
            let pattern;

            if (this.cachedPatterns.has(objId)) {
              pattern = this.cachedPatterns.get(objId);
            } else {
              pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId));
              this.cachedPatterns.set(objId, pattern);
            }

            if (matrix) {
              pattern.matrix = matrix;
            }

            return pattern;
          }

          shadingFill(objId) {
            if (!this.contentVisible) {
              return;
            }

            const ctx = this.ctx;
            this.save();

            const pattern = this._getPattern(objId);

            ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.SHADING);
            const inv = ctx.mozCurrentTransformInverse;

            if (inv) {
              const canvas = ctx.canvas;
              const width = canvas.width;
              const height = canvas.height;

              const bl = _util.Util.applyTransform([0, 0], inv);

              const br = _util.Util.applyTransform([0, height], inv);

              const ul = _util.Util.applyTransform([width, 0], inv);

              const ur = _util.Util.applyTransform([width, height], inv);

              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
            } else {
              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
            }

            this.compose(this.current.getClippedPathBoundingBox());
            this.restore();
          }

          beginInlineImage() {
            (0, _util.unreachable)("Should not call beginInlineImage");
          }

          beginImageData() {
            (0, _util.unreachable)("Should not call beginImageData");
          }

          paintFormXObjectBegin(matrix, bbox) {
            if (!this.contentVisible) {
              return;
            }

            this.save();
            this.baseTransformStack.push(this.baseTransform);

            if (Array.isArray(matrix) && matrix.length === 6) {
              this.transform.apply(this, matrix);
            }

            this.baseTransform = this.ctx.mozCurrentTransform;

            if (bbox) {
              const width = bbox[2] - bbox[0];
              const height = bbox[3] - bbox[1];
              this.ctx.rect(bbox[0], bbox[1], width, height);
              this.current.updateRectMinMax(this.ctx.mozCurrentTransform, bbox);
              this.clip();
              this.endPath();
            }
          }

          paintFormXObjectEnd() {
            if (!this.contentVisible) {
              return;
            }

            this.restore();
            this.baseTransform = this.baseTransformStack.pop();
          }

          beginGroup(group) {
            if (!this.contentVisible) {
              return;
            }

            this.save();

            if (this.inSMaskMode) {
              this.endSMaskMode();
              this.current.activeSMask = null;
            }

            const currentCtx = this.ctx;

            if (!group.isolated) {
              (0, _util.info)("TODO: Support non-isolated groups.");
            }

            if (group.knockout) {
              (0, _util.warn)("Knockout groups not supported.");
            }

            const currentTransform = currentCtx.mozCurrentTransform;

            if (group.matrix) {
              currentCtx.transform.apply(currentCtx, group.matrix);
            }

            if (!group.bbox) {
              throw new Error("Bounding box is required.");
            }

            let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);

            const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
            const offsetX = Math.floor(bounds[0]);
            const offsetY = Math.floor(bounds[1]);
            let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
            let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
            let scaleX = 1,
                scaleY = 1;

            if (drawnWidth > MAX_GROUP_SIZE) {
              scaleX = drawnWidth / MAX_GROUP_SIZE;
              drawnWidth = MAX_GROUP_SIZE;
            }

            if (drawnHeight > MAX_GROUP_SIZE) {
              scaleY = drawnHeight / MAX_GROUP_SIZE;
              drawnHeight = MAX_GROUP_SIZE;
            }

            this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
            let cacheId = "groupAt" + this.groupLevel;

            if (group.smask) {
              cacheId += "_smask_" + this.smaskCounter++ % 2;
            }

            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
            const groupCtx = scratchCanvas.context;
            groupCtx.scale(1 / scaleX, 1 / scaleY);
            groupCtx.translate(-offsetX, -offsetY);
            groupCtx.transform.apply(groupCtx, currentTransform);

            if (group.smask) {
              this.smaskStack.push({
                canvas: scratchCanvas.canvas,
                context: groupCtx,
                offsetX,
                offsetY,
                scaleX,
                scaleY,
                subtype: group.smask.subtype,
                backdrop: group.smask.backdrop,
                transferMap: group.smask.transferMap || null,
                startTransformInverse: null
              });
            } else {
              currentCtx.setTransform(1, 0, 0, 1, 0, 0);
              currentCtx.translate(offsetX, offsetY);
              currentCtx.scale(scaleX, scaleY);
              currentCtx.save();
            }

            copyCtxState(currentCtx, groupCtx);
            this.ctx = groupCtx;
            this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
            this.groupStack.push(currentCtx);
            this.groupLevel++;
          }

          endGroup(group) {
            if (!this.contentVisible) {
              return;
            }

            this.groupLevel--;
            const groupCtx = this.ctx;
            const ctx = this.groupStack.pop();
            this.ctx = ctx;
            this.ctx.imageSmoothingEnabled = false;

            if (group.smask) {
              this.tempSMask = this.smaskStack.pop();
              this.restore();
            } else {
              this.ctx.restore();
              const currentMtx = this.ctx.mozCurrentTransform;
              this.restore();
              this.ctx.save();
              this.ctx.setTransform.apply(this.ctx, currentMtx);

              const dirtyBox = _util.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);

              this.ctx.drawImage(groupCtx.canvas, 0, 0);
              this.ctx.restore();
              this.compose(dirtyBox);
            }
          }

          beginAnnotations() {
            this.save();

            if (this.baseTransform) {
              this.ctx.setTransform.apply(this.ctx, this.baseTransform);
            }
          }

          endAnnotations() {
            this.restore();
          }

          beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {
            this.save();

            if (Array.isArray(rect) && rect.length === 4) {
              const width = rect[2] - rect[0];
              const height = rect[3] - rect[1];

              if (hasOwnCanvas && this.annotationCanvasMap) {
                transform = transform.slice();
                transform[4] -= rect[0];
                transform[5] -= rect[1];
                rect = rect.slice();
                rect[0] = rect[1] = 0;
                rect[2] = width;
                rect[3] = height;

                const [scaleX, scaleY] = _util.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform);

                const {
                  viewportScale
                } = this;
                const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);
                const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);
                this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);
                const {
                  canvas,
                  context
                } = this.annotationCanvas;
                const viewportScaleFactorStr = `var(--zoom-factor) * ${_display_utils.PixelsPerInch.PDF_TO_CSS_UNITS}`;
                canvas.style.width = `calc(${width}px * ${viewportScaleFactorStr})`;
                canvas.style.height = `calc(${height}px * ${viewportScaleFactorStr})`;
                this.annotationCanvasMap.set(id, canvas);
                this.annotationCanvas.savedCtx = this.ctx;
                this.ctx = context;
                this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);
                addContextCurrentTransform(this.ctx);
                resetCtxToDefault(this.ctx, this.foregroundColor);
              } else {
                resetCtxToDefault(this.ctx, this.foregroundColor);
                this.ctx.rect(rect[0], rect[1], width, height);
                this.ctx.clip();
                this.endPath();
              }
            }

            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
            this.transform.apply(this, transform);
            this.transform.apply(this, matrix);
          }

          endAnnotation() {
            if (this.annotationCanvas) {
              this.ctx = this.annotationCanvas.savedCtx;
              delete this.annotationCanvas.savedCtx;
              delete this.annotationCanvas;
            }

            this.restore();
          }

          paintImageMaskXObject(img) {
            if (!this.contentVisible) {
              return;
            }

            const count = img.count;
            img = this.getObject(img.data, img);
            img.count = count;
            const ctx = this.ctx;
            const glyph = this.processingType3;

            if (glyph) {
              if (glyph.compiled === undefined) {
                glyph.compiled = compileType3Glyph(img);
              }

              if (glyph.compiled) {
                glyph.compiled(ctx);
                return;
              }
            }

            const mask = this._createMaskCanvas(img);

            const maskCanvas = mask.canvas;
            ctx.save();
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
            ctx.restore();
            this.compose();
          }

          paintImageMaskXObjectRepeat(img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {
            if (!this.contentVisible) {
              return;
            }

            img = this.getObject(img.data, img);
            const ctx = this.ctx;
            ctx.save();
            const currentTransform = ctx.mozCurrentTransform;
            ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);

            const mask = this._createMaskCanvas(img);

            ctx.setTransform(1, 0, 0, 1, 0, 0);

            for (let i = 0, ii = positions.length; i < ii; i += 2) {
              const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);

              const [x, y] = _util.Util.applyTransform([0, 0], trans);

              ctx.drawImage(mask.canvas, x, y);
            }

            ctx.restore();
            this.compose();
          }

          paintImageMaskXObjectGroup(images) {
            if (!this.contentVisible) {
              return;
            }

            const ctx = this.ctx;
            const fillColor = this.current.fillColor;
            const isPatternFill = this.current.patternFill;

            for (let i = 0, ii = images.length; i < ii; i++) {
              const image = images[i];
              const width = image.width,
                    height = image.height;
              const maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height, false);
              const maskCtx = maskCanvas.context;
              maskCtx.save();
              putBinaryImageMask(maskCtx, image);
              maskCtx.globalCompositeOperation = "source-in";
              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL) : fillColor;
              maskCtx.fillRect(0, 0, width, height);
              maskCtx.restore();
              ctx.save();
              ctx.transform.apply(ctx, image.transform);
              ctx.scale(1, -1);
              drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
              ctx.restore();
            }

            this.compose();
          }

          paintImageXObject(objId) {
            if (!this.contentVisible) {
              return;
            }

            const imgData = this.getObject(objId);

            if (!imgData) {
              (0, _util.warn)("Dependent image isn't ready yet");
              return;
            }

            this.paintInlineImageXObject(imgData);
          }

          paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
            if (!this.contentVisible) {
              return;
            }

            const imgData = this.getObject(objId);

            if (!imgData) {
              (0, _util.warn)("Dependent image isn't ready yet");
              return;
            }

            const width = imgData.width;
            const height = imgData.height;
            const map = [];

            for (let i = 0, ii = positions.length; i < ii; i += 2) {
              map.push({
                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                x: 0,
                y: 0,
                w: width,
                h: height
              });
            }

            this.paintInlineImageXObjectGroup(imgData, map);
          }

          paintInlineImageXObject(imgData) {
            if (!this.contentVisible) {
              return;
            }

            const width = imgData.width;
            const height = imgData.height;
            const ctx = this.ctx;
            this.save();
            ctx.scale(1 / width, -1 / height);
            let imgToPaint;

            if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
              imgToPaint = imgData;
            } else {
              const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height, false);
              const tmpCtx = tmpCanvas.context;
              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);
              imgToPaint = tmpCanvas.canvas;
            }

            const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);

            ctx.imageSmoothingEnabled = getImageSmoothingEnabled(ctx.mozCurrentTransform, imgData.interpolate);
            const [rWidth, rHeight] = drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);

            if (this.imageLayer) {
              const position = this.getCanvasPosition(0, -height);
              this.imageLayer.appendImage({
                imgData,
                left: position[0],
                top: position[1],
                width: rWidth,
                height: rHeight
              });
            }

            this.compose();
            this.restore();
          }

          paintInlineImageXObjectGroup(imgData, map) {
            if (!this.contentVisible) {
              return;
            }

            const ctx = this.ctx;
            const w = imgData.width;
            const h = imgData.height;
            const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h, false);
            const tmpCtx = tmpCanvas.context;
            putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);

            for (let i = 0, ii = map.length; i < ii; i++) {
              const entry = map[i];
              ctx.save();
              ctx.transform.apply(ctx, entry.transform);
              ctx.scale(1, -1);
              drawImageAtIntegerCoords(ctx, tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);

              if (this.imageLayer) {
                const position = this.getCanvasPosition(entry.x, entry.y);
                this.imageLayer.appendImage({
                  imgData,
                  left: position[0],
                  top: position[1],
                  width: w,
                  height: h
                });
              }

              ctx.restore();
            }

            this.compose();
          }

          paintSolidColorImageMask() {
            if (!this.contentVisible) {
              return;
            }

            this.ctx.fillRect(0, 0, 1, 1);
            this.compose();
          }

          markPoint(tag) {}

          markPointProps(tag, properties) {}

          beginMarkedContent(tag) {
            this.markedContentStack.push({
              visible: true
            });
          }

          beginMarkedContentProps(tag, properties) {
            if (tag === "OC") {
              this.markedContentStack.push({
                visible: this.optionalContentConfig.isVisible(properties)
              });
            } else {
              this.markedContentStack.push({
                visible: true
              });
            }

            this.contentVisible = this.isContentVisible();
          }

          endMarkedContent() {
            this.markedContentStack.pop();
            this.contentVisible = this.isContentVisible();
          }

          beginCompat() {}

          endCompat() {}

          consumePath(clipBox) {
            const isEmpty = this.current.isEmptyClip();

            if (this.pendingClip) {
              this.current.updateClipFromPath();
            }

            if (!this.pendingClip) {
              this.compose(clipBox);
            }

            const ctx = this.ctx;

            if (this.pendingClip) {
              if (!isEmpty) {
                if (this.pendingClip === EO_CLIP) {
                  ctx.clip("evenodd");
                } else {
                  ctx.clip();
                }
              }

              this.pendingClip = null;
            }

            this.current.startNewPathAndClipBox(this.current.clipBox);
            ctx.beginPath();
          }

          getSinglePixelWidth() {
            if (!this._cachedGetSinglePixelWidth) {
              const m = this.ctx.mozCurrentTransform;

              if (m[1] === 0 && m[2] === 0) {
                this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));
              } else {
                const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                const normX = Math.hypot(m[0], m[2]);
                const normY = Math.hypot(m[1], m[3]);
                this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;
              }
            }

            return this._cachedGetSinglePixelWidth;
          }

          getScaleForStroking() {
            if (!this._cachedScaleForStroking) {
              const {
                lineWidth
              } = this.current;
              const m = this.ctx.mozCurrentTransform;
              let scaleX, scaleY;

              if (m[1] === 0 && m[2] === 0) {
                const normX = Math.abs(m[0]);
                const normY = Math.abs(m[3]);

                if (lineWidth === 0) {
                  scaleX = 1 / normX;
                  scaleY = 1 / normY;
                } else {
                  const scaledXLineWidth = normX * lineWidth;
                  const scaledYLineWidth = normY * lineWidth;
                  scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;
                  scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;
                }
              } else {
                const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                const normX = Math.hypot(m[0], m[1]);
                const normY = Math.hypot(m[2], m[3]);

                if (lineWidth === 0) {
                  scaleX = normY / absDet;
                  scaleY = normX / absDet;
                } else {
                  const baseArea = lineWidth * absDet;
                  scaleX = normY > baseArea ? normY / baseArea : 1;
                  scaleY = normX > baseArea ? normX / baseArea : 1;
                }
              }

              this._cachedScaleForStroking = [scaleX, scaleY];
            }

            return this._cachedScaleForStroking;
          }

          rescaleAndStroke(saveRestore) {
            const {
              ctx
            } = this;
            const {
              lineWidth
            } = this.current;
            const [scaleX, scaleY] = this.getScaleForStroking();
            ctx.lineWidth = lineWidth || 1;

            if (scaleX === 1 && scaleY === 1) {
              ctx.stroke();
              return;
            }

            let savedMatrix, savedDashes, savedDashOffset;

            if (saveRestore) {
              savedMatrix = ctx.mozCurrentTransform.slice();
              savedDashes = ctx.getLineDash().slice();
              savedDashOffset = ctx.lineDashOffset;
            }

            ctx.scale(scaleX, scaleY);
            const scale = Math.max(scaleX, scaleY);
            ctx.setLineDash(ctx.getLineDash().map(x => x / scale));
            ctx.lineDashOffset /= scale;
            ctx.stroke();

            if (saveRestore) {
              ctx.setTransform(...savedMatrix);
              ctx.setLineDash(savedDashes);
              ctx.lineDashOffset = savedDashOffset;
            }
          }

          getCanvasPosition(x, y) {
            const transform = this.ctx.mozCurrentTransform;
            return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
          }

          isContentVisible() {
            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {
              if (!this.markedContentStack[i].visible) {
                return false;
              }
            }

            return true;
          }

        }

        exports.CanvasGraphics = CanvasGraphics;

        for (const op in _util.OPS) {
          if (CanvasGraphics.prototype[op] !== undefined) {
            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
          }
        }
        /***/

      },
      /* 11 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TilingPattern = exports.PathType = void 0;
        exports.getShadingPattern = getShadingPattern;

        var _util = __w_pdfjs_require__(1);

        var _is_node = __w_pdfjs_require__(3);

        const PathType = {
          FILL: "Fill",
          STROKE: "Stroke",
          SHADING: "Shading"
        };
        exports.PathType = PathType;

        function applyBoundingBox(ctx, bbox) {
          if (!bbox || _is_node.isNodeJS) {
            return;
          }

          const width = bbox[2] - bbox[0];
          const height = bbox[3] - bbox[1];
          const region = new Path2D();
          region.rect(bbox[0], bbox[1], width, height);
          ctx.clip(region);
        }

        class BaseShadingPattern {
          constructor() {
            if (this.constructor === BaseShadingPattern) {
              (0, _util.unreachable)("Cannot initialize BaseShadingPattern.");
            }
          }

          getPattern() {
            (0, _util.unreachable)("Abstract method `getPattern` called.");
          }

        }

        class RadialAxialShadingPattern extends BaseShadingPattern {
          constructor(IR) {
            super();
            this._type = IR[1];
            this._bbox = IR[2];
            this._colorStops = IR[3];
            this._p0 = IR[4];
            this._p1 = IR[5];
            this._r0 = IR[6];
            this._r1 = IR[7];
            this.matrix = null;
          }

          _createGradient(ctx) {
            let grad;

            if (this._type === "axial") {
              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
            } else if (this._type === "radial") {
              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
            }

            for (const colorStop of this._colorStops) {
              grad.addColorStop(colorStop[0], colorStop[1]);
            }

            return grad;
          }

          getPattern(ctx, owner, inverse, pathType) {
            let pattern;

            if (pathType === PathType.STROKE || pathType === PathType.FILL) {
              const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, ctx.mozCurrentTransform) || [0, 0, 0, 0];
              const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
              const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
              const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", width, height, true);
              const tmpCtx = tmpCanvas.context;
              tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
              tmpCtx.beginPath();
              tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
              tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
              inverse = _util.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);
              tmpCtx.transform.apply(tmpCtx, owner.baseTransform);

              if (this.matrix) {
                tmpCtx.transform.apply(tmpCtx, this.matrix);
              }

              applyBoundingBox(tmpCtx, this._bbox);
              tmpCtx.fillStyle = this._createGradient(tmpCtx);
              tmpCtx.fill();
              pattern = ctx.createPattern(tmpCanvas.canvas, "no-repeat");
              const domMatrix = new DOMMatrix(inverse);

              try {
                pattern.setTransform(domMatrix);
              } catch (ex) {
                (0, _util.warn)(`RadialAxialShadingPattern.getPattern: "${ex?.message}".`);
              }
            } else {
              applyBoundingBox(ctx, this._bbox);
              pattern = this._createGradient(ctx);
            }

            return pattern;
          }

        }

        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
          const coords = context.coords,
                colors = context.colors;
          const bytes = data.data,
                rowSize = data.width * 4;
          let tmp;

          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }

          if (coords[p2 + 1] > coords[p3 + 1]) {
            tmp = p2;
            p2 = p3;
            p3 = tmp;
            tmp = c2;
            c2 = c3;
            c3 = tmp;
          }

          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }

          const x1 = (coords[p1] + context.offsetX) * context.scaleX;
          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
          const x2 = (coords[p2] + context.offsetX) * context.scaleX;
          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
          const x3 = (coords[p3] + context.offsetX) * context.scaleX;
          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;

          if (y1 >= y3) {
            return;
          }

          const c1r = colors[c1],
                c1g = colors[c1 + 1],
                c1b = colors[c1 + 2];
          const c2r = colors[c2],
                c2g = colors[c2 + 1],
                c2b = colors[c2 + 2];
          const c3r = colors[c3],
                c3g = colors[c3 + 1],
                c3b = colors[c3 + 2];
          const minY = Math.round(y1),
                maxY = Math.round(y3);
          let xa, car, cag, cab;
          let xb, cbr, cbg, cbb;

          for (let y = minY; y <= maxY; y++) {
            if (y < y2) {
              let k;

              if (y < y1) {
                k = 0;
              } else {
                k = (y1 - y) / (y1 - y2);
              }

              xa = x1 - (x1 - x2) * k;
              car = c1r - (c1r - c2r) * k;
              cag = c1g - (c1g - c2g) * k;
              cab = c1b - (c1b - c2b) * k;
            } else {
              let k;

              if (y > y3) {
                k = 1;
              } else if (y2 === y3) {
                k = 0;
              } else {
                k = (y2 - y) / (y2 - y3);
              }

              xa = x2 - (x2 - x3) * k;
              car = c2r - (c2r - c3r) * k;
              cag = c2g - (c2g - c3g) * k;
              cab = c2b - (c2b - c3b) * k;
            }

            let k;

            if (y < y1) {
              k = 0;
            } else if (y > y3) {
              k = 1;
            } else {
              k = (y1 - y) / (y1 - y3);
            }

            xb = x1 - (x1 - x3) * k;
            cbr = c1r - (c1r - c3r) * k;
            cbg = c1g - (c1g - c3g) * k;
            cbb = c1b - (c1b - c3b) * k;
            const x1_ = Math.round(Math.min(xa, xb));
            const x2_ = Math.round(Math.max(xa, xb));
            let j = rowSize * y + x1_ * 4;

            for (let x = x1_; x <= x2_; x++) {
              k = (xa - x) / (xa - xb);

              if (k < 0) {
                k = 0;
              } else if (k > 1) {
                k = 1;
              }

              bytes[j++] = car - (car - cbr) * k | 0;
              bytes[j++] = cag - (cag - cbg) * k | 0;
              bytes[j++] = cab - (cab - cbb) * k | 0;
              bytes[j++] = 255;
            }
          }
        }

        function drawFigure(data, figure, context) {
          const ps = figure.coords;
          const cs = figure.colors;
          let i, ii;

          switch (figure.type) {
            case "lattice":
              const verticesPerRow = figure.verticesPerRow;
              const rows = Math.floor(ps.length / verticesPerRow) - 1;
              const cols = verticesPerRow - 1;

              for (i = 0; i < rows; i++) {
                let q = i * verticesPerRow;

                for (let j = 0; j < cols; j++, q++) {
                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                }
              }

              break;

            case "triangles":
              for (i = 0, ii = ps.length; i < ii; i += 3) {
                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
              }

              break;

            default:
              throw new Error("illegal figure");
          }
        }

        class MeshShadingPattern extends BaseShadingPattern {
          constructor(IR) {
            super();
            this._coords = IR[2];
            this._colors = IR[3];
            this._figures = IR[4];
            this._bounds = IR[5];
            this._bbox = IR[7];
            this._background = IR[8];
            this.matrix = null;
          }

          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
            const EXPECTED_SCALE = 1.1;
            const MAX_PATTERN_SIZE = 3000;
            const BORDER_SIZE = 2;
            const offsetX = Math.floor(this._bounds[0]);
            const offsetY = Math.floor(this._bounds[1]);
            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
            const scaleX = boundsWidth / width;
            const scaleY = boundsHeight / height;
            const context = {
              coords: this._coords,
              colors: this._colors,
              offsetX: -offsetX,
              offsetY: -offsetY,
              scaleX: 1 / scaleX,
              scaleY: 1 / scaleY
            };
            const paddedWidth = width + BORDER_SIZE * 2;
            const paddedHeight = height + BORDER_SIZE * 2;
            const tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
            const tmpCtx = tmpCanvas.context;
            const data = tmpCtx.createImageData(width, height);

            if (backgroundColor) {
              const bytes = data.data;

              for (let i = 0, ii = bytes.length; i < ii; i += 4) {
                bytes[i] = backgroundColor[0];
                bytes[i + 1] = backgroundColor[1];
                bytes[i + 2] = backgroundColor[2];
                bytes[i + 3] = 255;
              }
            }

            for (const figure of this._figures) {
              drawFigure(data, figure, context);
            }

            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
            const canvas = tmpCanvas.canvas;
            return {
              canvas,
              offsetX: offsetX - BORDER_SIZE * scaleX,
              offsetY: offsetY - BORDER_SIZE * scaleY,
              scaleX,
              scaleY
            };
          }

          getPattern(ctx, owner, inverse, pathType) {
            applyBoundingBox(ctx, this._bbox);
            let scale;

            if (pathType === PathType.SHADING) {
              scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
            } else {
              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);

              if (this.matrix) {
                const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);

                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
              }
            }

            const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);

            if (pathType !== PathType.SHADING) {
              ctx.setTransform.apply(ctx, owner.baseTransform);

              if (this.matrix) {
                ctx.transform.apply(ctx, this.matrix);
              }
            }

            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
            return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
          }

        }

        class DummyShadingPattern extends BaseShadingPattern {
          getPattern() {
            return "hotpink";
          }

        }

        function getShadingPattern(IR) {
          switch (IR[0]) {
            case "RadialAxial":
              return new RadialAxialShadingPattern(IR);

            case "Mesh":
              return new MeshShadingPattern(IR);

            case "Dummy":
              return new DummyShadingPattern();
          }

          throw new Error(`Unknown IR type: ${IR[0]}`);
        }

        const PaintType = {
          COLORED: 1,
          UNCOLORED: 2
        };

        class TilingPattern {
          static get MAX_PATTERN_SIZE() {
            return (0, _util.shadow)(this, "MAX_PATTERN_SIZE", 3000);
          }

          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
            this.operatorList = IR[2];
            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
            this.bbox = IR[4];
            this.xstep = IR[5];
            this.ystep = IR[6];
            this.paintType = IR[7];
            this.tilingType = IR[8];
            this.color = color;
            this.ctx = ctx;
            this.canvasGraphicsFactory = canvasGraphicsFactory;
            this.baseTransform = baseTransform;
          }

          createPatternCanvas(owner) {
            const operatorList = this.operatorList;
            const bbox = this.bbox;
            const xstep = this.xstep;
            const ystep = this.ystep;
            const paintType = this.paintType;
            const tilingType = this.tilingType;
            const color = this.color;
            const canvasGraphicsFactory = this.canvasGraphicsFactory;
            (0, _util.info)("TilingType: " + tilingType);
            const x0 = bbox[0],
                  y0 = bbox[1],
                  x1 = bbox[2],
                  y1 = bbox[3];

            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);

            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);

            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
            const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
            const tmpCtx = tmpCanvas.context;
            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
            graphics.groupLevel = owner.groupLevel;
            this.setFillAndStrokeStyleToContext(graphics, paintType, color);
            let adjustedX0 = x0;
            let adjustedY0 = y0;
            let adjustedX1 = x1;
            let adjustedY1 = y1;

            if (x0 < 0) {
              adjustedX0 = 0;
              adjustedX1 += Math.abs(x0);
            }

            if (y0 < 0) {
              adjustedY0 = 0;
              adjustedY1 += Math.abs(y0);
            }

            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));
            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
            tmpCtx.save();
            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);
            graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();
            graphics.executeOperatorList(operatorList);
            graphics.endDrawing();
            return {
              canvas: tmpCanvas.canvas,
              scaleX: dimx.scale,
              scaleY: dimy.scale,
              offsetX: adjustedX0,
              offsetY: adjustedY0
            };
          }

          getSizeAndScale(step, realOutputSize, scale) {
            step = Math.abs(step);
            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);
            let size = Math.ceil(step * scale);

            if (size >= maxSize) {
              size = maxSize;
            } else {
              scale = size / step;
            }

            return {
              scale,
              size
            };
          }

          clipBbox(graphics, x0, y0, x1, y1) {
            const bboxWidth = x1 - x0;
            const bboxHeight = y1 - y0;
            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
            graphics.current.updateRectMinMax(graphics.ctx.mozCurrentTransform, [x0, y0, x1, y1]);
            graphics.clip();
            graphics.endPath();
          }

          setFillAndStrokeStyleToContext(graphics, paintType, color) {
            const context = graphics.ctx,
                  current = graphics.current;

            switch (paintType) {
              case PaintType.COLORED:
                const ctx = this.ctx;
                context.fillStyle = ctx.fillStyle;
                context.strokeStyle = ctx.strokeStyle;
                current.fillColor = ctx.fillStyle;
                current.strokeColor = ctx.strokeStyle;
                break;

              case PaintType.UNCOLORED:
                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);

                context.fillStyle = cssColor;
                context.strokeStyle = cssColor;
                current.fillColor = cssColor;
                current.strokeColor = cssColor;
                break;

              default:
                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);
            }
          }

          getPattern(ctx, owner, inverse, pathType) {
            let matrix = inverse;

            if (pathType !== PathType.SHADING) {
              matrix = _util.Util.transform(matrix, owner.baseTransform);

              if (this.matrix) {
                matrix = _util.Util.transform(matrix, this.matrix);
              }
            }

            const temporaryPatternCanvas = this.createPatternCanvas(owner);
            let domMatrix = new DOMMatrix(matrix);
            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");

            try {
              pattern.setTransform(domMatrix);
            } catch (ex) {
              (0, _util.warn)(`TilingPattern.getPattern: "${ex?.message}".`);
            }

            return pattern;
          }

        }

        exports.TilingPattern = TilingPattern;
        /***/
      },
      /* 12 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.applyMaskImageData = applyMaskImageData;

        var _util = __w_pdfjs_require__(1);

        function applyMaskImageData({
          src,
          srcPos = 0,
          dest,
          destPos = 0,
          width,
          height,
          inverseDecode = false
        }) {
          const opaque = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
          const [zeroMapping, oneMapping] = !inverseDecode ? [opaque, 0] : [0, opaque];
          const widthInSource = width >> 3;
          const widthRemainder = width & 7;
          const srcLength = src.length;
          dest = new Uint32Array(dest.buffer);

          for (let i = 0; i < height; i++) {
            for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {
              const elem = srcPos < srcLength ? src[srcPos] : 255;
              dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;
            }

            if (widthRemainder === 0) {
              continue;
            }

            const elem = srcPos < srcLength ? src[srcPos++] : 255;

            for (let j = 0; j < widthRemainder; j++) {
              dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;
            }
          }

          return {
            srcPos,
            destPos
          };
        }
        /***/

      },
      /* 13 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GlobalWorkerOptions = void 0;
        const GlobalWorkerOptions = Object.create(null);
        exports.GlobalWorkerOptions = GlobalWorkerOptions;
        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;
        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? "" : GlobalWorkerOptions.workerSrc;
        /***/
      },
      /* 14 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MessageHandler = void 0;

        var _util = __w_pdfjs_require__(1);

        const CallbackKind = {
          UNKNOWN: 0,
          DATA: 1,
          ERROR: 2
        };
        const StreamKind = {
          UNKNOWN: 0,
          CANCEL: 1,
          CANCEL_COMPLETE: 2,
          CLOSE: 3,
          ENQUEUE: 4,
          ERROR: 5,
          PULL: 6,
          PULL_COMPLETE: 7,
          START_COMPLETE: 8
        };

        function wrapReason(reason) {
          if (!(reason instanceof Error || typeof reason === "object" && reason !== null)) {
            (0, _util.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
          }

          switch (reason.name) {
            case "AbortException":
              return new _util.AbortException(reason.message);

            case "MissingPDFException":
              return new _util.MissingPDFException(reason.message);

            case "PasswordException":
              return new _util.PasswordException(reason.message, reason.code);

            case "UnexpectedResponseException":
              return new _util.UnexpectedResponseException(reason.message, reason.status);

            case "UnknownErrorException":
              return new _util.UnknownErrorException(reason.message, reason.details);

            default:
              return new _util.UnknownErrorException(reason.message, reason.toString());
          }
        }

        class MessageHandler {
          constructor(sourceName, targetName, comObj) {
            this.sourceName = sourceName;
            this.targetName = targetName;
            this.comObj = comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            this.callbackCapabilities = Object.create(null);
            this.actionHandler = Object.create(null);

            this._onComObjOnMessage = event => {
              const data = event.data;

              if (data.targetName !== this.sourceName) {
                return;
              }

              if (data.stream) {
                this._processStreamMessage(data);

                return;
              }

              if (data.callback) {
                const callbackId = data.callbackId;
                const capability = this.callbackCapabilities[callbackId];

                if (!capability) {
                  throw new Error(`Cannot resolve callback ${callbackId}`);
                }

                delete this.callbackCapabilities[callbackId];

                if (data.callback === CallbackKind.DATA) {
                  capability.resolve(data.data);
                } else if (data.callback === CallbackKind.ERROR) {
                  capability.reject(wrapReason(data.reason));
                } else {
                  throw new Error("Unexpected callback case");
                }

                return;
              }

              const action = this.actionHandler[data.action];

              if (!action) {
                throw new Error(`Unknown action from worker: ${data.action}`);
              }

              if (data.callbackId) {
                const cbSourceName = this.sourceName;
                const cbTargetName = data.sourceName;
                new Promise(function (resolve) {
                  resolve(action(data.data));
                }).then(function (result) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.DATA,
                    callbackId: data.callbackId,
                    data: result
                  });
                }, function (reason) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.ERROR,
                    callbackId: data.callbackId,
                    reason: wrapReason(reason)
                  });
                });
                return;
              }

              if (data.streamId) {
                this._createStreamSink(data);

                return;
              }

              action(data.data);
            };

            comObj.addEventListener("message", this._onComObjOnMessage);
          }

          on(actionName, handler) {
            const ah = this.actionHandler;

            if (ah[actionName]) {
              throw new Error(`There is already an actionName called "${actionName}"`);
            }

            ah[actionName] = handler;
          }

          send(actionName, data, transfers) {
            this.comObj.postMessage({
              sourceName: this.sourceName,
              targetName: this.targetName,
              action: actionName,
              data
            }, transfers);
          }

          sendWithPromise(actionName, data, transfers) {
            const callbackId = this.callbackId++;
            const capability = (0, _util.createPromiseCapability)();
            this.callbackCapabilities[callbackId] = capability;

            try {
              this.comObj.postMessage({
                sourceName: this.sourceName,
                targetName: this.targetName,
                action: actionName,
                callbackId,
                data
              }, transfers);
            } catch (ex) {
              capability.reject(ex);
            }

            return capability.promise;
          }

          sendWithStream(actionName, data, queueingStrategy, transfers) {
            const streamId = this.streamId++,
                  sourceName = this.sourceName,
                  targetName = this.targetName,
                  comObj = this.comObj;
            return new ReadableStream({
              start: controller => {
                const startCapability = (0, _util.createPromiseCapability)();
                this.streamControllers[streamId] = {
                  controller,
                  startCall: startCapability,
                  pullCall: null,
                  cancelCall: null,
                  isClosed: false
                };
                comObj.postMessage({
                  sourceName,
                  targetName,
                  action: actionName,
                  streamId,
                  data,
                  desiredSize: controller.desiredSize
                }, transfers);
                return startCapability.promise;
              },
              pull: controller => {
                const pullCapability = (0, _util.createPromiseCapability)();
                this.streamControllers[streamId].pullCall = pullCapability;
                comObj.postMessage({
                  sourceName,
                  targetName,
                  stream: StreamKind.PULL,
                  streamId,
                  desiredSize: controller.desiredSize
                });
                return pullCapability.promise;
              },
              cancel: reason => {
                (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");
                const cancelCapability = (0, _util.createPromiseCapability)();
                this.streamControllers[streamId].cancelCall = cancelCapability;
                this.streamControllers[streamId].isClosed = true;
                comObj.postMessage({
                  sourceName,
                  targetName,
                  stream: StreamKind.CANCEL,
                  streamId,
                  reason: wrapReason(reason)
                });
                return cancelCapability.promise;
              }
            }, queueingStrategy);
          }

          _createStreamSink(data) {
            const streamId = data.streamId,
                  sourceName = this.sourceName,
                  targetName = data.sourceName,
                  comObj = this.comObj;
            const self = this,
                  action = this.actionHandler[data.action];
            const streamSink = {
              enqueue(chunk, size = 1, transfers) {
                if (this.isCancelled) {
                  return;
                }

                const lastDesiredSize = this.desiredSize;
                this.desiredSize -= size;

                if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                  this.sinkCapability = (0, _util.createPromiseCapability)();
                  this.ready = this.sinkCapability.promise;
                }

                comObj.postMessage({
                  sourceName,
                  targetName,
                  stream: StreamKind.ENQUEUE,
                  streamId,
                  chunk
                }, transfers);
              },

              close() {
                if (this.isCancelled) {
                  return;
                }

                this.isCancelled = true;
                comObj.postMessage({
                  sourceName,
                  targetName,
                  stream: StreamKind.CLOSE,
                  streamId
                });
                delete self.streamSinks[streamId];
              },

              error(reason) {
                (0, _util.assert)(reason instanceof Error, "error must have a valid reason");

                if (this.isCancelled) {
                  return;
                }

                this.isCancelled = true;
                comObj.postMessage({
                  sourceName,
                  targetName,
                  stream: StreamKind.ERROR,
                  streamId,
                  reason: wrapReason(reason)
                });
              },

              sinkCapability: (0, _util.createPromiseCapability)(),
              onPull: null,
              onCancel: null,
              isCancelled: false,
              desiredSize: data.desiredSize,
              ready: null
            };
            streamSink.sinkCapability.resolve();
            streamSink.ready = streamSink.sinkCapability.promise;
            this.streamSinks[streamId] = streamSink;
            new Promise(function (resolve) {
              resolve(action(data.data, streamSink));
            }).then(function () {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.START_COMPLETE,
                streamId,
                success: true
              });
            }, function (reason) {
              comObj.postMessage({
                sourceName,
                targetName,
                stream: StreamKind.START_COMPLETE,
                streamId,
                reason: wrapReason(reason)
              });
            });
          }

          _processStreamMessage(data) {
            const streamId = data.streamId,
                  sourceName = this.sourceName,
                  targetName = data.sourceName,
                  comObj = this.comObj;
            const streamController = this.streamControllers[streamId],
                  streamSink = this.streamSinks[streamId];

            switch (data.stream) {
              case StreamKind.START_COMPLETE:
                if (data.success) {
                  streamController.startCall.resolve();
                } else {
                  streamController.startCall.reject(wrapReason(data.reason));
                }

                break;

              case StreamKind.PULL_COMPLETE:
                if (data.success) {
                  streamController.pullCall.resolve();
                } else {
                  streamController.pullCall.reject(wrapReason(data.reason));
                }

                break;

              case StreamKind.PULL:
                if (!streamSink) {
                  comObj.postMessage({
                    sourceName,
                    targetName,
                    stream: StreamKind.PULL_COMPLETE,
                    streamId,
                    success: true
                  });
                  break;
                }

                if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                  streamSink.sinkCapability.resolve();
                }

                streamSink.desiredSize = data.desiredSize;
                new Promise(function (resolve) {
                  resolve(streamSink.onPull && streamSink.onPull());
                }).then(function () {
                  comObj.postMessage({
                    sourceName,
                    targetName,
                    stream: StreamKind.PULL_COMPLETE,
                    streamId,
                    success: true
                  });
                }, function (reason) {
                  comObj.postMessage({
                    sourceName,
                    targetName,
                    stream: StreamKind.PULL_COMPLETE,
                    streamId,
                    reason: wrapReason(reason)
                  });
                });
                break;

              case StreamKind.ENQUEUE:
                (0, _util.assert)(streamController, "enqueue should have stream controller");

                if (streamController.isClosed) {
                  break;
                }

                streamController.controller.enqueue(data.chunk);
                break;

              case StreamKind.CLOSE:
                (0, _util.assert)(streamController, "close should have stream controller");

                if (streamController.isClosed) {
                  break;
                }

                streamController.isClosed = true;
                streamController.controller.close();

                this._deleteStreamController(streamController, streamId);

                break;

              case StreamKind.ERROR:
                (0, _util.assert)(streamController, "error should have stream controller");
                streamController.controller.error(wrapReason(data.reason));

                this._deleteStreamController(streamController, streamId);

                break;

              case StreamKind.CANCEL_COMPLETE:
                if (data.success) {
                  streamController.cancelCall.resolve();
                } else {
                  streamController.cancelCall.reject(wrapReason(data.reason));
                }

                this._deleteStreamController(streamController, streamId);

                break;

              case StreamKind.CANCEL:
                if (!streamSink) {
                  break;
                }

                new Promise(function (resolve) {
                  resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));
                }).then(function () {
                  comObj.postMessage({
                    sourceName,
                    targetName,
                    stream: StreamKind.CANCEL_COMPLETE,
                    streamId,
                    success: true
                  });
                }, function (reason) {
                  comObj.postMessage({
                    sourceName,
                    targetName,
                    stream: StreamKind.CANCEL_COMPLETE,
                    streamId,
                    reason: wrapReason(reason)
                  });
                });
                streamSink.sinkCapability.reject(wrapReason(data.reason));
                streamSink.isCancelled = true;
                delete this.streamSinks[streamId];
                break;

              default:
                throw new Error("Unexpected stream case");
            }
          }

          _deleteStreamController(streamController, streamId) {
            var _this10 = this;

            return _asyncToGenerator(function* () {
              yield Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);
              delete _this10.streamControllers[streamId];
            })();
          }

          destroy() {
            this.comObj.removeEventListener("message", this._onComObjOnMessage);
          }

        }

        exports.MessageHandler = MessageHandler;
        /***/
      },
      /* 15 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Metadata = void 0;

        var _util = __w_pdfjs_require__(1);

        class Metadata {
          #metadataMap;
          #data;

          constructor({
            parsedData,
            rawData
          }) {
            this.#metadataMap = parsedData;
            this.#data = rawData;
          }

          getRaw() {
            return this.#data;
          }

          get(name) {
            return this.#metadataMap.get(name) ?? null;
          }

          getAll() {
            return (0, _util.objectFromMap)(this.#metadataMap);
          }

          has(name) {
            return this.#metadataMap.has(name);
          }

        }

        exports.Metadata = Metadata;
        /***/
      },
      /* 16 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OptionalContentConfig = void 0;

        var _util = __w_pdfjs_require__(1);

        class OptionalContentGroup {
          constructor(name, intent) {
            this.visible = true;
            this.name = name;
            this.intent = intent;
          }

        }

        class OptionalContentConfig {
          constructor(data) {
            this.name = null;
            this.creator = null;
            this._order = null;
            this._groups = new Map();

            if (data === null) {
              return;
            }

            this.name = data.name;
            this.creator = data.creator;
            this._order = data.order;

            for (const group of data.groups) {
              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));
            }

            if (data.baseState === "OFF") {
              for (const group of this._groups) {
                group.visible = false;
              }
            }

            for (const on of data.on) {
              this._groups.get(on).visible = true;
            }

            for (const off of data.off) {
              this._groups.get(off).visible = false;
            }
          }

          _evaluateVisibilityExpression(array) {
            const length = array.length;

            if (length < 2) {
              return true;
            }

            const operator = array[0];

            for (let i = 1; i < length; i++) {
              const element = array[i];
              let state;

              if (Array.isArray(element)) {
                state = this._evaluateVisibilityExpression(element);
              } else if (this._groups.has(element)) {
                state = this._groups.get(element).visible;
              } else {
                (0, _util.warn)(`Optional content group not found: ${element}`);
                return true;
              }

              switch (operator) {
                case "And":
                  if (!state) {
                    return false;
                  }

                  break;

                case "Or":
                  if (state) {
                    return true;
                  }

                  break;

                case "Not":
                  return !state;

                default:
                  return true;
              }
            }

            return operator === "And";
          }

          isVisible(group) {
            if (this._groups.size === 0) {
              return true;
            }

            if (!group) {
              (0, _util.warn)("Optional content group not defined.");
              return true;
            }

            if (group.type === "OCG") {
              if (!this._groups.has(group.id)) {
                (0, _util.warn)(`Optional content group not found: ${group.id}`);
                return true;
              }

              return this._groups.get(group.id).visible;
            } else if (group.type === "OCMD") {
              if (group.expression) {
                return this._evaluateVisibilityExpression(group.expression);
              }

              if (!group.policy || group.policy === "AnyOn") {
                for (const id of group.ids) {
                  if (!this._groups.has(id)) {
                    (0, _util.warn)(`Optional content group not found: ${id}`);
                    return true;
                  }

                  if (this._groups.get(id).visible) {
                    return true;
                  }
                }

                return false;
              } else if (group.policy === "AllOn") {
                for (const id of group.ids) {
                  if (!this._groups.has(id)) {
                    (0, _util.warn)(`Optional content group not found: ${id}`);
                    return true;
                  }

                  if (!this._groups.get(id).visible) {
                    return false;
                  }
                }

                return true;
              } else if (group.policy === "AnyOff") {
                for (const id of group.ids) {
                  if (!this._groups.has(id)) {
                    (0, _util.warn)(`Optional content group not found: ${id}`);
                    return true;
                  }

                  if (!this._groups.get(id).visible) {
                    return true;
                  }
                }

                return false;
              } else if (group.policy === "AllOff") {
                for (const id of group.ids) {
                  if (!this._groups.has(id)) {
                    (0, _util.warn)(`Optional content group not found: ${id}`);
                    return true;
                  }

                  if (this._groups.get(id).visible) {
                    return false;
                  }
                }

                return true;
              }

              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);
              return true;
            }

            (0, _util.warn)(`Unknown group type ${group.type}.`);
            return true;
          }

          setVisibility(id, visible = true) {
            if (!this._groups.has(id)) {
              (0, _util.warn)(`Optional content group not found: ${id}`);
              return;
            }

            this._groups.get(id).visible = !!visible;
          }

          getOrder() {
            if (!this._groups.size) {
              return null;
            }

            if (this._order) {
              return this._order.slice();
            }

            return Array.from(this._groups.keys());
          }

          getGroups() {
            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;
          }

          getGroup(id) {
            return this._groups.get(id) || null;
          }

        }

        exports.OptionalContentConfig = OptionalContentConfig;
        /***/
      },
      /* 17 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFDataTransportStream = void 0;

        var _util = __w_pdfjs_require__(1);

        var _display_utils = __w_pdfjs_require__(5);

        class PDFDataTransportStream {
          constructor(params, pdfDataRangeTransport) {
            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
            this._queuedChunks = [];
            this._progressiveDone = params.progressiveDone || false;
            this._contentDispositionFilename = params.contentDispositionFilename || null;
            const initialData = params.initialData;

            if (initialData?.length > 0) {
              const buffer = new Uint8Array(initialData).buffer;

              this._queuedChunks.push(buffer);
            }

            this._pdfDataRangeTransport = pdfDataRangeTransport;
            this._isStreamingSupported = !params.disableStream;
            this._isRangeSupported = !params.disableRange;
            this._contentLength = params.length;
            this._fullRequestReader = null;
            this._rangeReaders = [];

            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {
              this._onReceiveData({
                begin,
                chunk
              });
            });

            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {
              this._onProgress({
                loaded,
                total
              });
            });

            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {
              this._onReceiveData({
                chunk
              });
            });

            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {
              this._onProgressiveDone();
            });

            this._pdfDataRangeTransport.transportReady();
          }

          _onReceiveData(args) {
            const buffer = new Uint8Array(args.chunk).buffer;

            if (args.begin === undefined) {
              if (this._fullRequestReader) {
                this._fullRequestReader._enqueue(buffer);
              } else {
                this._queuedChunks.push(buffer);
              }
            } else {
              const found = this._rangeReaders.some(function (rangeReader) {
                if (rangeReader._begin !== args.begin) {
                  return false;
                }

                rangeReader._enqueue(buffer);

                return true;
              });

              (0, _util.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
            }
          }

          get _progressiveDataLength() {
            return this._fullRequestReader?._loaded ?? 0;
          }

          _onProgress(evt) {
            if (evt.total === undefined) {
              const firstReader = this._rangeReaders[0];

              if (firstReader?.onProgress) {
                firstReader.onProgress({
                  loaded: evt.loaded
                });
              }
            } else {
              const fullReader = this._fullRequestReader;

              if (fullReader?.onProgress) {
                fullReader.onProgress({
                  loaded: evt.loaded,
                  total: evt.total
                });
              }
            }
          }

          _onProgressiveDone() {
            if (this._fullRequestReader) {
              this._fullRequestReader.progressiveDone();
            }

            this._progressiveDone = true;
          }

          _removeRangeReader(reader) {
            const i = this._rangeReaders.indexOf(reader);

            if (i >= 0) {
              this._rangeReaders.splice(i, 1);
            }
          }

          getFullReader() {
            (0, _util.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
            const queuedChunks = this._queuedChunks;
            this._queuedChunks = null;
            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
          }

          getRangeReader(begin, end) {
            if (end <= this._progressiveDataLength) {
              return null;
            }

            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);

            this._pdfDataRangeTransport.requestDataRange(begin, end);

            this._rangeReaders.push(reader);

            return reader;
          }

          cancelAllRequests(reason) {
            if (this._fullRequestReader) {
              this._fullRequestReader.cancel(reason);
            }

            for (const reader of this._rangeReaders.slice(0)) {
              reader.cancel(reason);
            }

            this._pdfDataRangeTransport.abort();
          }

        }

        exports.PDFDataTransportStream = PDFDataTransportStream;

        class PDFDataTransportStreamReader {
          constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {
            this._stream = stream;
            this._done = progressiveDone || false;
            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
            this._queuedChunks = queuedChunks || [];
            this._loaded = 0;

            for (const chunk of this._queuedChunks) {
              this._loaded += chunk.byteLength;
            }

            this._requests = [];
            this._headersReady = Promise.resolve();
            stream._fullRequestReader = this;
            this.onProgress = null;
          }

          _enqueue(chunk) {
            if (this._done) {
              return;
            }

            if (this._requests.length > 0) {
              const requestCapability = this._requests.shift();

              requestCapability.resolve({
                value: chunk,
                done: false
              });
            } else {
              this._queuedChunks.push(chunk);
            }

            this._loaded += chunk.byteLength;
          }

          get headersReady() {
            return this._headersReady;
          }

          get filename() {
            return this._filename;
          }

          get isRangeSupported() {
            return this._stream._isRangeSupported;
          }

          get isStreamingSupported() {
            return this._stream._isStreamingSupported;
          }

          get contentLength() {
            return this._stream._contentLength;
          }

          read() {
            var _this11 = this;

            return _asyncToGenerator(function* () {
              if (_this11._queuedChunks.length > 0) {
                const chunk = _this11._queuedChunks.shift();

                return {
                  value: chunk,
                  done: false
                };
              }

              if (_this11._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              const requestCapability = (0, _util.createPromiseCapability)();

              _this11._requests.push(requestCapability);

              return requestCapability.promise;
            })();
          }

          cancel(reason) {
            this._done = true;

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;
          }

          progressiveDone() {
            if (this._done) {
              return;
            }

            this._done = true;
          }

        }

        class PDFDataTransportStreamRangeReader {
          constructor(stream, begin, end) {
            this._stream = stream;
            this._begin = begin;
            this._end = end;
            this._queuedChunk = null;
            this._requests = [];
            this._done = false;
            this.onProgress = null;
          }

          _enqueue(chunk) {
            if (this._done) {
              return;
            }

            if (this._requests.length === 0) {
              this._queuedChunk = chunk;
            } else {
              const requestsCapability = this._requests.shift();

              requestsCapability.resolve({
                value: chunk,
                done: false
              });

              for (const requestCapability of this._requests) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              }

              this._requests.length = 0;
            }

            this._done = true;

            this._stream._removeRangeReader(this);
          }

          get isStreamingSupported() {
            return false;
          }

          read() {
            var _this12 = this;

            return _asyncToGenerator(function* () {
              if (_this12._queuedChunk) {
                const chunk = _this12._queuedChunk;
                _this12._queuedChunk = null;
                return {
                  value: chunk,
                  done: false
                };
              }

              if (_this12._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              const requestCapability = (0, _util.createPromiseCapability)();

              _this12._requests.push(requestCapability);

              return requestCapability.promise;
            })();
          }

          cancel(reason) {
            this._done = true;

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;

            this._stream._removeRangeReader(this);
          }

        }
        /***/

      },
      /* 18 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaText = void 0;

        class XfaText {
          static textContent(xfa) {
            const items = [];
            const output = {
              items,
              styles: Object.create(null)
            };

            function walk(node) {
              if (!node) {
                return;
              }

              let str = null;
              const name = node.name;

              if (name === "#text") {
                str = node.value;
              } else if (!XfaText.shouldBuildText(name)) {
                return;
              } else if (node?.attributes?.textContent) {
                str = node.attributes.textContent;
              } else if (node.value) {
                str = node.value;
              }

              if (str !== null) {
                items.push({
                  str
                });
              }

              if (!node.children) {
                return;
              }

              for (const child of node.children) {
                walk(child);
              }
            }

            walk(xfa);
            return output;
          }

          static shouldBuildText(name) {
            return !(name === "textarea" || name === "input" || name === "option" || name === "select");
          }

        }

        exports.XfaText = XfaText;
        /***/
      },
      /* 19 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NodeStandardFontDataFactory = exports.NodeCanvasFactory = exports.NodeCMapReaderFactory = void 0;

        var _base_factory = __w_pdfjs_require__(6);

        ;

        const fetchData = function (url) {
          return new Promise((resolve, reject) => {
            const fs = __webpack_require__(/*! fs */ 172);

            fs.readFile(url, (error, data) => {
              if (error || !data) {
                reject(new Error(error));
                return;
              }

              resolve(new Uint8Array(data));
            });
          });
        };

        class NodeCanvasFactory extends _base_factory.BaseCanvasFactory {
          _createCanvas(width, height) {
            const Canvas = __webpack_require__(/*! canvas */ 3414);

            return Canvas.createCanvas(width, height);
          }

        }

        exports.NodeCanvasFactory = NodeCanvasFactory;

        class NodeCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {
          _fetchData(url, compressionType) {
            return fetchData(url).then(data => {
              return {
                cMapData: data,
                compressionType
              };
            });
          }

        }

        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;

        class NodeStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {
          _fetchData(url) {
            return fetchData(url);
          }

        }

        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;
        /***/
      },
      /* 20 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationLayer = void 0;

        var _util = __w_pdfjs_require__(1);

        var _display_utils = __w_pdfjs_require__(5);

        var _annotation_storage = __w_pdfjs_require__(8);

        var _scripting_utils = __w_pdfjs_require__(21);

        var _xfa_layer = __w_pdfjs_require__(22);

        const DEFAULT_TAB_INDEX = 1000;
        const GetElementsByNameSet = new WeakSet();

        function getRectDims(rect) {
          return {
            width: rect[2] - rect[0],
            height: rect[3] - rect[1]
          };
        }

        class AnnotationElementFactory {
          static create(parameters) {
            const subtype = parameters.data.annotationType;

            switch (subtype) {
              case _util.AnnotationType.LINK:
                return new LinkAnnotationElement(parameters);

              case _util.AnnotationType.TEXT:
                return new TextAnnotationElement(parameters);

              case _util.AnnotationType.WIDGET:
                const fieldType = parameters.data.fieldType;

                switch (fieldType) {
                  case "Tx":
                    return new TextWidgetAnnotationElement(parameters);

                  case "Btn":
                    if (parameters.data.radioButton) {
                      return new RadioButtonWidgetAnnotationElement(parameters);
                    } else if (parameters.data.checkBox) {
                      return new CheckboxWidgetAnnotationElement(parameters);
                    }

                    return new PushButtonWidgetAnnotationElement(parameters);

                  case "Ch":
                    return new ChoiceWidgetAnnotationElement(parameters);
                }

                return new WidgetAnnotationElement(parameters);

              case _util.AnnotationType.POPUP:
                return new PopupAnnotationElement(parameters);

              case _util.AnnotationType.FREETEXT:
                return new FreeTextAnnotationElement(parameters);

              case _util.AnnotationType.LINE:
                return new LineAnnotationElement(parameters);

              case _util.AnnotationType.SQUARE:
                return new SquareAnnotationElement(parameters);

              case _util.AnnotationType.CIRCLE:
                return new CircleAnnotationElement(parameters);

              case _util.AnnotationType.POLYLINE:
                return new PolylineAnnotationElement(parameters);

              case _util.AnnotationType.CARET:
                return new CaretAnnotationElement(parameters);

              case _util.AnnotationType.INK:
                return new InkAnnotationElement(parameters);

              case _util.AnnotationType.POLYGON:
                return new PolygonAnnotationElement(parameters);

              case _util.AnnotationType.HIGHLIGHT:
                return new HighlightAnnotationElement(parameters);

              case _util.AnnotationType.UNDERLINE:
                return new UnderlineAnnotationElement(parameters);

              case _util.AnnotationType.SQUIGGLY:
                return new SquigglyAnnotationElement(parameters);

              case _util.AnnotationType.STRIKEOUT:
                return new StrikeOutAnnotationElement(parameters);

              case _util.AnnotationType.STAMP:
                return new StampAnnotationElement(parameters);

              case _util.AnnotationType.FILEATTACHMENT:
                return new FileAttachmentAnnotationElement(parameters);

              default:
                return new AnnotationElement(parameters);
            }
          }

        }

        class AnnotationElement {
          constructor(parameters, {
            isRenderable = false,
            ignoreBorder = false,
            createQuadrilaterals = false
          } = {}) {
            this.isRenderable = isRenderable;
            this.data = parameters.data;
            this.layer = parameters.layer;
            this.page = parameters.page;
            this.viewport = parameters.viewport;
            this.linkService = parameters.linkService;
            this.downloadManager = parameters.downloadManager;
            this.imageResourcesPath = parameters.imageResourcesPath;
            this.renderForms = parameters.renderForms;
            this.svgFactory = parameters.svgFactory;
            this.annotationStorage = parameters.annotationStorage;
            this.enableScripting = parameters.enableScripting;
            this.hasJSActions = parameters.hasJSActions;
            this._fieldObjects = parameters.fieldObjects;
            this._mouseState = parameters.mouseState;

            if (isRenderable) {
              this.container = this._createContainer(ignoreBorder);
            }

            if (createQuadrilaterals) {
              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);
            }
          }

          _createContainer(ignoreBorder = false) {
            const data = this.data,
                  page = this.page,
                  viewport = this.viewport;
            const container = document.createElement("section");
            let {
              width,
              height
            } = getRectDims(data.rect);
            container.setAttribute("data-annotation-id", data.id);

            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);

            if (data.hasOwnCanvas) {
              const transform = viewport.transform.slice();

              const [scaleX, scaleY] = _util.Util.singularValueDecompose2dScale(transform);

              width = Math.ceil(width * scaleX);
              height = Math.ceil(height * scaleY);
              rect[0] *= scaleX;
              rect[1] *= scaleY;

              for (let i = 0; i < 4; i++) {
                transform[i] = Math.sign(transform[i]);
              }

              container.style.transform = `matrix(${transform.join(",")})`;
            } else {
              container.style.transform = `matrix(${viewport.transform.join(",")})`;
            }

            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;

            if (!ignoreBorder && data.borderStyle.width > 0) {
              container.style.borderWidth = `${data.borderStyle.width}px`;

              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
                width -= 2 * data.borderStyle.width;
                height -= 2 * data.borderStyle.width;
              }

              const horizontalRadius = data.borderStyle.horizontalCornerRadius;
              const verticalRadius = data.borderStyle.verticalCornerRadius;

              if (horizontalRadius > 0 || verticalRadius > 0) {
                const radius = `${horizontalRadius}px / ${verticalRadius}px`;
                container.style.borderRadius = radius;
              }

              switch (data.borderStyle.style) {
                case _util.AnnotationBorderStyleType.SOLID:
                  container.style.borderStyle = "solid";
                  break;

                case _util.AnnotationBorderStyleType.DASHED:
                  container.style.borderStyle = "dashed";
                  break;

                case _util.AnnotationBorderStyleType.BEVELED:
                  (0, _util.warn)("Unimplemented border style: beveled");
                  break;

                case _util.AnnotationBorderStyleType.INSET:
                  (0, _util.warn)("Unimplemented border style: inset");
                  break;

                case _util.AnnotationBorderStyleType.UNDERLINE:
                  container.style.borderBottomStyle = "solid";
                  break;

                default:
                  break;
              }

              const borderColor = data.borderColor || data.color || null;

              if (borderColor) {
                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
              } else {
                container.style.borderWidth = 0;
              }
            }

            container.style.left = `${rect[0]}px`;
            container.style.top = `${rect[1]}px`;

            if (data.hasOwnCanvas) {
              container.style.width = container.style.height = "auto";
            } else {
              container.style.width = `${width}px`;
              container.style.height = `${height}px`;
            }

            return container;
          }

          get _commonActions() {
            const setColor = (jsName, styleName, event) => {
              const color = event.detail[jsName];
              event.target.style[styleName] = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));
            };

            return (0, _util.shadow)(this, "_commonActions", {
              display: event => {
                const hidden = event.detail.display % 2 === 1;
                event.target.style.visibility = hidden ? "hidden" : "visible";
                this.annotationStorage.setValue(this.data.id, {
                  hidden,
                  print: event.detail.display === 0 || event.detail.display === 3
                });
              },
              print: event => {
                this.annotationStorage.setValue(this.data.id, {
                  print: event.detail.print
                });
              },
              hidden: event => {
                event.target.style.visibility = event.detail.hidden ? "hidden" : "visible";
                this.annotationStorage.setValue(this.data.id, {
                  hidden: event.detail.hidden
                });
              },
              focus: event => {
                setTimeout(() => event.target.focus({
                  preventScroll: false
                }), 0);
              },
              userName: event => {
                event.target.title = event.detail.userName;
              },
              readonly: event => {
                if (event.detail.readonly) {
                  event.target.setAttribute("readonly", "");
                } else {
                  event.target.removeAttribute("readonly");
                }
              },
              required: event => {
                if (event.detail.required) {
                  event.target.setAttribute("required", "");
                } else {
                  event.target.removeAttribute("required");
                }
              },
              bgColor: event => {
                setColor("bgColor", "backgroundColor", event);
              },
              fillColor: event => {
                setColor("fillColor", "backgroundColor", event);
              },
              fgColor: event => {
                setColor("fgColor", "color", event);
              },
              textColor: event => {
                setColor("textColor", "color", event);
              },
              borderColor: event => {
                setColor("borderColor", "borderColor", event);
              },
              strokeColor: event => {
                setColor("strokeColor", "borderColor", event);
              }
            });
          }

          _dispatchEventFromSandbox(actions, jsEvent) {
            const commonActions = this._commonActions;

            for (const name of Object.keys(jsEvent.detail)) {
              const action = actions[name] || commonActions[name];

              if (action) {
                action(jsEvent);
              }
            }
          }

          _setDefaultPropertiesFromJS(element) {
            if (!this.enableScripting) {
              return;
            }

            const storedData = this.annotationStorage.getRawValue(this.data.id);

            if (!storedData) {
              return;
            }

            const commonActions = this._commonActions;

            for (const [actionName, detail] of Object.entries(storedData)) {
              const action = commonActions[actionName];

              if (action) {
                action({
                  detail,
                  target: element
                });
                delete storedData[actionName];
              }
            }
          }

          _createQuadrilaterals(ignoreBorder = false) {
            if (!this.data.quadPoints) {
              return null;
            }

            const quadrilaterals = [];
            const savedRect = this.data.rect;

            for (const quadPoint of this.data.quadPoints) {
              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];
              quadrilaterals.push(this._createContainer(ignoreBorder));
            }

            this.data.rect = savedRect;
            return quadrilaterals;
          }

          _createPopup(trigger, data) {
            let container = this.container;

            if (this.quadrilaterals) {
              trigger = trigger || this.quadrilaterals;
              container = this.quadrilaterals[0];
            }

            if (!trigger) {
              trigger = document.createElement("div");
              trigger.style.height = container.style.height;
              trigger.style.width = container.style.width;
              container.appendChild(trigger);
            }

            const popupElement = new PopupElement({
              container,
              trigger,
              color: data.color,
              titleObj: data.titleObj,
              modificationDate: data.modificationDate,
              contentsObj: data.contentsObj,
              richText: data.richText,
              hideWrapper: true
            });
            const popup = popupElement.render();
            popup.style.left = container.style.width;
            container.appendChild(popup);
          }

          _renderQuadrilaterals(className) {
            for (const quadrilateral of this.quadrilaterals) {
              quadrilateral.className = className;
            }

            return this.quadrilaterals;
          }

          render() {
            (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");
          }

          _getElementsByName(name, skipId = null) {
            const fields = [];

            if (this._fieldObjects) {
              const fieldObj = this._fieldObjects[name];

              if (fieldObj) {
                for (const {
                  page,
                  id,
                  exportValues
                } of fieldObj) {
                  if (page === -1) {
                    continue;
                  }

                  if (id === skipId) {
                    continue;
                  }

                  const exportValue = typeof exportValues === "string" ? exportValues : null;
                  const domElement = document.getElementById(id);

                  if (domElement && !GetElementsByNameSet.has(domElement)) {
                    (0, _util.warn)(`_getElementsByName - element not allowed: ${id}`);
                    continue;
                  }

                  fields.push({
                    id,
                    exportValue,
                    domElement
                  });
                }
              }

              return fields;
            }

            for (const domElement of document.getElementsByName(name)) {
              const {
                id,
                exportValue
              } = domElement;

              if (id === skipId) {
                continue;
              }

              if (!GetElementsByNameSet.has(domElement)) {
                continue;
              }

              fields.push({
                id,
                exportValue,
                domElement
              });
            }

            return fields;
          }

          static get platform() {
            const platform = typeof navigator !== "undefined" ? navigator.platform : "";
            return (0, _util.shadow)(this, "platform", {
              isWin: platform.includes("Win"),
              isMac: platform.includes("Mac")
            });
          }

        }

        class LinkAnnotationElement extends AnnotationElement {
          constructor(parameters, options = null) {
            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.resetForm || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions["Mouse Up"] || parameters.data.actions["Mouse Down"]));
            super(parameters, {
              isRenderable,
              ignoreBorder: !!options?.ignoreBorder,
              createQuadrilaterals: true
            });
          }

          render() {
            const {
              data,
              linkService
            } = this;
            const link = document.createElement("a");

            if (data.url) {
              linkService.addLinkAttributes(link, data.url, data.newWindow);
            } else if (data.action) {
              this._bindNamedAction(link, data.action);
            } else if (data.dest) {
              this._bindLink(link, data.dest);
            } else {
              let hasClickAction = false;

              if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                hasClickAction = true;

                this._bindJSAction(link, data);
              }

              if (data.resetForm) {
                this._bindResetFormAction(link, data.resetForm);
              } else if (!hasClickAction) {
                this._bindLink(link, "");
              }
            }

            if (this.quadrilaterals) {
              return this._renderQuadrilaterals("linkAnnotation").map((quadrilateral, index) => {
                const linkElement = index === 0 ? link : link.cloneNode();
                quadrilateral.appendChild(linkElement);
                return quadrilateral;
              });
            }

            this.container.className = "linkAnnotation";
            this.container.appendChild(link);
            return this.container;
          }

          _bindLink(link, destination) {
            link.href = this.linkService.getDestinationHash(destination);

            link.onclick = () => {
              if (destination) {
                this.linkService.goToDestination(destination);
              }

              return false;
            };

            if (destination || destination === "") {
              link.className = "internalLink";
            }
          }

          _bindNamedAction(link, action) {
            link.href = this.linkService.getAnchorUrl("");

            link.onclick = () => {
              this.linkService.executeNamedAction(action);
              return false;
            };

            link.className = "internalLink";
          }

          _bindJSAction(link, data) {
            link.href = this.linkService.getAnchorUrl("");
            const map = new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);

            for (const name of Object.keys(data.actions)) {
              const jsName = map.get(name);

              if (!jsName) {
                continue;
              }

              link[jsName] = () => {
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: data.id,
                    name
                  }
                });
                return false;
              };
            }

            if (!link.onclick) {
              link.onclick = () => false;
            }

            link.className = "internalLink";
          }

          _bindResetFormAction(link, resetForm) {
            const otherClickAction = link.onclick;

            if (!otherClickAction) {
              link.href = this.linkService.getAnchorUrl("");
            }

            link.className = "internalLink";

            if (!this._fieldObjects) {
              (0, _util.warn)(`_bindResetFormAction - "resetForm" action not supported, ` + "ensure that the `fieldObjects` parameter is provided.");

              if (!otherClickAction) {
                link.onclick = () => false;
              }

              return;
            }

            link.onclick = () => {
              if (otherClickAction) {
                otherClickAction();
              }

              const {
                fields: resetFormFields,
                refs: resetFormRefs,
                include
              } = resetForm;
              const allFields = [];

              if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {
                const fieldIds = new Set(resetFormRefs);

                for (const fieldName of resetFormFields) {
                  const fields = this._fieldObjects[fieldName] || [];

                  for (const {
                    id
                  } of fields) {
                    fieldIds.add(id);
                  }
                }

                for (const fields of Object.values(this._fieldObjects)) {
                  for (const field of fields) {
                    if (fieldIds.has(field.id) === include) {
                      allFields.push(field);
                    }
                  }
                }
              } else {
                for (const fields of Object.values(this._fieldObjects)) {
                  allFields.push(...fields);
                }
              }

              const storage = this.annotationStorage;
              const allIds = [];

              for (const field of allFields) {
                const {
                  id
                } = field;
                allIds.push(id);

                switch (field.type) {
                  case "text":
                    {
                      const value = field.defaultValue || "";
                      storage.setValue(id, {
                        value
                      });
                      break;
                    }

                  case "checkbox":
                  case "radiobutton":
                    {
                      const value = field.defaultValue === field.exportValues;
                      storage.setValue(id, {
                        value
                      });
                      break;
                    }

                  case "combobox":
                  case "listbox":
                    {
                      const value = field.defaultValue || "";
                      storage.setValue(id, {
                        value
                      });
                      break;
                    }

                  default:
                    continue;
                }

                const domElement = document.getElementById(id);

                if (!domElement || !GetElementsByNameSet.has(domElement)) {
                  continue;
                }

                domElement.dispatchEvent(new Event("resetform"));
              }

              if (this.enableScripting) {
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: "app",
                    ids: allIds,
                    name: "ResetForm"
                  }
                });
              }

              return false;
            };
          }

        }

        class TextAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable
            });
          }

          render() {
            this.container.className = "textAnnotation";
            const image = document.createElement("img");
            image.style.height = this.container.style.height;
            image.style.width = this.container.style.width;
            image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
            image.alt = "[{{type}} Annotation]";
            image.dataset.l10nId = "text_annotation_type";
            image.dataset.l10nArgs = JSON.stringify({
              type: this.data.name
            });

            if (!this.data.hasPopup) {
              this._createPopup(image, this.data);
            }

            this.container.appendChild(image);
            return this.container;
          }

        }

        class WidgetAnnotationElement extends AnnotationElement {
          render() {
            if (this.data.alternativeText) {
              this.container.title = this.data.alternativeText;
            }

            return this.container;
          }

          _getKeyModifier(event) {
            const {
              isWin,
              isMac
            } = AnnotationElement.platform;
            return isWin && event.ctrlKey || isMac && event.metaKey;
          }

          _setEventListener(element, baseName, eventName, valueGetter) {
            if (baseName.includes("mouse")) {
              element.addEventListener(baseName, event => {
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: this.data.id,
                    name: eventName,
                    value: valueGetter(event),
                    shift: event.shiftKey,
                    modifier: this._getKeyModifier(event)
                  }
                });
              });
            } else {
              element.addEventListener(baseName, event => {
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id: this.data.id,
                    name: eventName,
                    value: valueGetter(event)
                  }
                });
              });
            }
          }

          _setEventListeners(element, names, getter) {
            for (const [baseName, eventName] of names) {
              if (eventName === "Action" || this.data.actions?.[eventName]) {
                this._setEventListener(element, baseName, eventName, getter);
              }
            }
          }

          _setBackgroundColor(element) {
            const color = this.data.backgroundColor || null;
            element.style.backgroundColor = color === null ? "transparent" : _util.Util.makeHexColor(color[0], color[1], color[2]);
          }

        }

        class TextWidgetAnnotationElement extends WidgetAnnotationElement {
          constructor(parameters) {
            const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
            super(parameters, {
              isRenderable
            });
          }

          setPropertyOnSiblings(base, key, value, keyInStorage) {
            const storage = this.annotationStorage;

            for (const element of this._getElementsByName(base.name, base.id)) {
              if (element.domElement) {
                element.domElement[key] = value;
              }

              storage.setValue(element.id, {
                [keyInStorage]: value
              });
            }
          }

          render() {
            const storage = this.annotationStorage;
            const id = this.data.id;
            this.container.className = "textWidgetAnnotation";
            let element = null;

            if (this.renderForms) {
              const storedData = storage.getValue(id, {
                value: this.data.fieldValue
              });
              const textContent = storedData.formattedValue || storedData.value || "";
              const elementData = {
                userValue: null,
                formattedValue: null,
                valueOnFocus: ""
              };

              if (this.data.multiLine) {
                element = document.createElement("textarea");
                element.textContent = textContent;
              } else {
                element = document.createElement("input");
                element.type = "text";
                element.setAttribute("value", textContent);
              }

              GetElementsByNameSet.add(element);
              element.disabled = this.data.readOnly;
              element.name = this.data.fieldName;
              element.tabIndex = DEFAULT_TAB_INDEX;
              elementData.userValue = textContent;
              element.setAttribute("id", id);
              element.addEventListener("input", event => {
                storage.setValue(id, {
                  value: event.target.value
                });
                this.setPropertyOnSiblings(element, "value", event.target.value, "value");
              });
              element.addEventListener("resetform", event => {
                const defaultValue = this.data.defaultFieldValue ?? "";
                element.value = elementData.userValue = defaultValue;
                elementData.formattedValue = null;
              });

              let blurListener = event => {
                const {
                  formattedValue
                } = elementData;

                if (formattedValue !== null && formattedValue !== undefined) {
                  event.target.value = formattedValue;
                }

                event.target.scrollLeft = 0;
              };

              if (this.enableScripting && this.hasJSActions) {
                element.addEventListener("focus", event => {
                  if (elementData.userValue) {
                    event.target.value = elementData.userValue;
                  }

                  elementData.valueOnFocus = event.target.value;
                });
                element.addEventListener("updatefromsandbox", jsEvent => {
                  const actions = {
                    value(event) {
                      elementData.userValue = event.detail.value ?? "";
                      storage.setValue(id, {
                        value: elementData.userValue.toString()
                      });
                      event.target.value = elementData.userValue;
                    },

                    formattedValue(event) {
                      const {
                        formattedValue
                      } = event.detail;
                      elementData.formattedValue = formattedValue;

                      if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {
                        event.target.value = formattedValue;
                      }

                      storage.setValue(id, {
                        formattedValue
                      });
                    },

                    selRange(event) {
                      event.target.setSelectionRange(...event.detail.selRange);
                    }

                  };

                  this._dispatchEventFromSandbox(actions, jsEvent);
                });
                element.addEventListener("keydown", event => {
                  let commitKey = -1;

                  if (event.key === "Escape") {
                    commitKey = 0;
                  } else if (event.key === "Enter") {
                    commitKey = 2;
                  } else if (event.key === "Tab") {
                    commitKey = 3;
                  }

                  if (commitKey === -1) {
                    return;
                  }

                  const {
                    value
                  } = event.target;

                  if (elementData.valueOnFocus === value) {
                    return;
                  }

                  elementData.userValue = value;
                  this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                    source: this,
                    detail: {
                      id,
                      name: "Keystroke",
                      value,
                      willCommit: true,
                      commitKey,
                      selStart: event.target.selectionStart,
                      selEnd: event.target.selectionEnd
                    }
                  });
                });
                const _blurListener = blurListener;
                blurListener = null;
                element.addEventListener("blur", event => {
                  const {
                    value
                  } = event.target;
                  elementData.userValue = value;

                  if (this._mouseState.isDown && elementData.valueOnFocus !== value) {
                    this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                      source: this,
                      detail: {
                        id,
                        name: "Keystroke",
                        value,
                        willCommit: true,
                        commitKey: 1,
                        selStart: event.target.selectionStart,
                        selEnd: event.target.selectionEnd
                      }
                    });
                  }

                  _blurListener(event);
                });

                if (this.data.actions?.Keystroke) {
                  element.addEventListener("beforeinput", event => {
                    const {
                      data,
                      target
                    } = event;
                    const {
                      value,
                      selectionStart,
                      selectionEnd
                    } = target;
                    let selStart = selectionStart,
                        selEnd = selectionEnd;

                    switch (event.inputType) {
                      case "deleteWordBackward":
                        {
                          const match = value.substring(0, selectionStart).match(/\w*[^\w]*$/);

                          if (match) {
                            selStart -= match[0].length;
                          }

                          break;
                        }

                      case "deleteWordForward":
                        {
                          const match = value.substring(selectionStart).match(/^[^\w]*\w*/);

                          if (match) {
                            selEnd += match[0].length;
                          }

                          break;
                        }

                      case "deleteContentBackward":
                        if (selectionStart === selectionEnd) {
                          selStart -= 1;
                        }

                        break;

                      case "deleteContentForward":
                        if (selectionStart === selectionEnd) {
                          selEnd += 1;
                        }

                        break;
                    }

                    event.preventDefault();
                    this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                      source: this,
                      detail: {
                        id,
                        name: "Keystroke",
                        value,
                        change: data || "",
                        willCommit: false,
                        selStart,
                        selEnd
                      }
                    });
                  });
                }

                this._setEventListeners(element, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], event => event.target.value);
              }

              if (blurListener) {
                element.addEventListener("blur", blurListener);
              }

              if (this.data.maxLen !== null) {
                element.maxLength = this.data.maxLen;
              }

              if (this.data.comb) {
                const fieldWidth = this.data.rect[2] - this.data.rect[0];
                const combWidth = fieldWidth / this.data.maxLen;
                element.classList.add("comb");
                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;
              }
            } else {
              element = document.createElement("div");
              element.textContent = this.data.fieldValue;
              element.style.verticalAlign = "middle";
              element.style.display = "table-cell";
            }

            this._setTextStyle(element);

            this._setBackgroundColor(element);

            this._setDefaultPropertiesFromJS(element);

            this.container.appendChild(element);
            return this.container;
          }

          _setTextStyle(element) {
            const TEXT_ALIGNMENT = ["left", "center", "right"];
            const {
              fontSize,
              fontColor
            } = this.data.defaultAppearanceData;
            const style = element.style;

            if (fontSize) {
              style.fontSize = `${fontSize}px`;
            }

            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);

            if (this.data.textAlignment !== null) {
              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
            }
          }

        }

        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {
          constructor(parameters) {
            super(parameters, {
              isRenderable: parameters.renderForms
            });
          }

          render() {
            const storage = this.annotationStorage;
            const data = this.data;
            const id = data.id;
            let value = storage.getValue(id, {
              value: data.exportValue === data.fieldValue
            }).value;

            if (typeof value === "string") {
              value = value !== "Off";
              storage.setValue(id, {
                value
              });
            }

            this.container.className = "buttonWidgetAnnotation checkBox";
            const element = document.createElement("input");
            GetElementsByNameSet.add(element);
            element.disabled = data.readOnly;
            element.type = "checkbox";
            element.name = data.fieldName;

            if (value) {
              element.setAttribute("checked", true);
            }

            element.setAttribute("id", id);
            element.setAttribute("exportValue", data.exportValue);
            element.tabIndex = DEFAULT_TAB_INDEX;
            element.addEventListener("change", event => {
              const {
                name,
                checked
              } = event.target;

              for (const checkbox of this._getElementsByName(name, id)) {
                const curChecked = checked && checkbox.exportValue === data.exportValue;

                if (checkbox.domElement) {
                  checkbox.domElement.checked = curChecked;
                }

                storage.setValue(checkbox.id, {
                  value: curChecked
                });
              }

              storage.setValue(id, {
                value: checked
              });
            });
            element.addEventListener("resetform", event => {
              const defaultValue = data.defaultFieldValue || "Off";
              event.target.checked = defaultValue === data.exportValue;
            });

            if (this.enableScripting && this.hasJSActions) {
              element.addEventListener("updatefromsandbox", jsEvent => {
                const actions = {
                  value(event) {
                    event.target.checked = event.detail.value !== "Off";
                    storage.setValue(id, {
                      value: event.target.checked
                    });
                  }

                };

                this._dispatchEventFromSandbox(actions, jsEvent);
              });

              this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], event => event.target.checked);
            }

            this._setBackgroundColor(element);

            this._setDefaultPropertiesFromJS(element);

            this.container.appendChild(element);
            return this.container;
          }

        }

        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {
          constructor(parameters) {
            super(parameters, {
              isRenderable: parameters.renderForms
            });
          }

          render() {
            this.container.className = "buttonWidgetAnnotation radioButton";
            const storage = this.annotationStorage;
            const data = this.data;
            const id = data.id;
            let value = storage.getValue(id, {
              value: data.fieldValue === data.buttonValue
            }).value;

            if (typeof value === "string") {
              value = value !== data.buttonValue;
              storage.setValue(id, {
                value
              });
            }

            const element = document.createElement("input");
            GetElementsByNameSet.add(element);
            element.disabled = data.readOnly;
            element.type = "radio";
            element.name = data.fieldName;

            if (value) {
              element.setAttribute("checked", true);
            }

            element.setAttribute("id", id);
            element.tabIndex = DEFAULT_TAB_INDEX;
            element.addEventListener("change", event => {
              const {
                name,
                checked
              } = event.target;

              for (const radio of this._getElementsByName(name, id)) {
                storage.setValue(radio.id, {
                  value: false
                });
              }

              storage.setValue(id, {
                value: checked
              });
            });
            element.addEventListener("resetform", event => {
              const defaultValue = data.defaultFieldValue;
              event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;
            });

            if (this.enableScripting && this.hasJSActions) {
              const pdfButtonValue = data.buttonValue;
              element.addEventListener("updatefromsandbox", jsEvent => {
                const actions = {
                  value: event => {
                    const checked = pdfButtonValue === event.detail.value;

                    for (const radio of this._getElementsByName(event.target.name)) {
                      const curChecked = checked && radio.id === id;

                      if (radio.domElement) {
                        radio.domElement.checked = curChecked;
                      }

                      storage.setValue(radio.id, {
                        value: curChecked
                      });
                    }
                  }
                };

                this._dispatchEventFromSandbox(actions, jsEvent);
              });

              this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], event => event.target.checked);
            }

            this._setBackgroundColor(element);

            this._setDefaultPropertiesFromJS(element);

            this.container.appendChild(element);
            return this.container;
          }

        }

        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {
          constructor(parameters) {
            super(parameters, {
              ignoreBorder: parameters.data.hasAppearance
            });
          }

          render() {
            const container = super.render();
            container.className = "buttonWidgetAnnotation pushButton";

            if (this.data.alternativeText) {
              container.title = this.data.alternativeText;
            }

            this._setDefaultPropertiesFromJS(container);

            return container;
          }

        }

        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {
          constructor(parameters) {
            super(parameters, {
              isRenderable: parameters.renderForms
            });
          }

          render() {
            this.container.className = "choiceWidgetAnnotation";
            const storage = this.annotationStorage;
            const id = this.data.id;
            const storedData = storage.getValue(id, {
              value: this.data.fieldValue
            });
            let {
              fontSize
            } = this.data.defaultAppearanceData;

            if (!fontSize) {
              fontSize = 9;
            }

            const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;
            const selectElement = document.createElement("select");
            GetElementsByNameSet.add(selectElement);
            selectElement.disabled = this.data.readOnly;
            selectElement.name = this.data.fieldName;
            selectElement.setAttribute("id", id);
            selectElement.tabIndex = DEFAULT_TAB_INDEX;
            selectElement.style.fontSize = `${fontSize}px`;

            if (!this.data.combo) {
              selectElement.size = this.data.options.length;

              if (this.data.multiSelect) {
                selectElement.multiple = true;
              }
            }

            selectElement.addEventListener("resetform", event => {
              const defaultValue = this.data.defaultFieldValue;

              for (const option of selectElement.options) {
                option.selected = option.value === defaultValue;
              }
            });

            for (const option of this.data.options) {
              const optionElement = document.createElement("option");
              optionElement.textContent = option.displayValue;
              optionElement.value = option.exportValue;

              if (this.data.combo) {
                optionElement.style.fontSize = fontSizeStyle;
              }

              if (storedData.value.includes(option.exportValue)) {
                optionElement.setAttribute("selected", true);
              }

              selectElement.appendChild(optionElement);
            }

            const getValue = (event, isExport) => {
              const name = isExport ? "value" : "textContent";
              const options = event.target.options;

              if (!event.target.multiple) {
                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
              }

              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);
            };

            const getItems = event => {
              const options = event.target.options;
              return Array.prototype.map.call(options, option => {
                return {
                  displayValue: option.textContent,
                  exportValue: option.value
                };
              });
            };

            if (this.enableScripting && this.hasJSActions) {
              selectElement.addEventListener("updatefromsandbox", jsEvent => {
                const actions = {
                  value(event) {
                    const value = event.detail.value;
                    const values = new Set(Array.isArray(value) ? value : [value]);

                    for (const option of selectElement.options) {
                      option.selected = values.has(option.value);
                    }

                    storage.setValue(id, {
                      value: getValue(event, true)
                    });
                  },

                  multipleSelection(event) {
                    selectElement.multiple = true;
                  },

                  remove(event) {
                    const options = selectElement.options;
                    const index = event.detail.remove;
                    options[index].selected = false;
                    selectElement.remove(index);

                    if (options.length > 0) {
                      const i = Array.prototype.findIndex.call(options, option => option.selected);

                      if (i === -1) {
                        options[0].selected = true;
                      }
                    }

                    storage.setValue(id, {
                      value: getValue(event, true),
                      items: getItems(event)
                    });
                  },

                  clear(event) {
                    while (selectElement.length !== 0) {
                      selectElement.remove(0);
                    }

                    storage.setValue(id, {
                      value: null,
                      items: []
                    });
                  },

                  insert(event) {
                    const {
                      index,
                      displayValue,
                      exportValue
                    } = event.detail.insert;
                    const optionElement = document.createElement("option");
                    optionElement.textContent = displayValue;
                    optionElement.value = exportValue;
                    selectElement.insertBefore(optionElement, selectElement.children[index]);
                    storage.setValue(id, {
                      value: getValue(event, true),
                      items: getItems(event)
                    });
                  },

                  items(event) {
                    const {
                      items
                    } = event.detail;

                    while (selectElement.length !== 0) {
                      selectElement.remove(0);
                    }

                    for (const item of items) {
                      const {
                        displayValue,
                        exportValue
                      } = item;
                      const optionElement = document.createElement("option");
                      optionElement.textContent = displayValue;
                      optionElement.value = exportValue;
                      selectElement.appendChild(optionElement);
                    }

                    if (selectElement.options.length > 0) {
                      selectElement.options[0].selected = true;
                    }

                    storage.setValue(id, {
                      value: getValue(event, true),
                      items: getItems(event)
                    });
                  },

                  indices(event) {
                    const indices = new Set(event.detail.indices);

                    for (const option of event.target.options) {
                      option.selected = indices.has(option.index);
                    }

                    storage.setValue(id, {
                      value: getValue(event, true)
                    });
                  },

                  editable(event) {
                    event.target.disabled = !event.detail.editable;
                  }

                };

                this._dispatchEventFromSandbox(actions, jsEvent);
              });
              selectElement.addEventListener("input", event => {
                const exportValue = getValue(event, true);
                const value = getValue(event, false);
                storage.setValue(id, {
                  value: exportValue
                });
                this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                  source: this,
                  detail: {
                    id,
                    name: "Keystroke",
                    value,
                    changeEx: exportValue,
                    willCommit: true,
                    commitKey: 1,
                    keyDown: false
                  }
                });
              });

              this._setEventListeners(selectElement, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"]], event => event.target.checked);
            } else {
              selectElement.addEventListener("input", function (event) {
                storage.setValue(id, {
                  value: getValue(event, true)
                });
              });
            }

            this._setBackgroundColor(selectElement);

            this._setDefaultPropertiesFromJS(selectElement);

            this.container.appendChild(selectElement);
            return this.container;
          }

        }

        class PopupAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable
            });
          }

          render() {
            const IGNORE_TYPES = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];
            this.container.className = "popupAnnotation";

            if (IGNORE_TYPES.includes(this.data.parentType)) {
              return this.container;
            }

            const selector = `[data-annotation-id="${this.data.parentId}"]`;
            const parentElements = this.layer.querySelectorAll(selector);

            if (parentElements.length === 0) {
              return this.container;
            }

            const popup = new PopupElement({
              container: this.container,
              trigger: Array.from(parentElements),
              color: this.data.color,
              titleObj: this.data.titleObj,
              modificationDate: this.data.modificationDate,
              contentsObj: this.data.contentsObj,
              richText: this.data.richText
            });
            const page = this.page;

            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);

            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];
            const popupTop = rect[1];
            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;
            this.container.style.left = `${popupLeft}px`;
            this.container.style.top = `${popupTop}px`;
            this.container.appendChild(popup.render());
            return this.container;
          }

        }

        class PopupElement {
          constructor(parameters) {
            this.container = parameters.container;
            this.trigger = parameters.trigger;
            this.color = parameters.color;
            this.titleObj = parameters.titleObj;
            this.modificationDate = parameters.modificationDate;
            this.contentsObj = parameters.contentsObj;
            this.richText = parameters.richText;
            this.hideWrapper = parameters.hideWrapper || false;
            this.pinned = false;
          }

          render() {
            const BACKGROUND_ENLIGHT = 0.7;
            const wrapper = document.createElement("div");
            wrapper.className = "popupWrapper";
            this.hideElement = this.hideWrapper ? wrapper : this.container;
            this.hideElement.hidden = true;
            const popup = document.createElement("div");
            popup.className = "popup";
            const color = this.color;

            if (color) {
              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);
            }

            const title = document.createElement("h1");
            title.dir = this.titleObj.dir;
            title.textContent = this.titleObj.str;
            popup.appendChild(title);

            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);

            if (dateObject) {
              const modificationDate = document.createElement("span");
              modificationDate.className = "popupDate";
              modificationDate.textContent = "{{date}}, {{time}}";
              modificationDate.dataset.l10nId = "annotation_date_string";
              modificationDate.dataset.l10nArgs = JSON.stringify({
                date: dateObject.toLocaleDateString(),
                time: dateObject.toLocaleTimeString()
              });
              popup.appendChild(modificationDate);
            }

            if (this.richText?.str && (!this.contentsObj?.str || this.contentsObj.str === this.richText.str)) {
              _xfa_layer.XfaLayer.render({
                xfaHtml: this.richText.html,
                intent: "richText",
                div: popup
              });

              popup.lastChild.className = "richText popupContent";
            } else {
              const contents = this._formatContents(this.contentsObj);

              popup.appendChild(contents);
            }

            if (!Array.isArray(this.trigger)) {
              this.trigger = [this.trigger];
            }

            for (const element of this.trigger) {
              element.addEventListener("click", this._toggle.bind(this));
              element.addEventListener("mouseover", this._show.bind(this, false));
              element.addEventListener("mouseout", this._hide.bind(this, false));
            }

            popup.addEventListener("click", this._hide.bind(this, true));
            wrapper.appendChild(popup);
            return wrapper;
          }

          _formatContents({
            str,
            dir
          }) {
            const p = document.createElement("p");
            p.className = "popupContent";
            p.dir = dir;
            const lines = str.split(/(?:\r\n?|\n)/);

            for (let i = 0, ii = lines.length; i < ii; ++i) {
              const line = lines[i];
              p.appendChild(document.createTextNode(line));

              if (i < ii - 1) {
                p.appendChild(document.createElement("br"));
              }
            }

            return p;
          }

          _toggle() {
            if (this.pinned) {
              this._hide(true);
            } else {
              this._show(true);
            }
          }

          _show(pin = false) {
            if (pin) {
              this.pinned = true;
            }

            if (this.hideElement.hidden) {
              this.hideElement.hidden = false;
              this.container.style.zIndex += 1;
            }
          }

          _hide(unpin = true) {
            if (unpin) {
              this.pinned = false;
            }

            if (!this.hideElement.hidden && !this.pinned) {
              this.hideElement.hidden = true;
              this.container.style.zIndex -= 1;
            }
          }

        }

        class FreeTextAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "freeTextAnnotation";

            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            return this.container;
          }

        }

        class LineAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "lineAnnotation";
            const data = this.data;
            const {
              width,
              height
            } = getRectDims(data.rect);
            const svg = this.svgFactory.create(width, height);
            const line = this.svgFactory.createElement("svg:line");
            line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
            line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
            line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
            line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
            line.setAttribute("stroke-width", data.borderStyle.width || 1);
            line.setAttribute("stroke", "transparent");
            line.setAttribute("fill", "transparent");
            svg.appendChild(line);
            this.container.append(svg);

            this._createPopup(line, data);

            return this.container;
          }

        }

        class SquareAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "squareAnnotation";
            const data = this.data;
            const {
              width,
              height
            } = getRectDims(data.rect);
            const svg = this.svgFactory.create(width, height);
            const borderWidth = data.borderStyle.width;
            const square = this.svgFactory.createElement("svg:rect");
            square.setAttribute("x", borderWidth / 2);
            square.setAttribute("y", borderWidth / 2);
            square.setAttribute("width", width - borderWidth);
            square.setAttribute("height", height - borderWidth);
            square.setAttribute("stroke-width", borderWidth || 1);
            square.setAttribute("stroke", "transparent");
            square.setAttribute("fill", "transparent");
            svg.appendChild(square);
            this.container.append(svg);

            this._createPopup(square, data);

            return this.container;
          }

        }

        class CircleAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "circleAnnotation";
            const data = this.data;
            const {
              width,
              height
            } = getRectDims(data.rect);
            const svg = this.svgFactory.create(width, height);
            const borderWidth = data.borderStyle.width;
            const circle = this.svgFactory.createElement("svg:ellipse");
            circle.setAttribute("cx", width / 2);
            circle.setAttribute("cy", height / 2);
            circle.setAttribute("rx", width / 2 - borderWidth / 2);
            circle.setAttribute("ry", height / 2 - borderWidth / 2);
            circle.setAttribute("stroke-width", borderWidth || 1);
            circle.setAttribute("stroke", "transparent");
            circle.setAttribute("fill", "transparent");
            svg.appendChild(circle);
            this.container.append(svg);

            this._createPopup(circle, data);

            return this.container;
          }

        }

        class PolylineAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
            this.containerClassName = "polylineAnnotation";
            this.svgElementName = "svg:polyline";
          }

          render() {
            this.container.className = this.containerClassName;
            const data = this.data;
            const {
              width,
              height
            } = getRectDims(data.rect);
            const svg = this.svgFactory.create(width, height);
            let points = [];

            for (const coordinate of data.vertices) {
              const x = coordinate.x - data.rect[0];
              const y = data.rect[3] - coordinate.y;
              points.push(x + "," + y);
            }

            points = points.join(" ");
            const polyline = this.svgFactory.createElement(this.svgElementName);
            polyline.setAttribute("points", points);
            polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
            polyline.setAttribute("stroke", "transparent");
            polyline.setAttribute("fill", "transparent");
            svg.appendChild(polyline);
            this.container.append(svg);

            this._createPopup(polyline, data);

            return this.container;
          }

        }

        class PolygonAnnotationElement extends PolylineAnnotationElement {
          constructor(parameters) {
            super(parameters);
            this.containerClassName = "polygonAnnotation";
            this.svgElementName = "svg:polygon";
          }

        }

        class CaretAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "caretAnnotation";

            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            return this.container;
          }

        }

        class InkAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
            this.containerClassName = "inkAnnotation";
            this.svgElementName = "svg:polyline";
          }

          render() {
            this.container.className = this.containerClassName;
            const data = this.data;
            const {
              width,
              height
            } = getRectDims(data.rect);
            const svg = this.svgFactory.create(width, height);

            for (const inkList of data.inkLists) {
              let points = [];

              for (const coordinate of inkList) {
                const x = coordinate.x - data.rect[0];
                const y = data.rect[3] - coordinate.y;
                points.push(`${x},${y}`);
              }

              points = points.join(" ");
              const polyline = this.svgFactory.createElement(this.svgElementName);
              polyline.setAttribute("points", points);
              polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
              polyline.setAttribute("stroke", "transparent");
              polyline.setAttribute("fill", "transparent");

              this._createPopup(polyline, data);

              svg.appendChild(polyline);
            }

            this.container.append(svg);
            return this.container;
          }

        }

        class HighlightAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          render() {
            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            if (this.quadrilaterals) {
              return this._renderQuadrilaterals("highlightAnnotation");
            }

            this.container.className = "highlightAnnotation";
            return this.container;
          }

        }

        class UnderlineAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          render() {
            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            if (this.quadrilaterals) {
              return this._renderQuadrilaterals("underlineAnnotation");
            }

            this.container.className = "underlineAnnotation";
            return this.container;
          }

        }

        class SquigglyAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          render() {
            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            if (this.quadrilaterals) {
              return this._renderQuadrilaterals("squigglyAnnotation");
            }

            this.container.className = "squigglyAnnotation";
            return this.container;
          }

        }

        class StrikeOutAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          render() {
            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            if (this.quadrilaterals) {
              return this._renderQuadrilaterals("strikeoutAnnotation");
            }

            this.container.className = "strikeoutAnnotation";
            return this.container;
          }

        }

        class StampAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str || parameters.data.richText?.str);
            super(parameters, {
              isRenderable,
              ignoreBorder: true
            });
          }

          render() {
            this.container.className = "stampAnnotation";

            if (!this.data.hasPopup) {
              this._createPopup(null, this.data);
            }

            return this.container;
          }

        }

        class FileAttachmentAnnotationElement extends AnnotationElement {
          constructor(parameters) {
            super(parameters, {
              isRenderable: true
            });
            const {
              filename,
              content
            } = this.data.file;
            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);
            this.content = content;
            this.linkService.eventBus?.dispatch("fileattachmentannotation", {
              source: this,
              filename,
              content
            });
          }

          render() {
            this.container.className = "fileAttachmentAnnotation";
            const trigger = document.createElement("div");
            trigger.style.height = this.container.style.height;
            trigger.style.width = this.container.style.width;
            trigger.addEventListener("dblclick", this._download.bind(this));

            if (!this.data.hasPopup && (this.data.titleObj?.str || this.data.contentsObj?.str || this.data.richText)) {
              this._createPopup(trigger, this.data);
            }

            this.container.appendChild(trigger);
            return this.container;
          }

          _download() {
            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);
          }

        }

        class AnnotationLayer {
          static render(parameters) {
            const sortedAnnotations = [],
                  popupAnnotations = [];

            for (const data of parameters.annotations) {
              if (!data) {
                continue;
              }

              const {
                width,
                height
              } = getRectDims(data.rect);

              if (width <= 0 || height <= 0) {
                continue;
              }

              if (data.annotationType === _util.AnnotationType.POPUP) {
                popupAnnotations.push(data);
                continue;
              }

              sortedAnnotations.push(data);
            }

            if (popupAnnotations.length) {
              sortedAnnotations.push(...popupAnnotations);
            }

            const div = parameters.div;

            for (const data of sortedAnnotations) {
              const element = AnnotationElementFactory.create({
                data,
                layer: div,
                page: parameters.page,
                viewport: parameters.viewport,
                linkService: parameters.linkService,
                downloadManager: parameters.downloadManager,
                imageResourcesPath: parameters.imageResourcesPath || "",
                renderForms: parameters.renderForms !== false,
                svgFactory: new _display_utils.DOMSVGFactory(),
                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),
                enableScripting: parameters.enableScripting,
                hasJSActions: parameters.hasJSActions,
                fieldObjects: parameters.fieldObjects,
                mouseState: parameters.mouseState || {
                  isDown: false
                }
              });

              if (element.isRenderable) {
                const rendered = element.render();

                if (data.hidden) {
                  rendered.style.visibility = "hidden";
                }

                if (Array.isArray(rendered)) {
                  for (const renderedElement of rendered) {
                    div.appendChild(renderedElement);
                  }
                } else {
                  if (element instanceof PopupAnnotationElement) {
                    div.prepend(rendered);
                  } else {
                    div.appendChild(rendered);
                  }
                }
              }
            }

            this.#setAnnotationCanvasMap(div, parameters.annotationCanvasMap);
          }

          static update(parameters) {
            const {
              page,
              viewport,
              annotations,
              annotationCanvasMap,
              div
            } = parameters;
            const transform = viewport.transform;
            const matrix = `matrix(${transform.join(",")})`;
            let scale, ownMatrix;

            for (const data of annotations) {
              const elements = div.querySelectorAll(`[data-annotation-id="${data.id}"]`);

              if (elements) {
                for (const element of elements) {
                  if (data.hasOwnCanvas) {
                    const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);

                    if (!ownMatrix) {
                      scale = Math.abs(transform[0] || transform[1]);
                      const ownTransform = transform.slice();

                      for (let i = 0; i < 4; i++) {
                        ownTransform[i] = Math.sign(ownTransform[i]);
                      }

                      ownMatrix = `matrix(${ownTransform.join(",")})`;
                    }

                    const left = rect[0] * scale;
                    const top = rect[1] * scale;
                    element.style.left = `${left}px`;
                    element.style.top = `${top}px`;
                    element.style.transformOrigin = `${-left}px ${-top}px`;
                    element.style.transform = ownMatrix;
                  } else {
                    element.style.transform = matrix;
                  }
                }
              }
            }

            this.#setAnnotationCanvasMap(div, annotationCanvasMap);
            div.hidden = false;
          }

          static #setAnnotationCanvasMap(div, annotationCanvasMap) {
            if (!annotationCanvasMap) {
              return;
            }

            for (const [id, canvas] of annotationCanvasMap) {
              const element = div.querySelector(`[data-annotation-id="${id}"]`);

              if (!element) {
                continue;
              }

              const {
                firstChild
              } = element;

              if (firstChild.nodeName === "CANVAS") {
                element.replaceChild(canvas, firstChild);
              } else {
                element.insertBefore(canvas, firstChild);
              }
            }

            annotationCanvasMap.clear();
          }

        }

        exports.AnnotationLayer = AnnotationLayer;
        /***/
      },
      /* 21 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ColorConverters = void 0;

        function makeColorComp(n) {
          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
        }

        class ColorConverters {
          static CMYK_G([c, y, m, k]) {
            return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
          }

          static G_CMYK([g]) {
            return ["CMYK", 0, 0, 0, 1 - g];
          }

          static G_RGB([g]) {
            return ["RGB", g, g, g];
          }

          static G_HTML([g]) {
            const G = makeColorComp(g);
            return `#${G}${G}${G}`;
          }

          static RGB_G([r, g, b]) {
            return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
          }

          static RGB_HTML([r, g, b]) {
            const R = makeColorComp(r);
            const G = makeColorComp(g);
            const B = makeColorComp(b);
            return `#${R}${G}${B}`;
          }

          static T_HTML() {
            return "#00000000";
          }

          static CMYK_RGB([c, y, m, k]) {
            return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
          }

          static CMYK_HTML(components) {
            return this.RGB_HTML(this.CMYK_RGB(components));
          }

          static RGB_CMYK([r, g, b]) {
            const c = 1 - r;
            const m = 1 - g;
            const y = 1 - b;
            const k = Math.min(c, m, y);
            return ["CMYK", c, m, y, k];
          }

        }

        exports.ColorConverters = ColorConverters;
        /***/
      },
      /* 22 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaLayer = void 0;

        var _xfa_text = __w_pdfjs_require__(18);

        class XfaLayer {
          static setupStorage(html, id, element, storage, intent) {
            const storedData = storage.getValue(id, {
              value: null
            });

            switch (element.name) {
              case "textarea":
                if (storedData.value !== null) {
                  html.textContent = storedData.value;
                }

                if (intent === "print") {
                  break;
                }

                html.addEventListener("input", event => {
                  storage.setValue(id, {
                    value: event.target.value
                  });
                });
                break;

              case "input":
                if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
                  if (storedData.value === element.attributes.xfaOn) {
                    html.setAttribute("checked", true);
                  } else if (storedData.value === element.attributes.xfaOff) {
                    html.removeAttribute("checked");
                  }

                  if (intent === "print") {
                    break;
                  }

                  html.addEventListener("change", event => {
                    storage.setValue(id, {
                      value: event.target.checked ? event.target.getAttribute("xfaOn") : event.target.getAttribute("xfaOff")
                    });
                  });
                } else {
                  if (storedData.value !== null) {
                    html.setAttribute("value", storedData.value);
                  }

                  if (intent === "print") {
                    break;
                  }

                  html.addEventListener("input", event => {
                    storage.setValue(id, {
                      value: event.target.value
                    });
                  });
                }

                break;

              case "select":
                if (storedData.value !== null) {
                  for (const option of element.children) {
                    if (option.attributes.value === storedData.value) {
                      option.attributes.selected = true;
                    }
                  }
                }

                html.addEventListener("input", event => {
                  const options = event.target.options;
                  const value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
                  storage.setValue(id, {
                    value
                  });
                });
                break;
            }
          }

          static setAttributes({
            html,
            element,
            storage = null,
            intent,
            linkService
          }) {
            const {
              attributes
            } = element;
            const isHTMLAnchorElement = html instanceof HTMLAnchorElement;

            if (attributes.type === "radio") {
              attributes.name = `${attributes.name}-${intent}`;
            }

            for (const [key, value] of Object.entries(attributes)) {
              if (value === null || value === undefined || key === "dataId") {
                continue;
              }

              if (key !== "style") {
                if (key === "textContent") {
                  html.textContent = value;
                } else if (key === "class") {
                  if (value.length) {
                    html.setAttribute(key, value.join(" "));
                  }
                } else {
                  if (isHTMLAnchorElement && (key === "href" || key === "newWindow")) {
                    continue;
                  }

                  html.setAttribute(key, value);
                }
              } else {
                Object.assign(html.style, value);
              }
            }

            if (isHTMLAnchorElement) {
              linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);
            }

            if (storage && attributes.dataId) {
              this.setupStorage(html, attributes.dataId, element, storage);
            }
          }

          static render(parameters) {
            const storage = parameters.annotationStorage;
            const linkService = parameters.linkService;
            const root = parameters.xfaHtml;
            const intent = parameters.intent || "display";
            const rootHtml = document.createElement(root.name);

            if (root.attributes) {
              this.setAttributes({
                html: rootHtml,
                element: root,
                intent,
                linkService
              });
            }

            const stack = [[root, -1, rootHtml]];
            const rootDiv = parameters.div;
            rootDiv.appendChild(rootHtml);

            if (parameters.viewport) {
              const transform = `matrix(${parameters.viewport.transform.join(",")})`;
              rootDiv.style.transform = transform;
            }

            if (intent !== "richText") {
              rootDiv.setAttribute("class", "xfaLayer xfaFont");
            }

            const textDivs = [];

            while (stack.length > 0) {
              const [parent, i, html] = stack[stack.length - 1];

              if (i + 1 === parent.children.length) {
                stack.pop();
                continue;
              }

              const child = parent.children[++stack[stack.length - 1][1]];

              if (child === null) {
                continue;
              }

              const {
                name
              } = child;

              if (name === "#text") {
                const node = document.createTextNode(child.value);
                textDivs.push(node);
                html.appendChild(node);
                continue;
              }

              let childHtml;

              if (child?.attributes?.xmlns) {
                childHtml = document.createElementNS(child.attributes.xmlns, name);
              } else {
                childHtml = document.createElement(name);
              }

              html.appendChild(childHtml);

              if (child.attributes) {
                this.setAttributes({
                  html: childHtml,
                  element: child,
                  storage,
                  intent,
                  linkService
                });
              }

              if (child.children && child.children.length > 0) {
                stack.push([child, -1, childHtml]);
              } else if (child.value) {
                const node = document.createTextNode(child.value);

                if (_xfa_text.XfaText.shouldBuildText(name)) {
                  textDivs.push(node);
                }

                childHtml.appendChild(node);
              }
            }

            for (const el of rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")) {
              el.setAttribute("readOnly", true);
            }

            return {
              textDivs
            };
          }

          static update(parameters) {
            const transform = `matrix(${parameters.viewport.transform.join(",")})`;
            parameters.div.style.transform = transform;
            parameters.div.hidden = false;
          }

        }

        exports.XfaLayer = XfaLayer;
        /***/
      },
      /* 23 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.renderTextLayer = renderTextLayer;

        var _util = __w_pdfjs_require__(1);

        const MAX_TEXT_DIVS_TO_RENDER = 100000;
        const DEFAULT_FONT_SIZE = 30;
        const DEFAULT_FONT_ASCENT = 0.8;
        const ascentCache = new Map();
        const AllWhitespaceRegexp = /^\s+$/g;

        function getAscent(fontFamily, ctx) {
          const cachedAscent = ascentCache.get(fontFamily);

          if (cachedAscent) {
            return cachedAscent;
          }

          ctx.save();
          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;
          const metrics = ctx.measureText("");
          let ascent = metrics.fontBoundingBoxAscent;
          let descent = Math.abs(metrics.fontBoundingBoxDescent);

          if (ascent) {
            ctx.restore();
            const ratio = ascent / (ascent + descent);
            ascentCache.set(fontFamily, ratio);
            return ratio;
          }

          ctx.strokeStyle = "red";
          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("g", 0, 0);
          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          descent = 0;

          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {
            if (pixels[i] > 0) {
              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }

          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          ascent = 0;

          for (let i = 0, ii = pixels.length; i < ii; i += 4) {
            if (pixels[i] > 0) {
              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }

          ctx.restore();

          if (ascent) {
            const ratio = ascent / (ascent + descent);
            ascentCache.set(fontFamily, ratio);
            return ratio;
          }

          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
          return DEFAULT_FONT_ASCENT;
        }

        function appendText(task, geom, styles, ctx) {
          const textDiv = document.createElement("span");
          const textDivProperties = task._enhanceTextSelection ? {
            angle: 0,
            canvasWidth: 0,
            hasText: geom.str !== "",
            hasEOL: geom.hasEOL,
            originalTransform: null,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0,
            paddingTop: 0,
            scale: 1
          } : {
            angle: 0,
            canvasWidth: 0,
            hasText: geom.str !== "",
            hasEOL: geom.hasEOL
          };

          task._textDivs.push(textDiv);

          const tx = _util.Util.transform(task._viewport.transform, geom.transform);

          let angle = Math.atan2(tx[1], tx[0]);
          const style = styles[geom.fontName];

          if (style.vertical) {
            angle += Math.PI / 2;
          }

          const fontHeight = Math.hypot(tx[2], tx[3]);
          const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);
          let left, top;

          if (angle === 0) {
            left = tx[4];
            top = tx[5] - fontAscent;
          } else {
            left = tx[4] + fontAscent * Math.sin(angle);
            top = tx[5] - fontAscent * Math.cos(angle);
          }

          textDiv.style.left = `${left}px`;
          textDiv.style.top = `${top}px`;
          textDiv.style.fontSize = `${fontHeight}px`;
          textDiv.style.fontFamily = style.fontFamily;
          textDiv.setAttribute("role", "presentation");
          textDiv.textContent = geom.str;
          textDiv.dir = geom.dir;

          if (task._fontInspectorEnabled) {
            textDiv.dataset.fontName = geom.fontName;
          }

          if (angle !== 0) {
            textDivProperties.angle = angle * (180 / Math.PI);
          }

          let shouldScaleText = false;

          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {
            shouldScaleText = true;
          } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
            const absScaleX = Math.abs(geom.transform[0]),
                  absScaleY = Math.abs(geom.transform[3]);

            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
              shouldScaleText = true;
            }
          }

          if (shouldScaleText) {
            if (style.vertical) {
              textDivProperties.canvasWidth = geom.height * task._viewport.scale;
            } else {
              textDivProperties.canvasWidth = geom.width * task._viewport.scale;
            }
          }

          task._textDivProperties.set(textDiv, textDivProperties);

          if (task._textContentStream) {
            task._layoutText(textDiv);
          }

          if (task._enhanceTextSelection && textDivProperties.hasText) {
            let angleCos = 1,
                angleSin = 0;

            if (angle !== 0) {
              angleCos = Math.cos(angle);
              angleSin = Math.sin(angle);
            }

            const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
            const divHeight = fontHeight;
            let m, b;

            if (angle !== 0) {
              m = [angleCos, angleSin, -angleSin, angleCos, left, top];
              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
            } else {
              b = [left, top, left + divWidth, top + divHeight];
            }

            task._bounds.push({
              left: b[0],
              top: b[1],
              right: b[2],
              bottom: b[3],
              div: textDiv,
              size: [divWidth, divHeight],
              m
            });
          }
        }

        function render(task) {
          if (task._canceled) {
            return;
          }

          const textDivs = task._textDivs;
          const capability = task._capability;
          const textDivsLength = textDivs.length;

          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
            task._renderingDone = true;
            capability.resolve();
            return;
          }

          if (!task._textContentStream) {
            for (let i = 0; i < textDivsLength; i++) {
              task._layoutText(textDivs[i]);
            }
          }

          task._renderingDone = true;
          capability.resolve();
        }

        function findPositiveMin(ts, offset, count) {
          let result = 0;

          for (let i = 0; i < count; i++) {
            const t = ts[offset++];

            if (t > 0) {
              result = result ? Math.min(t, result) : t;
            }
          }

          return result;
        }

        function expand(task) {
          const bounds = task._bounds;
          const viewport = task._viewport;
          const expanded = expandBounds(viewport.width, viewport.height, bounds);

          for (let i = 0; i < expanded.length; i++) {
            const div = bounds[i].div;

            const divProperties = task._textDivProperties.get(div);

            if (divProperties.angle === 0) {
              divProperties.paddingLeft = bounds[i].left - expanded[i].left;
              divProperties.paddingTop = bounds[i].top - expanded[i].top;
              divProperties.paddingRight = expanded[i].right - bounds[i].right;
              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;

              task._textDivProperties.set(div, divProperties);

              continue;
            }

            const e = expanded[i],
                  b = bounds[i];
            const m = b.m,
                  c = m[0],
                  s = m[1];
            const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
            const ts = new Float64Array(64);

            for (let j = 0, jj = points.length; j < jj; j++) {
              const t = _util.Util.applyTransform(points[j], m);

              ts[j + 0] = c && (e.left - t[0]) / c;
              ts[j + 4] = s && (e.top - t[1]) / s;
              ts[j + 8] = c && (e.right - t[0]) / c;
              ts[j + 12] = s && (e.bottom - t[1]) / s;
              ts[j + 16] = s && (e.left - t[0]) / -s;
              ts[j + 20] = c && (e.top - t[1]) / c;
              ts[j + 24] = s && (e.right - t[0]) / -s;
              ts[j + 28] = c && (e.bottom - t[1]) / c;
              ts[j + 32] = c && (e.left - t[0]) / -c;
              ts[j + 36] = s && (e.top - t[1]) / -s;
              ts[j + 40] = c && (e.right - t[0]) / -c;
              ts[j + 44] = s && (e.bottom - t[1]) / -s;
              ts[j + 48] = s && (e.left - t[0]) / s;
              ts[j + 52] = c && (e.top - t[1]) / -c;
              ts[j + 56] = s && (e.right - t[0]) / s;
              ts[j + 60] = c && (e.bottom - t[1]) / -c;
            }

            const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;

            task._textDivProperties.set(div, divProperties);
          }
        }

        function expandBounds(width, height, boxes) {
          const bounds = boxes.map(function (box, i) {
            return {
              x1: box.left,
              y1: box.top,
              x2: box.right,
              y2: box.bottom,
              index: i,
              x1New: undefined,
              x2New: undefined
            };
          });
          expandBoundsLTR(width, bounds);
          const expanded = new Array(boxes.length);

          for (const b of bounds) {
            const i = b.index;
            expanded[i] = {
              left: b.x1New,
              top: 0,
              right: b.x2New,
              bottom: 0
            };
          }

          boxes.map(function (box, i) {
            const e = expanded[i],
                  b = bounds[i];
            b.x1 = box.top;
            b.y1 = width - e.right;
            b.x2 = box.bottom;
            b.y2 = width - e.left;
            b.index = i;
            b.x1New = undefined;
            b.x2New = undefined;
          });
          expandBoundsLTR(height, bounds);

          for (const b of bounds) {
            const i = b.index;
            expanded[i].top = b.x1New;
            expanded[i].bottom = b.x2New;
          }

          return expanded;
        }

        function expandBoundsLTR(width, bounds) {
          bounds.sort(function (a, b) {
            return a.x1 - b.x1 || a.index - b.index;
          });
          const fakeBoundary = {
            x1: -Infinity,
            y1: -Infinity,
            x2: 0,
            y2: Infinity,
            index: -1,
            x1New: 0,
            x2New: 0
          };
          const horizon = [{
            start: -Infinity,
            end: Infinity,
            boundary: fakeBoundary
          }];

          for (const boundary of bounds) {
            let i = 0;

            while (i < horizon.length && horizon[i].end <= boundary.y1) {
              i++;
            }

            let j = horizon.length - 1;

            while (j >= 0 && horizon[j].start >= boundary.y2) {
              j--;
            }

            let horizonPart, affectedBoundary;
            let q,
                k,
                maxXNew = -Infinity;

            for (q = i; q <= j; q++) {
              horizonPart = horizon[q];
              affectedBoundary = horizonPart.boundary;
              let xNew;

              if (affectedBoundary.x2 > boundary.x1) {
                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
              } else if (affectedBoundary.x2New === undefined) {
                xNew = (affectedBoundary.x2 + boundary.x1) / 2;
              } else {
                xNew = affectedBoundary.x2New;
              }

              if (xNew > maxXNew) {
                maxXNew = xNew;
              }
            }

            boundary.x1New = maxXNew;

            for (q = i; q <= j; q++) {
              horizonPart = horizon[q];
              affectedBoundary = horizonPart.boundary;

              if (affectedBoundary.x2New === undefined) {
                if (affectedBoundary.x2 > boundary.x1) {
                  if (affectedBoundary.index > boundary.index) {
                    affectedBoundary.x2New = affectedBoundary.x2;
                  }
                } else {
                  affectedBoundary.x2New = maxXNew;
                }
              } else if (affectedBoundary.x2New > maxXNew) {
                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
              }
            }

            const changedHorizon = [];
            let lastBoundary = null;

            for (q = i; q <= j; q++) {
              horizonPart = horizon[q];
              affectedBoundary = horizonPart.boundary;
              const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;

              if (lastBoundary === useBoundary) {
                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
              } else {
                changedHorizon.push({
                  start: horizonPart.start,
                  end: horizonPart.end,
                  boundary: useBoundary
                });
                lastBoundary = useBoundary;
              }
            }

            if (horizon[i].start < boundary.y1) {
              changedHorizon[0].start = boundary.y1;
              changedHorizon.unshift({
                start: horizon[i].start,
                end: boundary.y1,
                boundary: horizon[i].boundary
              });
            }

            if (boundary.y2 < horizon[j].end) {
              changedHorizon[changedHorizon.length - 1].end = boundary.y2;
              changedHorizon.push({
                start: boundary.y2,
                end: horizon[j].end,
                boundary: horizon[j].boundary
              });
            }

            for (q = i; q <= j; q++) {
              horizonPart = horizon[q];
              affectedBoundary = horizonPart.boundary;

              if (affectedBoundary.x2New !== undefined) {
                continue;
              }

              let used = false;

              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
                used = horizon[k].boundary === affectedBoundary;
              }

              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
                used = horizon[k].boundary === affectedBoundary;
              }

              for (k = 0; !used && k < changedHorizon.length; k++) {
                used = changedHorizon[k].boundary === affectedBoundary;
              }

              if (!used) {
                affectedBoundary.x2New = maxXNew;
              }
            }

            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
          }

          for (const horizonPart of horizon) {
            const affectedBoundary = horizonPart.boundary;

            if (affectedBoundary.x2New === undefined) {
              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
            }
          }
        }

        class TextLayerRenderTask {
          constructor({
            textContent,
            textContentStream,
            container,
            viewport,
            textDivs,
            textContentItemsStr,
            enhanceTextSelection
          }) {
            this._textContent = textContent;
            this._textContentStream = textContentStream;
            this._container = container;
            this._document = container.ownerDocument;
            this._viewport = viewport;
            this._textDivs = textDivs || [];
            this._textContentItemsStr = textContentItemsStr || [];
            this._enhanceTextSelection = !!enhanceTextSelection;
            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;
            this._reader = null;
            this._layoutTextLastFontSize = null;
            this._layoutTextLastFontFamily = null;
            this._layoutTextCtx = null;
            this._textDivProperties = new WeakMap();
            this._renderingDone = false;
            this._canceled = false;
            this._capability = (0, _util.createPromiseCapability)();
            this._renderTimer = null;
            this._bounds = [];

            this._capability.promise.finally(() => {
              if (!this._enhanceTextSelection) {
                this._textDivProperties = null;
              }

              if (this._layoutTextCtx) {
                this._layoutTextCtx.canvas.width = 0;
                this._layoutTextCtx.canvas.height = 0;
                this._layoutTextCtx = null;
              }
            }).catch(() => {});
          }

          get promise() {
            return this._capability.promise;
          }

          cancel() {
            this._canceled = true;

            if (this._reader) {
              this._reader.cancel(new _util.AbortException("TextLayer task cancelled.")).catch(() => {});

              this._reader = null;
            }

            if (this._renderTimer !== null) {
              clearTimeout(this._renderTimer);
              this._renderTimer = null;
            }

            this._capability.reject(new Error("TextLayer task cancelled."));
          }

          _processItems(items, styleCache) {
            for (let i = 0, len = items.length; i < len; i++) {
              if (items[i].str === undefined) {
                if (items[i].type === "beginMarkedContentProps" || items[i].type === "beginMarkedContent") {
                  const parent = this._container;
                  this._container = document.createElement("span");

                  this._container.classList.add("markedContent");

                  if (items[i].id !== null) {
                    this._container.setAttribute("id", `${items[i].id}`);
                  }

                  parent.appendChild(this._container);
                } else if (items[i].type === "endMarkedContent") {
                  this._container = this._container.parentNode;
                }

                continue;
              }

              this._textContentItemsStr.push(items[i].str);

              appendText(this, items[i], styleCache, this._layoutTextCtx);
            }
          }

          _layoutText(textDiv) {
            const textDivProperties = this._textDivProperties.get(textDiv);

            let transform = "";

            if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {
              const {
                fontSize,
                fontFamily
              } = textDiv.style;

              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;
                this._layoutTextLastFontSize = fontSize;
                this._layoutTextLastFontFamily = fontFamily;
              }

              const {
                width
              } = this._layoutTextCtx.measureText(textDiv.textContent);

              if (width > 0) {
                const scale = textDivProperties.canvasWidth / width;

                if (this._enhanceTextSelection) {
                  textDivProperties.scale = scale;
                }

                transform = `scaleX(${scale})`;
              }
            }

            if (textDivProperties.angle !== 0) {
              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;
            }

            if (transform.length > 0) {
              if (this._enhanceTextSelection) {
                textDivProperties.originalTransform = transform;
              }

              textDiv.style.transform = transform;
            }

            if (textDivProperties.hasText) {
              this._container.appendChild(textDiv);
            }

            if (textDivProperties.hasEOL) {
              const br = document.createElement("br");
              br.setAttribute("role", "presentation");

              this._container.appendChild(br);
            }
          }

          _render(timeout = 0) {
            const capability = (0, _util.createPromiseCapability)();
            let styleCache = Object.create(null);

            const canvas = this._document.createElement("canvas");

            canvas.height = canvas.width = DEFAULT_FONT_SIZE;
            this._layoutTextCtx = canvas.getContext("2d", {
              alpha: false
            });

            if (this._textContent) {
              const textItems = this._textContent.items;
              const textStyles = this._textContent.styles;

              this._processItems(textItems, textStyles);

              capability.resolve();
            } else if (this._textContentStream) {
              const pump = () => {
                this._reader.read().then(({
                  value,
                  done
                }) => {
                  if (done) {
                    capability.resolve();
                    return;
                  }

                  Object.assign(styleCache, value.styles);

                  this._processItems(value.items, styleCache);

                  pump();
                }, capability.reject);
              };

              this._reader = this._textContentStream.getReader();
              pump();
            } else {
              throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');
            }

            capability.promise.then(() => {
              styleCache = null;

              if (!timeout) {
                render(this);
              } else {
                this._renderTimer = setTimeout(() => {
                  render(this);
                  this._renderTimer = null;
                }, timeout);
              }
            }, this._capability.reject);
          }

          expandTextDivs(expandDivs = false) {
            if (!this._enhanceTextSelection || !this._renderingDone) {
              return;
            }

            if (this._bounds !== null) {
              expand(this);
              this._bounds = null;
            }

            const transformBuf = [],
                  paddingBuf = [];

            for (let i = 0, ii = this._textDivs.length; i < ii; i++) {
              const div = this._textDivs[i];

              const divProps = this._textDivProperties.get(div);

              if (!divProps.hasText) {
                continue;
              }

              if (expandDivs) {
                transformBuf.length = 0;
                paddingBuf.length = 0;

                if (divProps.originalTransform) {
                  transformBuf.push(divProps.originalTransform);
                }

                if (divProps.paddingTop > 0) {
                  paddingBuf.push(`${divProps.paddingTop}px`);
                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);
                } else {
                  paddingBuf.push(0);
                }

                if (divProps.paddingRight > 0) {
                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);
                } else {
                  paddingBuf.push(0);
                }

                if (divProps.paddingBottom > 0) {
                  paddingBuf.push(`${divProps.paddingBottom}px`);
                } else {
                  paddingBuf.push(0);
                }

                if (divProps.paddingLeft > 0) {
                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);
                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);
                } else {
                  paddingBuf.push(0);
                }

                div.style.padding = paddingBuf.join(" ");

                if (transformBuf.length) {
                  div.style.transform = transformBuf.join(" ");
                }
              } else {
                div.style.padding = null;
                div.style.transform = divProps.originalTransform;
              }
            }
          }

        }

        function renderTextLayer(renderParameters) {
          const task = new TextLayerRenderTask({
            textContent: renderParameters.textContent,
            textContentStream: renderParameters.textContentStream,
            container: renderParameters.container,
            viewport: renderParameters.viewport,
            textDivs: renderParameters.textDivs,
            textContentItemsStr: renderParameters.textContentItemsStr,
            enhanceTextSelection: renderParameters.enhanceTextSelection
          });

          task._render(renderParameters.timeout);

          return task;
        }
        /***/

      },
      /* 24 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SVGGraphics = void 0;

        var _util = __w_pdfjs_require__(1);

        var _display_utils = __w_pdfjs_require__(5);

        var _is_node = __w_pdfjs_require__(3);

        let SVGGraphics = class {
          constructor() {
            (0, _util.unreachable)("Not implemented: SVGGraphics");
          }

        };
        exports.SVGGraphics = SVGGraphics;
        {
          const SVG_DEFAULTS = {
            fontStyle: "normal",
            fontWeight: "normal",
            fillColor: "#000000"
          };
          const XML_NS = "http://www.w3.org/XML/1998/namespace";
          const XLINK_NS = "http://www.w3.org/1999/xlink";
          const LINE_CAP_STYLES = ["butt", "round", "square"];
          const LINE_JOIN_STYLES = ["miter", "round", "bevel"];

          const createObjectURL = function (data, contentType = "", forceDataSchema = false) {
            if (URL.createObjectURL && typeof Blob !== "undefined" && !forceDataSchema) {
              return URL.createObjectURL(new Blob([data], {
                type: contentType
              }));
            }

            const digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            let buffer = `data:${contentType};base64,`;

            for (let i = 0, ii = data.length; i < ii; i += 3) {
              const b1 = data[i] & 0xff;
              const b2 = data[i + 1] & 0xff;
              const b3 = data[i + 2] & 0xff;
              const d1 = b1 >> 2,
                    d2 = (b1 & 3) << 4 | b2 >> 4;
              const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;
              const d4 = i + 2 < ii ? b3 & 0x3f : 64;
              buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
            }

            return buffer;
          };

          const convertImgDataToPng = function () {
            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
            const CHUNK_WRAPPER_SIZE = 12;
            const crcTable = new Int32Array(256);

            for (let i = 0; i < 256; i++) {
              let c = i;

              for (let h = 0; h < 8; h++) {
                if (c & 1) {
                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;
                } else {
                  c = c >> 1 & 0x7fffffff;
                }
              }

              crcTable[i] = c;
            }

            function crc32(data, start, end) {
              let crc = -1;

              for (let i = start; i < end; i++) {
                const a = (crc ^ data[i]) & 0xff;
                const b = crcTable[a];
                crc = crc >>> 8 ^ b;
              }

              return crc ^ -1;
            }

            function writePngChunk(type, body, data, offset) {
              let p = offset;
              const len = body.length;
              data[p] = len >> 24 & 0xff;
              data[p + 1] = len >> 16 & 0xff;
              data[p + 2] = len >> 8 & 0xff;
              data[p + 3] = len & 0xff;
              p += 4;
              data[p] = type.charCodeAt(0) & 0xff;
              data[p + 1] = type.charCodeAt(1) & 0xff;
              data[p + 2] = type.charCodeAt(2) & 0xff;
              data[p + 3] = type.charCodeAt(3) & 0xff;
              p += 4;
              data.set(body, p);
              p += body.length;
              const crc = crc32(data, offset + 4, p);
              data[p] = crc >> 24 & 0xff;
              data[p + 1] = crc >> 16 & 0xff;
              data[p + 2] = crc >> 8 & 0xff;
              data[p + 3] = crc & 0xff;
            }

            function adler32(data, start, end) {
              let a = 1;
              let b = 0;

              for (let i = start; i < end; ++i) {
                a = (a + (data[i] & 0xff)) % 65521;
                b = (b + a) % 65521;
              }

              return b << 16 | a;
            }

            function deflateSync(literals) {
              if (!_is_node.isNodeJS) {
                return deflateSyncUncompressed(literals);
              }

              try {
                let input;

                if (parseInt(process.versions.node) >= 8) {
                  input = literals;
                } else {
                  input = Buffer.from(literals);
                }

                const output = (__webpack_require__(/*! zlib */ 2258).deflateSync)(input, {
                  level: 9
                });

                return output instanceof Uint8Array ? output : new Uint8Array(output);
              } catch (e) {
                (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
              }

              return deflateSyncUncompressed(literals);
            }

            function deflateSyncUncompressed(literals) {
              let len = literals.length;
              const maxBlockLength = 0xffff;
              const deflateBlocks = Math.ceil(len / maxBlockLength);
              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
              let pi = 0;
              idat[pi++] = 0x78;
              idat[pi++] = 0x9c;
              let pos = 0;

              while (len > maxBlockLength) {
                idat[pi++] = 0x00;
                idat[pi++] = 0xff;
                idat[pi++] = 0xff;
                idat[pi++] = 0x00;
                idat[pi++] = 0x00;
                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                pi += maxBlockLength;
                pos += maxBlockLength;
                len -= maxBlockLength;
              }

              idat[pi++] = 0x01;
              idat[pi++] = len & 0xff;
              idat[pi++] = len >> 8 & 0xff;
              idat[pi++] = ~len & 0xffff & 0xff;
              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
              idat.set(literals.subarray(pos), pi);
              pi += literals.length - pos;
              const adler = adler32(literals, 0, literals.length);
              idat[pi++] = adler >> 24 & 0xff;
              idat[pi++] = adler >> 16 & 0xff;
              idat[pi++] = adler >> 8 & 0xff;
              idat[pi++] = adler & 0xff;
              return idat;
            }

            function encode(imgData, kind, forceDataSchema, isMask) {
              const width = imgData.width;
              const height = imgData.height;
              let bitDepth, colorType, lineSize;
              const bytes = imgData.data;

              switch (kind) {
                case _util.ImageKind.GRAYSCALE_1BPP:
                  colorType = 0;
                  bitDepth = 1;
                  lineSize = width + 7 >> 3;
                  break;

                case _util.ImageKind.RGB_24BPP:
                  colorType = 2;
                  bitDepth = 8;
                  lineSize = width * 3;
                  break;

                case _util.ImageKind.RGBA_32BPP:
                  colorType = 6;
                  bitDepth = 8;
                  lineSize = width * 4;
                  break;

                default:
                  throw new Error("invalid format");
              }

              const literals = new Uint8Array((1 + lineSize) * height);
              let offsetLiterals = 0,
                  offsetBytes = 0;

              for (let y = 0; y < height; ++y) {
                literals[offsetLiterals++] = 0;
                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                offsetBytes += lineSize;
                offsetLiterals += lineSize;
              }

              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {
                offsetLiterals = 0;

                for (let y = 0; y < height; y++) {
                  offsetLiterals++;

                  for (let i = 0; i < lineSize; i++) {
                    literals[offsetLiterals++] ^= 0xff;
                  }
                }
              }

              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
              const idat = deflateSync(literals);
              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
              const data = new Uint8Array(pngLength);
              let offset = 0;
              data.set(PNG_HEADER, offset);
              offset += PNG_HEADER.length;
              writePngChunk("IHDR", ihdr, data, offset);
              offset += CHUNK_WRAPPER_SIZE + ihdr.length;
              writePngChunk("IDATA", idat, data, offset);
              offset += CHUNK_WRAPPER_SIZE + idat.length;
              writePngChunk("IEND", new Uint8Array(0), data, offset);
              return createObjectURL(data, "image/png", forceDataSchema);
            }

            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {
              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
              return encode(imgData, kind, forceDataSchema, isMask);
            };
          }();

          class SVGExtraState {
            constructor() {
              this.fontSizeScale = 1;
              this.fontWeight = SVG_DEFAULTS.fontWeight;
              this.fontSize = 0;
              this.textMatrix = _util.IDENTITY_MATRIX;
              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
              this.leading = 0;
              this.textRenderingMode = _util.TextRenderingMode.FILL;
              this.textMatrixScale = 1;
              this.x = 0;
              this.y = 0;
              this.lineX = 0;
              this.lineY = 0;
              this.charSpacing = 0;
              this.wordSpacing = 0;
              this.textHScale = 1;
              this.textRise = 0;
              this.fillColor = SVG_DEFAULTS.fillColor;
              this.strokeColor = "#000000";
              this.fillAlpha = 1;
              this.strokeAlpha = 1;
              this.lineWidth = 1;
              this.lineJoin = "";
              this.lineCap = "";
              this.miterLimit = 0;
              this.dashArray = [];
              this.dashPhase = 0;
              this.dependencies = [];
              this.activeClipUrl = null;
              this.clipGroup = null;
              this.maskId = "";
            }

            clone() {
              return Object.create(this);
            }

            setCurrentPoint(x, y) {
              this.x = x;
              this.y = y;
            }

          }

          function opListToTree(opList) {
            let opTree = [];
            const tmp = [];

            for (const opListElement of opList) {
              if (opListElement.fn === "save") {
                opTree.push({
                  fnId: 92,
                  fn: "group",
                  items: []
                });
                tmp.push(opTree);
                opTree = opTree[opTree.length - 1].items;
                continue;
              }

              if (opListElement.fn === "restore") {
                opTree = tmp.pop();
              } else {
                opTree.push(opListElement);
              }
            }

            return opTree;
          }

          function pf(value) {
            if (Number.isInteger(value)) {
              return value.toString();
            }

            const s = value.toFixed(10);
            let i = s.length - 1;

            if (s[i] !== "0") {
              return s;
            }

            do {
              i--;
            } while (s[i] === "0");

            return s.substring(0, s[i] === "." ? i : i + 1);
          }

          function pm(m) {
            if (m[4] === 0 && m[5] === 0) {
              if (m[1] === 0 && m[2] === 0) {
                if (m[0] === 1 && m[3] === 1) {
                  return "";
                }

                return `scale(${pf(m[0])} ${pf(m[3])})`;
              }

              if (m[0] === m[3] && m[1] === -m[2]) {
                const a = Math.acos(m[0]) * 180 / Math.PI;
                return `rotate(${pf(a)})`;
              }
            } else {
              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                return `translate(${pf(m[4])} ${pf(m[5])})`;
              }
            }

            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;
          }

          let clipCount = 0;
          let maskCount = 0;
          let shadingCount = 0;
          exports.SVGGraphics = SVGGraphics = class {
            constructor(commonObjs, objs, forceDataSchema = false) {
              this.svgFactory = new _display_utils.DOMSVGFactory();
              this.current = new SVGExtraState();
              this.transformMatrix = _util.IDENTITY_MATRIX;
              this.transformStack = [];
              this.extraStack = [];
              this.commonObjs = commonObjs;
              this.objs = objs;
              this.pendingClip = null;
              this.pendingEOFill = false;
              this.embedFonts = false;
              this.embeddedFonts = Object.create(null);
              this.cssStyle = null;
              this.forceDataSchema = !!forceDataSchema;
              this._operatorIdMapping = [];

              for (const op in _util.OPS) {
                this._operatorIdMapping[_util.OPS[op]] = op;
              }
            }

            save() {
              this.transformStack.push(this.transformMatrix);
              const old = this.current;
              this.extraStack.push(old);
              this.current = old.clone();
            }

            restore() {
              this.transformMatrix = this.transformStack.pop();
              this.current = this.extraStack.pop();
              this.pendingClip = null;
              this.tgrp = null;
            }

            group(items) {
              this.save();
              this.executeOpTree(items);
              this.restore();
            }

            loadDependencies(operatorList) {
              const fnArray = operatorList.fnArray;
              const argsArray = operatorList.argsArray;

              for (let i = 0, ii = fnArray.length; i < ii; i++) {
                if (fnArray[i] !== _util.OPS.dependency) {
                  continue;
                }

                for (const obj of argsArray[i]) {
                  const objsPool = obj.startsWith("g_") ? this.commonObjs : this.objs;
                  const promise = new Promise(resolve => {
                    objsPool.get(obj, resolve);
                  });
                  this.current.dependencies.push(promise);
                }
              }

              return Promise.all(this.current.dependencies);
            }

            transform(a, b, c, d, e, f) {
              const transformMatrix = [a, b, c, d, e, f];
              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
              this.tgrp = null;
            }

            getSVG(operatorList, viewport) {
              this.viewport = viewport;

              const svgElement = this._initialize(viewport);

              return this.loadDependencies(operatorList).then(() => {
                this.transformMatrix = _util.IDENTITY_MATRIX;
                this.executeOpTree(this.convertOpList(operatorList));
                return svgElement;
              });
            }

            convertOpList(operatorList) {
              const operatorIdMapping = this._operatorIdMapping;
              const argsArray = operatorList.argsArray;
              const fnArray = operatorList.fnArray;
              const opList = [];

              for (let i = 0, ii = fnArray.length; i < ii; i++) {
                const fnId = fnArray[i];
                opList.push({
                  fnId,
                  fn: operatorIdMapping[fnId],
                  args: argsArray[i]
                });
              }

              return opListToTree(opList);
            }

            executeOpTree(opTree) {
              for (const opTreeElement of opTree) {
                const fn = opTreeElement.fn;
                const fnId = opTreeElement.fnId;
                const args = opTreeElement.args;

                switch (fnId | 0) {
                  case _util.OPS.beginText:
                    this.beginText();
                    break;

                  case _util.OPS.dependency:
                    break;

                  case _util.OPS.setLeading:
                    this.setLeading(args);
                    break;

                  case _util.OPS.setLeadingMoveText:
                    this.setLeadingMoveText(args[0], args[1]);
                    break;

                  case _util.OPS.setFont:
                    this.setFont(args);
                    break;

                  case _util.OPS.showText:
                    this.showText(args[0]);
                    break;

                  case _util.OPS.showSpacedText:
                    this.showText(args[0]);
                    break;

                  case _util.OPS.endText:
                    this.endText();
                    break;

                  case _util.OPS.moveText:
                    this.moveText(args[0], args[1]);
                    break;

                  case _util.OPS.setCharSpacing:
                    this.setCharSpacing(args[0]);
                    break;

                  case _util.OPS.setWordSpacing:
                    this.setWordSpacing(args[0]);
                    break;

                  case _util.OPS.setHScale:
                    this.setHScale(args[0]);
                    break;

                  case _util.OPS.setTextMatrix:
                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                    break;

                  case _util.OPS.setTextRise:
                    this.setTextRise(args[0]);
                    break;

                  case _util.OPS.setTextRenderingMode:
                    this.setTextRenderingMode(args[0]);
                    break;

                  case _util.OPS.setLineWidth:
                    this.setLineWidth(args[0]);
                    break;

                  case _util.OPS.setLineJoin:
                    this.setLineJoin(args[0]);
                    break;

                  case _util.OPS.setLineCap:
                    this.setLineCap(args[0]);
                    break;

                  case _util.OPS.setMiterLimit:
                    this.setMiterLimit(args[0]);
                    break;

                  case _util.OPS.setFillRGBColor:
                    this.setFillRGBColor(args[0], args[1], args[2]);
                    break;

                  case _util.OPS.setStrokeRGBColor:
                    this.setStrokeRGBColor(args[0], args[1], args[2]);
                    break;

                  case _util.OPS.setStrokeColorN:
                    this.setStrokeColorN(args);
                    break;

                  case _util.OPS.setFillColorN:
                    this.setFillColorN(args);
                    break;

                  case _util.OPS.shadingFill:
                    this.shadingFill(args[0]);
                    break;

                  case _util.OPS.setDash:
                    this.setDash(args[0], args[1]);
                    break;

                  case _util.OPS.setRenderingIntent:
                    this.setRenderingIntent(args[0]);
                    break;

                  case _util.OPS.setFlatness:
                    this.setFlatness(args[0]);
                    break;

                  case _util.OPS.setGState:
                    this.setGState(args[0]);
                    break;

                  case _util.OPS.fill:
                    this.fill();
                    break;

                  case _util.OPS.eoFill:
                    this.eoFill();
                    break;

                  case _util.OPS.stroke:
                    this.stroke();
                    break;

                  case _util.OPS.fillStroke:
                    this.fillStroke();
                    break;

                  case _util.OPS.eoFillStroke:
                    this.eoFillStroke();
                    break;

                  case _util.OPS.clip:
                    this.clip("nonzero");
                    break;

                  case _util.OPS.eoClip:
                    this.clip("evenodd");
                    break;

                  case _util.OPS.paintSolidColorImageMask:
                    this.paintSolidColorImageMask();
                    break;

                  case _util.OPS.paintImageXObject:
                    this.paintImageXObject(args[0]);
                    break;

                  case _util.OPS.paintInlineImageXObject:
                    this.paintInlineImageXObject(args[0]);
                    break;

                  case _util.OPS.paintImageMaskXObject:
                    this.paintImageMaskXObject(args[0]);
                    break;

                  case _util.OPS.paintFormXObjectBegin:
                    this.paintFormXObjectBegin(args[0], args[1]);
                    break;

                  case _util.OPS.paintFormXObjectEnd:
                    this.paintFormXObjectEnd();
                    break;

                  case _util.OPS.closePath:
                    this.closePath();
                    break;

                  case _util.OPS.closeStroke:
                    this.closeStroke();
                    break;

                  case _util.OPS.closeFillStroke:
                    this.closeFillStroke();
                    break;

                  case _util.OPS.closeEOFillStroke:
                    this.closeEOFillStroke();
                    break;

                  case _util.OPS.nextLine:
                    this.nextLine();
                    break;

                  case _util.OPS.transform:
                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                    break;

                  case _util.OPS.constructPath:
                    this.constructPath(args[0], args[1]);
                    break;

                  case _util.OPS.endPath:
                    this.endPath();
                    break;

                  case 92:
                    this.group(opTreeElement.items);
                    break;

                  default:
                    (0, _util.warn)(`Unimplemented operator ${fn}`);
                    break;
                }
              }
            }

            setWordSpacing(wordSpacing) {
              this.current.wordSpacing = wordSpacing;
            }

            setCharSpacing(charSpacing) {
              this.current.charSpacing = charSpacing;
            }

            nextLine() {
              this.moveText(0, this.current.leading);
            }

            setTextMatrix(a, b, c, d, e, f) {
              const current = this.current;
              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
              current.textMatrixScale = Math.hypot(a, b);
              current.x = current.lineX = 0;
              current.y = current.lineY = 0;
              current.xcoords = [];
              current.ycoords = [];
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
              current.txtElement = this.svgFactory.createElement("svg:text");
              current.txtElement.appendChild(current.tspan);
            }

            beginText() {
              const current = this.current;
              current.x = current.lineX = 0;
              current.y = current.lineY = 0;
              current.textMatrix = _util.IDENTITY_MATRIX;
              current.lineMatrix = _util.IDENTITY_MATRIX;
              current.textMatrixScale = 1;
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.txtElement = this.svgFactory.createElement("svg:text");
              current.txtgrp = this.svgFactory.createElement("svg:g");
              current.xcoords = [];
              current.ycoords = [];
            }

            moveText(x, y) {
              const current = this.current;
              current.x = current.lineX += x;
              current.y = current.lineY += y;
              current.xcoords = [];
              current.ycoords = [];
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
            }

            showText(glyphs) {
              const current = this.current;
              const font = current.font;
              const fontSize = current.fontSize;

              if (fontSize === 0) {
                return;
              }

              const fontSizeScale = current.fontSizeScale;
              const charSpacing = current.charSpacing;
              const wordSpacing = current.wordSpacing;
              const fontDirection = current.fontDirection;
              const textHScale = current.textHScale * fontDirection;
              const vertical = font.vertical;
              const spacingDir = vertical ? 1 : -1;
              const defaultVMetrics = font.defaultVMetrics;
              const widthAdvanceScale = fontSize * current.fontMatrix[0];
              let x = 0;

              for (const glyph of glyphs) {
                if (glyph === null) {
                  x += fontDirection * wordSpacing;
                  continue;
                } else if (typeof glyph === "number") {
                  x += spacingDir * glyph * fontSize / 1000;
                  continue;
                }

                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                const character = glyph.fontChar;
                let scaledX, scaledY;
                let width = glyph.width;

                if (vertical) {
                  let vx;
                  const vmetric = glyph.vmetric || defaultVMetrics;
                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                  vx = -vx * widthAdvanceScale;
                  const vy = vmetric[2] * widthAdvanceScale;
                  width = vmetric ? -vmetric[0] : width;
                  scaledX = vx / fontSizeScale;
                  scaledY = (x + vy) / fontSizeScale;
                } else {
                  scaledX = x / fontSizeScale;
                  scaledY = 0;
                }

                if (glyph.isInFont || font.missingFile) {
                  current.xcoords.push(current.x + scaledX);

                  if (vertical) {
                    current.ycoords.push(-current.y + scaledY);
                  }

                  current.tspan.textContent += character;
                } else {}

                let charWidth;

                if (vertical) {
                  charWidth = width * widthAdvanceScale - spacing * fontDirection;
                } else {
                  charWidth = width * widthAdvanceScale + spacing * fontDirection;
                }

                x += charWidth;
              }

              current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));

              if (vertical) {
                current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
              } else {
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
              }

              if (vertical) {
                current.y -= x;
              } else {
                current.x += x * textHScale;
              }

              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);

              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
              }

              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
              }

              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                  current.tspan.setAttributeNS(null, "fill", current.fillColor);
                }

                if (current.fillAlpha < 1) {
                  current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                }
              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {
                current.tspan.setAttributeNS(null, "fill", "transparent");
              } else {
                current.tspan.setAttributeNS(null, "fill", "none");
              }

              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                const lineWidthScale = 1 / (current.textMatrixScale || 1);

                this._setStrokeAttributes(current.tspan, lineWidthScale);
              }

              let textMatrix = current.textMatrix;

              if (current.textRise !== 0) {
                textMatrix = textMatrix.slice();
                textMatrix[5] += current.textRise;
              }

              current.txtElement.setAttributeNS(null, "transform", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);
              current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
              current.txtElement.appendChild(current.tspan);
              current.txtgrp.appendChild(current.txtElement);

              this._ensureTransformGroup().appendChild(current.txtElement);
            }

            setLeadingMoveText(x, y) {
              this.setLeading(-y);
              this.moveText(x, y);
            }

            addFontStyle(fontObj) {
              if (!fontObj.data) {
                throw new Error("addFontStyle: No font data available, " + 'ensure that the "fontExtraProperties" API parameter is set.');
              }

              if (!this.cssStyle) {
                this.cssStyle = this.svgFactory.createElement("svg:style");
                this.cssStyle.setAttributeNS(null, "type", "text/css");
                this.defs.appendChild(this.cssStyle);
              }

              const url = createObjectURL(fontObj.data, fontObj.mimetype, this.forceDataSchema);
              this.cssStyle.textContent += `@font-face { font-family: "${fontObj.loadedName}";` + ` src: url(${url}); }\n`;
            }

            setFont(details) {
              const current = this.current;
              const fontObj = this.commonObjs.get(details[0]);
              let size = details[1];
              current.font = fontObj;

              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                this.addFontStyle(fontObj);
                this.embeddedFonts[fontObj.loadedName] = fontObj;
              }

              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              let bold = "normal";

              if (fontObj.black) {
                bold = "900";
              } else if (fontObj.bold) {
                bold = "bold";
              }

              const italic = fontObj.italic ? "italic" : "normal";

              if (size < 0) {
                size = -size;
                current.fontDirection = -1;
              } else {
                current.fontDirection = 1;
              }

              current.fontSize = size;
              current.fontFamily = fontObj.loadedName;
              current.fontWeight = bold;
              current.fontStyle = italic;
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
              current.xcoords = [];
              current.ycoords = [];
            }

            endText() {
              const current = this.current;

              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {
                current.element = current.txtElement;
                this.clip("nonzero");
                this.endPath();
              }
            }

            setLineWidth(width) {
              if (width > 0) {
                this.current.lineWidth = width;
              }
            }

            setLineCap(style) {
              this.current.lineCap = LINE_CAP_STYLES[style];
            }

            setLineJoin(style) {
              this.current.lineJoin = LINE_JOIN_STYLES[style];
            }

            setMiterLimit(limit) {
              this.current.miterLimit = limit;
            }

            setStrokeAlpha(strokeAlpha) {
              this.current.strokeAlpha = strokeAlpha;
            }

            setStrokeRGBColor(r, g, b) {
              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);
            }

            setFillAlpha(fillAlpha) {
              this.current.fillAlpha = fillAlpha;
            }

            setFillRGBColor(r, g, b) {
              this.current.fillColor = _util.Util.makeHexColor(r, g, b);
              this.current.tspan = this.svgFactory.createElement("svg:tspan");
              this.current.xcoords = [];
              this.current.ycoords = [];
            }

            setStrokeColorN(args) {
              this.current.strokeColor = this._makeColorN_Pattern(args);
            }

            setFillColorN(args) {
              this.current.fillColor = this._makeColorN_Pattern(args);
            }

            shadingFill(args) {
              const width = this.viewport.width;
              const height = this.viewport.height;

              const inv = _util.Util.inverseTransform(this.transformMatrix);

              const bl = _util.Util.applyTransform([0, 0], inv);

              const br = _util.Util.applyTransform([0, height], inv);

              const ul = _util.Util.applyTransform([width, 0], inv);

              const ur = _util.Util.applyTransform([width, height], inv);

              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
              const rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", x0);
              rect.setAttributeNS(null, "y", y0);
              rect.setAttributeNS(null, "width", x1 - x0);
              rect.setAttributeNS(null, "height", y1 - y0);
              rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));

              if (this.current.fillAlpha < 1) {
                rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
              }

              this._ensureTransformGroup().appendChild(rect);
            }

            _makeColorN_Pattern(args) {
              if (args[0] === "TilingPattern") {
                return this._makeTilingPattern(args);
              }

              return this._makeShadingPattern(args);
            }

            _makeTilingPattern(args) {
              const color = args[1];
              const operatorList = args[2];
              const matrix = args[3] || _util.IDENTITY_MATRIX;
              const [x0, y0, x1, y1] = args[4];
              const xstep = args[5];
              const ystep = args[6];
              const paintType = args[7];
              const tilingId = `shading${shadingCount++}`;

              const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);

              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);

              const txstep = xstep * xscale;
              const tystep = ystep * yscale;
              const tiling = this.svgFactory.createElement("svg:pattern");
              tiling.setAttributeNS(null, "id", tilingId);
              tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
              tiling.setAttributeNS(null, "width", txstep);
              tiling.setAttributeNS(null, "height", tystep);
              tiling.setAttributeNS(null, "x", `${tx0}`);
              tiling.setAttributeNS(null, "y", `${ty0}`);
              const svg = this.svg;
              const transformMatrix = this.transformMatrix;
              const fillColor = this.current.fillColor;
              const strokeColor = this.current.strokeColor;
              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
              this.svg = bbox;
              this.transformMatrix = matrix;

              if (paintType === 2) {
                const cssColor = _util.Util.makeHexColor(...color);

                this.current.fillColor = cssColor;
                this.current.strokeColor = cssColor;
              }

              this.executeOpTree(this.convertOpList(operatorList));
              this.svg = svg;
              this.transformMatrix = transformMatrix;
              this.current.fillColor = fillColor;
              this.current.strokeColor = strokeColor;
              tiling.appendChild(bbox.childNodes[0]);
              this.defs.appendChild(tiling);
              return `url(#${tilingId})`;
            }

            _makeShadingPattern(args) {
              if (typeof args === "string") {
                args = this.objs.get(args);
              }

              switch (args[0]) {
                case "RadialAxial":
                  const shadingId = `shading${shadingCount++}`;
                  const colorStops = args[3];
                  let gradient;

                  switch (args[1]) {
                    case "axial":
                      const point0 = args[4];
                      const point1 = args[5];
                      gradient = this.svgFactory.createElement("svg:linearGradient");
                      gradient.setAttributeNS(null, "id", shadingId);
                      gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                      gradient.setAttributeNS(null, "x1", point0[0]);
                      gradient.setAttributeNS(null, "y1", point0[1]);
                      gradient.setAttributeNS(null, "x2", point1[0]);
                      gradient.setAttributeNS(null, "y2", point1[1]);
                      break;

                    case "radial":
                      const focalPoint = args[4];
                      const circlePoint = args[5];
                      const focalRadius = args[6];
                      const circleRadius = args[7];
                      gradient = this.svgFactory.createElement("svg:radialGradient");
                      gradient.setAttributeNS(null, "id", shadingId);
                      gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                      gradient.setAttributeNS(null, "cx", circlePoint[0]);
                      gradient.setAttributeNS(null, "cy", circlePoint[1]);
                      gradient.setAttributeNS(null, "r", circleRadius);
                      gradient.setAttributeNS(null, "fx", focalPoint[0]);
                      gradient.setAttributeNS(null, "fy", focalPoint[1]);
                      gradient.setAttributeNS(null, "fr", focalRadius);
                      break;

                    default:
                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);
                  }

                  for (const colorStop of colorStops) {
                    const stop = this.svgFactory.createElement("svg:stop");
                    stop.setAttributeNS(null, "offset", colorStop[0]);
                    stop.setAttributeNS(null, "stop-color", colorStop[1]);
                    gradient.appendChild(stop);
                  }

                  this.defs.appendChild(gradient);
                  return `url(#${shadingId})`;

                case "Mesh":
                  (0, _util.warn)("Unimplemented pattern Mesh");
                  return null;

                case "Dummy":
                  return "hotpink";

                default:
                  throw new Error(`Unknown IR type: ${args[0]}`);
              }
            }

            setDash(dashArray, dashPhase) {
              this.current.dashArray = dashArray;
              this.current.dashPhase = dashPhase;
            }

            constructPath(ops, args) {
              const current = this.current;
              let x = current.x,
                  y = current.y;
              let d = [];
              let j = 0;

              for (const op of ops) {
                switch (op | 0) {
                  case _util.OPS.rectangle:
                    x = args[j++];
                    y = args[j++];
                    const width = args[j++];
                    const height = args[j++];
                    const xw = x + width;
                    const yh = y + height;
                    d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                    break;

                  case _util.OPS.moveTo:
                    x = args[j++];
                    y = args[j++];
                    d.push("M", pf(x), pf(y));
                    break;

                  case _util.OPS.lineTo:
                    x = args[j++];
                    y = args[j++];
                    d.push("L", pf(x), pf(y));
                    break;

                  case _util.OPS.curveTo:
                    x = args[j + 4];
                    y = args[j + 5];
                    d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                    j += 6;
                    break;

                  case _util.OPS.curveTo2:
                    d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                    x = args[j + 2];
                    y = args[j + 3];
                    j += 4;
                    break;

                  case _util.OPS.curveTo3:
                    x = args[j + 2];
                    y = args[j + 3];
                    d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                    j += 4;
                    break;

                  case _util.OPS.closePath:
                    d.push("Z");
                    break;
                }
              }

              d = d.join(" ");

              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {
                d = current.path.getAttributeNS(null, "d") + d;
              } else {
                current.path = this.svgFactory.createElement("svg:path");

                this._ensureTransformGroup().appendChild(current.path);
              }

              current.path.setAttributeNS(null, "d", d);
              current.path.setAttributeNS(null, "fill", "none");
              current.element = current.path;
              current.setCurrentPoint(x, y);
            }

            endPath() {
              const current = this.current;
              current.path = null;

              if (!this.pendingClip) {
                return;
              }

              if (!current.element) {
                this.pendingClip = null;
                return;
              }

              const clipId = `clippath${clipCount++}`;
              const clipPath = this.svgFactory.createElement("svg:clipPath");
              clipPath.setAttributeNS(null, "id", clipId);
              clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
              const clipElement = current.element.cloneNode(true);

              if (this.pendingClip === "evenodd") {
                clipElement.setAttributeNS(null, "clip-rule", "evenodd");
              } else {
                clipElement.setAttributeNS(null, "clip-rule", "nonzero");
              }

              this.pendingClip = null;
              clipPath.appendChild(clipElement);
              this.defs.appendChild(clipPath);

              if (current.activeClipUrl) {
                current.clipGroup = null;

                for (const prev of this.extraStack) {
                  prev.clipGroup = null;
                }

                clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
              }

              current.activeClipUrl = `url(#${clipId})`;
              this.tgrp = null;
            }

            clip(type) {
              this.pendingClip = type;
            }

            closePath() {
              const current = this.current;

              if (current.path) {
                const d = `${current.path.getAttributeNS(null, "d")}Z`;
                current.path.setAttributeNS(null, "d", d);
              }
            }

            setLeading(leading) {
              this.current.leading = -leading;
            }

            setTextRise(textRise) {
              this.current.textRise = textRise;
            }

            setTextRenderingMode(textRenderingMode) {
              this.current.textRenderingMode = textRenderingMode;
            }

            setHScale(scale) {
              this.current.textHScale = scale / 100;
            }

            setRenderingIntent(intent) {}

            setFlatness(flatness) {}

            setGState(states) {
              for (const [key, value] of states) {
                switch (key) {
                  case "LW":
                    this.setLineWidth(value);
                    break;

                  case "LC":
                    this.setLineCap(value);
                    break;

                  case "LJ":
                    this.setLineJoin(value);
                    break;

                  case "ML":
                    this.setMiterLimit(value);
                    break;

                  case "D":
                    this.setDash(value[0], value[1]);
                    break;

                  case "RI":
                    this.setRenderingIntent(value);
                    break;

                  case "FL":
                    this.setFlatness(value);
                    break;

                  case "Font":
                    this.setFont(value);
                    break;

                  case "CA":
                    this.setStrokeAlpha(value);
                    break;

                  case "ca":
                    this.setFillAlpha(value);
                    break;

                  default:
                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);
                    break;
                }
              }
            }

            fill() {
              const current = this.current;

              if (current.element) {
                current.element.setAttributeNS(null, "fill", current.fillColor);
                current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                this.endPath();
              }
            }

            stroke() {
              const current = this.current;

              if (current.element) {
                this._setStrokeAttributes(current.element);

                current.element.setAttributeNS(null, "fill", "none");
                this.endPath();
              }
            }

            _setStrokeAttributes(element, lineWidthScale = 1) {
              const current = this.current;
              let dashArray = current.dashArray;

              if (lineWidthScale !== 1 && dashArray.length > 0) {
                dashArray = dashArray.map(function (value) {
                  return lineWidthScale * value;
                });
              }

              element.setAttributeNS(null, "stroke", current.strokeColor);
              element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
              element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
              element.setAttributeNS(null, "stroke-linecap", current.lineCap);
              element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
              element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
              element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
              element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
            }

            eoFill() {
              if (this.current.element) {
                this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
              }

              this.fill();
            }

            fillStroke() {
              this.stroke();
              this.fill();
            }

            eoFillStroke() {
              if (this.current.element) {
                this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
              }

              this.fillStroke();
            }

            closeStroke() {
              this.closePath();
              this.stroke();
            }

            closeFillStroke() {
              this.closePath();
              this.fillStroke();
            }

            closeEOFillStroke() {
              this.closePath();
              this.eoFillStroke();
            }

            paintSolidColorImageMask() {
              const rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", "0");
              rect.setAttributeNS(null, "y", "0");
              rect.setAttributeNS(null, "width", "1px");
              rect.setAttributeNS(null, "height", "1px");
              rect.setAttributeNS(null, "fill", this.current.fillColor);

              this._ensureTransformGroup().appendChild(rect);
            }

            paintImageXObject(objId) {
              const imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

              if (!imgData) {
                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);
                return;
              }

              this.paintInlineImageXObject(imgData);
            }

            paintInlineImageXObject(imgData, mask) {
              const width = imgData.width;
              const height = imgData.height;
              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
              const cliprect = this.svgFactory.createElement("svg:rect");
              cliprect.setAttributeNS(null, "x", "0");
              cliprect.setAttributeNS(null, "y", "0");
              cliprect.setAttributeNS(null, "width", pf(width));
              cliprect.setAttributeNS(null, "height", pf(height));
              this.current.element = cliprect;
              this.clip("nonzero");
              const imgEl = this.svgFactory.createElement("svg:image");
              imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
              imgEl.setAttributeNS(null, "x", "0");
              imgEl.setAttributeNS(null, "y", pf(-height));
              imgEl.setAttributeNS(null, "width", pf(width) + "px");
              imgEl.setAttributeNS(null, "height", pf(height) + "px");
              imgEl.setAttributeNS(null, "transform", `scale(${pf(1 / width)} ${pf(-1 / height)})`);

              if (mask) {
                mask.appendChild(imgEl);
              } else {
                this._ensureTransformGroup().appendChild(imgEl);
              }
            }

            paintImageMaskXObject(imgData) {
              const current = this.current;
              const width = imgData.width;
              const height = imgData.height;
              const fillColor = current.fillColor;
              current.maskId = `mask${maskCount++}`;
              const mask = this.svgFactory.createElement("svg:mask");
              mask.setAttributeNS(null, "id", current.maskId);
              const rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", "0");
              rect.setAttributeNS(null, "y", "0");
              rect.setAttributeNS(null, "width", pf(width));
              rect.setAttributeNS(null, "height", pf(height));
              rect.setAttributeNS(null, "fill", fillColor);
              rect.setAttributeNS(null, "mask", `url(#${current.maskId})`);
              this.defs.appendChild(mask);

              this._ensureTransformGroup().appendChild(rect);

              this.paintInlineImageXObject(imgData, mask);
            }

            paintFormXObjectBegin(matrix, bbox) {
              if (Array.isArray(matrix) && matrix.length === 6) {
                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
              }

              if (bbox) {
                const width = bbox[2] - bbox[0];
                const height = bbox[3] - bbox[1];
                const cliprect = this.svgFactory.createElement("svg:rect");
                cliprect.setAttributeNS(null, "x", bbox[0]);
                cliprect.setAttributeNS(null, "y", bbox[1]);
                cliprect.setAttributeNS(null, "width", pf(width));
                cliprect.setAttributeNS(null, "height", pf(height));
                this.current.element = cliprect;
                this.clip("nonzero");
                this.endPath();
              }
            }

            paintFormXObjectEnd() {}

            _initialize(viewport) {
              const svg = this.svgFactory.create(viewport.width, viewport.height);
              const definitions = this.svgFactory.createElement("svg:defs");
              svg.appendChild(definitions);
              this.defs = definitions;
              const rootGroup = this.svgFactory.createElement("svg:g");
              rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
              svg.appendChild(rootGroup);
              this.svg = rootGroup;
              return svg;
            }

            _ensureClipGroup() {
              if (!this.current.clipGroup) {
                const clipGroup = this.svgFactory.createElement("svg:g");
                clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                this.svg.appendChild(clipGroup);
                this.current.clipGroup = clipGroup;
              }

              return this.current.clipGroup;
            }

            _ensureTransformGroup() {
              if (!this.tgrp) {
                this.tgrp = this.svgFactory.createElement("svg:g");
                this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));

                if (this.current.activeClipUrl) {
                  this._ensureClipGroup().appendChild(this.tgrp);
                } else {
                  this.svg.appendChild(this.tgrp);
                }
              }

              return this.tgrp;
            }

          };
        }
        /***/
      },
      /* 25 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNodeStream = void 0;

        var _util = __w_pdfjs_require__(1);

        var _network_utils = __w_pdfjs_require__(26);

        ;

        const fs = __webpack_require__(/*! fs */ 172);

        const http = __webpack_require__(/*! http */ 2001);

        const https = __webpack_require__(/*! https */ 3779);

        const url = __webpack_require__(/*! url */ 6558);

        const fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;

        function parseUrl(sourceUrl) {
          const parsedUrl = url.parse(sourceUrl);

          if (parsedUrl.protocol === "file:" || parsedUrl.host) {
            return parsedUrl;
          }

          if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
            return url.parse(`file:///${sourceUrl}`);
          }

          if (!parsedUrl.host) {
            parsedUrl.protocol = "file:";
          }

          return parsedUrl;
        }

        class PDFNodeStream {
          constructor(source) {
            this.source = source;
            this.url = parseUrl(source.url);
            this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
            this.isFsUrl = this.url.protocol === "file:";
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          get _progressiveDataLength() {
            return this._fullRequestReader?._loaded ?? 0;
          }

          getFullReader() {
            (0, _util.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
            return this._fullRequestReader;
          }

          getRangeReader(start, end) {
            if (end <= this._progressiveDataLength) {
              return null;
            }

            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);

            this._rangeRequestReaders.push(rangeReader);

            return rangeReader;
          }

          cancelAllRequests(reason) {
            if (this._fullRequestReader) {
              this._fullRequestReader.cancel(reason);
            }

            for (const reader of this._rangeRequestReaders.slice(0)) {
              reader.cancel(reason);
            }
          }

        }

        exports.PDFNodeStream = PDFNodeStream;

        class BaseFullReader {
          constructor(stream) {
            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            const source = stream.source;
            this._contentLength = source.length;
            this._loaded = 0;
            this._filename = null;
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._headersCapability = (0, _util.createPromiseCapability)();
          }

          get headersReady() {
            return this._headersCapability.promise;
          }

          get filename() {
            return this._filename;
          }

          get contentLength() {
            return this._contentLength;
          }

          get isRangeSupported() {
            return this._isRangeSupported;
          }

          get isStreamingSupported() {
            return this._isStreamingSupported;
          }

          read() {
            var _this13 = this;

            return _asyncToGenerator(function* () {
              yield _this13._readCapability.promise;

              if (_this13._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              if (_this13._storedError) {
                throw _this13._storedError;
              }

              const chunk = _this13._readableStream.read();

              if (chunk === null) {
                _this13._readCapability = (0, _util.createPromiseCapability)();
                return _this13.read();
              }

              _this13._loaded += chunk.length;

              if (_this13.onProgress) {
                _this13.onProgress({
                  loaded: _this13._loaded,
                  total: _this13._contentLength
                });
              }

              const buffer = new Uint8Array(chunk).buffer;
              return {
                value: buffer,
                done: false
              };
            })();
          }

          cancel(reason) {
            if (!this._readableStream) {
              this._error(reason);

              return;
            }

            this._readableStream.destroy(reason);
          }

          _error(reason) {
            this._storedError = reason;

            this._readCapability.resolve();
          }

          _setReadableStream(readableStream) {
            this._readableStream = readableStream;
            readableStream.on("readable", () => {
              this._readCapability.resolve();
            });
            readableStream.on("end", () => {
              readableStream.destroy();
              this._done = true;

              this._readCapability.resolve();
            });
            readableStream.on("error", reason => {
              this._error(reason);
            });

            if (!this._isStreamingSupported && this._isRangeSupported) {
              this._error(new _util.AbortException("streaming is disabled"));
            }

            if (this._storedError) {
              this._readableStream.destroy(this._storedError);
            }
          }

        }

        class BaseRangeReader {
          constructor(stream) {
            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            this._loaded = 0;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            const source = stream.source;
            this._isStreamingSupported = !source.disableStream;
          }

          get isStreamingSupported() {
            return this._isStreamingSupported;
          }

          read() {
            var _this14 = this;

            return _asyncToGenerator(function* () {
              yield _this14._readCapability.promise;

              if (_this14._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              if (_this14._storedError) {
                throw _this14._storedError;
              }

              const chunk = _this14._readableStream.read();

              if (chunk === null) {
                _this14._readCapability = (0, _util.createPromiseCapability)();
                return _this14.read();
              }

              _this14._loaded += chunk.length;

              if (_this14.onProgress) {
                _this14.onProgress({
                  loaded: _this14._loaded
                });
              }

              const buffer = new Uint8Array(chunk).buffer;
              return {
                value: buffer,
                done: false
              };
            })();
          }

          cancel(reason) {
            if (!this._readableStream) {
              this._error(reason);

              return;
            }

            this._readableStream.destroy(reason);
          }

          _error(reason) {
            this._storedError = reason;

            this._readCapability.resolve();
          }

          _setReadableStream(readableStream) {
            this._readableStream = readableStream;
            readableStream.on("readable", () => {
              this._readCapability.resolve();
            });
            readableStream.on("end", () => {
              readableStream.destroy();
              this._done = true;

              this._readCapability.resolve();
            });
            readableStream.on("error", reason => {
              this._error(reason);
            });

            if (this._storedError) {
              this._readableStream.destroy(this._storedError);
            }
          }

        }

        function createRequestOptions(parsedUrl, headers) {
          return {
            protocol: parsedUrl.protocol,
            auth: parsedUrl.auth,
            host: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.path,
            method: "GET",
            headers
          };
        }

        class PDFNodeStreamFullReader extends BaseFullReader {
          constructor(stream) {
            super(stream);

            const handleResponse = response => {
              if (response.statusCode === 404) {
                const error = new _util.MissingPDFException(`Missing PDF "${this._url}".`);
                this._storedError = error;

                this._headersCapability.reject(error);

                return;
              }

              this._headersCapability.resolve();

              this._setReadableStream(response);

              const getResponseHeader = name => {
                return this._readableStream.headers[name.toLowerCase()];
              };

              const {
                allowRangeRequests,
                suggestedLength
              } = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader,
                isHttp: stream.isHttp,
                rangeChunkSize: this._rangeChunkSize,
                disableRange: this._disableRange
              });
              this._isRangeSupported = allowRangeRequests;
              this._contentLength = suggestedLength || this._contentLength;
              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
            };

            this._request = null;

            if (this._url.protocol === "http:") {
              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);
            } else {
              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);
            }

            this._request.on("error", reason => {
              this._storedError = reason;

              this._headersCapability.reject(reason);
            });

            this._request.end();
          }

        }

        class PDFNodeStreamRangeReader extends BaseRangeReader {
          constructor(stream, start, end) {
            super(stream);
            this._httpHeaders = {};

            for (const property in stream.httpHeaders) {
              const value = stream.httpHeaders[property];

              if (typeof value === "undefined") {
                continue;
              }

              this._httpHeaders[property] = value;
            }

            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;

            const handleResponse = response => {
              if (response.statusCode === 404) {
                const error = new _util.MissingPDFException(`Missing PDF "${this._url}".`);
                this._storedError = error;
                return;
              }

              this._setReadableStream(response);
            };

            this._request = null;

            if (this._url.protocol === "http:") {
              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);
            } else {
              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);
            }

            this._request.on("error", reason => {
              this._storedError = reason;
            });

            this._request.end();
          }

        }

        class PDFNodeStreamFsFullReader extends BaseFullReader {
          constructor(stream) {
            super(stream);
            let path = decodeURIComponent(this._url.path);

            if (fileUriRegex.test(this._url.href)) {
              path = path.replace(/^\//, "");
            }

            fs.lstat(path, (error, stat) => {
              if (error) {
                if (error.code === "ENOENT") {
                  error = new _util.MissingPDFException(`Missing PDF "${path}".`);
                }

                this._storedError = error;

                this._headersCapability.reject(error);

                return;
              }

              this._contentLength = stat.size;

              this._setReadableStream(fs.createReadStream(path));

              this._headersCapability.resolve();
            });
          }

        }

        class PDFNodeStreamFsRangeReader extends BaseRangeReader {
          constructor(stream, start, end) {
            super(stream);
            let path = decodeURIComponent(this._url.path);

            if (fileUriRegex.test(this._url.href)) {
              path = path.replace(/^\//, "");
            }

            this._setReadableStream(fs.createReadStream(path, {
              start,
              end: end - 1
            }));
          }

        }
        /***/

      },
      /* 26 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createResponseStatusError = createResponseStatusError;
        exports.extractFilenameFromHeader = extractFilenameFromHeader;
        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
        exports.validateResponseStatus = validateResponseStatus;

        var _util = __w_pdfjs_require__(1);

        var _content_disposition = __w_pdfjs_require__(27);

        var _display_utils = __w_pdfjs_require__(5);

        function validateRangeRequestCapabilities({
          getResponseHeader,
          isHttp,
          rangeChunkSize,
          disableRange
        }) {
          const returnValues = {
            allowRangeRequests: false,
            suggestedLength: undefined
          };
          const length = parseInt(getResponseHeader("Content-Length"), 10);

          if (!Number.isInteger(length)) {
            return returnValues;
          }

          returnValues.suggestedLength = length;

          if (length <= 2 * rangeChunkSize) {
            return returnValues;
          }

          if (disableRange || !isHttp) {
            return returnValues;
          }

          if (getResponseHeader("Accept-Ranges") !== "bytes") {
            return returnValues;
          }

          const contentEncoding = getResponseHeader("Content-Encoding") || "identity";

          if (contentEncoding !== "identity") {
            return returnValues;
          }

          returnValues.allowRangeRequests = true;
          return returnValues;
        }

        function extractFilenameFromHeader(getResponseHeader) {
          const contentDisposition = getResponseHeader("Content-Disposition");

          if (contentDisposition) {
            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);

            if (filename.includes("%")) {
              try {
                filename = decodeURIComponent(filename);
              } catch (ex) {}
            }

            if ((0, _display_utils.isPdfFile)(filename)) {
              return filename;
            }
          }

          return null;
        }

        function createResponseStatusError(status, url) {
          if (status === 404 || status === 0 && url.startsWith("file:")) {
            return new _util.MissingPDFException('Missing PDF "' + url + '".');
          }

          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF "${url}".`, status);
        }

        function validateResponseStatus(status) {
          return status === 200 || status === 206;
        }
        /***/

      },
      /* 27 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;

        var _util = __w_pdfjs_require__(1);

        function getFilenameFromContentDispositionHeader(contentDisposition) {
          let needsEncodingFixup = true;
          let tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];
            let filename = rfc2616unquote(tmp);
            filename = unescape(filename);
            filename = rfc5987decode(filename);
            filename = rfc2047decode(filename);
            return fixupEncoding(filename);
          }

          tmp = rfc2231getparam(contentDisposition);

          if (tmp) {
            const filename = rfc2047decode(tmp);
            return fixupEncoding(filename);
          }

          tmp = toParamRegExp("filename", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];
            let filename = rfc2616unquote(tmp);
            filename = rfc2047decode(filename);
            return fixupEncoding(filename);
          }

          function toParamRegExp(attributePattern, flags) {
            return new RegExp("(?:^|;)\\s*" + attributePattern + "\\s*=\\s*" + "(" + '[^";\\s][^;\\s]*' + "|" + '"(?:[^"\\\\]|\\\\"?)+"?' + ")", flags);
          }

          function textdecode(encoding, value) {
            if (encoding) {
              if (!/^[\x00-\xFF]+$/.test(value)) {
                return value;
              }

              try {
                const decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                const buffer = (0, _util.stringToBytes)(value);
                value = decoder.decode(buffer);
                needsEncodingFixup = false;
              } catch (e) {}
            }

            return value;
          }

          function fixupEncoding(value) {
            if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
              value = textdecode("utf-8", value);

              if (needsEncodingFixup) {
                value = textdecode("iso-8859-1", value);
              }
            }

            return value;
          }

          function rfc2231getparam(contentDispositionStr) {
            const matches = [];
            let match;
            const iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");

            while ((match = iter.exec(contentDispositionStr)) !== null) {
              let [, n, quot, part] = match;
              n = parseInt(n, 10);

              if (n in matches) {
                if (n === 0) {
                  break;
                }

                continue;
              }

              matches[n] = [quot, part];
            }

            const parts = [];

            for (let n = 0; n < matches.length; ++n) {
              if (!(n in matches)) {
                break;
              }

              let [quot, part] = matches[n];
              part = rfc2616unquote(part);

              if (quot) {
                part = unescape(part);

                if (n === 0) {
                  part = rfc5987decode(part);
                }
              }

              parts.push(part);
            }

            return parts.join("");
          }

          function rfc2616unquote(value) {
            if (value.startsWith('"')) {
              const parts = value.slice(1).split('\\"');

              for (let i = 0; i < parts.length; ++i) {
                const quotindex = parts[i].indexOf('"');

                if (quotindex !== -1) {
                  parts[i] = parts[i].slice(0, quotindex);
                  parts.length = i + 1;
                }

                parts[i] = parts[i].replace(/\\(.)/g, "$1");
              }

              value = parts.join('"');
            }

            return value;
          }

          function rfc5987decode(extvalue) {
            const encodingend = extvalue.indexOf("'");

            if (encodingend === -1) {
              return extvalue;
            }

            const encoding = extvalue.slice(0, encodingend);
            const langvalue = extvalue.slice(encodingend + 1);
            const value = langvalue.replace(/^[^']*'/, "");
            return textdecode(encoding, value);
          }

          function rfc2047decode(value) {
            if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
              return value;
            }

            return value.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function (matches, charset, encoding, text) {
              if (encoding === "q" || encoding === "Q") {
                text = text.replace(/_/g, " ");
                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {
                  return String.fromCharCode(parseInt(hex, 16));
                });
                return textdecode(charset, text);
              }

              try {
                text = atob(text);
              } catch (e) {}

              return textdecode(charset, text);
            });
          }

          return "";
        }
        /***/

      },
      /* 28 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNetworkStream = void 0;

        var _util = __w_pdfjs_require__(1);

        var _network_utils = __w_pdfjs_require__(26);

        ;
        const OK_RESPONSE = 200;
        const PARTIAL_CONTENT_RESPONSE = 206;

        function getArrayBuffer(xhr) {
          const data = xhr.response;

          if (typeof data !== "string") {
            return data;
          }

          const array = (0, _util.stringToBytes)(data);
          return array.buffer;
        }

        class NetworkManager {
          constructor(url, args = {}) {
            this.url = url;
            this.isHttp = /^https?:/i.test(url);
            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);
            this.withCredentials = args.withCredentials || false;

            this.getXhr = args.getXhr || function NetworkManager_getXhr() {
              return new XMLHttpRequest();
            };

            this.currXhrId = 0;
            this.pendingRequests = Object.create(null);
          }

          requestRange(begin, end, listeners) {
            const args = {
              begin,
              end
            };

            for (const prop in listeners) {
              args[prop] = listeners[prop];
            }

            return this.request(args);
          }

          requestFull(listeners) {
            return this.request(listeners);
          }

          request(args) {
            const xhr = this.getXhr();
            const xhrId = this.currXhrId++;
            const pendingRequest = this.pendingRequests[xhrId] = {
              xhr
            };
            xhr.open("GET", this.url);
            xhr.withCredentials = this.withCredentials;

            for (const property in this.httpHeaders) {
              const value = this.httpHeaders[property];

              if (typeof value === "undefined") {
                continue;
              }

              xhr.setRequestHeader(property, value);
            }

            if (this.isHttp && "begin" in args && "end" in args) {
              xhr.setRequestHeader("Range", `bytes=${args.begin}-${args.end - 1}`);
              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
            } else {
              pendingRequest.expectedStatus = OK_RESPONSE;
            }

            xhr.responseType = "arraybuffer";

            if (args.onError) {
              xhr.onerror = function (evt) {
                args.onError(xhr.status);
              };
            }

            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
            xhr.onprogress = this.onProgress.bind(this, xhrId);
            pendingRequest.onHeadersReceived = args.onHeadersReceived;
            pendingRequest.onDone = args.onDone;
            pendingRequest.onError = args.onError;
            pendingRequest.onProgress = args.onProgress;
            xhr.send(null);
            return xhrId;
          }

          onProgress(xhrId, evt) {
            const pendingRequest = this.pendingRequests[xhrId];

            if (!pendingRequest) {
              return;
            }

            pendingRequest.onProgress?.(evt);
          }

          onStateChange(xhrId, evt) {
            const pendingRequest = this.pendingRequests[xhrId];

            if (!pendingRequest) {
              return;
            }

            const xhr = pendingRequest.xhr;

            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
              pendingRequest.onHeadersReceived();
              delete pendingRequest.onHeadersReceived;
            }

            if (xhr.readyState !== 4) {
              return;
            }

            if (!(xhrId in this.pendingRequests)) {
              return;
            }

            delete this.pendingRequests[xhrId];

            if (xhr.status === 0 && this.isHttp) {
              pendingRequest.onError?.(xhr.status);
              return;
            }

            const xhrStatus = xhr.status || OK_RESPONSE;
            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;

            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
              pendingRequest.onError?.(xhr.status);
              return;
            }

            const chunk = getArrayBuffer(xhr);

            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
              const rangeHeader = xhr.getResponseHeader("Content-Range");
              const matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
              pendingRequest.onDone({
                begin: parseInt(matches[1], 10),
                chunk
              });
            } else if (chunk) {
              pendingRequest.onDone({
                begin: 0,
                chunk
              });
            } else {
              pendingRequest.onError?.(xhr.status);
            }
          }

          getRequestXhr(xhrId) {
            return this.pendingRequests[xhrId].xhr;
          }

          isPendingRequest(xhrId) {
            return xhrId in this.pendingRequests;
          }

          abortRequest(xhrId) {
            const xhr = this.pendingRequests[xhrId].xhr;
            delete this.pendingRequests[xhrId];
            xhr.abort();
          }

        }

        class PDFNetworkStream {
          constructor(source) {
            this._source = source;
            this._manager = new NetworkManager(source.url, {
              httpHeaders: source.httpHeaders,
              withCredentials: source.withCredentials
            });
            this._rangeChunkSize = source.rangeChunkSize;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _onRangeRequestReaderClosed(reader) {
            const i = this._rangeRequestReaders.indexOf(reader);

            if (i >= 0) {
              this._rangeRequestReaders.splice(i, 1);
            }
          }

          getFullReader() {
            (0, _util.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
            return this._fullRequestReader;
          }

          getRangeReader(begin, end) {
            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);

            this._rangeRequestReaders.push(reader);

            return reader;
          }

          cancelAllRequests(reason) {
            this._fullRequestReader?.cancel(reason);

            for (const reader of this._rangeRequestReaders.slice(0)) {
              reader.cancel(reason);
            }
          }

        }

        exports.PDFNetworkStream = PDFNetworkStream;

        class PDFNetworkStreamFullRequestReader {
          constructor(manager, source) {
            this._manager = manager;
            const args = {
              onHeadersReceived: this._onHeadersReceived.bind(this),
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = source.url;
            this._fullRequestId = manager.requestFull(args);
            this._headersReceivedCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._contentLength = source.length;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = false;
            this._isRangeSupported = false;
            this._cachedChunks = [];
            this._requests = [];
            this._done = false;
            this._storedError = undefined;
            this._filename = null;
            this.onProgress = null;
          }

          _onHeadersReceived() {
            const fullRequestXhrId = this._fullRequestId;

            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);

            const getResponseHeader = name => {
              return fullRequestXhr.getResponseHeader(name);
            };

            const {
              allowRangeRequests,
              suggestedLength
            } = (0, _network_utils.validateRangeRequestCapabilities)({
              getResponseHeader,
              isHttp: this._manager.isHttp,
              rangeChunkSize: this._rangeChunkSize,
              disableRange: this._disableRange
            });

            if (allowRangeRequests) {
              this._isRangeSupported = true;
            }

            this._contentLength = suggestedLength || this._contentLength;
            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

            if (this._isRangeSupported) {
              this._manager.abortRequest(fullRequestXhrId);
            }

            this._headersReceivedCapability.resolve();
          }

          _onDone(data) {
            if (data) {
              if (this._requests.length > 0) {
                const requestCapability = this._requests.shift();

                requestCapability.resolve({
                  value: data.chunk,
                  done: false
                });
              } else {
                this._cachedChunks.push(data.chunk);
              }
            }

            this._done = true;

            if (this._cachedChunks.length > 0) {
              return;
            }

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;
          }

          _onError(status) {
            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);

            this._headersReceivedCapability.reject(this._storedError);

            for (const requestCapability of this._requests) {
              requestCapability.reject(this._storedError);
            }

            this._requests.length = 0;
            this._cachedChunks.length = 0;
          }

          _onProgress(evt) {
            this.onProgress?.({
              loaded: evt.loaded,
              total: evt.lengthComputable ? evt.total : this._contentLength
            });
          }

          get filename() {
            return this._filename;
          }

          get isRangeSupported() {
            return this._isRangeSupported;
          }

          get isStreamingSupported() {
            return this._isStreamingSupported;
          }

          get contentLength() {
            return this._contentLength;
          }

          get headersReady() {
            return this._headersReceivedCapability.promise;
          }

          read() {
            var _this15 = this;

            return _asyncToGenerator(function* () {
              if (_this15._storedError) {
                throw _this15._storedError;
              }

              if (_this15._cachedChunks.length > 0) {
                const chunk = _this15._cachedChunks.shift();

                return {
                  value: chunk,
                  done: false
                };
              }

              if (_this15._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              const requestCapability = (0, _util.createPromiseCapability)();

              _this15._requests.push(requestCapability);

              return requestCapability.promise;
            })();
          }

          cancel(reason) {
            this._done = true;

            this._headersReceivedCapability.reject(reason);

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;

            if (this._manager.isPendingRequest(this._fullRequestId)) {
              this._manager.abortRequest(this._fullRequestId);
            }

            this._fullRequestReader = null;
          }

        }

        class PDFNetworkStreamRangeRequestReader {
          constructor(manager, begin, end) {
            this._manager = manager;
            const args = {
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = manager.url;
            this._requestId = manager.requestRange(begin, end, args);
            this._requests = [];
            this._queuedChunk = null;
            this._done = false;
            this._storedError = undefined;
            this.onProgress = null;
            this.onClosed = null;
          }

          _close() {
            this.onClosed?.(this);
          }

          _onDone(data) {
            const chunk = data.chunk;

            if (this._requests.length > 0) {
              const requestCapability = this._requests.shift();

              requestCapability.resolve({
                value: chunk,
                done: false
              });
            } else {
              this._queuedChunk = chunk;
            }

            this._done = true;

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;

            this._close();
          }

          _onError(status) {
            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);

            for (const requestCapability of this._requests) {
              requestCapability.reject(this._storedError);
            }

            this._requests.length = 0;
            this._queuedChunk = null;
          }

          _onProgress(evt) {
            if (!this.isStreamingSupported) {
              this.onProgress?.({
                loaded: evt.loaded
              });
            }
          }

          get isStreamingSupported() {
            return false;
          }

          read() {
            var _this16 = this;

            return _asyncToGenerator(function* () {
              if (_this16._storedError) {
                throw _this16._storedError;
              }

              if (_this16._queuedChunk !== null) {
                const chunk = _this16._queuedChunk;
                _this16._queuedChunk = null;
                return {
                  value: chunk,
                  done: false
                };
              }

              if (_this16._done) {
                return {
                  value: undefined,
                  done: true
                };
              }

              const requestCapability = (0, _util.createPromiseCapability)();

              _this16._requests.push(requestCapability);

              return requestCapability.promise;
            })();
          }

          cancel(reason) {
            this._done = true;

            for (const requestCapability of this._requests) {
              requestCapability.resolve({
                value: undefined,
                done: true
              });
            }

            this._requests.length = 0;

            if (this._manager.isPendingRequest(this._requestId)) {
              this._manager.abortRequest(this._requestId);
            }

            this._close();
          }

        }
        /***/

      },
      /* 29 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFFetchStream = void 0;

        var _util = __w_pdfjs_require__(1);

        var _network_utils = __w_pdfjs_require__(26);

        ;

        function createFetchOptions(headers, withCredentials, abortController) {
          return {
            method: "GET",
            headers,
            signal: abortController?.signal,
            mode: "cors",
            credentials: withCredentials ? "include" : "same-origin",
            redirect: "follow"
          };
        }

        function createHeaders(httpHeaders) {
          const headers = new Headers();

          for (const property in httpHeaders) {
            const value = httpHeaders[property];

            if (typeof value === "undefined") {
              continue;
            }

            headers.append(property, value);
          }

          return headers;
        }

        class PDFFetchStream {
          constructor(source) {
            this.source = source;
            this.isHttp = /^https?:/i.test(source.url);
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          get _progressiveDataLength() {
            return this._fullRequestReader?._loaded ?? 0;
          }

          getFullReader() {
            (0, _util.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
            this._fullRequestReader = new PDFFetchStreamReader(this);
            return this._fullRequestReader;
          }

          getRangeReader(begin, end) {
            if (end <= this._progressiveDataLength) {
              return null;
            }

            const reader = new PDFFetchStreamRangeReader(this, begin, end);

            this._rangeRequestReaders.push(reader);

            return reader;
          }

          cancelAllRequests(reason) {
            if (this._fullRequestReader) {
              this._fullRequestReader.cancel(reason);
            }

            for (const reader of this._rangeRequestReaders.slice(0)) {
              reader.cancel(reason);
            }
          }

        }

        exports.PDFFetchStream = PDFFetchStream;

        class PDFFetchStreamReader {
          constructor(stream) {
            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            this._filename = null;
            const source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._contentLength = source.length;
            this._headersCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._headers = createHeaders(this._stream.httpHeaders);
            const url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              this._reader = response.body.getReader();

              this._headersCapability.resolve();

              const getResponseHeader = name => {
                return response.headers.get(name);
              };

              const {
                allowRangeRequests,
                suggestedLength
              } = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader,
                isHttp: this._stream.isHttp,
                rangeChunkSize: this._rangeChunkSize,
                disableRange: this._disableRange
              });
              this._isRangeSupported = allowRangeRequests;
              this._contentLength = suggestedLength || this._contentLength;
              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

              if (!this._isStreamingSupported && this._isRangeSupported) {
                this.cancel(new _util.AbortException("Streaming is disabled."));
              }
            }).catch(this._headersCapability.reject);
            this.onProgress = null;
          }

          get headersReady() {
            return this._headersCapability.promise;
          }

          get filename() {
            return this._filename;
          }

          get contentLength() {
            return this._contentLength;
          }

          get isRangeSupported() {
            return this._isRangeSupported;
          }

          get isStreamingSupported() {
            return this._isStreamingSupported;
          }

          read() {
            var _this17 = this;

            return _asyncToGenerator(function* () {
              yield _this17._headersCapability.promise;
              const {
                value,
                done
              } = yield _this17._reader.read();

              if (done) {
                return {
                  value,
                  done
                };
              }

              _this17._loaded += value.byteLength;

              if (_this17.onProgress) {
                _this17.onProgress({
                  loaded: _this17._loaded,
                  total: _this17._contentLength
                });
              }

              const buffer = new Uint8Array(value).buffer;
              return {
                value: buffer,
                done: false
              };
            })();
          }

          cancel(reason) {
            if (this._reader) {
              this._reader.cancel(reason);
            }

            if (this._abortController) {
              this._abortController.abort();
            }
          }

        }

        class PDFFetchStreamRangeReader {
          constructor(stream, begin, end) {
            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            const source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._isStreamingSupported = !source.disableStream;

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._headers = createHeaders(this._stream.httpHeaders);

            this._headers.append("Range", `bytes=${begin}-${end - 1}`);

            const url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              this._readCapability.resolve();

              this._reader = response.body.getReader();
            }).catch(this._readCapability.reject);
            this.onProgress = null;
          }

          get isStreamingSupported() {
            return this._isStreamingSupported;
          }

          read() {
            var _this18 = this;

            return _asyncToGenerator(function* () {
              yield _this18._readCapability.promise;
              const {
                value,
                done
              } = yield _this18._reader.read();

              if (done) {
                return {
                  value,
                  done
                };
              }

              _this18._loaded += value.byteLength;

              if (_this18.onProgress) {
                _this18.onProgress({
                  loaded: _this18._loaded
                });
              }

              const buffer = new Uint8Array(value).buffer;
              return {
                value: buffer,
                done: false
              };
            })();
          }

          cancel(reason) {
            if (this._reader) {
              this._reader.cancel(reason);
            }

            if (this._abortController) {
              this._abortController.abort();
            }
          }

        }
        /***/

      }
      /******/
      ];
      /************************************************************************/

      /******/
      // The module cache

      /******/

      var __webpack_module_cache__ = {};
      /******/

      /******/
      // The require function

      /******/

      function __w_pdfjs_require__(moduleId) {
        /******/
        // Check if module is in cache

        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/

        if (cachedModule !== undefined) {
          /******/
          return cachedModule.exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed

          /******/
          // no module.loaded needed

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);
        /******/

        /******/
        // Return the exports of the module

        /******/


        return module.exports;
        /******/
      }
      /******/

      /************************************************************************/


      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

      (() => {
        var exports = __webpack_exports__;
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "AnnotationLayer", {
          enumerable: true,
          get: function () {
            return _annotation_layer.AnnotationLayer;
          }
        });
        Object.defineProperty(exports, "AnnotationMode", {
          enumerable: true,
          get: function () {
            return _util.AnnotationMode;
          }
        });
        Object.defineProperty(exports, "CMapCompressionType", {
          enumerable: true,
          get: function () {
            return _util.CMapCompressionType;
          }
        });
        Object.defineProperty(exports, "GlobalWorkerOptions", {
          enumerable: true,
          get: function () {
            return _worker_options.GlobalWorkerOptions;
          }
        });
        Object.defineProperty(exports, "InvalidPDFException", {
          enumerable: true,
          get: function () {
            return _util.InvalidPDFException;
          }
        });
        Object.defineProperty(exports, "LoopbackPort", {
          enumerable: true,
          get: function () {
            return _api.LoopbackPort;
          }
        });
        Object.defineProperty(exports, "MissingPDFException", {
          enumerable: true,
          get: function () {
            return _util.MissingPDFException;
          }
        });
        Object.defineProperty(exports, "OPS", {
          enumerable: true,
          get: function () {
            return _util.OPS;
          }
        });
        Object.defineProperty(exports, "PDFDataRangeTransport", {
          enumerable: true,
          get: function () {
            return _api.PDFDataRangeTransport;
          }
        });
        Object.defineProperty(exports, "PDFDateString", {
          enumerable: true,
          get: function () {
            return _display_utils.PDFDateString;
          }
        });
        Object.defineProperty(exports, "PDFWorker", {
          enumerable: true,
          get: function () {
            return _api.PDFWorker;
          }
        });
        Object.defineProperty(exports, "PasswordResponses", {
          enumerable: true,
          get: function () {
            return _util.PasswordResponses;
          }
        });
        Object.defineProperty(exports, "PermissionFlag", {
          enumerable: true,
          get: function () {
            return _util.PermissionFlag;
          }
        });
        Object.defineProperty(exports, "PixelsPerInch", {
          enumerable: true,
          get: function () {
            return _display_utils.PixelsPerInch;
          }
        });
        Object.defineProperty(exports, "RenderingCancelledException", {
          enumerable: true,
          get: function () {
            return _display_utils.RenderingCancelledException;
          }
        });
        Object.defineProperty(exports, "SVGGraphics", {
          enumerable: true,
          get: function () {
            return _svg.SVGGraphics;
          }
        });
        Object.defineProperty(exports, "UNSUPPORTED_FEATURES", {
          enumerable: true,
          get: function () {
            return _util.UNSUPPORTED_FEATURES;
          }
        });
        Object.defineProperty(exports, "UnexpectedResponseException", {
          enumerable: true,
          get: function () {
            return _util.UnexpectedResponseException;
          }
        });
        Object.defineProperty(exports, "Util", {
          enumerable: true,
          get: function () {
            return _util.Util;
          }
        });
        Object.defineProperty(exports, "VerbosityLevel", {
          enumerable: true,
          get: function () {
            return _util.VerbosityLevel;
          }
        });
        Object.defineProperty(exports, "XfaLayer", {
          enumerable: true,
          get: function () {
            return _xfa_layer.XfaLayer;
          }
        });
        Object.defineProperty(exports, "build", {
          enumerable: true,
          get: function () {
            return _api.build;
          }
        });
        Object.defineProperty(exports, "createPromiseCapability", {
          enumerable: true,
          get: function () {
            return _util.createPromiseCapability;
          }
        });
        Object.defineProperty(exports, "createValidAbsoluteUrl", {
          enumerable: true,
          get: function () {
            return _util.createValidAbsoluteUrl;
          }
        });
        Object.defineProperty(exports, "getDocument", {
          enumerable: true,
          get: function () {
            return _api.getDocument;
          }
        });
        Object.defineProperty(exports, "getFilenameFromUrl", {
          enumerable: true,
          get: function () {
            return _display_utils.getFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getPdfFilenameFromUrl", {
          enumerable: true,
          get: function () {
            return _display_utils.getPdfFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getXfaPageViewport", {
          enumerable: true,
          get: function () {
            return _display_utils.getXfaPageViewport;
          }
        });
        Object.defineProperty(exports, "isPdfFile", {
          enumerable: true,
          get: function () {
            return _display_utils.isPdfFile;
          }
        });
        Object.defineProperty(exports, "loadScript", {
          enumerable: true,
          get: function () {
            return _display_utils.loadScript;
          }
        });
        Object.defineProperty(exports, "renderTextLayer", {
          enumerable: true,
          get: function () {
            return _text_layer.renderTextLayer;
          }
        });
        Object.defineProperty(exports, "shadow", {
          enumerable: true,
          get: function () {
            return _util.shadow;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function () {
            return _api.version;
          }
        });

        var _util = __w_pdfjs_require__(1);

        var _api = __w_pdfjs_require__(4);

        var _display_utils = __w_pdfjs_require__(5);

        var _annotation_layer = __w_pdfjs_require__(20);

        var _worker_options = __w_pdfjs_require__(13);

        var _is_node = __w_pdfjs_require__(3);

        var _text_layer = __w_pdfjs_require__(23);

        var _svg = __w_pdfjs_require__(24);

        var _xfa_layer = __w_pdfjs_require__(22);

        const pdfjsVersion = '2.14.305';
        const pdfjsBuild = 'eaaa8b4ad';
        {
          if (_is_node.isNodeJS) {
            const {
              PDFNodeStream
            } = __w_pdfjs_require__(25);

            (0, _api.setPDFNetworkStreamFactory)(params => {
              return new PDFNodeStream(params);
            });
          } else {
            const {
              PDFNetworkStream
            } = __w_pdfjs_require__(28);

            const {
              PDFFetchStream
            } = __w_pdfjs_require__(29);

            (0, _api.setPDFNetworkStreamFactory)(params => {
              if ((0, _display_utils.isValidFetchUrl)(params.url)) {
                return new PDFFetchStream(params);
              }

              return new PDFNetworkStream(params);
            });
          }
        }
      })();
      /******/


      return __webpack_exports__;
      /******/
    })()
  );
}); //# sourceMappingURL=pdf.js.map

/***/ }),

/***/ 2813:
/*!***************************************************!*\
  !*** ./node_modules/pdfjs-dist/web/pdf_viewer.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _asyncToGenerator = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ 8926)["default"]);

/**
 * @licstart The following is the entire license notice for the
 * JavaScript code in this page
 *
 * Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * JavaScript code in this page
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (true) module.exports = factory();else {}
})(this, () => {
  return (
    /******/
    (() => {
      // webpackBootstrap

      /******/
      "use strict";
      /******/

      var __webpack_modules__ = [
        /* 0 */
      ,
      /* 1 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultXfaLayerFactory = exports.DefaultTextLayerFactory = exports.DefaultStructTreeLayerFactory = exports.DefaultAnnotationLayerFactory = void 0;

        var _annotation_layer_builder = __w_pdfjs_require__(2);

        var _l10n_utils = __w_pdfjs_require__(4);

        var _pdf_link_service = __w_pdfjs_require__(5);

        var _struct_tree_layer_builder = __w_pdfjs_require__(7);

        var _text_layer_builder = __w_pdfjs_require__(8);

        var _xfa_layer_builder = __w_pdfjs_require__(9);

        class DefaultAnnotationLayerFactory {
          createAnnotationLayerBuilder(pageDiv, pdfPage, annotationStorage = null, imageResourcesPath = "", renderForms = true, l10n = _l10n_utils.NullL10n, enableScripting = false, hasJSActionsPromise = null, mouseState = null, fieldObjectsPromise = null, annotationCanvasMap = null) {
            return new _annotation_layer_builder.AnnotationLayerBuilder({
              pageDiv,
              pdfPage,
              imageResourcesPath,
              renderForms,
              linkService: new _pdf_link_service.SimpleLinkService(),
              l10n,
              annotationStorage,
              enableScripting,
              hasJSActionsPromise,
              fieldObjectsPromise,
              mouseState,
              annotationCanvasMap
            });
          }

        }

        exports.DefaultAnnotationLayerFactory = DefaultAnnotationLayerFactory;

        class DefaultStructTreeLayerFactory {
          createStructTreeLayerBuilder(pdfPage) {
            return new _struct_tree_layer_builder.StructTreeLayerBuilder({
              pdfPage
            });
          }

        }

        exports.DefaultStructTreeLayerFactory = DefaultStructTreeLayerFactory;

        class DefaultTextLayerFactory {
          createTextLayerBuilder(textLayerDiv, pageIndex, viewport, enhanceTextSelection = false, eventBus, highlighter) {
            return new _text_layer_builder.TextLayerBuilder({
              textLayerDiv,
              pageIndex,
              viewport,
              enhanceTextSelection,
              eventBus,
              highlighter
            });
          }

        }

        exports.DefaultTextLayerFactory = DefaultTextLayerFactory;

        class DefaultXfaLayerFactory {
          createXfaLayerBuilder(pageDiv, pdfPage, annotationStorage = null, xfaHtml = null) {
            return new _xfa_layer_builder.XfaLayerBuilder({
              pageDiv,
              pdfPage,
              annotationStorage,
              linkService: new _pdf_link_service.SimpleLinkService(),
              xfaHtml
            });
          }

        }

        exports.DefaultXfaLayerFactory = DefaultXfaLayerFactory;
        /***/
      },
      /* 2 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationLayerBuilder = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        var _l10n_utils = __w_pdfjs_require__(4);

        class AnnotationLayerBuilder {
          constructor({
            pageDiv,
            pdfPage,
            linkService,
            downloadManager,
            annotationStorage = null,
            imageResourcesPath = "",
            renderForms = true,
            l10n = _l10n_utils.NullL10n,
            enableScripting = false,
            hasJSActionsPromise = null,
            fieldObjectsPromise = null,
            mouseState = null,
            annotationCanvasMap = null
          }) {
            this.pageDiv = pageDiv;
            this.pdfPage = pdfPage;
            this.linkService = linkService;
            this.downloadManager = downloadManager;
            this.imageResourcesPath = imageResourcesPath;
            this.renderForms = renderForms;
            this.l10n = l10n;
            this.annotationStorage = annotationStorage;
            this.enableScripting = enableScripting;
            this._hasJSActionsPromise = hasJSActionsPromise;
            this._fieldObjectsPromise = fieldObjectsPromise;
            this._mouseState = mouseState;
            this._annotationCanvasMap = annotationCanvasMap;
            this.div = null;
            this._cancelled = false;
          }

          render(viewport, intent = "display") {
            var _this = this;

            return _asyncToGenerator(function* () {
              const [annotations, hasJSActions = false, fieldObjects = null] = yield Promise.all([_this.pdfPage.getAnnotations({
                intent
              }), _this._hasJSActionsPromise, _this._fieldObjectsPromise]);

              if (_this._cancelled || annotations.length === 0) {
                return;
              }

              const parameters = {
                viewport: viewport.clone({
                  dontFlip: true
                }),
                div: _this.div,
                annotations,
                page: _this.pdfPage,
                imageResourcesPath: _this.imageResourcesPath,
                renderForms: _this.renderForms,
                linkService: _this.linkService,
                downloadManager: _this.downloadManager,
                annotationStorage: _this.annotationStorage,
                enableScripting: _this.enableScripting,
                hasJSActions,
                fieldObjects,
                mouseState: _this._mouseState,
                annotationCanvasMap: _this._annotationCanvasMap
              };

              if (_this.div) {
                _pdfjsLib.AnnotationLayer.update(parameters);
              } else {
                _this.div = document.createElement("div");
                _this.div.className = "annotationLayer";

                _this.pageDiv.appendChild(_this.div);

                parameters.div = _this.div;

                _pdfjsLib.AnnotationLayer.render(parameters);

                _this.l10n.translate(_this.div);
              }
            })();
          }

          cancel() {
            this._cancelled = true;
          }

          hide() {
            if (!this.div) {
              return;
            }

            this.div.hidden = true;
          }

        }

        exports.AnnotationLayerBuilder = AnnotationLayerBuilder;
        /***/
      },
      /* 3 */

      /***/
      module => {
        let pdfjsLib;

        if (typeof window !== "undefined" && window["pdfjs-dist/build/pdf"]) {
          pdfjsLib = window["pdfjs-dist/build/pdf"];
        } else {
          pdfjsLib = __webpack_require__(/*! ../build/pdf.js */ 6036);
        }

        module.exports = pdfjsLib;
        /***/
      },
      /* 4 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NullL10n = void 0;
        exports.fixupLangCode = fixupLangCode;
        exports.getL10nFallback = getL10nFallback;
        const DEFAULT_L10N_STRINGS = {
          of_pages: "of {{pagesCount}}",
          page_of_pages: "({{pageNumber}} of {{pagesCount}})",
          document_properties_kb: "{{size_kb}} KB ({{size_b}} bytes)",
          document_properties_mb: "{{size_mb}} MB ({{size_b}} bytes)",
          document_properties_date_string: "{{date}}, {{time}}",
          document_properties_page_size_unit_inches: "in",
          document_properties_page_size_unit_millimeters: "mm",
          document_properties_page_size_orientation_portrait: "portrait",
          document_properties_page_size_orientation_landscape: "landscape",
          document_properties_page_size_name_a3: "A3",
          document_properties_page_size_name_a4: "A4",
          document_properties_page_size_name_letter: "Letter",
          document_properties_page_size_name_legal: "Legal",
          document_properties_page_size_dimension_string: "{{width}} × {{height}} {{unit}} ({{orientation}})",
          document_properties_page_size_dimension_name_string: "{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",
          document_properties_linearized_yes: "Yes",
          document_properties_linearized_no: "No",
          print_progress_percent: "{{progress}}%",
          "toggle_sidebar.title": "Toggle Sidebar",
          "toggle_sidebar_notification2.title": "Toggle Sidebar (document contains outline/attachments/layers)",
          additional_layers: "Additional Layers",
          page_landmark: "Page {{page}}",
          thumb_page_title: "Page {{page}}",
          thumb_page_canvas: "Thumbnail of Page {{page}}",
          find_reached_top: "Reached top of document, continued from bottom",
          find_reached_bottom: "Reached end of document, continued from top",
          "find_match_count[one]": "{{current}} of {{total}} match",
          "find_match_count[other]": "{{current}} of {{total}} matches",
          "find_match_count_limit[one]": "More than {{limit}} match",
          "find_match_count_limit[other]": "More than {{limit}} matches",
          find_not_found: "Phrase not found",
          error_version_info: "PDF.js v{{version}} (build: {{build}})",
          error_message: "Message: {{message}}",
          error_stack: "Stack: {{stack}}",
          error_file: "File: {{file}}",
          error_line: "Line: {{line}}",
          rendering_error: "An error occurred while rendering the page.",
          page_scale_width: "Page Width",
          page_scale_fit: "Page Fit",
          page_scale_auto: "Automatic Zoom",
          page_scale_actual: "Actual Size",
          page_scale_percent: "{{scale}}%",
          loading: "Loading…",
          loading_error: "An error occurred while loading the PDF.",
          invalid_file_error: "Invalid or corrupted PDF file.",
          missing_file_error: "Missing PDF file.",
          unexpected_response_error: "Unexpected server response.",
          printing_not_supported: "Warning: Printing is not fully supported by this browser.",
          printing_not_ready: "Warning: The PDF is not fully loaded for printing.",
          web_fonts_disabled: "Web fonts are disabled: unable to use embedded PDF fonts."
        };

        function getL10nFallback(key, args) {
          switch (key) {
            case "find_match_count":
              key = `find_match_count[${args.total === 1 ? "one" : "other"}]`;
              break;

            case "find_match_count_limit":
              key = `find_match_count_limit[${args.limit === 1 ? "one" : "other"}]`;
              break;
          }

          return DEFAULT_L10N_STRINGS[key] || "";
        }

        const PARTIAL_LANG_CODES = {
          en: "en-US",
          es: "es-ES",
          fy: "fy-NL",
          ga: "ga-IE",
          gu: "gu-IN",
          hi: "hi-IN",
          hy: "hy-AM",
          nb: "nb-NO",
          ne: "ne-NP",
          nn: "nn-NO",
          pa: "pa-IN",
          pt: "pt-PT",
          sv: "sv-SE",
          zh: "zh-CN"
        };

        function fixupLangCode(langCode) {
          return PARTIAL_LANG_CODES[langCode?.toLowerCase()] || langCode;
        }

        function formatL10nValue(text, args) {
          if (!args) {
            return text;
          }

          return text.replace(/\{\{\s*(\w+)\s*\}\}/g, (all, name) => {
            return name in args ? args[name] : "{{" + name + "}}";
          });
        }

        const NullL10n = {
          getLanguage() {
            return _asyncToGenerator(function* () {
              return "en-us";
            })();
          },

          getDirection() {
            return _asyncToGenerator(function* () {
              return "ltr";
            })();
          },

          get(key, args = null, fallback = getL10nFallback(key, args)) {
            return _asyncToGenerator(function* () {
              return formatL10nValue(fallback, args);
            })();
          },

          translate(element) {
            return _asyncToGenerator(function* () {})();
          }

        };
        exports.NullL10n = NullL10n;
        /***/
      },
      /* 5 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SimpleLinkService = exports.PDFLinkService = exports.LinkTarget = void 0;

        var _ui_utils = __w_pdfjs_require__(6);

        const DEFAULT_LINK_REL = "noopener noreferrer nofollow";
        const LinkTarget = {
          NONE: 0,
          SELF: 1,
          BLANK: 2,
          PARENT: 3,
          TOP: 4
        };
        exports.LinkTarget = LinkTarget;

        function addLinkAttributes(link, {
          url,
          target,
          rel,
          enabled = true
        } = {}) {
          if (!url || typeof url !== "string") {
            throw new Error('A valid "url" parameter must provided.');
          }

          const urlNullRemoved = (0, _ui_utils.removeNullCharacters)(url);

          if (enabled) {
            link.href = link.title = urlNullRemoved;
          } else {
            link.href = "";
            link.title = `Disabled: ${urlNullRemoved}`;

            link.onclick = () => {
              return false;
            };
          }

          let targetStr = "";

          switch (target) {
            case LinkTarget.NONE:
              break;

            case LinkTarget.SELF:
              targetStr = "_self";
              break;

            case LinkTarget.BLANK:
              targetStr = "_blank";
              break;

            case LinkTarget.PARENT:
              targetStr = "_parent";
              break;

            case LinkTarget.TOP:
              targetStr = "_top";
              break;
          }

          link.target = targetStr;
          link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL;
        }

        class PDFLinkService {
          #pagesRefCache = new Map();

          constructor({
            eventBus,
            externalLinkTarget = null,
            externalLinkRel = null,
            ignoreDestinationZoom = false
          } = {}) {
            this.eventBus = eventBus;
            this.externalLinkTarget = externalLinkTarget;
            this.externalLinkRel = externalLinkRel;
            this.externalLinkEnabled = true;
            this._ignoreDestinationZoom = ignoreDestinationZoom;
            this.baseUrl = null;
            this.pdfDocument = null;
            this.pdfViewer = null;
            this.pdfHistory = null;
          }

          setDocument(pdfDocument, baseUrl = null) {
            this.baseUrl = baseUrl;
            this.pdfDocument = pdfDocument;
            this.#pagesRefCache.clear();
          }

          setViewer(pdfViewer) {
            this.pdfViewer = pdfViewer;
          }

          setHistory(pdfHistory) {
            this.pdfHistory = pdfHistory;
          }

          get pagesCount() {
            return this.pdfDocument ? this.pdfDocument.numPages : 0;
          }

          get page() {
            return this.pdfViewer.currentPageNumber;
          }

          set page(value) {
            this.pdfViewer.currentPageNumber = value;
          }

          get rotation() {
            return this.pdfViewer.pagesRotation;
          }

          set rotation(value) {
            this.pdfViewer.pagesRotation = value;
          }

          #goToDestinationHelper(rawDest, namedDest = null, explicitDest) {
            const destRef = explicitDest[0];
            let pageNumber;

            if (typeof destRef === "object" && destRef !== null) {
              pageNumber = this._cachedPageNumber(destRef);

              if (!pageNumber) {
                this.pdfDocument.getPageIndex(destRef).then(pageIndex => {
                  this.cachePageRef(pageIndex + 1, destRef);
                  this.#goToDestinationHelper(rawDest, namedDest, explicitDest);
                }).catch(() => {
                  console.error(`PDFLinkService.#goToDestinationHelper: "${destRef}" is not ` + `a valid page reference, for dest="${rawDest}".`);
                });
                return;
              }
            } else if (Number.isInteger(destRef)) {
              pageNumber = destRef + 1;
            } else {
              console.error(`PDFLinkService.#goToDestinationHelper: "${destRef}" is not ` + `a valid destination reference, for dest="${rawDest}".`);
              return;
            }

            if (!pageNumber || pageNumber < 1 || pageNumber > this.pagesCount) {
              console.error(`PDFLinkService.#goToDestinationHelper: "${pageNumber}" is not ` + `a valid page number, for dest="${rawDest}".`);
              return;
            }

            if (this.pdfHistory) {
              this.pdfHistory.pushCurrentPosition();
              this.pdfHistory.push({
                namedDest,
                explicitDest,
                pageNumber
              });
            }

            this.pdfViewer.scrollPageIntoView({
              pageNumber,
              destArray: explicitDest,
              ignoreDestinationZoom: this._ignoreDestinationZoom
            });
          }

          goToDestination(dest) {
            var _this2 = this;

            return _asyncToGenerator(function* () {
              if (!_this2.pdfDocument) {
                return;
              }

              let namedDest, explicitDest;

              if (typeof dest === "string") {
                namedDest = dest;
                explicitDest = yield _this2.pdfDocument.getDestination(dest);
              } else {
                namedDest = null;
                explicitDest = yield dest;
              }

              if (!Array.isArray(explicitDest)) {
                console.error(`PDFLinkService.goToDestination: "${explicitDest}" is not ` + `a valid destination array, for dest="${dest}".`);
                return;
              }

              _this2.#goToDestinationHelper(dest, namedDest, explicitDest);
            })();
          }

          goToPage(val) {
            if (!this.pdfDocument) {
              return;
            }

            const pageNumber = typeof val === "string" && this.pdfViewer.pageLabelToPageNumber(val) || val | 0;

            if (!(Number.isInteger(pageNumber) && pageNumber > 0 && pageNumber <= this.pagesCount)) {
              console.error(`PDFLinkService.goToPage: "${val}" is not a valid page.`);
              return;
            }

            if (this.pdfHistory) {
              this.pdfHistory.pushCurrentPosition();
              this.pdfHistory.pushPage(pageNumber);
            }

            this.pdfViewer.scrollPageIntoView({
              pageNumber
            });
          }

          addLinkAttributes(link, url, newWindow = false) {
            addLinkAttributes(link, {
              url,
              target: newWindow ? LinkTarget.BLANK : this.externalLinkTarget,
              rel: this.externalLinkRel,
              enabled: this.externalLinkEnabled
            });
          }

          getDestinationHash(dest) {
            if (typeof dest === "string") {
              if (dest.length > 0) {
                return this.getAnchorUrl("#" + escape(dest));
              }
            } else if (Array.isArray(dest)) {
              const str = JSON.stringify(dest);

              if (str.length > 0) {
                return this.getAnchorUrl("#" + escape(str));
              }
            }

            return this.getAnchorUrl("");
          }

          getAnchorUrl(anchor) {
            return (this.baseUrl || "") + anchor;
          }

          setHash(hash) {
            if (!this.pdfDocument) {
              return;
            }

            let pageNumber, dest;

            if (hash.includes("=")) {
              const params = (0, _ui_utils.parseQueryString)(hash);

              if (params.has("search")) {
                this.eventBus.dispatch("findfromurlhash", {
                  source: this,
                  query: params.get("search").replace(/"/g, ""),
                  phraseSearch: params.get("phrase") === "true"
                });
              }

              if (params.has("page")) {
                pageNumber = params.get("page") | 0 || 1;
              }

              if (params.has("zoom")) {
                const zoomArgs = params.get("zoom").split(",");
                const zoomArg = zoomArgs[0];
                const zoomArgNumber = parseFloat(zoomArg);

                if (!zoomArg.includes("Fit")) {
                  dest = [null, {
                    name: "XYZ"
                  }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null, zoomArgs.length > 2 ? zoomArgs[2] | 0 : null, zoomArgNumber ? zoomArgNumber / 100 : zoomArg];
                } else {
                  if (zoomArg === "Fit" || zoomArg === "FitB") {
                    dest = [null, {
                      name: zoomArg
                    }];
                  } else if (zoomArg === "FitH" || zoomArg === "FitBH" || zoomArg === "FitV" || zoomArg === "FitBV") {
                    dest = [null, {
                      name: zoomArg
                    }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null];
                  } else if (zoomArg === "FitR") {
                    if (zoomArgs.length !== 5) {
                      console.error('PDFLinkService.setHash: Not enough parameters for "FitR".');
                    } else {
                      dest = [null, {
                        name: zoomArg
                      }, zoomArgs[1] | 0, zoomArgs[2] | 0, zoomArgs[3] | 0, zoomArgs[4] | 0];
                    }
                  } else {
                    console.error(`PDFLinkService.setHash: "${zoomArg}" is not a valid zoom value.`);
                  }
                }
              }

              if (dest) {
                this.pdfViewer.scrollPageIntoView({
                  pageNumber: pageNumber || this.page,
                  destArray: dest,
                  allowNegativeOffset: true
                });
              } else if (pageNumber) {
                this.page = pageNumber;
              }

              if (params.has("pagemode")) {
                this.eventBus.dispatch("pagemode", {
                  source: this,
                  mode: params.get("pagemode")
                });
              }

              if (params.has("nameddest")) {
                this.goToDestination(params.get("nameddest"));
              }
            } else {
              dest = unescape(hash);

              try {
                dest = JSON.parse(dest);

                if (!Array.isArray(dest)) {
                  dest = dest.toString();
                }
              } catch (ex) {}

              if (typeof dest === "string" || PDFLinkService.#isValidExplicitDestination(dest)) {
                this.goToDestination(dest);
                return;
              }

              console.error(`PDFLinkService.setHash: "${unescape(hash)}" is not a valid destination.`);
            }
          }

          executeNamedAction(action) {
            switch (action) {
              case "GoBack":
                this.pdfHistory?.back();
                break;

              case "GoForward":
                this.pdfHistory?.forward();
                break;

              case "NextPage":
                this.pdfViewer.nextPage();
                break;

              case "PrevPage":
                this.pdfViewer.previousPage();
                break;

              case "LastPage":
                this.page = this.pagesCount;
                break;

              case "FirstPage":
                this.page = 1;
                break;

              default:
                break;
            }

            this.eventBus.dispatch("namedaction", {
              source: this,
              action
            });
          }

          cachePageRef(pageNum, pageRef) {
            if (!pageRef) {
              return;
            }

            const refStr = pageRef.gen === 0 ? `${pageRef.num}R` : `${pageRef.num}R${pageRef.gen}`;
            this.#pagesRefCache.set(refStr, pageNum);
          }

          _cachedPageNumber(pageRef) {
            if (!pageRef) {
              return null;
            }

            const refStr = pageRef.gen === 0 ? `${pageRef.num}R` : `${pageRef.num}R${pageRef.gen}`;
            return this.#pagesRefCache.get(refStr) || null;
          }

          isPageVisible(pageNumber) {
            return this.pdfViewer.isPageVisible(pageNumber);
          }

          isPageCached(pageNumber) {
            return this.pdfViewer.isPageCached(pageNumber);
          }

          static #isValidExplicitDestination(dest) {
            if (!Array.isArray(dest)) {
              return false;
            }

            const destLength = dest.length;

            if (destLength < 2) {
              return false;
            }

            const page = dest[0];

            if (!(typeof page === "object" && Number.isInteger(page.num) && Number.isInteger(page.gen)) && !(Number.isInteger(page) && page >= 0)) {
              return false;
            }

            const zoom = dest[1];

            if (!(typeof zoom === "object" && typeof zoom.name === "string")) {
              return false;
            }

            let allowNull = true;

            switch (zoom.name) {
              case "XYZ":
                if (destLength !== 5) {
                  return false;
                }

                break;

              case "Fit":
              case "FitB":
                return destLength === 2;

              case "FitH":
              case "FitBH":
              case "FitV":
              case "FitBV":
                if (destLength !== 3) {
                  return false;
                }

                break;

              case "FitR":
                if (destLength !== 6) {
                  return false;
                }

                allowNull = false;
                break;

              default:
                return false;
            }

            for (let i = 2; i < destLength; i++) {
              const param = dest[i];

              if (!(typeof param === "number" || allowNull && param === null)) {
                return false;
              }
            }

            return true;
          }

        }

        exports.PDFLinkService = PDFLinkService;

        class SimpleLinkService {
          constructor() {
            this.externalLinkEnabled = true;
          }

          get pagesCount() {
            return 0;
          }

          get page() {
            return 0;
          }

          set page(value) {}

          get rotation() {
            return 0;
          }

          set rotation(value) {}

          goToDestination(dest) {
            return _asyncToGenerator(function* () {})();
          }

          goToPage(val) {}

          addLinkAttributes(link, url, newWindow = false) {
            addLinkAttributes(link, {
              url,
              enabled: this.externalLinkEnabled
            });
          }

          getDestinationHash(dest) {
            return "#";
          }

          getAnchorUrl(hash) {
            return "#";
          }

          setHash(hash) {}

          executeNamedAction(action) {}

          cachePageRef(pageNum, pageRef) {}

          isPageVisible(pageNumber) {
            return true;
          }

          isPageCached(pageNumber) {
            return true;
          }

        }

        exports.SimpleLinkService = SimpleLinkService;
        /***/
      },
      /* 6 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.animationStarted = exports.VERTICAL_PADDING = exports.UNKNOWN_SCALE = exports.TextLayerMode = exports.SpreadMode = exports.SidebarView = exports.ScrollMode = exports.SCROLLBAR_PADDING = exports.RenderingStates = exports.RendererType = exports.ProgressBar = exports.PresentationModeState = exports.OutputScale = exports.MIN_SCALE = exports.MAX_SCALE = exports.MAX_AUTO_SCALE = exports.DEFAULT_SCALE_VALUE = exports.DEFAULT_SCALE_DELTA = exports.DEFAULT_SCALE = exports.AutoPrintRegExp = void 0;
        exports.apiPageLayoutToViewerModes = apiPageLayoutToViewerModes;
        exports.apiPageModeToSidebarView = apiPageModeToSidebarView;
        exports.approximateFraction = approximateFraction;
        exports.backtrackBeforeAllVisibleElements = backtrackBeforeAllVisibleElements;
        exports.binarySearchFirstItem = binarySearchFirstItem;
        exports.getActiveOrFocusedElement = getActiveOrFocusedElement;
        exports.getPageSizeInches = getPageSizeInches;
        exports.getVisibleElements = getVisibleElements;
        exports.isPortraitOrientation = isPortraitOrientation;
        exports.isValidRotation = isValidRotation;
        exports.isValidScrollMode = isValidScrollMode;
        exports.isValidSpreadMode = isValidSpreadMode;
        exports.noContextMenuHandler = noContextMenuHandler;
        exports.normalizeWheelEventDelta = normalizeWheelEventDelta;
        exports.normalizeWheelEventDirection = normalizeWheelEventDirection;
        exports.parseQueryString = parseQueryString;
        exports.removeNullCharacters = removeNullCharacters;
        exports.roundToDivide = roundToDivide;
        exports.scrollIntoView = scrollIntoView;
        exports.watchScroll = watchScroll;
        const DEFAULT_SCALE_VALUE = "auto";
        exports.DEFAULT_SCALE_VALUE = DEFAULT_SCALE_VALUE;
        const DEFAULT_SCALE = 1.0;
        exports.DEFAULT_SCALE = DEFAULT_SCALE;
        const DEFAULT_SCALE_DELTA = 1.1;
        exports.DEFAULT_SCALE_DELTA = DEFAULT_SCALE_DELTA;
        const MIN_SCALE = 0.1;
        exports.MIN_SCALE = MIN_SCALE;
        const MAX_SCALE = 10.0;
        exports.MAX_SCALE = MAX_SCALE;
        const UNKNOWN_SCALE = 0;
        exports.UNKNOWN_SCALE = UNKNOWN_SCALE;
        const MAX_AUTO_SCALE = 1.25;
        exports.MAX_AUTO_SCALE = MAX_AUTO_SCALE;
        const SCROLLBAR_PADDING = 40;
        exports.SCROLLBAR_PADDING = SCROLLBAR_PADDING;
        const VERTICAL_PADDING = 5;
        exports.VERTICAL_PADDING = VERTICAL_PADDING;
        const RenderingStates = {
          INITIAL: 0,
          RUNNING: 1,
          PAUSED: 2,
          FINISHED: 3
        };
        exports.RenderingStates = RenderingStates;
        const PresentationModeState = {
          UNKNOWN: 0,
          NORMAL: 1,
          CHANGING: 2,
          FULLSCREEN: 3
        };
        exports.PresentationModeState = PresentationModeState;
        const SidebarView = {
          UNKNOWN: -1,
          NONE: 0,
          THUMBS: 1,
          OUTLINE: 2,
          ATTACHMENTS: 3,
          LAYERS: 4
        };
        exports.SidebarView = SidebarView;
        const RendererType = {
          CANVAS: "canvas",
          SVG: "svg"
        };
        exports.RendererType = RendererType;
        const TextLayerMode = {
          DISABLE: 0,
          ENABLE: 1,
          ENABLE_ENHANCE: 2
        };
        exports.TextLayerMode = TextLayerMode;
        const ScrollMode = {
          UNKNOWN: -1,
          VERTICAL: 0,
          HORIZONTAL: 1,
          WRAPPED: 2,
          PAGE: 3
        };
        exports.ScrollMode = ScrollMode;
        const SpreadMode = {
          UNKNOWN: -1,
          NONE: 0,
          ODD: 1,
          EVEN: 2
        };
        exports.SpreadMode = SpreadMode;
        const AutoPrintRegExp = /\bprint\s*\(/;
        exports.AutoPrintRegExp = AutoPrintRegExp;

        class OutputScale {
          constructor() {
            const pixelRatio = window.devicePixelRatio || 1;
            this.sx = pixelRatio;
            this.sy = pixelRatio;
          }

          get scaled() {
            return this.sx !== 1 || this.sy !== 1;
          }

        }

        exports.OutputScale = OutputScale;

        function scrollIntoView(element, spot, scrollMatches = false) {
          let parent = element.offsetParent;

          if (!parent) {
            console.error("offsetParent is not set -- cannot scroll");
            return;
          }

          let offsetY = element.offsetTop + element.clientTop;
          let offsetX = element.offsetLeft + element.clientLeft;

          while (parent.clientHeight === parent.scrollHeight && parent.clientWidth === parent.scrollWidth || scrollMatches && (parent.classList.contains("markedContent") || getComputedStyle(parent).overflow === "hidden")) {
            offsetY += parent.offsetTop;
            offsetX += parent.offsetLeft;
            parent = parent.offsetParent;

            if (!parent) {
              return;
            }
          }

          if (spot) {
            if (spot.top !== undefined) {
              offsetY += spot.top;
            }

            if (spot.left !== undefined) {
              offsetX += spot.left;
              parent.scrollLeft = offsetX;
            }
          }

          parent.scrollTop = offsetY;
        }

        function watchScroll(viewAreaElement, callback) {
          const debounceScroll = function (evt) {
            if (rAF) {
              return;
            }

            rAF = window.requestAnimationFrame(function viewAreaElementScrolled() {
              rAF = null;
              const currentX = viewAreaElement.scrollLeft;
              const lastX = state.lastX;

              if (currentX !== lastX) {
                state.right = currentX > lastX;
              }

              state.lastX = currentX;
              const currentY = viewAreaElement.scrollTop;
              const lastY = state.lastY;

              if (currentY !== lastY) {
                state.down = currentY > lastY;
              }

              state.lastY = currentY;
              callback(state);
            });
          };

          const state = {
            right: true,
            down: true,
            lastX: viewAreaElement.scrollLeft,
            lastY: viewAreaElement.scrollTop,
            _eventHandler: debounceScroll
          };
          let rAF = null;
          viewAreaElement.addEventListener("scroll", debounceScroll, true);
          return state;
        }

        function parseQueryString(query) {
          const params = new Map();

          for (const [key, value] of new URLSearchParams(query)) {
            params.set(key.toLowerCase(), value);
          }

          return params;
        }

        const NullCharactersRegExp = /\x00/g;
        const InvisibleCharactersRegExp = /[\x01-\x1F]/g;

        function removeNullCharacters(str, replaceInvisible = false) {
          if (typeof str !== "string") {
            console.error(`The argument must be a string.`);
            return str;
          }

          if (replaceInvisible) {
            str = str.replace(InvisibleCharactersRegExp, " ");
          }

          return str.replace(NullCharactersRegExp, "");
        }

        function binarySearchFirstItem(items, condition, start = 0) {
          let minIndex = start;
          let maxIndex = items.length - 1;

          if (maxIndex < 0 || !condition(items[maxIndex])) {
            return items.length;
          }

          if (condition(items[minIndex])) {
            return minIndex;
          }

          while (minIndex < maxIndex) {
            const currentIndex = minIndex + maxIndex >> 1;
            const currentItem = items[currentIndex];

            if (condition(currentItem)) {
              maxIndex = currentIndex;
            } else {
              minIndex = currentIndex + 1;
            }
          }

          return minIndex;
        }

        function approximateFraction(x) {
          if (Math.floor(x) === x) {
            return [x, 1];
          }

          const xinv = 1 / x;
          const limit = 8;

          if (xinv > limit) {
            return [1, limit];
          } else if (Math.floor(xinv) === xinv) {
            return [1, xinv];
          }

          const x_ = x > 1 ? xinv : x;
          let a = 0,
              b = 1,
              c = 1,
              d = 1;

          while (true) {
            const p = a + c,
                  q = b + d;

            if (q > limit) {
              break;
            }

            if (x_ <= p / q) {
              c = p;
              d = q;
            } else {
              a = p;
              b = q;
            }
          }

          let result;

          if (x_ - a / b < c / d - x_) {
            result = x_ === x ? [a, b] : [b, a];
          } else {
            result = x_ === x ? [c, d] : [d, c];
          }

          return result;
        }

        function roundToDivide(x, div) {
          const r = x % div;
          return r === 0 ? x : Math.round(x - r + div);
        }

        function getPageSizeInches({
          view,
          userUnit,
          rotate
        }) {
          const [x1, y1, x2, y2] = view;
          const changeOrientation = rotate % 180 !== 0;
          const width = (x2 - x1) / 72 * userUnit;
          const height = (y2 - y1) / 72 * userUnit;
          return {
            width: changeOrientation ? height : width,
            height: changeOrientation ? width : height
          };
        }

        function backtrackBeforeAllVisibleElements(index, views, top) {
          if (index < 2) {
            return index;
          }

          let elt = views[index].div;
          let pageTop = elt.offsetTop + elt.clientTop;

          if (pageTop >= top) {
            elt = views[index - 1].div;
            pageTop = elt.offsetTop + elt.clientTop;
          }

          for (let i = index - 2; i >= 0; --i) {
            elt = views[i].div;

            if (elt.offsetTop + elt.clientTop + elt.clientHeight <= pageTop) {
              break;
            }

            index = i;
          }

          return index;
        }

        function getVisibleElements({
          scrollEl,
          views,
          sortByVisibility = false,
          horizontal = false,
          rtl = false
        }) {
          const top = scrollEl.scrollTop,
                bottom = top + scrollEl.clientHeight;
          const left = scrollEl.scrollLeft,
                right = left + scrollEl.clientWidth;

          function isElementBottomAfterViewTop(view) {
            const element = view.div;
            const elementBottom = element.offsetTop + element.clientTop + element.clientHeight;
            return elementBottom > top;
          }

          function isElementNextAfterViewHorizontally(view) {
            const element = view.div;
            const elementLeft = element.offsetLeft + element.clientLeft;
            const elementRight = elementLeft + element.clientWidth;
            return rtl ? elementLeft < right : elementRight > left;
          }

          const visible = [],
                ids = new Set(),
                numViews = views.length;
          let firstVisibleElementInd = binarySearchFirstItem(views, horizontal ? isElementNextAfterViewHorizontally : isElementBottomAfterViewTop);

          if (firstVisibleElementInd > 0 && firstVisibleElementInd < numViews && !horizontal) {
            firstVisibleElementInd = backtrackBeforeAllVisibleElements(firstVisibleElementInd, views, top);
          }

          let lastEdge = horizontal ? right : -1;

          for (let i = firstVisibleElementInd; i < numViews; i++) {
            const view = views[i],
                  element = view.div;
            const currentWidth = element.offsetLeft + element.clientLeft;
            const currentHeight = element.offsetTop + element.clientTop;
            const viewWidth = element.clientWidth,
                  viewHeight = element.clientHeight;
            const viewRight = currentWidth + viewWidth;
            const viewBottom = currentHeight + viewHeight;

            if (lastEdge === -1) {
              if (viewBottom >= bottom) {
                lastEdge = viewBottom;
              }
            } else if ((horizontal ? currentWidth : currentHeight) > lastEdge) {
              break;
            }

            if (viewBottom <= top || currentHeight >= bottom || viewRight <= left || currentWidth >= right) {
              continue;
            }

            const hiddenHeight = Math.max(0, top - currentHeight) + Math.max(0, viewBottom - bottom);
            const hiddenWidth = Math.max(0, left - currentWidth) + Math.max(0, viewRight - right);
            const fractionHeight = (viewHeight - hiddenHeight) / viewHeight,
                  fractionWidth = (viewWidth - hiddenWidth) / viewWidth;
            const percent = fractionHeight * fractionWidth * 100 | 0;
            visible.push({
              id: view.id,
              x: currentWidth,
              y: currentHeight,
              view,
              percent,
              widthPercent: fractionWidth * 100 | 0
            });
            ids.add(view.id);
          }

          const first = visible[0],
                last = visible[visible.length - 1];

          if (sortByVisibility) {
            visible.sort(function (a, b) {
              const pc = a.percent - b.percent;

              if (Math.abs(pc) > 0.001) {
                return -pc;
              }

              return a.id - b.id;
            });
          }

          return {
            first,
            last,
            views: visible,
            ids
          };
        }

        function noContextMenuHandler(evt) {
          evt.preventDefault();
        }

        function normalizeWheelEventDirection(evt) {
          let delta = Math.hypot(evt.deltaX, evt.deltaY);
          const angle = Math.atan2(evt.deltaY, evt.deltaX);

          if (-0.25 * Math.PI < angle && angle < 0.75 * Math.PI) {
            delta = -delta;
          }

          return delta;
        }

        function normalizeWheelEventDelta(evt) {
          let delta = normalizeWheelEventDirection(evt);
          const MOUSE_DOM_DELTA_PIXEL_MODE = 0;
          const MOUSE_DOM_DELTA_LINE_MODE = 1;
          const MOUSE_PIXELS_PER_LINE = 30;
          const MOUSE_LINES_PER_PAGE = 30;

          if (evt.deltaMode === MOUSE_DOM_DELTA_PIXEL_MODE) {
            delta /= MOUSE_PIXELS_PER_LINE * MOUSE_LINES_PER_PAGE;
          } else if (evt.deltaMode === MOUSE_DOM_DELTA_LINE_MODE) {
            delta /= MOUSE_LINES_PER_PAGE;
          }

          return delta;
        }

        function isValidRotation(angle) {
          return Number.isInteger(angle) && angle % 90 === 0;
        }

        function isValidScrollMode(mode) {
          return Number.isInteger(mode) && Object.values(ScrollMode).includes(mode) && mode !== ScrollMode.UNKNOWN;
        }

        function isValidSpreadMode(mode) {
          return Number.isInteger(mode) && Object.values(SpreadMode).includes(mode) && mode !== SpreadMode.UNKNOWN;
        }

        function isPortraitOrientation(size) {
          return size.width <= size.height;
        }

        const animationStarted = new Promise(function (resolve) {
          window.requestAnimationFrame(resolve);
        });
        exports.animationStarted = animationStarted;

        function clamp(v, min, max) {
          return Math.min(Math.max(v, min), max);
        }

        class ProgressBar {
          constructor(id) {
            if (arguments.length > 1) {
              throw new Error("ProgressBar no longer accepts any additional options, " + "please use CSS rules to modify its appearance instead.");
            }

            this.visible = true;
            this.div = document.querySelector(id + " .progress");
            this.bar = this.div.parentNode;
            this.percent = 0;
          }

          #updateBar() {
            if (this._indeterminate) {
              this.div.classList.add("indeterminate");
              return;
            }

            this.div.classList.remove("indeterminate");
            const doc = document.documentElement;
            doc.style.setProperty("--progressBar-percent", `${this._percent}%`);
          }

          get percent() {
            return this._percent;
          }

          set percent(val) {
            this._indeterminate = isNaN(val);
            this._percent = clamp(val, 0, 100);
            this.#updateBar();
          }

          setWidth(viewer) {
            if (!viewer) {
              return;
            }

            const container = viewer.parentNode;
            const scrollbarWidth = container.offsetWidth - viewer.offsetWidth;

            if (scrollbarWidth > 0) {
              const doc = document.documentElement;
              doc.style.setProperty("--progressBar-end-offset", `${scrollbarWidth}px`);
            }
          }

          hide() {
            if (!this.visible) {
              return;
            }

            this.visible = false;
            this.bar.classList.add("hidden");
          }

          show() {
            if (this.visible) {
              return;
            }

            this.visible = true;
            this.bar.classList.remove("hidden");
          }

        }

        exports.ProgressBar = ProgressBar;

        function getActiveOrFocusedElement() {
          let curRoot = document;
          let curActiveOrFocused = curRoot.activeElement || curRoot.querySelector(":focus");

          while (curActiveOrFocused?.shadowRoot) {
            curRoot = curActiveOrFocused.shadowRoot;
            curActiveOrFocused = curRoot.activeElement || curRoot.querySelector(":focus");
          }

          return curActiveOrFocused;
        }

        function apiPageLayoutToViewerModes(layout) {
          let scrollMode = ScrollMode.VERTICAL,
              spreadMode = SpreadMode.NONE;

          switch (layout) {
            case "SinglePage":
              scrollMode = ScrollMode.PAGE;
              break;

            case "OneColumn":
              break;

            case "TwoPageLeft":
              scrollMode = ScrollMode.PAGE;

            case "TwoColumnLeft":
              spreadMode = SpreadMode.ODD;
              break;

            case "TwoPageRight":
              scrollMode = ScrollMode.PAGE;

            case "TwoColumnRight":
              spreadMode = SpreadMode.EVEN;
              break;
          }

          return {
            scrollMode,
            spreadMode
          };
        }

        function apiPageModeToSidebarView(mode) {
          switch (mode) {
            case "UseNone":
              return SidebarView.NONE;

            case "UseThumbs":
              return SidebarView.THUMBS;

            case "UseOutlines":
              return SidebarView.OUTLINE;

            case "UseAttachments":
              return SidebarView.ATTACHMENTS;

            case "UseOC":
              return SidebarView.LAYERS;
          }

          return SidebarView.NONE;
        }
        /***/

      },
      /* 7 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.StructTreeLayerBuilder = void 0;
        const PDF_ROLE_TO_HTML_ROLE = {
          Document: null,
          DocumentFragment: null,
          Part: "group",
          Sect: "group",
          Div: "group",
          Aside: "note",
          NonStruct: "none",
          P: null,
          H: "heading",
          Title: null,
          FENote: "note",
          Sub: "group",
          Lbl: null,
          Span: null,
          Em: null,
          Strong: null,
          Link: "link",
          Annot: "note",
          Form: "form",
          Ruby: null,
          RB: null,
          RT: null,
          RP: null,
          Warichu: null,
          WT: null,
          WP: null,
          L: "list",
          LI: "listitem",
          LBody: null,
          Table: "table",
          TR: "row",
          TH: "columnheader",
          TD: "cell",
          THead: "columnheader",
          TBody: null,
          TFoot: null,
          Caption: null,
          Figure: "figure",
          Formula: null,
          Artifact: null
        };
        const HEADING_PATTERN = /^H(\d+)$/;

        class StructTreeLayerBuilder {
          constructor({
            pdfPage
          }) {
            this.pdfPage = pdfPage;
          }

          render(structTree) {
            return this._walk(structTree);
          }

          _setAttributes(structElement, htmlElement) {
            if (structElement.alt !== undefined) {
              htmlElement.setAttribute("aria-label", structElement.alt);
            }

            if (structElement.id !== undefined) {
              htmlElement.setAttribute("aria-owns", structElement.id);
            }

            if (structElement.lang !== undefined) {
              htmlElement.setAttribute("lang", structElement.lang);
            }
          }

          _walk(node) {
            if (!node) {
              return null;
            }

            const element = document.createElement("span");

            if ("role" in node) {
              const {
                role
              } = node;
              const match = role.match(HEADING_PATTERN);

              if (match) {
                element.setAttribute("role", "heading");
                element.setAttribute("aria-level", match[1]);
              } else if (PDF_ROLE_TO_HTML_ROLE[role]) {
                element.setAttribute("role", PDF_ROLE_TO_HTML_ROLE[role]);
              }
            }

            this._setAttributes(node, element);

            if (node.children) {
              if (node.children.length === 1 && "id" in node.children[0]) {
                this._setAttributes(node.children[0], element);
              } else {
                for (const kid of node.children) {
                  element.appendChild(this._walk(kid));
                }
              }
            }

            return element;
          }

        }

        exports.StructTreeLayerBuilder = StructTreeLayerBuilder;
        /***/
      },
      /* 8 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TextLayerBuilder = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        const EXPAND_DIVS_TIMEOUT = 300;

        class TextLayerBuilder {
          constructor({
            textLayerDiv,
            eventBus,
            pageIndex,
            viewport,
            highlighter = null,
            enhanceTextSelection = false
          }) {
            this.textLayerDiv = textLayerDiv;
            this.eventBus = eventBus;
            this.textContent = null;
            this.textContentItemsStr = [];
            this.textContentStream = null;
            this.renderingDone = false;
            this.pageNumber = pageIndex + 1;
            this.viewport = viewport;
            this.textDivs = [];
            this.textLayerRenderTask = null;
            this.highlighter = highlighter;
            this.enhanceTextSelection = enhanceTextSelection;

            this._bindMouse();
          }

          _finishRendering() {
            this.renderingDone = true;

            if (!this.enhanceTextSelection) {
              const endOfContent = document.createElement("div");
              endOfContent.className = "endOfContent";
              this.textLayerDiv.appendChild(endOfContent);
            }

            this.eventBus.dispatch("textlayerrendered", {
              source: this,
              pageNumber: this.pageNumber,
              numTextDivs: this.textDivs.length
            });
          }

          render(timeout = 0) {
            if (!(this.textContent || this.textContentStream) || this.renderingDone) {
              return;
            }

            this.cancel();
            this.textDivs.length = 0;
            this.highlighter?.setTextMapping(this.textDivs, this.textContentItemsStr);
            const textLayerFrag = document.createDocumentFragment();
            this.textLayerRenderTask = (0, _pdfjsLib.renderTextLayer)({
              textContent: this.textContent,
              textContentStream: this.textContentStream,
              container: textLayerFrag,
              viewport: this.viewport,
              textDivs: this.textDivs,
              textContentItemsStr: this.textContentItemsStr,
              timeout,
              enhanceTextSelection: this.enhanceTextSelection
            });
            this.textLayerRenderTask.promise.then(() => {
              this.textLayerDiv.appendChild(textLayerFrag);

              this._finishRendering();

              this.highlighter?.enable();
            }, function (reason) {});
          }

          cancel() {
            if (this.textLayerRenderTask) {
              this.textLayerRenderTask.cancel();
              this.textLayerRenderTask = null;
            }

            this.highlighter?.disable();
          }

          setTextContentStream(readableStream) {
            this.cancel();
            this.textContentStream = readableStream;
          }

          setTextContent(textContent) {
            this.cancel();
            this.textContent = textContent;
          }

          _bindMouse() {
            const div = this.textLayerDiv;
            let expandDivsTimer = null;
            div.addEventListener("mousedown", evt => {
              if (this.enhanceTextSelection && this.textLayerRenderTask) {
                this.textLayerRenderTask.expandTextDivs(true);

                if (expandDivsTimer) {
                  clearTimeout(expandDivsTimer);
                  expandDivsTimer = null;
                }

                return;
              }

              const end = div.querySelector(".endOfContent");

              if (!end) {
                return;
              }

              let adjustTop = evt.target !== div;
              adjustTop = adjustTop && window.getComputedStyle(end).getPropertyValue("-moz-user-select") !== "none";

              if (adjustTop) {
                const divBounds = div.getBoundingClientRect();
                const r = Math.max(0, (evt.pageY - divBounds.top) / divBounds.height);
                end.style.top = (r * 100).toFixed(2) + "%";
              }

              end.classList.add("active");
            });
            div.addEventListener("mouseup", () => {
              if (this.enhanceTextSelection && this.textLayerRenderTask) {
                expandDivsTimer = setTimeout(() => {
                  if (this.textLayerRenderTask) {
                    this.textLayerRenderTask.expandTextDivs(false);
                  }

                  expandDivsTimer = null;
                }, EXPAND_DIVS_TIMEOUT);
                return;
              }

              const end = div.querySelector(".endOfContent");

              if (!end) {
                return;
              }

              end.style.top = "";
              end.classList.remove("active");
            });
          }

        }

        exports.TextLayerBuilder = TextLayerBuilder;
        /***/
      },
      /* 9 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaLayerBuilder = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        class XfaLayerBuilder {
          constructor({
            pageDiv,
            pdfPage,
            annotationStorage = null,
            linkService,
            xfaHtml = null
          }) {
            this.pageDiv = pageDiv;
            this.pdfPage = pdfPage;
            this.annotationStorage = annotationStorage;
            this.linkService = linkService;
            this.xfaHtml = xfaHtml;
            this.div = null;
            this._cancelled = false;
          }

          render(viewport, intent = "display") {
            if (intent === "print") {
              const parameters = {
                viewport: viewport.clone({
                  dontFlip: true
                }),
                div: this.div,
                xfaHtml: this.xfaHtml,
                annotationStorage: this.annotationStorage,
                linkService: this.linkService,
                intent
              };
              const div = document.createElement("div");
              this.pageDiv.appendChild(div);
              parameters.div = div;

              const result = _pdfjsLib.XfaLayer.render(parameters);

              return Promise.resolve(result);
            }

            return this.pdfPage.getXfa().then(xfaHtml => {
              if (this._cancelled || !xfaHtml) {
                return {
                  textDivs: []
                };
              }

              const parameters = {
                viewport: viewport.clone({
                  dontFlip: true
                }),
                div: this.div,
                xfaHtml,
                annotationStorage: this.annotationStorage,
                linkService: this.linkService,
                intent
              };

              if (this.div) {
                return _pdfjsLib.XfaLayer.update(parameters);
              }

              this.div = document.createElement("div");
              this.pageDiv.appendChild(this.div);
              parameters.div = this.div;
              return _pdfjsLib.XfaLayer.render(parameters);
            }).catch(error => {
              console.error(error);
            });
          }

          cancel() {
            this._cancelled = true;
          }

          hide() {
            if (!this.div) {
              return;
            }

            this.div.hidden = true;
          }

        }

        exports.XfaLayerBuilder = XfaLayerBuilder;
        /***/
      },
      /* 10 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFViewer = exports.PDFSinglePageViewer = void 0;

        var _ui_utils = __w_pdfjs_require__(6);

        var _base_viewer = __w_pdfjs_require__(11);

        class PDFViewer extends _base_viewer.BaseViewer {}

        exports.PDFViewer = PDFViewer;

        class PDFSinglePageViewer extends _base_viewer.BaseViewer {
          _resetView() {
            super._resetView();

            this._scrollMode = _ui_utils.ScrollMode.PAGE;
            this._spreadMode = _ui_utils.SpreadMode.NONE;
          }

          set scrollMode(mode) {}

          _updateScrollMode() {}

          set spreadMode(mode) {}

          _updateSpreadMode() {}

        }

        exports.PDFSinglePageViewer = PDFSinglePageViewer;
        /***/
      },
      /* 11 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PagesCountLimit = exports.PDFPageViewBuffer = exports.BaseViewer = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        var _ui_utils = __w_pdfjs_require__(6);

        var _annotation_layer_builder = __w_pdfjs_require__(2);

        var _l10n_utils = __w_pdfjs_require__(4);

        var _pdf_page_view = __w_pdfjs_require__(12);

        var _pdf_rendering_queue = __w_pdfjs_require__(14);

        var _pdf_link_service = __w_pdfjs_require__(5);

        var _struct_tree_layer_builder = __w_pdfjs_require__(7);

        var _text_highlighter = __w_pdfjs_require__(15);

        var _text_layer_builder = __w_pdfjs_require__(8);

        var _xfa_layer_builder = __w_pdfjs_require__(9);

        const DEFAULT_CACHE_SIZE = 10;
        const ENABLE_PERMISSIONS_CLASS = "enablePermissions";
        const PagesCountLimit = {
          FORCE_SCROLL_MODE_PAGE: 15000,
          FORCE_LAZY_PAGE_INIT: 7500,
          PAUSE_EAGER_PAGE_INIT: 250
        };
        exports.PagesCountLimit = PagesCountLimit;

        class PDFPageViewBuffer {
          #buf = new Set();
          #size = 0;

          constructor(size) {
            this.#size = size;
          }

          push(view) {
            const buf = this.#buf;

            if (buf.has(view)) {
              buf.delete(view);
            }

            buf.add(view);

            if (buf.size > this.#size) {
              this.#destroyFirstView();
            }
          }

          resize(newSize, idsToKeep = null) {
            this.#size = newSize;
            const buf = this.#buf;

            if (idsToKeep) {
              const ii = buf.size;
              let i = 1;

              for (const view of buf) {
                if (idsToKeep.has(view.id)) {
                  buf.delete(view);
                  buf.add(view);
                }

                if (++i > ii) {
                  break;
                }
              }
            }

            while (buf.size > this.#size) {
              this.#destroyFirstView();
            }
          }

          has(view) {
            return this.#buf.has(view);
          }

          [Symbol.iterator]() {
            return this.#buf.keys();
          }

          #destroyFirstView() {
            const firstView = this.#buf.keys().next().value;
            firstView?.destroy();
            this.#buf.delete(firstView);
          }

        }

        exports.PDFPageViewBuffer = PDFPageViewBuffer;

        class BaseViewer {
          #buffer = null;
          #annotationMode = _pdfjsLib.AnnotationMode.ENABLE_FORMS;
          #previousAnnotationMode = null;
          #enablePermissions = false;
          #previousContainerHeight = 0;
          #scrollModePageState = null;
          #onVisibilityChange = null;

          constructor(options) {
            if (this.constructor === BaseViewer) {
              throw new Error("Cannot initialize BaseViewer.");
            }

            const viewerVersion = '2.14.305';

            if (_pdfjsLib.version !== viewerVersion) {
              throw new Error(`The API version "${_pdfjsLib.version}" does not match the Viewer version "${viewerVersion}".`);
            }

            this.container = options.container;
            this.viewer = options.viewer || options.container.firstElementChild;

            if (!(this.container?.tagName.toUpperCase() === "DIV" && this.viewer?.tagName.toUpperCase() === "DIV")) {
              throw new Error("Invalid `container` and/or `viewer` option.");
            }

            if (this.container.offsetParent && getComputedStyle(this.container).position !== "absolute") {
              throw new Error("The `container` must be absolutely positioned.");
            }

            this.eventBus = options.eventBus;
            this.linkService = options.linkService || new _pdf_link_service.SimpleLinkService();
            this.downloadManager = options.downloadManager || null;
            this.findController = options.findController || null;
            this._scriptingManager = options.scriptingManager || null;
            this.removePageBorders = options.removePageBorders || false;
            this.textLayerMode = options.textLayerMode ?? _ui_utils.TextLayerMode.ENABLE;
            this.#annotationMode = options.annotationMode ?? _pdfjsLib.AnnotationMode.ENABLE_FORMS;
            this.imageResourcesPath = options.imageResourcesPath || "";
            this.enablePrintAutoRotate = options.enablePrintAutoRotate || false;
            this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;
            this.useOnlyCssZoom = options.useOnlyCssZoom || false;
            this.maxCanvasPixels = options.maxCanvasPixels;
            this.l10n = options.l10n || _l10n_utils.NullL10n;
            this.#enablePermissions = options.enablePermissions || false;
            this.pageColors = options.pageColors || null;

            if (options.pageColors && (!CSS.supports("color", options.pageColors.background) || !CSS.supports("color", options.pageColors.foreground))) {
              if (options.pageColors.background || options.pageColors.foreground) {
                console.warn("Ignoring `pageColors`-option, since the browser doesn't support the values used.");
              }

              this.pageColors = null;
            }

            this.defaultRenderingQueue = !options.renderingQueue;

            if (this.defaultRenderingQueue) {
              this.renderingQueue = new _pdf_rendering_queue.PDFRenderingQueue();
              this.renderingQueue.setViewer(this);
            } else {
              this.renderingQueue = options.renderingQueue;
            }

            this._doc = document.documentElement;
            this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdate.bind(this));
            this.presentationModeState = _ui_utils.PresentationModeState.UNKNOWN;
            this._onBeforeDraw = this._onAfterDraw = null;

            this._resetView();

            if (this.removePageBorders) {
              this.viewer.classList.add("removePageBorders");
            }

            this.updateContainerHeightCss();
            Promise.resolve().then(() => {
              this.eventBus.dispatch("baseviewerinit", {
                source: this
              });
            });
          }

          get pagesCount() {
            return this._pages.length;
          }

          getPageView(index) {
            return this._pages[index];
          }

          get pageViewsReady() {
            if (!this._pagesCapability.settled) {
              return false;
            }

            return this._pages.every(function (pageView) {
              return pageView?.pdfPage;
            });
          }

          get renderForms() {
            return this.#annotationMode === _pdfjsLib.AnnotationMode.ENABLE_FORMS;
          }

          get enableScripting() {
            return !!this._scriptingManager;
          }

          get currentPageNumber() {
            return this._currentPageNumber;
          }

          set currentPageNumber(val) {
            if (!Number.isInteger(val)) {
              throw new Error("Invalid page number.");
            }

            if (!this.pdfDocument) {
              return;
            }

            if (!this._setCurrentPageNumber(val, true)) {
              console.error(`currentPageNumber: "${val}" is not a valid page.`);
            }
          }

          _setCurrentPageNumber(val, resetCurrentPageView = false) {
            if (this._currentPageNumber === val) {
              if (resetCurrentPageView) {
                this.#resetCurrentPageView();
              }

              return true;
            }

            if (!(0 < val && val <= this.pagesCount)) {
              return false;
            }

            const previous = this._currentPageNumber;
            this._currentPageNumber = val;
            this.eventBus.dispatch("pagechanging", {
              source: this,
              pageNumber: val,
              pageLabel: this._pageLabels?.[val - 1] ?? null,
              previous
            });

            if (resetCurrentPageView) {
              this.#resetCurrentPageView();
            }

            return true;
          }

          get currentPageLabel() {
            return this._pageLabels?.[this._currentPageNumber - 1] ?? null;
          }

          set currentPageLabel(val) {
            if (!this.pdfDocument) {
              return;
            }

            let page = val | 0;

            if (this._pageLabels) {
              const i = this._pageLabels.indexOf(val);

              if (i >= 0) {
                page = i + 1;
              }
            }

            if (!this._setCurrentPageNumber(page, true)) {
              console.error(`currentPageLabel: "${val}" is not a valid page.`);
            }
          }

          get currentScale() {
            return this._currentScale !== _ui_utils.UNKNOWN_SCALE ? this._currentScale : _ui_utils.DEFAULT_SCALE;
          }

          set currentScale(val) {
            if (isNaN(val)) {
              throw new Error("Invalid numeric scale.");
            }

            if (!this.pdfDocument) {
              return;
            }

            this._setScale(val, false);
          }

          get currentScaleValue() {
            return this._currentScaleValue;
          }

          set currentScaleValue(val) {
            if (!this.pdfDocument) {
              return;
            }

            this._setScale(val, false);
          }

          get pagesRotation() {
            return this._pagesRotation;
          }

          set pagesRotation(rotation) {
            if (!(0, _ui_utils.isValidRotation)(rotation)) {
              throw new Error("Invalid pages rotation angle.");
            }

            if (!this.pdfDocument) {
              return;
            }

            rotation %= 360;

            if (rotation < 0) {
              rotation += 360;
            }

            if (this._pagesRotation === rotation) {
              return;
            }

            this._pagesRotation = rotation;
            const pageNumber = this._currentPageNumber;
            const updateArgs = {
              rotation
            };

            for (const pageView of this._pages) {
              pageView.update(updateArgs);
            }

            if (this._currentScaleValue) {
              this._setScale(this._currentScaleValue, true);
            }

            this.eventBus.dispatch("rotationchanging", {
              source: this,
              pagesRotation: rotation,
              pageNumber
            });

            if (this.defaultRenderingQueue) {
              this.update();
            }
          }

          get firstPagePromise() {
            return this.pdfDocument ? this._firstPageCapability.promise : null;
          }

          get onePageRendered() {
            return this.pdfDocument ? this._onePageRenderedCapability.promise : null;
          }

          get pagesPromise() {
            return this.pdfDocument ? this._pagesCapability.promise : null;
          }

          #initializePermissions(permissions) {
            if (!permissions) {
              return;
            }

            if (!permissions.includes(_pdfjsLib.PermissionFlag.COPY)) {
              this.viewer.classList.add(ENABLE_PERMISSIONS_CLASS);
            }

            if (!permissions.includes(_pdfjsLib.PermissionFlag.MODIFY_ANNOTATIONS) && !permissions.includes(_pdfjsLib.PermissionFlag.FILL_INTERACTIVE_FORMS)) {
              if (this.#annotationMode === _pdfjsLib.AnnotationMode.ENABLE_FORMS) {
                this.#previousAnnotationMode = this.#annotationMode;
                this.#annotationMode = _pdfjsLib.AnnotationMode.ENABLE;
              }
            }
          }

          #onePageRenderedOrForceFetch() {
            if (document.visibilityState === "hidden" || !this.container.offsetParent || this._getVisiblePages().views.length === 0) {
              return Promise.resolve();
            }

            const visibilityChangePromise = new Promise(resolve => {
              this.#onVisibilityChange = () => {
                if (document.visibilityState !== "hidden") {
                  return;
                }

                resolve();
                document.removeEventListener("visibilitychange", this.#onVisibilityChange);
                this.#onVisibilityChange = null;
              };

              document.addEventListener("visibilitychange", this.#onVisibilityChange);
            });
            return Promise.race([this._onePageRenderedCapability.promise, visibilityChangePromise]);
          }

          setDocument(pdfDocument) {
            var _this3 = this;

            if (this.pdfDocument) {
              this.eventBus.dispatch("pagesdestroy", {
                source: this
              });

              this._cancelRendering();

              this._resetView();

              if (this.findController) {
                this.findController.setDocument(null);
              }

              if (this._scriptingManager) {
                this._scriptingManager.setDocument(null);
              }
            }

            this.pdfDocument = pdfDocument;

            if (!pdfDocument) {
              return;
            }

            const isPureXfa = pdfDocument.isPureXfa;
            const pagesCount = pdfDocument.numPages;
            const firstPagePromise = pdfDocument.getPage(1);
            const optionalContentConfigPromise = pdfDocument.getOptionalContentConfig();
            const permissionsPromise = this.#enablePermissions ? pdfDocument.getPermissions() : Promise.resolve();

            if (pagesCount > PagesCountLimit.FORCE_SCROLL_MODE_PAGE) {
              console.warn("Forcing PAGE-scrolling for performance reasons, given the length of the document.");
              const mode = this._scrollMode = _ui_utils.ScrollMode.PAGE;
              this.eventBus.dispatch("scrollmodechanged", {
                source: this,
                mode
              });
            }

            this._pagesCapability.promise.then(() => {
              this.eventBus.dispatch("pagesloaded", {
                source: this,
                pagesCount
              });
            }, () => {});

            this._onBeforeDraw = evt => {
              const pageView = this._pages[evt.pageNumber - 1];

              if (!pageView) {
                return;
              }

              this.#buffer.push(pageView);
            };

            this.eventBus._on("pagerender", this._onBeforeDraw);

            this._onAfterDraw = evt => {
              if (evt.cssTransform || this._onePageRenderedCapability.settled) {
                return;
              }

              this._onePageRenderedCapability.resolve({
                timestamp: evt.timestamp
              });

              this.eventBus._off("pagerendered", this._onAfterDraw);

              this._onAfterDraw = null;

              if (this.#onVisibilityChange) {
                document.removeEventListener("visibilitychange", this.#onVisibilityChange);
                this.#onVisibilityChange = null;
              }
            };

            this.eventBus._on("pagerendered", this._onAfterDraw);

            Promise.all([firstPagePromise, permissionsPromise]).then(([firstPdfPage, permissions]) => {
              if (pdfDocument !== this.pdfDocument) {
                return;
              }

              this._firstPageCapability.resolve(firstPdfPage);

              this._optionalContentConfigPromise = optionalContentConfigPromise;
              this.#initializePermissions(permissions);
              const viewerElement = this._scrollMode === _ui_utils.ScrollMode.PAGE ? null : this.viewer;
              const scale = this.currentScale;
              const viewport = firstPdfPage.getViewport({
                scale: scale * _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS
              });
              const textLayerFactory = this.textLayerMode !== _ui_utils.TextLayerMode.DISABLE && !isPureXfa ? this : null;
              const annotationLayerFactory = this.#annotationMode !== _pdfjsLib.AnnotationMode.DISABLE ? this : null;
              const xfaLayerFactory = isPureXfa ? this : null;

              for (let pageNum = 1; pageNum <= pagesCount; ++pageNum) {
                const pageView = new _pdf_page_view.PDFPageView({
                  container: viewerElement,
                  eventBus: this.eventBus,
                  id: pageNum,
                  scale,
                  defaultViewport: viewport.clone(),
                  optionalContentConfigPromise,
                  renderingQueue: this.renderingQueue,
                  textLayerFactory,
                  textLayerMode: this.textLayerMode,
                  annotationLayerFactory,
                  annotationMode: this.#annotationMode,
                  xfaLayerFactory,
                  textHighlighterFactory: this,
                  structTreeLayerFactory: this,
                  imageResourcesPath: this.imageResourcesPath,
                  renderer: this.renderer,
                  useOnlyCssZoom: this.useOnlyCssZoom,
                  maxCanvasPixels: this.maxCanvasPixels,
                  pageColors: this.pageColors,
                  l10n: this.l10n
                });

                this._pages.push(pageView);
              }

              const firstPageView = this._pages[0];

              if (firstPageView) {
                firstPageView.setPdfPage(firstPdfPage);
                this.linkService.cachePageRef(1, firstPdfPage.ref);
              }

              if (this._scrollMode === _ui_utils.ScrollMode.PAGE) {
                this.#ensurePageViewVisible();
              } else if (this._spreadMode !== _ui_utils.SpreadMode.NONE) {
                this._updateSpreadMode();
              }

              this.#onePageRenderedOrForceFetch().then( /*#__PURE__*/_asyncToGenerator(function* () {
                if (_this3.findController) {
                  _this3.findController.setDocument(pdfDocument);
                }

                if (_this3._scriptingManager) {
                  _this3._scriptingManager.setDocument(pdfDocument);
                }

                if (pdfDocument.loadingParams.disableAutoFetch || pagesCount > PagesCountLimit.FORCE_LAZY_PAGE_INIT) {
                  _this3._pagesCapability.resolve();

                  return;
                }

                let getPagesLeft = pagesCount - 1;

                if (getPagesLeft <= 0) {
                  _this3._pagesCapability.resolve();

                  return;
                }

                for (let pageNum = 2; pageNum <= pagesCount; ++pageNum) {
                  const promise = pdfDocument.getPage(pageNum).then(pdfPage => {
                    const pageView = _this3._pages[pageNum - 1];

                    if (!pageView.pdfPage) {
                      pageView.setPdfPage(pdfPage);
                    }

                    _this3.linkService.cachePageRef(pageNum, pdfPage.ref);

                    if (--getPagesLeft === 0) {
                      _this3._pagesCapability.resolve();
                    }
                  }, reason => {
                    console.error(`Unable to get page ${pageNum} to initialize viewer`, reason);

                    if (--getPagesLeft === 0) {
                      _this3._pagesCapability.resolve();
                    }
                  });

                  if (pageNum % PagesCountLimit.PAUSE_EAGER_PAGE_INIT === 0) {
                    yield promise;
                  }
                }
              }));
              this.eventBus.dispatch("pagesinit", {
                source: this
              });
              pdfDocument.getMetadata().then(({
                info
              }) => {
                if (pdfDocument !== this.pdfDocument) {
                  return;
                }

                if (info.Language) {
                  this.viewer.lang = info.Language;
                }
              });

              if (this.defaultRenderingQueue) {
                this.update();
              }
            }).catch(reason => {
              console.error("Unable to initialize viewer", reason);

              this._pagesCapability.reject(reason);
            });
          }

          setPageLabels(labels) {
            if (!this.pdfDocument) {
              return;
            }

            if (!labels) {
              this._pageLabels = null;
            } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {
              this._pageLabels = null;
              console.error(`setPageLabels: Invalid page labels.`);
            } else {
              this._pageLabels = labels;
            }

            for (let i = 0, ii = this._pages.length; i < ii; i++) {
              this._pages[i].setPageLabel(this._pageLabels?.[i] ?? null);
            }
          }

          _resetView() {
            this._pages = [];
            this._currentPageNumber = 1;
            this._currentScale = _ui_utils.UNKNOWN_SCALE;
            this._currentScaleValue = null;
            this._pageLabels = null;
            this.#buffer = new PDFPageViewBuffer(DEFAULT_CACHE_SIZE);
            this._location = null;
            this._pagesRotation = 0;
            this._optionalContentConfigPromise = null;
            this._firstPageCapability = (0, _pdfjsLib.createPromiseCapability)();
            this._onePageRenderedCapability = (0, _pdfjsLib.createPromiseCapability)();
            this._pagesCapability = (0, _pdfjsLib.createPromiseCapability)();
            this._scrollMode = _ui_utils.ScrollMode.VERTICAL;
            this._previousScrollMode = _ui_utils.ScrollMode.UNKNOWN;
            this._spreadMode = _ui_utils.SpreadMode.NONE;
            this.#scrollModePageState = {
              previousPageNumber: 1,
              scrollDown: true,
              pages: []
            };

            if (this._onBeforeDraw) {
              this.eventBus._off("pagerender", this._onBeforeDraw);

              this._onBeforeDraw = null;
            }

            if (this._onAfterDraw) {
              this.eventBus._off("pagerendered", this._onAfterDraw);

              this._onAfterDraw = null;
            }

            if (this.#onVisibilityChange) {
              document.removeEventListener("visibilitychange", this.#onVisibilityChange);
              this.#onVisibilityChange = null;
            }

            this.viewer.textContent = "";

            this._updateScrollMode();

            this.viewer.removeAttribute("lang");
            this.viewer.classList.remove(ENABLE_PERMISSIONS_CLASS);

            if (this.#previousAnnotationMode !== null) {
              this.#annotationMode = this.#previousAnnotationMode;
              this.#previousAnnotationMode = null;
            }
          }

          #ensurePageViewVisible() {
            if (this._scrollMode !== _ui_utils.ScrollMode.PAGE) {
              throw new Error("#ensurePageViewVisible: Invalid scrollMode value.");
            }

            const pageNumber = this._currentPageNumber,
                  state = this.#scrollModePageState,
                  viewer = this.viewer;
            viewer.textContent = "";
            state.pages.length = 0;

            if (this._spreadMode === _ui_utils.SpreadMode.NONE && !this.isInPresentationMode) {
              const pageView = this._pages[pageNumber - 1];
              viewer.appendChild(pageView.div);
              state.pages.push(pageView);
            } else {
              const pageIndexSet = new Set(),
                    parity = this._spreadMode - 1;

              if (parity === -1) {
                pageIndexSet.add(pageNumber - 1);
              } else if (pageNumber % 2 !== parity) {
                pageIndexSet.add(pageNumber - 1);
                pageIndexSet.add(pageNumber);
              } else {
                pageIndexSet.add(pageNumber - 2);
                pageIndexSet.add(pageNumber - 1);
              }

              const spread = document.createElement("div");
              spread.className = "spread";

              if (this.isInPresentationMode) {
                const dummyPage = document.createElement("div");
                dummyPage.className = "dummyPage";
                spread.appendChild(dummyPage);
              }

              for (const i of pageIndexSet) {
                const pageView = this._pages[i];

                if (!pageView) {
                  continue;
                }

                spread.appendChild(pageView.div);
                state.pages.push(pageView);
              }

              viewer.appendChild(spread);
            }

            state.scrollDown = pageNumber >= state.previousPageNumber;
            state.previousPageNumber = pageNumber;
          }

          _scrollUpdate() {
            if (this.pagesCount === 0) {
              return;
            }

            this.update();
          }

          #scrollIntoView(pageView, pageSpot = null) {
            const {
              div,
              id
            } = pageView;

            if (this._scrollMode === _ui_utils.ScrollMode.PAGE) {
              this._setCurrentPageNumber(id);

              this.#ensurePageViewVisible();
              this.update();
            }

            if (!pageSpot && !this.isInPresentationMode) {
              const left = div.offsetLeft + div.clientLeft,
                    right = left + div.clientWidth;
              const {
                scrollLeft,
                clientWidth
              } = this.container;

              if (this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL || left < scrollLeft || right > scrollLeft + clientWidth) {
                pageSpot = {
                  left: 0,
                  top: 0
                };
              }
            }

            (0, _ui_utils.scrollIntoView)(div, pageSpot);
          }

          #isSameScale(newScale) {
            return newScale === this._currentScale || Math.abs(newScale - this._currentScale) < 1e-15;
          }

          _setScaleUpdatePages(newScale, newValue, noScroll = false, preset = false) {
            this._currentScaleValue = newValue.toString();

            if (this.#isSameScale(newScale)) {
              if (preset) {
                this.eventBus.dispatch("scalechanging", {
                  source: this,
                  scale: newScale,
                  presetValue: newValue
                });
              }

              return;
            }

            this._doc.style.setProperty("--zoom-factor", newScale);

            const updateArgs = {
              scale: newScale
            };

            for (const pageView of this._pages) {
              pageView.update(updateArgs);
            }

            this._currentScale = newScale;

            if (!noScroll) {
              let page = this._currentPageNumber,
                  dest;

              if (this._location && !(this.isInPresentationMode || this.isChangingPresentationMode)) {
                page = this._location.pageNumber;
                dest = [null, {
                  name: "XYZ"
                }, this._location.left, this._location.top, null];
              }

              this.scrollPageIntoView({
                pageNumber: page,
                destArray: dest,
                allowNegativeOffset: true
              });
            }

            this.eventBus.dispatch("scalechanging", {
              source: this,
              scale: newScale,
              presetValue: preset ? newValue : undefined
            });

            if (this.defaultRenderingQueue) {
              this.update();
            }

            this.updateContainerHeightCss();
          }

          get _pageWidthScaleFactor() {
            if (this._spreadMode !== _ui_utils.SpreadMode.NONE && this._scrollMode !== _ui_utils.ScrollMode.HORIZONTAL) {
              return 2;
            }

            return 1;
          }

          _setScale(value, noScroll = false) {
            let scale = parseFloat(value);

            if (scale > 0) {
              this._setScaleUpdatePages(scale, value, noScroll, false);
            } else {
              const currentPage = this._pages[this._currentPageNumber - 1];

              if (!currentPage) {
                return;
              }

              let hPadding = _ui_utils.SCROLLBAR_PADDING,
                  vPadding = _ui_utils.VERTICAL_PADDING;

              if (this.isInPresentationMode) {
                hPadding = vPadding = 4;
              } else if (this.removePageBorders) {
                hPadding = vPadding = 0;
              } else if (this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL) {
                [hPadding, vPadding] = [vPadding, hPadding];
              }

              const pageWidthScale = (this.container.clientWidth - hPadding) / currentPage.width * currentPage.scale / this._pageWidthScaleFactor;
              const pageHeightScale = (this.container.clientHeight - vPadding) / currentPage.height * currentPage.scale;

              switch (value) {
                case "page-actual":
                  scale = 1;
                  break;

                case "page-width":
                  scale = pageWidthScale;
                  break;

                case "page-height":
                  scale = pageHeightScale;
                  break;

                case "page-fit":
                  scale = Math.min(pageWidthScale, pageHeightScale);
                  break;

                case "auto":
                  const horizontalScale = (0, _ui_utils.isPortraitOrientation)(currentPage) ? pageWidthScale : Math.min(pageHeightScale, pageWidthScale);
                  scale = Math.min(_ui_utils.MAX_AUTO_SCALE, horizontalScale);
                  break;

                default:
                  console.error(`_setScale: "${value}" is an unknown zoom value.`);
                  return;
              }

              this._setScaleUpdatePages(scale, value, noScroll, true);
            }
          }

          #resetCurrentPageView() {
            const pageView = this._pages[this._currentPageNumber - 1];

            if (this.isInPresentationMode) {
              this._setScale(this._currentScaleValue, true);
            }

            this.#scrollIntoView(pageView);
          }

          pageLabelToPageNumber(label) {
            if (!this._pageLabels) {
              return null;
            }

            const i = this._pageLabels.indexOf(label);

            if (i < 0) {
              return null;
            }

            return i + 1;
          }

          scrollPageIntoView({
            pageNumber,
            destArray = null,
            allowNegativeOffset = false,
            ignoreDestinationZoom = false
          }) {
            if (!this.pdfDocument) {
              return;
            }

            const pageView = Number.isInteger(pageNumber) && this._pages[pageNumber - 1];

            if (!pageView) {
              console.error(`scrollPageIntoView: "${pageNumber}" is not a valid pageNumber parameter.`);
              return;
            }

            if (this.isInPresentationMode || !destArray) {
              this._setCurrentPageNumber(pageNumber, true);

              return;
            }

            let x = 0,
                y = 0;
            let width = 0,
                height = 0,
                widthScale,
                heightScale;
            const changeOrientation = pageView.rotation % 180 !== 0;
            const pageWidth = (changeOrientation ? pageView.height : pageView.width) / pageView.scale / _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS;
            const pageHeight = (changeOrientation ? pageView.width : pageView.height) / pageView.scale / _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS;
            let scale = 0;

            switch (destArray[1].name) {
              case "XYZ":
                x = destArray[2];
                y = destArray[3];
                scale = destArray[4];
                x = x !== null ? x : 0;
                y = y !== null ? y : pageHeight;
                break;

              case "Fit":
              case "FitB":
                scale = "page-fit";
                break;

              case "FitH":
              case "FitBH":
                y = destArray[2];
                scale = "page-width";

                if (y === null && this._location) {
                  x = this._location.left;
                  y = this._location.top;
                } else if (typeof y !== "number" || y < 0) {
                  y = pageHeight;
                }

                break;

              case "FitV":
              case "FitBV":
                x = destArray[2];
                width = pageWidth;
                height = pageHeight;
                scale = "page-height";
                break;

              case "FitR":
                x = destArray[2];
                y = destArray[3];
                width = destArray[4] - x;
                height = destArray[5] - y;
                const hPadding = this.removePageBorders ? 0 : _ui_utils.SCROLLBAR_PADDING;
                const vPadding = this.removePageBorders ? 0 : _ui_utils.VERTICAL_PADDING;
                widthScale = (this.container.clientWidth - hPadding) / width / _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS;
                heightScale = (this.container.clientHeight - vPadding) / height / _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS;
                scale = Math.min(Math.abs(widthScale), Math.abs(heightScale));
                break;

              default:
                console.error(`scrollPageIntoView: "${destArray[1].name}" is not a valid destination type.`);
                return;
            }

            if (!ignoreDestinationZoom) {
              if (scale && scale !== this._currentScale) {
                this.currentScaleValue = scale;
              } else if (this._currentScale === _ui_utils.UNKNOWN_SCALE) {
                this.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;
              }
            }

            if (scale === "page-fit" && !destArray[4]) {
              this.#scrollIntoView(pageView);
              return;
            }

            const boundingRect = [pageView.viewport.convertToViewportPoint(x, y), pageView.viewport.convertToViewportPoint(x + width, y + height)];
            let left = Math.min(boundingRect[0][0], boundingRect[1][0]);
            let top = Math.min(boundingRect[0][1], boundingRect[1][1]);

            if (!allowNegativeOffset) {
              left = Math.max(left, 0);
              top = Math.max(top, 0);
            }

            this.#scrollIntoView(pageView, {
              left,
              top
            });
          }

          _updateLocation(firstPage) {
            const currentScale = this._currentScale;
            const currentScaleValue = this._currentScaleValue;
            const normalizedScaleValue = parseFloat(currentScaleValue) === currentScale ? Math.round(currentScale * 10000) / 100 : currentScaleValue;
            const pageNumber = firstPage.id;
            const currentPageView = this._pages[pageNumber - 1];
            const container = this.container;
            const topLeft = currentPageView.getPagePoint(container.scrollLeft - firstPage.x, container.scrollTop - firstPage.y);
            const intLeft = Math.round(topLeft[0]);
            const intTop = Math.round(topLeft[1]);
            let pdfOpenParams = `#page=${pageNumber}`;

            if (!this.isInPresentationMode) {
              pdfOpenParams += `&zoom=${normalizedScaleValue},${intLeft},${intTop}`;
            }

            this._location = {
              pageNumber,
              scale: normalizedScaleValue,
              top: intTop,
              left: intLeft,
              rotation: this._pagesRotation,
              pdfOpenParams
            };
          }

          update() {
            const visible = this._getVisiblePages();

            const visiblePages = visible.views,
                  numVisiblePages = visiblePages.length;

            if (numVisiblePages === 0) {
              return;
            }

            const newCacheSize = Math.max(DEFAULT_CACHE_SIZE, 2 * numVisiblePages + 1);
            this.#buffer.resize(newCacheSize, visible.ids);
            this.renderingQueue.renderHighestPriority(visible);
            const isSimpleLayout = this._spreadMode === _ui_utils.SpreadMode.NONE && (this._scrollMode === _ui_utils.ScrollMode.PAGE || this._scrollMode === _ui_utils.ScrollMode.VERTICAL);
            const currentId = this._currentPageNumber;
            let stillFullyVisible = false;

            for (const page of visiblePages) {
              if (page.percent < 100) {
                break;
              }

              if (page.id === currentId && isSimpleLayout) {
                stillFullyVisible = true;
                break;
              }
            }

            this._setCurrentPageNumber(stillFullyVisible ? currentId : visiblePages[0].id);

            this._updateLocation(visible.first);

            this.eventBus.dispatch("updateviewarea", {
              source: this,
              location: this._location
            });
          }

          containsElement(element) {
            return this.container.contains(element);
          }

          focus() {
            this.container.focus();
          }

          get _isContainerRtl() {
            return getComputedStyle(this.container).direction === "rtl";
          }

          get isInPresentationMode() {
            return this.presentationModeState === _ui_utils.PresentationModeState.FULLSCREEN;
          }

          get isChangingPresentationMode() {
            return this.presentationModeState === _ui_utils.PresentationModeState.CHANGING;
          }

          get isHorizontalScrollbarEnabled() {
            return this.isInPresentationMode ? false : this.container.scrollWidth > this.container.clientWidth;
          }

          get isVerticalScrollbarEnabled() {
            return this.isInPresentationMode ? false : this.container.scrollHeight > this.container.clientHeight;
          }

          _getVisiblePages() {
            const views = this._scrollMode === _ui_utils.ScrollMode.PAGE ? this.#scrollModePageState.pages : this._pages,
                  horizontal = this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL,
                  rtl = horizontal && this._isContainerRtl;
            return (0, _ui_utils.getVisibleElements)({
              scrollEl: this.container,
              views,
              sortByVisibility: true,
              horizontal,
              rtl
            });
          }

          isPageVisible(pageNumber) {
            if (!this.pdfDocument) {
              return false;
            }

            if (!(Number.isInteger(pageNumber) && pageNumber > 0 && pageNumber <= this.pagesCount)) {
              console.error(`isPageVisible: "${pageNumber}" is not a valid page.`);
              return false;
            }

            return this._getVisiblePages().ids.has(pageNumber);
          }

          isPageCached(pageNumber) {
            if (!this.pdfDocument) {
              return false;
            }

            if (!(Number.isInteger(pageNumber) && pageNumber > 0 && pageNumber <= this.pagesCount)) {
              console.error(`isPageCached: "${pageNumber}" is not a valid page.`);
              return false;
            }

            const pageView = this._pages[pageNumber - 1];
            return this.#buffer.has(pageView);
          }

          cleanup() {
            for (const pageView of this._pages) {
              if (pageView.renderingState !== _ui_utils.RenderingStates.FINISHED) {
                pageView.reset();
              }
            }
          }

          _cancelRendering() {
            for (const pageView of this._pages) {
              pageView.cancelRendering();
            }
          }

          #ensurePdfPageLoaded(pageView) {
            var _this4 = this;

            return _asyncToGenerator(function* () {
              if (pageView.pdfPage) {
                return pageView.pdfPage;
              }

              try {
                const pdfPage = yield _this4.pdfDocument.getPage(pageView.id);

                if (!pageView.pdfPage) {
                  pageView.setPdfPage(pdfPage);
                }

                if (!_this4.linkService._cachedPageNumber?.(pdfPage.ref)) {
                  _this4.linkService.cachePageRef(pageView.id, pdfPage.ref);
                }

                return pdfPage;
              } catch (reason) {
                console.error("Unable to get page for page view", reason);
                return null;
              }
            })();
          }

          #getScrollAhead(visible) {
            if (visible.first?.id === 1) {
              return true;
            } else if (visible.last?.id === this.pagesCount) {
              return false;
            }

            switch (this._scrollMode) {
              case _ui_utils.ScrollMode.PAGE:
                return this.#scrollModePageState.scrollDown;

              case _ui_utils.ScrollMode.HORIZONTAL:
                return this.scroll.right;
            }

            return this.scroll.down;
          }

          #toggleLoadingIconSpinner(visibleIds) {
            for (const id of visibleIds) {
              const pageView = this._pages[id - 1];
              pageView?.toggleLoadingIconSpinner(true);
            }

            for (const pageView of this.#buffer) {
              if (visibleIds.has(pageView.id)) {
                continue;
              }

              pageView.toggleLoadingIconSpinner(false);
            }
          }

          forceRendering(currentlyVisiblePages) {
            const visiblePages = currentlyVisiblePages || this._getVisiblePages();

            const scrollAhead = this.#getScrollAhead(visiblePages);
            const preRenderExtra = this._spreadMode !== _ui_utils.SpreadMode.NONE && this._scrollMode !== _ui_utils.ScrollMode.HORIZONTAL;
            const pageView = this.renderingQueue.getHighestPriority(visiblePages, this._pages, scrollAhead, preRenderExtra);
            this.#toggleLoadingIconSpinner(visiblePages.ids);

            if (pageView) {
              this.#ensurePdfPageLoaded(pageView).then(() => {
                this.renderingQueue.renderView(pageView);
              });
              return true;
            }

            return false;
          }

          createTextLayerBuilder(textLayerDiv, pageIndex, viewport, enhanceTextSelection = false, eventBus, highlighter) {
            return new _text_layer_builder.TextLayerBuilder({
              textLayerDiv,
              eventBus,
              pageIndex,
              viewport,
              enhanceTextSelection: this.isInPresentationMode ? false : enhanceTextSelection,
              highlighter
            });
          }

          createTextHighlighter(pageIndex, eventBus) {
            return new _text_highlighter.TextHighlighter({
              eventBus,
              pageIndex,
              findController: this.isInPresentationMode ? null : this.findController
            });
          }

          createAnnotationLayerBuilder(pageDiv, pdfPage, annotationStorage = null, imageResourcesPath = "", renderForms = true, l10n = _l10n_utils.NullL10n, enableScripting = null, hasJSActionsPromise = null, mouseState = null, fieldObjectsPromise = null, annotationCanvasMap = null) {
            return new _annotation_layer_builder.AnnotationLayerBuilder({
              pageDiv,
              pdfPage,
              annotationStorage: annotationStorage || this.pdfDocument?.annotationStorage,
              imageResourcesPath,
              renderForms,
              linkService: this.linkService,
              downloadManager: this.downloadManager,
              l10n,
              enableScripting: enableScripting ?? this.enableScripting,
              hasJSActionsPromise: hasJSActionsPromise || this.pdfDocument?.hasJSActions(),
              fieldObjectsPromise: fieldObjectsPromise || this.pdfDocument?.getFieldObjects(),
              mouseState: mouseState || this._scriptingManager?.mouseState,
              annotationCanvasMap
            });
          }

          createXfaLayerBuilder(pageDiv, pdfPage, annotationStorage = null) {
            return new _xfa_layer_builder.XfaLayerBuilder({
              pageDiv,
              pdfPage,
              annotationStorage: annotationStorage || this.pdfDocument?.annotationStorage,
              linkService: this.linkService
            });
          }

          createStructTreeLayerBuilder(pdfPage) {
            return new _struct_tree_layer_builder.StructTreeLayerBuilder({
              pdfPage
            });
          }

          get hasEqualPageSizes() {
            const firstPageView = this._pages[0];

            for (let i = 1, ii = this._pages.length; i < ii; ++i) {
              const pageView = this._pages[i];

              if (pageView.width !== firstPageView.width || pageView.height !== firstPageView.height) {
                return false;
              }
            }

            return true;
          }

          getPagesOverview() {
            return this._pages.map(pageView => {
              const viewport = pageView.pdfPage.getViewport({
                scale: 1
              });

              if (!this.enablePrintAutoRotate || (0, _ui_utils.isPortraitOrientation)(viewport)) {
                return {
                  width: viewport.width,
                  height: viewport.height,
                  rotation: viewport.rotation
                };
              }

              return {
                width: viewport.height,
                height: viewport.width,
                rotation: (viewport.rotation - 90) % 360
              };
            });
          }

          get optionalContentConfigPromise() {
            if (!this.pdfDocument) {
              return Promise.resolve(null);
            }

            if (!this._optionalContentConfigPromise) {
              return this.pdfDocument.getOptionalContentConfig();
            }

            return this._optionalContentConfigPromise;
          }

          set optionalContentConfigPromise(promise) {
            if (!(promise instanceof Promise)) {
              throw new Error(`Invalid optionalContentConfigPromise: ${promise}`);
            }

            if (!this.pdfDocument) {
              return;
            }

            if (!this._optionalContentConfigPromise) {
              return;
            }

            this._optionalContentConfigPromise = promise;
            const updateArgs = {
              optionalContentConfigPromise: promise
            };

            for (const pageView of this._pages) {
              pageView.update(updateArgs);
            }

            this.update();
            this.eventBus.dispatch("optionalcontentconfigchanged", {
              source: this,
              promise
            });
          }

          get scrollMode() {
            return this._scrollMode;
          }

          set scrollMode(mode) {
            if (this._scrollMode === mode) {
              return;
            }

            if (!(0, _ui_utils.isValidScrollMode)(mode)) {
              throw new Error(`Invalid scroll mode: ${mode}`);
            }

            if (this.pagesCount > PagesCountLimit.FORCE_SCROLL_MODE_PAGE) {
              return;
            }

            this._previousScrollMode = this._scrollMode;
            this._scrollMode = mode;
            this.eventBus.dispatch("scrollmodechanged", {
              source: this,
              mode
            });

            this._updateScrollMode(this._currentPageNumber);
          }

          _updateScrollMode(pageNumber = null) {
            const scrollMode = this._scrollMode,
                  viewer = this.viewer;
            viewer.classList.toggle("scrollHorizontal", scrollMode === _ui_utils.ScrollMode.HORIZONTAL);
            viewer.classList.toggle("scrollWrapped", scrollMode === _ui_utils.ScrollMode.WRAPPED);

            if (!this.pdfDocument || !pageNumber) {
              return;
            }

            if (scrollMode === _ui_utils.ScrollMode.PAGE) {
              this.#ensurePageViewVisible();
            } else if (this._previousScrollMode === _ui_utils.ScrollMode.PAGE) {
              this._updateSpreadMode();
            }

            if (this._currentScaleValue && isNaN(this._currentScaleValue)) {
              this._setScale(this._currentScaleValue, true);
            }

            this._setCurrentPageNumber(pageNumber, true);

            this.update();
          }

          get spreadMode() {
            return this._spreadMode;
          }

          set spreadMode(mode) {
            if (this._spreadMode === mode) {
              return;
            }

            if (!(0, _ui_utils.isValidSpreadMode)(mode)) {
              throw new Error(`Invalid spread mode: ${mode}`);
            }

            this._spreadMode = mode;
            this.eventBus.dispatch("spreadmodechanged", {
              source: this,
              mode
            });

            this._updateSpreadMode(this._currentPageNumber);
          }

          _updateSpreadMode(pageNumber = null) {
            if (!this.pdfDocument) {
              return;
            }

            const viewer = this.viewer,
                  pages = this._pages;

            if (this._scrollMode === _ui_utils.ScrollMode.PAGE) {
              this.#ensurePageViewVisible();
            } else {
              viewer.textContent = "";

              if (this._spreadMode === _ui_utils.SpreadMode.NONE) {
                for (const pageView of this._pages) {
                  viewer.appendChild(pageView.div);
                }
              } else {
                const parity = this._spreadMode - 1;
                let spread = null;

                for (let i = 0, ii = pages.length; i < ii; ++i) {
                  if (spread === null) {
                    spread = document.createElement("div");
                    spread.className = "spread";
                    viewer.appendChild(spread);
                  } else if (i % 2 === parity) {
                    spread = spread.cloneNode(false);
                    viewer.appendChild(spread);
                  }

                  spread.appendChild(pages[i].div);
                }
              }
            }

            if (!pageNumber) {
              return;
            }

            if (this._currentScaleValue && isNaN(this._currentScaleValue)) {
              this._setScale(this._currentScaleValue, true);
            }

            this._setCurrentPageNumber(pageNumber, true);

            this.update();
          }

          _getPageAdvance(currentPageNumber, previous = false) {
            switch (this._scrollMode) {
              case _ui_utils.ScrollMode.WRAPPED:
                {
                  const {
                    views
                  } = this._getVisiblePages(),
                        pageLayout = new Map();

                  for (const {
                    id,
                    y,
                    percent,
                    widthPercent
                  } of views) {
                    if (percent === 0 || widthPercent < 100) {
                      continue;
                    }

                    let yArray = pageLayout.get(y);

                    if (!yArray) {
                      pageLayout.set(y, yArray ||= []);
                    }

                    yArray.push(id);
                  }

                  for (const yArray of pageLayout.values()) {
                    const currentIndex = yArray.indexOf(currentPageNumber);

                    if (currentIndex === -1) {
                      continue;
                    }

                    const numPages = yArray.length;

                    if (numPages === 1) {
                      break;
                    }

                    if (previous) {
                      for (let i = currentIndex - 1, ii = 0; i >= ii; i--) {
                        const currentId = yArray[i],
                              expectedId = yArray[i + 1] - 1;

                        if (currentId < expectedId) {
                          return currentPageNumber - expectedId;
                        }
                      }
                    } else {
                      for (let i = currentIndex + 1, ii = numPages; i < ii; i++) {
                        const currentId = yArray[i],
                              expectedId = yArray[i - 1] + 1;

                        if (currentId > expectedId) {
                          return expectedId - currentPageNumber;
                        }
                      }
                    }

                    if (previous) {
                      const firstId = yArray[0];

                      if (firstId < currentPageNumber) {
                        return currentPageNumber - firstId + 1;
                      }
                    } else {
                      const lastId = yArray[numPages - 1];

                      if (lastId > currentPageNumber) {
                        return lastId - currentPageNumber + 1;
                      }
                    }

                    break;
                  }

                  break;
                }

              case _ui_utils.ScrollMode.HORIZONTAL:
                {
                  break;
                }

              case _ui_utils.ScrollMode.PAGE:
              case _ui_utils.ScrollMode.VERTICAL:
                {
                  if (this._spreadMode === _ui_utils.SpreadMode.NONE) {
                    break;
                  }

                  const parity = this._spreadMode - 1;

                  if (previous && currentPageNumber % 2 !== parity) {
                    break;
                  } else if (!previous && currentPageNumber % 2 === parity) {
                    break;
                  }

                  const {
                    views
                  } = this._getVisiblePages(),
                        expectedId = previous ? currentPageNumber - 1 : currentPageNumber + 1;

                  for (const {
                    id,
                    percent,
                    widthPercent
                  } of views) {
                    if (id !== expectedId) {
                      continue;
                    }

                    if (percent > 0 && widthPercent === 100) {
                      return 2;
                    }

                    break;
                  }

                  break;
                }
            }

            return 1;
          }

          nextPage() {
            const currentPageNumber = this._currentPageNumber,
                  pagesCount = this.pagesCount;

            if (currentPageNumber >= pagesCount) {
              return false;
            }

            const advance = this._getPageAdvance(currentPageNumber, false) || 1;
            this.currentPageNumber = Math.min(currentPageNumber + advance, pagesCount);
            return true;
          }

          previousPage() {
            const currentPageNumber = this._currentPageNumber;

            if (currentPageNumber <= 1) {
              return false;
            }

            const advance = this._getPageAdvance(currentPageNumber, true) || 1;
            this.currentPageNumber = Math.max(currentPageNumber - advance, 1);
            return true;
          }

          increaseScale(steps = 1) {
            let newScale = this._currentScale;

            do {
              newScale = (newScale * _ui_utils.DEFAULT_SCALE_DELTA).toFixed(2);
              newScale = Math.ceil(newScale * 10) / 10;
              newScale = Math.min(_ui_utils.MAX_SCALE, newScale);
            } while (--steps > 0 && newScale < _ui_utils.MAX_SCALE);

            this.currentScaleValue = newScale;
          }

          decreaseScale(steps = 1) {
            let newScale = this._currentScale;

            do {
              newScale = (newScale / _ui_utils.DEFAULT_SCALE_DELTA).toFixed(2);
              newScale = Math.floor(newScale * 10) / 10;
              newScale = Math.max(_ui_utils.MIN_SCALE, newScale);
            } while (--steps > 0 && newScale > _ui_utils.MIN_SCALE);

            this.currentScaleValue = newScale;
          }

          updateContainerHeightCss() {
            const height = this.container.clientHeight;

            if (height !== this.#previousContainerHeight) {
              this.#previousContainerHeight = height;

              this._doc.style.setProperty("--viewer-container-height", `${height}px`);
            }
          }

        }

        exports.BaseViewer = BaseViewer;
        /***/
      },
      /* 12 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFPageView = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        var _ui_utils = __w_pdfjs_require__(6);

        var _app_options = __w_pdfjs_require__(13);

        var _l10n_utils = __w_pdfjs_require__(4);

        const MAX_CANVAS_PIXELS = _app_options.compatibilityParams.maxCanvasPixels || 16777216;

        class PDFPageView {
          #annotationMode = _pdfjsLib.AnnotationMode.ENABLE_FORMS;

          constructor(options) {
            const container = options.container;
            const defaultViewport = options.defaultViewport;
            this.id = options.id;
            this.renderingId = "page" + this.id;
            this.pdfPage = null;
            this.pageLabel = null;
            this.rotation = 0;
            this.scale = options.scale || _ui_utils.DEFAULT_SCALE;
            this.viewport = defaultViewport;
            this.pdfPageRotate = defaultViewport.rotation;
            this._optionalContentConfigPromise = options.optionalContentConfigPromise || null;
            this.hasRestrictedScaling = false;
            this.textLayerMode = options.textLayerMode ?? _ui_utils.TextLayerMode.ENABLE;
            this.#annotationMode = options.annotationMode ?? _pdfjsLib.AnnotationMode.ENABLE_FORMS;
            this.imageResourcesPath = options.imageResourcesPath || "";
            this.useOnlyCssZoom = options.useOnlyCssZoom || false;
            this.maxCanvasPixels = options.maxCanvasPixels || MAX_CANVAS_PIXELS;
            this.pageColors = options.pageColors || null;
            this.eventBus = options.eventBus;
            this.renderingQueue = options.renderingQueue;
            this.textLayerFactory = options.textLayerFactory;
            this.annotationLayerFactory = options.annotationLayerFactory;
            this.xfaLayerFactory = options.xfaLayerFactory;
            this.textHighlighter = options.textHighlighterFactory?.createTextHighlighter(this.id - 1, this.eventBus);
            this.structTreeLayerFactory = options.structTreeLayerFactory;
            this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;
            this.l10n = options.l10n || _l10n_utils.NullL10n;
            this.paintTask = null;
            this.paintedViewportMap = new WeakMap();
            this.renderingState = _ui_utils.RenderingStates.INITIAL;
            this.resume = null;
            this._renderError = null;
            this._isStandalone = !this.renderingQueue?.hasViewer();
            this._annotationCanvasMap = null;
            this.annotationLayer = null;
            this.textLayer = null;
            this.zoomLayer = null;
            this.xfaLayer = null;
            this.structTreeLayer = null;
            const div = document.createElement("div");
            div.className = "page";
            div.style.width = Math.floor(this.viewport.width) + "px";
            div.style.height = Math.floor(this.viewport.height) + "px";
            div.setAttribute("data-page-number", this.id);
            div.setAttribute("role", "region");
            this.l10n.get("page_landmark", {
              page: this.id
            }).then(msg => {
              div.setAttribute("aria-label", msg);
            });
            this.div = div;
            container?.appendChild(div);
          }

          setPdfPage(pdfPage) {
            this.pdfPage = pdfPage;
            this.pdfPageRotate = pdfPage.rotate;
            const totalRotation = (this.rotation + this.pdfPageRotate) % 360;
            this.viewport = pdfPage.getViewport({
              scale: this.scale * _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS,
              rotation: totalRotation
            });
            this.reset();
          }

          destroy() {
            this.reset();

            if (this.pdfPage) {
              this.pdfPage.cleanup();
            }
          }

          _renderAnnotationLayer() {
            var _this5 = this;

            return _asyncToGenerator(function* () {
              let error = null;

              try {
                yield _this5.annotationLayer.render(_this5.viewport, "display");
              } catch (ex) {
                error = ex;
              } finally {
                _this5.eventBus.dispatch("annotationlayerrendered", {
                  source: _this5,
                  pageNumber: _this5.id,
                  error
                });
              }
            })();
          }

          _renderXfaLayer() {
            var _this6 = this;

            return _asyncToGenerator(function* () {
              let error = null;

              try {
                const result = yield _this6.xfaLayer.render(_this6.viewport, "display");

                if (_this6.textHighlighter) {
                  _this6._buildXfaTextContentItems(result.textDivs);
                }
              } catch (ex) {
                error = ex;
              } finally {
                _this6.eventBus.dispatch("xfalayerrendered", {
                  source: _this6,
                  pageNumber: _this6.id,
                  error
                });
              }
            })();
          }

          _buildXfaTextContentItems(textDivs) {
            var _this7 = this;

            return _asyncToGenerator(function* () {
              const text = yield _this7.pdfPage.getTextContent();
              const items = [];

              for (const item of text.items) {
                items.push(item.str);
              }

              _this7.textHighlighter.setTextMapping(textDivs, items);

              _this7.textHighlighter.enable();
            })();
          }

          _resetZoomLayer(removeFromDOM = false) {
            if (!this.zoomLayer) {
              return;
            }

            const zoomLayerCanvas = this.zoomLayer.firstChild;
            this.paintedViewportMap.delete(zoomLayerCanvas);
            zoomLayerCanvas.width = 0;
            zoomLayerCanvas.height = 0;

            if (removeFromDOM) {
              this.zoomLayer.remove();
            }

            this.zoomLayer = null;
          }

          reset({
            keepZoomLayer = false,
            keepAnnotationLayer = false,
            keepXfaLayer = false
          } = {}) {
            this.cancelRendering({
              keepAnnotationLayer,
              keepXfaLayer
            });
            this.renderingState = _ui_utils.RenderingStates.INITIAL;
            const div = this.div;
            div.style.width = Math.floor(this.viewport.width) + "px";
            div.style.height = Math.floor(this.viewport.height) + "px";
            const childNodes = div.childNodes,
                  zoomLayerNode = keepZoomLayer && this.zoomLayer || null,
                  annotationLayerNode = keepAnnotationLayer && this.annotationLayer?.div || null,
                  xfaLayerNode = keepXfaLayer && this.xfaLayer?.div || null;

            for (let i = childNodes.length - 1; i >= 0; i--) {
              const node = childNodes[i];

              switch (node) {
                case zoomLayerNode:
                case annotationLayerNode:
                case xfaLayerNode:
                  continue;
              }

              node.remove();
            }

            div.removeAttribute("data-loaded");

            if (annotationLayerNode) {
              this.annotationLayer.hide();
            }

            if (xfaLayerNode) {
              this.xfaLayer.hide();
            }

            if (!zoomLayerNode) {
              if (this.canvas) {
                this.paintedViewportMap.delete(this.canvas);
                this.canvas.width = 0;
                this.canvas.height = 0;
                delete this.canvas;
              }

              this._resetZoomLayer();
            }

            if (this.svg) {
              this.paintedViewportMap.delete(this.svg);
              delete this.svg;
            }

            this.loadingIconDiv = document.createElement("div");
            this.loadingIconDiv.className = "loadingIcon notVisible";

            if (this._isStandalone) {
              this.toggleLoadingIconSpinner(true);
            }

            this.loadingIconDiv.setAttribute("role", "img");
            this.l10n.get("loading").then(msg => {
              this.loadingIconDiv?.setAttribute("aria-label", msg);
            });
            div.appendChild(this.loadingIconDiv);
          }

          update({
            scale = 0,
            rotation = null,
            optionalContentConfigPromise = null
          }) {
            this.scale = scale || this.scale;

            if (typeof rotation === "number") {
              this.rotation = rotation;
            }

            if (optionalContentConfigPromise instanceof Promise) {
              this._optionalContentConfigPromise = optionalContentConfigPromise;
            }

            const totalRotation = (this.rotation + this.pdfPageRotate) % 360;
            this.viewport = this.viewport.clone({
              scale: this.scale * _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS,
              rotation: totalRotation
            });

            if (this._isStandalone) {
              const {
                style
              } = document.documentElement;
              style.setProperty("--zoom-factor", this.scale);
            }

            if (this.svg) {
              this.cssTransform({
                target: this.svg,
                redrawAnnotationLayer: true,
                redrawXfaLayer: true
              });
              this.eventBus.dispatch("pagerendered", {
                source: this,
                pageNumber: this.id,
                cssTransform: true,
                timestamp: performance.now(),
                error: this._renderError
              });
              return;
            }

            let isScalingRestricted = false;

            if (this.canvas && this.maxCanvasPixels > 0) {
              const outputScale = this.outputScale;

              if ((Math.floor(this.viewport.width) * outputScale.sx | 0) * (Math.floor(this.viewport.height) * outputScale.sy | 0) > this.maxCanvasPixels) {
                isScalingRestricted = true;
              }
            }

            if (this.canvas) {
              if (this.useOnlyCssZoom || this.hasRestrictedScaling && isScalingRestricted) {
                this.cssTransform({
                  target: this.canvas,
                  redrawAnnotationLayer: true,
                  redrawXfaLayer: true
                });
                this.eventBus.dispatch("pagerendered", {
                  source: this,
                  pageNumber: this.id,
                  cssTransform: true,
                  timestamp: performance.now(),
                  error: this._renderError
                });
                return;
              }

              if (!this.zoomLayer && !this.canvas.hidden) {
                this.zoomLayer = this.canvas.parentNode;
                this.zoomLayer.style.position = "absolute";
              }
            }

            if (this.zoomLayer) {
              this.cssTransform({
                target: this.zoomLayer.firstChild
              });
            }

            this.reset({
              keepZoomLayer: true,
              keepAnnotationLayer: true,
              keepXfaLayer: true
            });
          }

          cancelRendering({
            keepAnnotationLayer = false,
            keepXfaLayer = false
          } = {}) {
            if (this.paintTask) {
              this.paintTask.cancel();
              this.paintTask = null;
            }

            this.resume = null;

            if (this.textLayer) {
              this.textLayer.cancel();
              this.textLayer = null;
            }

            if (this.annotationLayer && (!keepAnnotationLayer || !this.annotationLayer.div)) {
              this.annotationLayer.cancel();
              this.annotationLayer = null;
              this._annotationCanvasMap = null;
            }

            if (this.xfaLayer && (!keepXfaLayer || !this.xfaLayer.div)) {
              this.xfaLayer.cancel();
              this.xfaLayer = null;
              this.textHighlighter?.disable();
            }

            if (this._onTextLayerRendered) {
              this.eventBus._off("textlayerrendered", this._onTextLayerRendered);

              this._onTextLayerRendered = null;
            }
          }

          cssTransform({
            target,
            redrawAnnotationLayer = false,
            redrawXfaLayer = false
          }) {
            const width = this.viewport.width;
            const height = this.viewport.height;
            const div = this.div;
            target.style.width = target.parentNode.style.width = div.style.width = Math.floor(width) + "px";
            target.style.height = target.parentNode.style.height = div.style.height = Math.floor(height) + "px";
            const relativeRotation = this.viewport.rotation - this.paintedViewportMap.get(target).rotation;
            const absRotation = Math.abs(relativeRotation);
            let scaleX = 1,
                scaleY = 1;

            if (absRotation === 90 || absRotation === 270) {
              scaleX = height / width;
              scaleY = width / height;
            }

            target.style.transform = `rotate(${relativeRotation}deg) scale(${scaleX}, ${scaleY})`;

            if (this.textLayer) {
              const textLayerViewport = this.textLayer.viewport;
              const textRelativeRotation = this.viewport.rotation - textLayerViewport.rotation;
              const textAbsRotation = Math.abs(textRelativeRotation);
              let scale = width / textLayerViewport.width;

              if (textAbsRotation === 90 || textAbsRotation === 270) {
                scale = width / textLayerViewport.height;
              }

              const textLayerDiv = this.textLayer.textLayerDiv;
              let transX, transY;

              switch (textAbsRotation) {
                case 0:
                  transX = transY = 0;
                  break;

                case 90:
                  transX = 0;
                  transY = "-" + textLayerDiv.style.height;
                  break;

                case 180:
                  transX = "-" + textLayerDiv.style.width;
                  transY = "-" + textLayerDiv.style.height;
                  break;

                case 270:
                  transX = "-" + textLayerDiv.style.width;
                  transY = 0;
                  break;

                default:
                  console.error("Bad rotation value.");
                  break;
              }

              textLayerDiv.style.transform = `rotate(${textAbsRotation}deg) ` + `scale(${scale}) ` + `translate(${transX}, ${transY})`;
              textLayerDiv.style.transformOrigin = "0% 0%";
            }

            if (redrawAnnotationLayer && this.annotationLayer) {
              this._renderAnnotationLayer();
            }

            if (redrawXfaLayer && this.xfaLayer) {
              this._renderXfaLayer();
            }
          }

          get width() {
            return this.viewport.width;
          }

          get height() {
            return this.viewport.height;
          }

          getPagePoint(x, y) {
            return this.viewport.convertToPdfPoint(x, y);
          }

          toggleLoadingIconSpinner(viewVisible = false) {
            this.loadingIconDiv?.classList.toggle("notVisible", !viewVisible);
          }

          draw() {
            var _this8 = this;

            if (this.renderingState !== _ui_utils.RenderingStates.INITIAL) {
              console.error("Must be in new state before drawing");
              this.reset();
            }

            const {
              div,
              pdfPage
            } = this;

            if (!pdfPage) {
              this.renderingState = _ui_utils.RenderingStates.FINISHED;

              if (this.loadingIconDiv) {
                this.loadingIconDiv.remove();
                delete this.loadingIconDiv;
              }

              return Promise.reject(new Error("pdfPage is not loaded"));
            }

            this.renderingState = _ui_utils.RenderingStates.RUNNING;
            const canvasWrapper = document.createElement("div");
            canvasWrapper.style.width = div.style.width;
            canvasWrapper.style.height = div.style.height;
            canvasWrapper.classList.add("canvasWrapper");

            if (this.annotationLayer?.div) {
              div.insertBefore(canvasWrapper, this.annotationLayer.div);
            } else {
              div.appendChild(canvasWrapper);
            }

            let textLayer = null;

            if (this.textLayerMode !== _ui_utils.TextLayerMode.DISABLE && this.textLayerFactory) {
              const textLayerDiv = document.createElement("div");
              textLayerDiv.className = "textLayer";
              textLayerDiv.style.width = canvasWrapper.style.width;
              textLayerDiv.style.height = canvasWrapper.style.height;

              if (this.annotationLayer?.div) {
                div.insertBefore(textLayerDiv, this.annotationLayer.div);
              } else {
                div.appendChild(textLayerDiv);
              }

              textLayer = this.textLayerFactory.createTextLayerBuilder(textLayerDiv, this.id - 1, this.viewport, this.textLayerMode === _ui_utils.TextLayerMode.ENABLE_ENHANCE, this.eventBus, this.textHighlighter);
            }

            this.textLayer = textLayer;

            if (this.#annotationMode !== _pdfjsLib.AnnotationMode.DISABLE && this.annotationLayerFactory) {
              this._annotationCanvasMap ||= new Map();
              this.annotationLayer ||= this.annotationLayerFactory.createAnnotationLayerBuilder(div, pdfPage, null, this.imageResourcesPath, this.#annotationMode === _pdfjsLib.AnnotationMode.ENABLE_FORMS, this.l10n, null, null, null, null, this._annotationCanvasMap);
            }

            if (this.xfaLayer?.div) {
              div.appendChild(this.xfaLayer.div);
            }

            let renderContinueCallback = null;

            if (this.renderingQueue) {
              renderContinueCallback = cont => {
                if (!this.renderingQueue.isHighestPriority(this)) {
                  this.renderingState = _ui_utils.RenderingStates.PAUSED;

                  this.resume = () => {
                    this.renderingState = _ui_utils.RenderingStates.RUNNING;
                    cont();
                  };

                  return;
                }

                cont();
              };
            }

            const finishPaintTask = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(function* (error = null) {
                if (paintTask === _this8.paintTask) {
                  _this8.paintTask = null;
                }

                if (error instanceof _pdfjsLib.RenderingCancelledException) {
                  _this8._renderError = null;
                  return;
                }

                _this8._renderError = error;
                _this8.renderingState = _ui_utils.RenderingStates.FINISHED;

                if (_this8.loadingIconDiv) {
                  _this8.loadingIconDiv.remove();

                  delete _this8.loadingIconDiv;
                }

                _this8._resetZoomLayer(true);

                _this8.eventBus.dispatch("pagerendered", {
                  source: _this8,
                  pageNumber: _this8.id,
                  cssTransform: false,
                  timestamp: performance.now(),
                  error: _this8._renderError
                });

                if (error) {
                  throw error;
                }
              });

              return function finishPaintTask() {
                return _ref2.apply(this, arguments);
              };
            }();

            const paintTask = this.renderer === _ui_utils.RendererType.SVG ? this.paintOnSvg(canvasWrapper) : this.paintOnCanvas(canvasWrapper);
            paintTask.onRenderContinue = renderContinueCallback;
            this.paintTask = paintTask;
            const resultPromise = paintTask.promise.then(() => {
              return finishPaintTask(null).then(() => {
                if (textLayer) {
                  const readableStream = pdfPage.streamTextContent({
                    includeMarkedContent: true
                  });
                  textLayer.setTextContentStream(readableStream);
                  textLayer.render();
                }

                if (this.annotationLayer) {
                  this._renderAnnotationLayer();
                }
              });
            }, function (reason) {
              return finishPaintTask(reason);
            });

            if (this.xfaLayerFactory) {
              if (!this.xfaLayer) {
                this.xfaLayer = this.xfaLayerFactory.createXfaLayerBuilder(div, pdfPage, null);
              }

              this._renderXfaLayer();
            }

            if (this.structTreeLayerFactory && this.textLayer && this.canvas) {
              this._onTextLayerRendered = event => {
                if (event.pageNumber !== this.id) {
                  return;
                }

                this.eventBus._off("textlayerrendered", this._onTextLayerRendered);

                this._onTextLayerRendered = null;

                if (!this.canvas) {
                  return;
                }

                this.pdfPage.getStructTree().then(tree => {
                  if (!tree) {
                    return;
                  }

                  if (!this.canvas) {
                    return;
                  }

                  const treeDom = this.structTreeLayer.render(tree);
                  treeDom.classList.add("structTree");
                  this.canvas.appendChild(treeDom);
                });
              };

              this.eventBus._on("textlayerrendered", this._onTextLayerRendered);

              this.structTreeLayer = this.structTreeLayerFactory.createStructTreeLayerBuilder(pdfPage);
            }

            div.setAttribute("data-loaded", true);
            this.eventBus.dispatch("pagerender", {
              source: this,
              pageNumber: this.id
            });
            return resultPromise;
          }

          paintOnCanvas(canvasWrapper) {
            const renderCapability = (0, _pdfjsLib.createPromiseCapability)();
            const result = {
              promise: renderCapability.promise,

              onRenderContinue(cont) {
                cont();
              },

              cancel() {
                renderTask.cancel();
              }

            };
            const viewport = this.viewport;
            const canvas = document.createElement("canvas");
            canvas.hidden = true;
            let isCanvasHidden = true;

            const showCanvas = function () {
              if (isCanvasHidden) {
                canvas.hidden = false;
                isCanvasHidden = false;
              }
            };

            canvasWrapper.appendChild(canvas);
            this.canvas = canvas;
            const ctx = canvas.getContext("2d", {
              alpha: false
            });
            const outputScale = this.outputScale = new _ui_utils.OutputScale();

            if (this.useOnlyCssZoom) {
              const actualSizeViewport = viewport.clone({
                scale: _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS
              });
              outputScale.sx *= actualSizeViewport.width / viewport.width;
              outputScale.sy *= actualSizeViewport.height / viewport.height;
            }

            if (this.maxCanvasPixels > 0) {
              const pixelsInViewport = viewport.width * viewport.height;
              const maxScale = Math.sqrt(this.maxCanvasPixels / pixelsInViewport);

              if (outputScale.sx > maxScale || outputScale.sy > maxScale) {
                outputScale.sx = maxScale;
                outputScale.sy = maxScale;
                this.hasRestrictedScaling = true;
              } else {
                this.hasRestrictedScaling = false;
              }
            }

            const sfx = (0, _ui_utils.approximateFraction)(outputScale.sx);
            const sfy = (0, _ui_utils.approximateFraction)(outputScale.sy);
            canvas.width = (0, _ui_utils.roundToDivide)(viewport.width * outputScale.sx, sfx[0]);
            canvas.height = (0, _ui_utils.roundToDivide)(viewport.height * outputScale.sy, sfy[0]);
            canvas.style.width = (0, _ui_utils.roundToDivide)(viewport.width, sfx[1]) + "px";
            canvas.style.height = (0, _ui_utils.roundToDivide)(viewport.height, sfy[1]) + "px";
            this.paintedViewportMap.set(canvas, viewport);
            const transform = outputScale.scaled ? [outputScale.sx, 0, 0, outputScale.sy, 0, 0] : null;
            const renderContext = {
              canvasContext: ctx,
              transform,
              viewport: this.viewport,
              annotationMode: this.#annotationMode,
              optionalContentConfigPromise: this._optionalContentConfigPromise,
              annotationCanvasMap: this._annotationCanvasMap,
              pageColors: this.pageColors
            };
            const renderTask = this.pdfPage.render(renderContext);

            renderTask.onContinue = function (cont) {
              showCanvas();

              if (result.onRenderContinue) {
                result.onRenderContinue(cont);
              } else {
                cont();
              }
            };

            renderTask.promise.then(function () {
              showCanvas();
              renderCapability.resolve();
            }, function (error) {
              showCanvas();
              renderCapability.reject(error);
            });
            return result;
          }

          paintOnSvg(wrapper) {
            let cancelled = false;

            const ensureNotCancelled = () => {
              if (cancelled) {
                throw new _pdfjsLib.RenderingCancelledException(`Rendering cancelled, page ${this.id}`, "svg");
              }
            };

            const pdfPage = this.pdfPage;
            const actualSizeViewport = this.viewport.clone({
              scale: _pdfjsLib.PixelsPerInch.PDF_TO_CSS_UNITS
            });
            const promise = pdfPage.getOperatorList({
              annotationMode: this.#annotationMode
            }).then(opList => {
              ensureNotCancelled();
              const svgGfx = new _pdfjsLib.SVGGraphics(pdfPage.commonObjs, pdfPage.objs);
              return svgGfx.getSVG(opList, actualSizeViewport).then(svg => {
                ensureNotCancelled();
                this.svg = svg;
                this.paintedViewportMap.set(svg, actualSizeViewport);
                svg.style.width = wrapper.style.width;
                svg.style.height = wrapper.style.height;
                this.renderingState = _ui_utils.RenderingStates.FINISHED;
                wrapper.appendChild(svg);
              });
            });
            return {
              promise,

              onRenderContinue(cont) {
                cont();
              },

              cancel() {
                cancelled = true;
              }

            };
          }

          setPageLabel(label) {
            this.pageLabel = typeof label === "string" ? label : null;

            if (this.pageLabel !== null) {
              this.div.setAttribute("data-page-label", this.pageLabel);
            } else {
              this.div.removeAttribute("data-page-label");
            }
          }

        }

        exports.PDFPageView = PDFPageView;
        /***/
      },
      /* 13 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.compatibilityParams = exports.OptionKind = exports.AppOptions = void 0;
        const compatibilityParams = Object.create(null);
        exports.compatibilityParams = compatibilityParams;
        {
          const userAgent = navigator.userAgent || "";
          const platform = navigator.platform || "";
          const maxTouchPoints = navigator.maxTouchPoints || 1;
          const isAndroid = /Android/.test(userAgent);
          const isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent) || platform === "MacIntel" && maxTouchPoints > 1;

          (function checkCanvasSizeLimitation() {
            if (isIOS || isAndroid) {
              compatibilityParams.maxCanvasPixels = 5242880;
            }
          })();
        }
        const OptionKind = {
          VIEWER: 0x02,
          API: 0x04,
          WORKER: 0x08,
          PREFERENCE: 0x80
        };
        exports.OptionKind = OptionKind;
        const defaultOptions = {
          annotationMode: {
            value: 2,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          cursorToolOnLoad: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          defaultUrl: {
            value: "compressed.tracemonkey-pldi-09.pdf",
            kind: OptionKind.VIEWER
          },
          defaultZoomValue: {
            value: "",
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          disableHistory: {
            value: false,
            kind: OptionKind.VIEWER
          },
          disablePageLabels: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          enablePermissions: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          enablePrintAutoRotate: {
            value: true,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          enableScripting: {
            value: true,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          externalLinkRel: {
            value: "noopener noreferrer nofollow",
            kind: OptionKind.VIEWER
          },
          externalLinkTarget: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          historyUpdateUrl: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          ignoreDestinationZoom: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          imageResourcesPath: {
            value: "./images/",
            kind: OptionKind.VIEWER
          },
          maxCanvasPixels: {
            value: 16777216,
            compatibility: compatibilityParams.maxCanvasPixels,
            kind: OptionKind.VIEWER
          },
          pageColorsBackground: {
            value: "Canvas",
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          pageColorsForeground: {
            value: "CanvasText",
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          pdfBugEnabled: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          printResolution: {
            value: 150,
            kind: OptionKind.VIEWER
          },
          renderer: {
            value: "canvas",
            kind: OptionKind.VIEWER
          },
          sidebarViewOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          scrollModeOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          spreadModeOnLoad: {
            value: -1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          textLayerMode: {
            value: 1,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          useOnlyCssZoom: {
            value: false,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          viewerCssTheme: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          viewOnLoad: {
            value: 0,
            kind: OptionKind.VIEWER + OptionKind.PREFERENCE
          },
          cMapPacked: {
            value: true,
            kind: OptionKind.API
          },
          cMapUrl: {
            value: "../web/cmaps/",
            kind: OptionKind.API
          },
          disableAutoFetch: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
          },
          disableFontFace: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
          },
          disableRange: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
          },
          disableStream: {
            value: false,
            kind: OptionKind.API + OptionKind.PREFERENCE
          },
          docBaseUrl: {
            value: "",
            kind: OptionKind.API
          },
          enableXfa: {
            value: true,
            kind: OptionKind.API + OptionKind.PREFERENCE
          },
          fontExtraProperties: {
            value: false,
            kind: OptionKind.API
          },
          isEvalSupported: {
            value: true,
            kind: OptionKind.API
          },
          maxImageSize: {
            value: -1,
            kind: OptionKind.API
          },
          pdfBug: {
            value: false,
            kind: OptionKind.API
          },
          standardFontDataUrl: {
            value: "../web/standard_fonts/",
            kind: OptionKind.API
          },
          verbosity: {
            value: 1,
            kind: OptionKind.API
          },
          workerPort: {
            value: null,
            kind: OptionKind.WORKER
          },
          workerSrc: {
            value: "../build/pdf.worker.js",
            kind: OptionKind.WORKER
          }
        };
        {
          defaultOptions.disablePreferences = {
            value: false,
            kind: OptionKind.VIEWER
          };
          defaultOptions.locale = {
            value: navigator.language || "en-US",
            kind: OptionKind.VIEWER
          };
          defaultOptions.sandboxBundleSrc = {
            value: "../build/pdf.sandbox.js",
            kind: OptionKind.VIEWER
          };
          defaultOptions.renderer.kind += OptionKind.PREFERENCE;
        }
        const userOptions = Object.create(null);

        class AppOptions {
          constructor() {
            throw new Error("Cannot initialize AppOptions.");
          }

          static get(name) {
            const userOption = userOptions[name];

            if (userOption !== undefined) {
              return userOption;
            }

            const defaultOption = defaultOptions[name];

            if (defaultOption !== undefined) {
              return defaultOption.compatibility ?? defaultOption.value;
            }

            return undefined;
          }

          static getAll(kind = null) {
            const options = Object.create(null);

            for (const name in defaultOptions) {
              const defaultOption = defaultOptions[name];

              if (kind) {
                if ((kind & defaultOption.kind) === 0) {
                  continue;
                }

                if (kind === OptionKind.PREFERENCE) {
                  const value = defaultOption.value,
                        valueType = typeof value;

                  if (valueType === "boolean" || valueType === "string" || valueType === "number" && Number.isInteger(value)) {
                    options[name] = value;
                    continue;
                  }

                  throw new Error(`Invalid type for preference: ${name}`);
                }
              }

              const userOption = userOptions[name];
              options[name] = userOption !== undefined ? userOption : defaultOption.compatibility ?? defaultOption.value;
            }

            return options;
          }

          static set(name, value) {
            userOptions[name] = value;
          }

          static setAll(options) {
            for (const name in options) {
              userOptions[name] = options[name];
            }
          }

          static remove(name) {
            delete userOptions[name];
          }

          static _hasUserOptions() {
            return Object.keys(userOptions).length > 0;
          }

        }

        exports.AppOptions = AppOptions;
        /***/
      },
      /* 14 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFRenderingQueue = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        var _ui_utils = __w_pdfjs_require__(6);

        const CLEANUP_TIMEOUT = 30000;

        class PDFRenderingQueue {
          constructor() {
            this.pdfViewer = null;
            this.pdfThumbnailViewer = null;
            this.onIdle = null;
            this.highestPriorityPage = null;
            this.idleTimeout = null;
            this.printing = false;
            this.isThumbnailViewEnabled = false;
          }

          setViewer(pdfViewer) {
            this.pdfViewer = pdfViewer;
          }

          setThumbnailViewer(pdfThumbnailViewer) {
            this.pdfThumbnailViewer = pdfThumbnailViewer;
          }

          isHighestPriority(view) {
            return this.highestPriorityPage === view.renderingId;
          }

          hasViewer() {
            return !!this.pdfViewer;
          }

          renderHighestPriority(currentlyVisiblePages) {
            if (this.idleTimeout) {
              clearTimeout(this.idleTimeout);
              this.idleTimeout = null;
            }

            if (this.pdfViewer.forceRendering(currentlyVisiblePages)) {
              return;
            }

            if (this.isThumbnailViewEnabled && this.pdfThumbnailViewer?.forceRendering()) {
              return;
            }

            if (this.printing) {
              return;
            }

            if (this.onIdle) {
              this.idleTimeout = setTimeout(this.onIdle.bind(this), CLEANUP_TIMEOUT);
            }
          }

          getHighestPriority(visible, views, scrolledDown, preRenderExtra = false) {
            const visibleViews = visible.views,
                  numVisible = visibleViews.length;

            if (numVisible === 0) {
              return null;
            }

            for (let i = 0; i < numVisible; i++) {
              const view = visibleViews[i].view;

              if (!this.isViewFinished(view)) {
                return view;
              }
            }

            const firstId = visible.first.id,
                  lastId = visible.last.id;

            if (lastId - firstId + 1 > numVisible) {
              const visibleIds = visible.ids;

              for (let i = 1, ii = lastId - firstId; i < ii; i++) {
                const holeId = scrolledDown ? firstId + i : lastId - i;

                if (visibleIds.has(holeId)) {
                  continue;
                }

                const holeView = views[holeId - 1];

                if (!this.isViewFinished(holeView)) {
                  return holeView;
                }
              }
            }

            let preRenderIndex = scrolledDown ? lastId : firstId - 2;
            let preRenderView = views[preRenderIndex];

            if (preRenderView && !this.isViewFinished(preRenderView)) {
              return preRenderView;
            }

            if (preRenderExtra) {
              preRenderIndex += scrolledDown ? 1 : -1;
              preRenderView = views[preRenderIndex];

              if (preRenderView && !this.isViewFinished(preRenderView)) {
                return preRenderView;
              }
            }

            return null;
          }

          isViewFinished(view) {
            return view.renderingState === _ui_utils.RenderingStates.FINISHED;
          }

          renderView(view) {
            switch (view.renderingState) {
              case _ui_utils.RenderingStates.FINISHED:
                return false;

              case _ui_utils.RenderingStates.PAUSED:
                this.highestPriorityPage = view.renderingId;
                view.resume();
                break;

              case _ui_utils.RenderingStates.RUNNING:
                this.highestPriorityPage = view.renderingId;
                break;

              case _ui_utils.RenderingStates.INITIAL:
                this.highestPriorityPage = view.renderingId;
                view.draw().finally(() => {
                  this.renderHighestPriority();
                }).catch(reason => {
                  if (reason instanceof _pdfjsLib.RenderingCancelledException) {
                    return;
                  }

                  console.error(`renderView: "${reason}"`);
                });
                break;
            }

            return true;
          }

        }

        exports.PDFRenderingQueue = PDFRenderingQueue;
        /***/
      },
      /* 15 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TextHighlighter = void 0;

        class TextHighlighter {
          constructor({
            findController,
            eventBus,
            pageIndex
          }) {
            this.findController = findController;
            this.matches = [];
            this.eventBus = eventBus;
            this.pageIdx = pageIndex;
            this._onUpdateTextLayerMatches = null;
            this.textDivs = null;
            this.textContentItemsStr = null;
            this.enabled = false;
          }

          setTextMapping(divs, texts) {
            this.textDivs = divs;
            this.textContentItemsStr = texts;
          }

          enable() {
            if (!this.textDivs || !this.textContentItemsStr) {
              throw new Error("Text divs and strings have not been set.");
            }

            if (this.enabled) {
              throw new Error("TextHighlighter is already enabled.");
            }

            this.enabled = true;

            if (!this._onUpdateTextLayerMatches) {
              this._onUpdateTextLayerMatches = evt => {
                if (evt.pageIndex === this.pageIdx || evt.pageIndex === -1) {
                  this._updateMatches();
                }
              };

              this.eventBus._on("updatetextlayermatches", this._onUpdateTextLayerMatches);
            }

            this._updateMatches();
          }

          disable() {
            if (!this.enabled) {
              return;
            }

            this.enabled = false;

            if (this._onUpdateTextLayerMatches) {
              this.eventBus._off("updatetextlayermatches", this._onUpdateTextLayerMatches);

              this._onUpdateTextLayerMatches = null;
            }
          }

          _convertMatches(matches, matchesLength) {
            if (!matches) {
              return [];
            }

            const {
              textContentItemsStr
            } = this;
            let i = 0,
                iIndex = 0;
            const end = textContentItemsStr.length - 1;
            const result = [];

            for (let m = 0, mm = matches.length; m < mm; m++) {
              let matchIdx = matches[m];

              while (i !== end && matchIdx >= iIndex + textContentItemsStr[i].length) {
                iIndex += textContentItemsStr[i].length;
                i++;
              }

              if (i === textContentItemsStr.length) {
                console.error("Could not find a matching mapping");
              }

              const match = {
                begin: {
                  divIdx: i,
                  offset: matchIdx - iIndex
                }
              };
              matchIdx += matchesLength[m];

              while (i !== end && matchIdx > iIndex + textContentItemsStr[i].length) {
                iIndex += textContentItemsStr[i].length;
                i++;
              }

              match.end = {
                divIdx: i,
                offset: matchIdx - iIndex
              };
              result.push(match);
            }

            return result;
          }

          _renderMatches(matches) {
            if (matches.length === 0) {
              return;
            }

            const {
              findController,
              pageIdx
            } = this;
            const {
              textContentItemsStr,
              textDivs
            } = this;
            const isSelectedPage = pageIdx === findController.selected.pageIdx;
            const selectedMatchIdx = findController.selected.matchIdx;
            const highlightAll = findController.state.highlightAll;
            let prevEnd = null;
            const infinity = {
              divIdx: -1,
              offset: undefined
            };

            function beginText(begin, className) {
              const divIdx = begin.divIdx;
              textDivs[divIdx].textContent = "";
              return appendTextToDiv(divIdx, 0, begin.offset, className);
            }

            function appendTextToDiv(divIdx, fromOffset, toOffset, className) {
              let div = textDivs[divIdx];

              if (div.nodeType === Node.TEXT_NODE) {
                const span = document.createElement("span");
                div.parentNode.insertBefore(span, div);
                span.appendChild(div);
                textDivs[divIdx] = span;
                div = span;
              }

              const content = textContentItemsStr[divIdx].substring(fromOffset, toOffset);
              const node = document.createTextNode(content);

              if (className) {
                const span = document.createElement("span");
                span.className = `${className} appended`;
                span.appendChild(node);
                div.appendChild(span);
                return className.includes("selected") ? span.offsetLeft : 0;
              }

              div.appendChild(node);
              return 0;
            }

            let i0 = selectedMatchIdx,
                i1 = i0 + 1;

            if (highlightAll) {
              i0 = 0;
              i1 = matches.length;
            } else if (!isSelectedPage) {
              return;
            }

            for (let i = i0; i < i1; i++) {
              const match = matches[i];
              const begin = match.begin;
              const end = match.end;
              const isSelected = isSelectedPage && i === selectedMatchIdx;
              const highlightSuffix = isSelected ? " selected" : "";
              let selectedLeft = 0;

              if (!prevEnd || begin.divIdx !== prevEnd.divIdx) {
                if (prevEnd !== null) {
                  appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);
                }

                beginText(begin);
              } else {
                appendTextToDiv(prevEnd.divIdx, prevEnd.offset, begin.offset);
              }

              if (begin.divIdx === end.divIdx) {
                selectedLeft = appendTextToDiv(begin.divIdx, begin.offset, end.offset, "highlight" + highlightSuffix);
              } else {
                selectedLeft = appendTextToDiv(begin.divIdx, begin.offset, infinity.offset, "highlight begin" + highlightSuffix);

                for (let n0 = begin.divIdx + 1, n1 = end.divIdx; n0 < n1; n0++) {
                  textDivs[n0].className = "highlight middle" + highlightSuffix;
                }

                beginText(end, "highlight end" + highlightSuffix);
              }

              prevEnd = end;

              if (isSelected) {
                findController.scrollMatchIntoView({
                  element: textDivs[begin.divIdx],
                  selectedLeft,
                  pageIndex: pageIdx,
                  matchIndex: selectedMatchIdx
                });
              }
            }

            if (prevEnd) {
              appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);
            }
          }

          _updateMatches() {
            if (!this.enabled) {
              return;
            }

            const {
              findController,
              matches,
              pageIdx
            } = this;
            const {
              textContentItemsStr,
              textDivs
            } = this;
            let clearedUntilDivIdx = -1;

            for (let i = 0, ii = matches.length; i < ii; i++) {
              const match = matches[i];
              const begin = Math.max(clearedUntilDivIdx, match.begin.divIdx);

              for (let n = begin, end = match.end.divIdx; n <= end; n++) {
                const div = textDivs[n];
                div.textContent = textContentItemsStr[n];
                div.className = "";
              }

              clearedUntilDivIdx = match.end.divIdx + 1;
            }

            if (!findController?.highlightMatches) {
              return;
            }

            const pageMatches = findController.pageMatches[pageIdx] || null;
            const pageMatchesLength = findController.pageMatchesLength[pageIdx] || null;
            this.matches = this._convertMatches(pageMatches, pageMatchesLength);

            this._renderMatches(this.matches);
          }

        }

        exports.TextHighlighter = TextHighlighter;
        /***/
      },
      /* 16 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DownloadManager = void 0;

        var _pdfjsLib = __w_pdfjs_require__(3);

        ;

        function download(blobUrl, filename) {
          const a = document.createElement("a");

          if (!a.click) {
            throw new Error('DownloadManager: "a.click()" is not supported.');
          }

          a.href = blobUrl;
          a.target = "_parent";

          if ("download" in a) {
            a.download = filename;
          }

          (document.body || document.documentElement).appendChild(a);
          a.click();
          a.remove();
        }

        class DownloadManager {
          constructor() {
            this._openBlobUrls = new WeakMap();
          }

          downloadUrl(url, filename) {
            if (!(0, _pdfjsLib.createValidAbsoluteUrl)(url, "http://example.com")) {
              console.error(`downloadUrl - not a valid URL: ${url}`);
              return;
            }

            download(url + "#pdfjs.action=download", filename);
          }

          downloadData(data, filename, contentType) {
            const blobUrl = URL.createObjectURL(new Blob([data], {
              type: contentType
            }));
            download(blobUrl, filename);
          }

          openOrDownloadData(element, data, filename) {
            const isPdfData = (0, _pdfjsLib.isPdfFile)(filename);
            const contentType = isPdfData ? "application/pdf" : "";

            if (isPdfData) {
              let blobUrl = this._openBlobUrls.get(element);

              if (!blobUrl) {
                blobUrl = URL.createObjectURL(new Blob([data], {
                  type: contentType
                }));

                this._openBlobUrls.set(element, blobUrl);
              }

              let viewerUrl;
              viewerUrl = "?file=" + encodeURIComponent(blobUrl + "#" + filename);

              try {
                window.open(viewerUrl);
                return true;
              } catch (ex) {
                console.error(`openOrDownloadData: ${ex}`);
                URL.revokeObjectURL(blobUrl);

                this._openBlobUrls.delete(element);
              }
            }

            this.downloadData(data, filename, contentType);
            return false;
          }

          download(blob, url, filename, sourceEventType = "download") {
            const blobUrl = URL.createObjectURL(blob);
            download(blobUrl, filename);
          }

        }

        exports.DownloadManager = DownloadManager;
        /***/
      },
      /* 17 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.WaitOnType = exports.EventBus = exports.AutomationEventBus = void 0;
        exports.waitOnEventOrTimeout = waitOnEventOrTimeout;
        const WaitOnType = {
          EVENT: "event",
          TIMEOUT: "timeout"
        };
        exports.WaitOnType = WaitOnType;

        function waitOnEventOrTimeout({
          target,
          name,
          delay = 0
        }) {
          return new Promise(function (resolve, reject) {
            if (typeof target !== "object" || !(name && typeof name === "string") || !(Number.isInteger(delay) && delay >= 0)) {
              throw new Error("waitOnEventOrTimeout - invalid parameters.");
            }

            function handler(type) {
              if (target instanceof EventBus) {
                target._off(name, eventHandler);
              } else {
                target.removeEventListener(name, eventHandler);
              }

              if (timeout) {
                clearTimeout(timeout);
              }

              resolve(type);
            }

            const eventHandler = handler.bind(null, WaitOnType.EVENT);

            if (target instanceof EventBus) {
              target._on(name, eventHandler);
            } else {
              target.addEventListener(name, eventHandler);
            }

            const timeoutHandler = handler.bind(null, WaitOnType.TIMEOUT);
            const timeout = setTimeout(timeoutHandler, delay);
          });
        }

        class EventBus {
          constructor() {
            this._listeners = Object.create(null);
          }

          on(eventName, listener, options = null) {
            this._on(eventName, listener, {
              external: true,
              once: options?.once
            });
          }

          off(eventName, listener, options = null) {
            this._off(eventName, listener, {
              external: true,
              once: options?.once
            });
          }

          dispatch(eventName, data) {
            const eventListeners = this._listeners[eventName];

            if (!eventListeners || eventListeners.length === 0) {
              return;
            }

            let externalListeners;

            for (const {
              listener,
              external,
              once
            } of eventListeners.slice(0)) {
              if (once) {
                this._off(eventName, listener);
              }

              if (external) {
                (externalListeners ||= []).push(listener);
                continue;
              }

              listener(data);
            }

            if (externalListeners) {
              for (const listener of externalListeners) {
                listener(data);
              }

              externalListeners = null;
            }
          }

          _on(eventName, listener, options = null) {
            const eventListeners = this._listeners[eventName] ||= [];
            eventListeners.push({
              listener,
              external: options?.external === true,
              once: options?.once === true
            });
          }

          _off(eventName, listener, options = null) {
            const eventListeners = this._listeners[eventName];

            if (!eventListeners) {
              return;
            }

            for (let i = 0, ii = eventListeners.length; i < ii; i++) {
              if (eventListeners[i].listener === listener) {
                eventListeners.splice(i, 1);
                return;
              }
            }
          }

        }

        exports.EventBus = EventBus;

        class AutomationEventBus extends EventBus {
          dispatch(eventName, data) {
            throw new Error("Not implemented: AutomationEventBus.dispatch");
          }

        }

        exports.AutomationEventBus = AutomationEventBus;
        /***/
      },
      /* 18 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GenericL10n = void 0;

        __w_pdfjs_require__(19);

        var _l10n_utils = __w_pdfjs_require__(4);

        const webL10n = document.webL10n;

        class GenericL10n {
          constructor(lang) {
            this._lang = lang;
            this._ready = new Promise((resolve, reject) => {
              webL10n.setLanguage((0, _l10n_utils.fixupLangCode)(lang), () => {
                resolve(webL10n);
              });
            });
          }

          getLanguage() {
            var _this9 = this;

            return _asyncToGenerator(function* () {
              const l10n = yield _this9._ready;
              return l10n.getLanguage();
            })();
          }

          getDirection() {
            var _this10 = this;

            return _asyncToGenerator(function* () {
              const l10n = yield _this10._ready;
              return l10n.getDirection();
            })();
          }

          get(key, args = null, fallback = (0, _l10n_utils.getL10nFallback)(key, args)) {
            var _this11 = this;

            return _asyncToGenerator(function* () {
              const l10n = yield _this11._ready;
              return l10n.get(key, args, fallback);
            })();
          }

          translate(element) {
            var _this12 = this;

            return _asyncToGenerator(function* () {
              const l10n = yield _this12._ready;
              return l10n.translate(element);
            })();
          }

        }

        exports.GenericL10n = GenericL10n;
        /***/
      },
      /* 19 */

      /***/
      () => {
        document.webL10n = function (window, document, undefined) {
          var gL10nData = {};
          var gTextData = '';
          var gTextProp = 'textContent';
          var gLanguage = '';
          var gMacros = {};
          var gReadyState = 'loading';
          var gAsyncResourceLoading = true;

          function getL10nResourceLinks() {
            return document.querySelectorAll('link[type="application/l10n"]');
          }

          function getL10nDictionary() {
            var script = document.querySelector('script[type="application/l10n"]');
            return script ? JSON.parse(script.innerHTML) : null;
          }

          function getTranslatableChildren(element) {
            return element ? element.querySelectorAll('*[data-l10n-id]') : [];
          }

          function getL10nAttributes(element) {
            if (!element) return {};
            var l10nId = element.getAttribute('data-l10n-id');
            var l10nArgs = element.getAttribute('data-l10n-args');
            var args = {};

            if (l10nArgs) {
              try {
                args = JSON.parse(l10nArgs);
              } catch (e) {
                console.warn('could not parse arguments for #' + l10nId);
              }
            }

            return {
              id: l10nId,
              args: args
            };
          }

          function xhrLoadText(url, onSuccess, onFailure) {
            onSuccess = onSuccess || function _onSuccess(data) {};

            onFailure = onFailure || function _onFailure() {};

            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, gAsyncResourceLoading);

            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=utf-8');
            }

            xhr.onreadystatechange = function () {
              if (xhr.readyState == 4) {
                if (xhr.status == 200 || xhr.status === 0) {
                  onSuccess(xhr.responseText);
                } else {
                  onFailure();
                }
              }
            };

            xhr.onerror = onFailure;
            xhr.ontimeout = onFailure;

            try {
              xhr.send(null);
            } catch (e) {
              onFailure();
            }
          }

          function parseResource(href, lang, successCallback, failureCallback) {
            var baseURL = href.replace(/[^\/]*$/, '') || './';

            function evalString(text) {
              if (text.lastIndexOf('\\') < 0) return text;
              return text.replace(/\\\\/g, '\\').replace(/\\n/g, '\n').replace(/\\r/g, '\r').replace(/\\t/g, '\t').replace(/\\b/g, '\b').replace(/\\f/g, '\f').replace(/\\{/g, '{').replace(/\\}/g, '}').replace(/\\"/g, '"').replace(/\\'/g, "'");
            }

            function parseProperties(text, parsedPropertiesCallback) {
              var dictionary = {};
              var reBlank = /^\s*|\s*$/;
              var reComment = /^\s*#|^\s*$/;
              var reSection = /^\s*\[(.*)\]\s*$/;
              var reImport = /^\s*@import\s+url\((.*)\)\s*$/i;
              var reSplit = /^([^=\s]*)\s*=\s*(.+)$/;

              function parseRawLines(rawText, extendedSyntax, parsedRawLinesCallback) {
                var entries = rawText.replace(reBlank, '').split(/[\r\n]+/);
                var currentLang = '*';
                var genericLang = lang.split('-', 1)[0];
                var skipLang = false;
                var match = '';

                function nextEntry() {
                  while (true) {
                    if (!entries.length) {
                      parsedRawLinesCallback();
                      return;
                    }

                    var line = entries.shift();
                    if (reComment.test(line)) continue;

                    if (extendedSyntax) {
                      match = reSection.exec(line);

                      if (match) {
                        currentLang = match[1].toLowerCase();
                        skipLang = currentLang !== '*' && currentLang !== lang && currentLang !== genericLang;
                        continue;
                      } else if (skipLang) {
                        continue;
                      }

                      match = reImport.exec(line);

                      if (match) {
                        loadImport(baseURL + match[1], nextEntry);
                        return;
                      }
                    }

                    var tmp = line.match(reSplit);

                    if (tmp && tmp.length == 3) {
                      dictionary[tmp[1]] = evalString(tmp[2]);
                    }
                  }
                }

                nextEntry();
              }

              function loadImport(url, callback) {
                xhrLoadText(url, function (content) {
                  parseRawLines(content, false, callback);
                }, function () {
                  console.warn(url + ' not found.');
                  callback();
                });
              }

              parseRawLines(text, true, function () {
                parsedPropertiesCallback(dictionary);
              });
            }

            xhrLoadText(href, function (response) {
              gTextData += response;
              parseProperties(response, function (data) {
                for (var key in data) {
                  var id,
                      prop,
                      index = key.lastIndexOf('.');

                  if (index > 0) {
                    id = key.substring(0, index);
                    prop = key.substring(index + 1);
                  } else {
                    id = key;
                    prop = gTextProp;
                  }

                  if (!gL10nData[id]) {
                    gL10nData[id] = {};
                  }

                  gL10nData[id][prop] = data[key];
                }

                if (successCallback) {
                  successCallback();
                }
              });
            }, failureCallback);
          }

          function loadLocale(lang, callback) {
            if (lang) {
              lang = lang.toLowerCase();
            }

            callback = callback || function _callback() {};

            clear();
            gLanguage = lang;
            var langLinks = getL10nResourceLinks();
            var langCount = langLinks.length;

            if (langCount === 0) {
              var dict = getL10nDictionary();

              if (dict && dict.locales && dict.default_locale) {
                console.log('using the embedded JSON directory, early way out');
                gL10nData = dict.locales[lang];

                if (!gL10nData) {
                  var defaultLocale = dict.default_locale.toLowerCase();

                  for (var anyCaseLang in dict.locales) {
                    anyCaseLang = anyCaseLang.toLowerCase();

                    if (anyCaseLang === lang) {
                      gL10nData = dict.locales[lang];
                      break;
                    } else if (anyCaseLang === defaultLocale) {
                      gL10nData = dict.locales[defaultLocale];
                    }
                  }
                }

                callback();
              } else {
                console.log('no resource to load, early way out');
              }

              gReadyState = 'complete';
              return;
            }

            var onResourceLoaded = null;
            var gResourceCount = 0;

            onResourceLoaded = function () {
              gResourceCount++;

              if (gResourceCount >= langCount) {
                callback();
                gReadyState = 'complete';
              }
            };

            function L10nResourceLink(link) {
              var href = link.href;

              this.load = function (lang, callback) {
                parseResource(href, lang, callback, function () {
                  console.warn(href + ' not found.');
                  console.warn('"' + lang + '" resource not found');
                  gLanguage = '';
                  callback();
                });
              };
            }

            for (var i = 0; i < langCount; i++) {
              var resource = new L10nResourceLink(langLinks[i]);
              resource.load(lang, onResourceLoaded);
            }
          }

          function clear() {
            gL10nData = {};
            gTextData = '';
            gLanguage = '';
          }

          function getPluralRules(lang) {
            var locales2rules = {
              'af': 3,
              'ak': 4,
              'am': 4,
              'ar': 1,
              'asa': 3,
              'az': 0,
              'be': 11,
              'bem': 3,
              'bez': 3,
              'bg': 3,
              'bh': 4,
              'bm': 0,
              'bn': 3,
              'bo': 0,
              'br': 20,
              'brx': 3,
              'bs': 11,
              'ca': 3,
              'cgg': 3,
              'chr': 3,
              'cs': 12,
              'cy': 17,
              'da': 3,
              'de': 3,
              'dv': 3,
              'dz': 0,
              'ee': 3,
              'el': 3,
              'en': 3,
              'eo': 3,
              'es': 3,
              'et': 3,
              'eu': 3,
              'fa': 0,
              'ff': 5,
              'fi': 3,
              'fil': 4,
              'fo': 3,
              'fr': 5,
              'fur': 3,
              'fy': 3,
              'ga': 8,
              'gd': 24,
              'gl': 3,
              'gsw': 3,
              'gu': 3,
              'guw': 4,
              'gv': 23,
              'ha': 3,
              'haw': 3,
              'he': 2,
              'hi': 4,
              'hr': 11,
              'hu': 0,
              'id': 0,
              'ig': 0,
              'ii': 0,
              'is': 3,
              'it': 3,
              'iu': 7,
              'ja': 0,
              'jmc': 3,
              'jv': 0,
              'ka': 0,
              'kab': 5,
              'kaj': 3,
              'kcg': 3,
              'kde': 0,
              'kea': 0,
              'kk': 3,
              'kl': 3,
              'km': 0,
              'kn': 0,
              'ko': 0,
              'ksb': 3,
              'ksh': 21,
              'ku': 3,
              'kw': 7,
              'lag': 18,
              'lb': 3,
              'lg': 3,
              'ln': 4,
              'lo': 0,
              'lt': 10,
              'lv': 6,
              'mas': 3,
              'mg': 4,
              'mk': 16,
              'ml': 3,
              'mn': 3,
              'mo': 9,
              'mr': 3,
              'ms': 0,
              'mt': 15,
              'my': 0,
              'nah': 3,
              'naq': 7,
              'nb': 3,
              'nd': 3,
              'ne': 3,
              'nl': 3,
              'nn': 3,
              'no': 3,
              'nr': 3,
              'nso': 4,
              'ny': 3,
              'nyn': 3,
              'om': 3,
              'or': 3,
              'pa': 3,
              'pap': 3,
              'pl': 13,
              'ps': 3,
              'pt': 3,
              'rm': 3,
              'ro': 9,
              'rof': 3,
              'ru': 11,
              'rwk': 3,
              'sah': 0,
              'saq': 3,
              'se': 7,
              'seh': 3,
              'ses': 0,
              'sg': 0,
              'sh': 11,
              'shi': 19,
              'sk': 12,
              'sl': 14,
              'sma': 7,
              'smi': 7,
              'smj': 7,
              'smn': 7,
              'sms': 7,
              'sn': 3,
              'so': 3,
              'sq': 3,
              'sr': 11,
              'ss': 3,
              'ssy': 3,
              'st': 3,
              'sv': 3,
              'sw': 3,
              'syr': 3,
              'ta': 3,
              'te': 3,
              'teo': 3,
              'th': 0,
              'ti': 4,
              'tig': 3,
              'tk': 3,
              'tl': 4,
              'tn': 3,
              'to': 0,
              'tr': 0,
              'ts': 3,
              'tzm': 22,
              'uk': 11,
              'ur': 3,
              've': 3,
              'vi': 0,
              'vun': 3,
              'wa': 4,
              'wae': 3,
              'wo': 0,
              'xh': 3,
              'xog': 3,
              'yo': 0,
              'zh': 0,
              'zu': 3
            };

            function isIn(n, list) {
              return list.indexOf(n) !== -1;
            }

            function isBetween(n, start, end) {
              return start <= n && n <= end;
            }

            var pluralRules = {
              '0': function (n) {
                return 'other';
              },
              '1': function (n) {
                if (isBetween(n % 100, 3, 10)) return 'few';
                if (n === 0) return 'zero';
                if (isBetween(n % 100, 11, 99)) return 'many';
                if (n == 2) return 'two';
                if (n == 1) return 'one';
                return 'other';
              },
              '2': function (n) {
                if (n !== 0 && n % 10 === 0) return 'many';
                if (n == 2) return 'two';
                if (n == 1) return 'one';
                return 'other';
              },
              '3': function (n) {
                if (n == 1) return 'one';
                return 'other';
              },
              '4': function (n) {
                if (isBetween(n, 0, 1)) return 'one';
                return 'other';
              },
              '5': function (n) {
                if (isBetween(n, 0, 2) && n != 2) return 'one';
                return 'other';
              },
              '6': function (n) {
                if (n === 0) return 'zero';
                if (n % 10 == 1 && n % 100 != 11) return 'one';
                return 'other';
              },
              '7': function (n) {
                if (n == 2) return 'two';
                if (n == 1) return 'one';
                return 'other';
              },
              '8': function (n) {
                if (isBetween(n, 3, 6)) return 'few';
                if (isBetween(n, 7, 10)) return 'many';
                if (n == 2) return 'two';
                if (n == 1) return 'one';
                return 'other';
              },
              '9': function (n) {
                if (n === 0 || n != 1 && isBetween(n % 100, 1, 19)) return 'few';
                if (n == 1) return 'one';
                return 'other';
              },
              '10': function (n) {
                if (isBetween(n % 10, 2, 9) && !isBetween(n % 100, 11, 19)) return 'few';
                if (n % 10 == 1 && !isBetween(n % 100, 11, 19)) return 'one';
                return 'other';
              },
              '11': function (n) {
                if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return 'few';
                if (n % 10 === 0 || isBetween(n % 10, 5, 9) || isBetween(n % 100, 11, 14)) return 'many';
                if (n % 10 == 1 && n % 100 != 11) return 'one';
                return 'other';
              },
              '12': function (n) {
                if (isBetween(n, 2, 4)) return 'few';
                if (n == 1) return 'one';
                return 'other';
              },
              '13': function (n) {
                if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return 'few';
                if (n != 1 && isBetween(n % 10, 0, 1) || isBetween(n % 10, 5, 9) || isBetween(n % 100, 12, 14)) return 'many';
                if (n == 1) return 'one';
                return 'other';
              },
              '14': function (n) {
                if (isBetween(n % 100, 3, 4)) return 'few';
                if (n % 100 == 2) return 'two';
                if (n % 100 == 1) return 'one';
                return 'other';
              },
              '15': function (n) {
                if (n === 0 || isBetween(n % 100, 2, 10)) return 'few';
                if (isBetween(n % 100, 11, 19)) return 'many';
                if (n == 1) return 'one';
                return 'other';
              },
              '16': function (n) {
                if (n % 10 == 1 && n != 11) return 'one';
                return 'other';
              },
              '17': function (n) {
                if (n == 3) return 'few';
                if (n === 0) return 'zero';
                if (n == 6) return 'many';
                if (n == 2) return 'two';
                if (n == 1) return 'one';
                return 'other';
              },
              '18': function (n) {
                if (n === 0) return 'zero';
                if (isBetween(n, 0, 2) && n !== 0 && n != 2) return 'one';
                return 'other';
              },
              '19': function (n) {
                if (isBetween(n, 2, 10)) return 'few';
                if (isBetween(n, 0, 1)) return 'one';
                return 'other';
              },
              '20': function (n) {
                if ((isBetween(n % 10, 3, 4) || n % 10 == 9) && !(isBetween(n % 100, 10, 19) || isBetween(n % 100, 70, 79) || isBetween(n % 100, 90, 99))) return 'few';
                if (n % 1000000 === 0 && n !== 0) return 'many';
                if (n % 10 == 2 && !isIn(n % 100, [12, 72, 92])) return 'two';
                if (n % 10 == 1 && !isIn(n % 100, [11, 71, 91])) return 'one';
                return 'other';
              },
              '21': function (n) {
                if (n === 0) return 'zero';
                if (n == 1) return 'one';
                return 'other';
              },
              '22': function (n) {
                if (isBetween(n, 0, 1) || isBetween(n, 11, 99)) return 'one';
                return 'other';
              },
              '23': function (n) {
                if (isBetween(n % 10, 1, 2) || n % 20 === 0) return 'one';
                return 'other';
              },
              '24': function (n) {
                if (isBetween(n, 3, 10) || isBetween(n, 13, 19)) return 'few';
                if (isIn(n, [2, 12])) return 'two';
                if (isIn(n, [1, 11])) return 'one';
                return 'other';
              }
            };
            var index = locales2rules[lang.replace(/-.*$/, '')];

            if (!(index in pluralRules)) {
              console.warn('plural form unknown for [' + lang + ']');
              return function () {
                return 'other';
              };
            }

            return pluralRules[index];
          }

          gMacros.plural = function (str, param, key, prop) {
            var n = parseFloat(param);
            if (isNaN(n)) return str;
            if (prop != gTextProp) return str;

            if (!gMacros._pluralRules) {
              gMacros._pluralRules = getPluralRules(gLanguage);
            }

            var index = '[' + gMacros._pluralRules(n) + ']';

            if (n === 0 && key + '[zero]' in gL10nData) {
              str = gL10nData[key + '[zero]'][prop];
            } else if (n == 1 && key + '[one]' in gL10nData) {
              str = gL10nData[key + '[one]'][prop];
            } else if (n == 2 && key + '[two]' in gL10nData) {
              str = gL10nData[key + '[two]'][prop];
            } else if (key + index in gL10nData) {
              str = gL10nData[key + index][prop];
            } else if (key + '[other]' in gL10nData) {
              str = gL10nData[key + '[other]'][prop];
            }

            return str;
          };

          function getL10nData(key, args, fallback) {
            var data = gL10nData[key];

            if (!data) {
              console.warn('#' + key + ' is undefined.');

              if (!fallback) {
                return null;
              }

              data = fallback;
            }

            var rv = {};

            for (var prop in data) {
              var str = data[prop];
              str = substIndexes(str, args, key, prop);
              str = substArguments(str, args, key);
              rv[prop] = str;
            }

            return rv;
          }

          function substIndexes(str, args, key, prop) {
            var reIndex = /\{\[\s*([a-zA-Z]+)\(([a-zA-Z]+)\)\s*\]\}/;
            var reMatch = reIndex.exec(str);
            if (!reMatch || !reMatch.length) return str;
            var macroName = reMatch[1];
            var paramName = reMatch[2];
            var param;

            if (args && paramName in args) {
              param = args[paramName];
            } else if (paramName in gL10nData) {
              param = gL10nData[paramName];
            }

            if (macroName in gMacros) {
              var macro = gMacros[macroName];
              str = macro(str, param, key, prop);
            }

            return str;
          }

          function substArguments(str, args, key) {
            var reArgs = /\{\{\s*(.+?)\s*\}\}/g;
            return str.replace(reArgs, function (matched_text, arg) {
              if (args && arg in args) {
                return args[arg];
              }

              if (arg in gL10nData) {
                return gL10nData[arg];
              }

              console.log('argument {{' + arg + '}} for #' + key + ' is undefined.');
              return matched_text;
            });
          }

          function translateElement(element) {
            var l10n = getL10nAttributes(element);
            if (!l10n.id) return;
            var data = getL10nData(l10n.id, l10n.args);

            if (!data) {
              console.warn('#' + l10n.id + ' is undefined.');
              return;
            }

            if (data[gTextProp]) {
              if (getChildElementCount(element) === 0) {
                element[gTextProp] = data[gTextProp];
              } else {
                var children = element.childNodes;
                var found = false;

                for (var i = 0, l = children.length; i < l; i++) {
                  if (children[i].nodeType === 3 && /\S/.test(children[i].nodeValue)) {
                    if (found) {
                      children[i].nodeValue = '';
                    } else {
                      children[i].nodeValue = data[gTextProp];
                      found = true;
                    }
                  }
                }

                if (!found) {
                  var textNode = document.createTextNode(data[gTextProp]);
                  element.insertBefore(textNode, element.firstChild);
                }
              }

              delete data[gTextProp];
            }

            for (var k in data) {
              element[k] = data[k];
            }
          }

          function getChildElementCount(element) {
            if (element.children) {
              return element.children.length;
            }

            if (typeof element.childElementCount !== 'undefined') {
              return element.childElementCount;
            }

            var count = 0;

            for (var i = 0; i < element.childNodes.length; i++) {
              count += element.nodeType === 1 ? 1 : 0;
            }

            return count;
          }

          function translateFragment(element) {
            element = element || document.documentElement;
            var children = getTranslatableChildren(element);
            var elementCount = children.length;

            for (var i = 0; i < elementCount; i++) {
              translateElement(children[i]);
            }

            translateElement(element);
          }

          return {
            get: function (key, args, fallbackString) {
              var index = key.lastIndexOf('.');
              var prop = gTextProp;

              if (index > 0) {
                prop = key.substring(index + 1);
                key = key.substring(0, index);
              }

              var fallback;

              if (fallbackString) {
                fallback = {};
                fallback[prop] = fallbackString;
              }

              var data = getL10nData(key, args, fallback);

              if (data && prop in data) {
                return data[prop];
              }

              return '{{' + key + '}}';
            },
            getData: function () {
              return gL10nData;
            },
            getText: function () {
              return gTextData;
            },
            getLanguage: function () {
              return gLanguage;
            },
            setLanguage: function (lang, callback) {
              loadLocale(lang, function () {
                if (callback) callback();
              });
            },
            getDirection: function () {
              var rtlList = ['ar', 'he', 'fa', 'ps', 'ur'];
              var shortCode = gLanguage.split('-', 1)[0];
              return rtlList.indexOf(shortCode) >= 0 ? 'rtl' : 'ltr';
            },
            translate: translateFragment,
            getReadyState: function () {
              return gReadyState;
            },
            ready: function (callback) {
              if (!callback) {
                return;
              } else if (gReadyState == 'complete' || gReadyState == 'interactive') {
                window.setTimeout(function () {
                  callback();
                });
              } else if (document.addEventListener) {
                document.addEventListener('localized', function once() {
                  document.removeEventListener('localized', once);
                  callback();
                });
              }
            }
          };
        }(window, document);
        /***/

      },
      /* 20 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFFindController = exports.FindState = void 0;

        var _ui_utils = __w_pdfjs_require__(6);

        var _pdfjsLib = __w_pdfjs_require__(3);

        var _pdf_find_utils = __w_pdfjs_require__(21);

        const FindState = {
          FOUND: 0,
          NOT_FOUND: 1,
          WRAPPED: 2,
          PENDING: 3
        };
        exports.FindState = FindState;
        const FIND_TIMEOUT = 250;
        const MATCH_SCROLL_OFFSET_TOP = -50;
        const MATCH_SCROLL_OFFSET_LEFT = -400;
        const CHARACTERS_TO_NORMALIZE = {
          "\u2010": "-",
          "\u2018": "'",
          "\u2019": "'",
          "\u201A": "'",
          "\u201B": "'",
          "\u201C": '"',
          "\u201D": '"',
          "\u201E": '"',
          "\u201F": '"',
          "\u00BC": "1/4",
          "\u00BD": "1/2",
          "\u00BE": "3/4"
        };
        const DIACRITICS_EXCEPTION = new Set([0x3099, 0x309a, 0x094d, 0x09cd, 0x0a4d, 0x0acd, 0x0b4d, 0x0bcd, 0x0c4d, 0x0ccd, 0x0d3b, 0x0d3c, 0x0d4d, 0x0dca, 0x0e3a, 0x0eba, 0x0f84, 0x1039, 0x103a, 0x1714, 0x1734, 0x17d2, 0x1a60, 0x1b44, 0x1baa, 0x1bab, 0x1bf2, 0x1bf3, 0x2d7f, 0xa806, 0xa82c, 0xa8c4, 0xa953, 0xa9c0, 0xaaf6, 0xabed, 0x0c56, 0x0f71, 0x0f72, 0x0f7a, 0x0f7b, 0x0f7c, 0x0f7d, 0x0f80, 0x0f74]);
        const DIACRITICS_EXCEPTION_STR = [...DIACRITICS_EXCEPTION.values()].map(x => String.fromCharCode(x)).join("");
        const DIACRITICS_REG_EXP = /\p{M}+/gu;
        const SPECIAL_CHARS_REG_EXP = /([.*+?^${}()|[\]\\])|(\p{P})|(\s+)|(\p{M})|(\p{L})/gu;
        const NOT_DIACRITIC_FROM_END_REG_EXP = /([^\p{M}])\p{M}*$/u;
        const NOT_DIACRITIC_FROM_START_REG_EXP = /^\p{M}*([^\p{M}])/u;
        let normalizationRegex = null;

        function normalize(text) {
          if (!normalizationRegex) {
            const replace = Object.keys(CHARACTERS_TO_NORMALIZE).join("");
            normalizationRegex = new RegExp(`([${replace}])|(\\p{M}+(?:-\\n)?)|(\\S-\\n)|(\\n)`, "gum");
          }

          const rawDiacriticsPositions = [];
          let m;

          while ((m = DIACRITICS_REG_EXP.exec(text)) !== null) {
            rawDiacriticsPositions.push([m[0].length, m.index]);
          }

          let normalized = text.normalize("NFD");
          const positions = [[0, 0]];
          let k = 0;
          let shift = 0;
          let shiftOrigin = 0;
          let eol = 0;
          let hasDiacritics = false;
          normalized = normalized.replace(normalizationRegex, (match, p1, p2, p3, p4, i) => {
            i -= shiftOrigin;

            if (p1) {
              const replacement = CHARACTERS_TO_NORMALIZE[match];
              const jj = replacement.length;

              for (let j = 1; j < jj; j++) {
                positions.push([i - shift + j, shift - j]);
              }

              shift -= jj - 1;
              return replacement;
            }

            if (p2) {
              const hasTrailingDashEOL = p2.endsWith("\n");
              const len = hasTrailingDashEOL ? p2.length - 2 : p2.length;
              hasDiacritics = true;
              let jj = len;

              if (i + eol === rawDiacriticsPositions[k]?.[1]) {
                jj -= rawDiacriticsPositions[k][0];
                ++k;
              }

              for (let j = 1; j < jj + 1; j++) {
                positions.push([i - 1 - shift + j, shift - j]);
              }

              shift -= jj;
              shiftOrigin += jj;

              if (hasTrailingDashEOL) {
                i += len - 1;
                positions.push([i - shift + 1, 1 + shift]);
                shift += 1;
                shiftOrigin += 1;
                eol += 1;
                return p2.slice(0, len);
              }

              return p2;
            }

            if (p3) {
              positions.push([i - shift + 1, 1 + shift]);
              shift += 1;
              shiftOrigin += 1;
              eol += 1;
              return p3.charAt(0);
            }

            positions.push([i - shift + 1, shift - 1]);
            shift -= 1;
            shiftOrigin += 1;
            eol += 1;
            return " ";
          });
          positions.push([normalized.length, shift]);
          return [normalized, positions, hasDiacritics];
        }

        function getOriginalIndex(diffs, pos, len) {
          if (!diffs) {
            return [pos, len];
          }

          const start = pos;
          const end = pos + len;
          let i = (0, _ui_utils.binarySearchFirstItem)(diffs, x => x[0] >= start);

          if (diffs[i][0] > start) {
            --i;
          }

          let j = (0, _ui_utils.binarySearchFirstItem)(diffs, x => x[0] >= end, i);

          if (diffs[j][0] > end) {
            --j;
          }

          return [start + diffs[i][1], len + diffs[j][1] - diffs[i][1]];
        }

        class PDFFindController {
          constructor({
            linkService,
            eventBus
          }) {
            this._linkService = linkService;
            this._eventBus = eventBus;
            this.#reset();

            eventBus._on("find", this.#onFind.bind(this));

            eventBus._on("findbarclose", this.#onFindBarClose.bind(this));
          }

          get highlightMatches() {
            return this._highlightMatches;
          }

          get pageMatches() {
            return this._pageMatches;
          }

          get pageMatchesLength() {
            return this._pageMatchesLength;
          }

          get selected() {
            return this._selected;
          }

          get state() {
            return this._state;
          }

          setDocument(pdfDocument) {
            if (this._pdfDocument) {
              this.#reset();
            }

            if (!pdfDocument) {
              return;
            }

            this._pdfDocument = pdfDocument;

            this._firstPageCapability.resolve();
          }

          #onFind(state) {
            if (!state) {
              return;
            }

            const pdfDocument = this._pdfDocument;
            const {
              type
            } = state;

            if (this._state === null || this.#shouldDirtyMatch(state)) {
              this._dirtyMatch = true;
            }

            this._state = state;

            if (type !== "highlightallchange") {
              this.#updateUIState(FindState.PENDING);
            }

            this._firstPageCapability.promise.then(() => {
              if (!this._pdfDocument || pdfDocument && this._pdfDocument !== pdfDocument) {
                return;
              }

              this.#extractText();
              const findbarClosed = !this._highlightMatches;
              const pendingTimeout = !!this._findTimeout;

              if (this._findTimeout) {
                clearTimeout(this._findTimeout);
                this._findTimeout = null;
              }

              if (!type) {
                this._findTimeout = setTimeout(() => {
                  this.#nextMatch();
                  this._findTimeout = null;
                }, FIND_TIMEOUT);
              } else if (this._dirtyMatch) {
                this.#nextMatch();
              } else if (type === "again") {
                this.#nextMatch();

                if (findbarClosed && this._state.highlightAll) {
                  this.#updateAllPages();
                }
              } else if (type === "highlightallchange") {
                if (pendingTimeout) {
                  this.#nextMatch();
                } else {
                  this._highlightMatches = true;
                }

                this.#updateAllPages();
              } else {
                this.#nextMatch();
              }
            });
          }

          scrollMatchIntoView({
            element = null,
            selectedLeft = 0,
            pageIndex = -1,
            matchIndex = -1
          }) {
            if (!this._scrollMatches || !element) {
              return;
            } else if (matchIndex === -1 || matchIndex !== this._selected.matchIdx) {
              return;
            } else if (pageIndex === -1 || pageIndex !== this._selected.pageIdx) {
              return;
            }

            this._scrollMatches = false;
            const spot = {
              top: MATCH_SCROLL_OFFSET_TOP,
              left: selectedLeft + MATCH_SCROLL_OFFSET_LEFT
            };
            (0, _ui_utils.scrollIntoView)(element, spot, true);
          }

          #reset() {
            this._highlightMatches = false;
            this._scrollMatches = false;
            this._pdfDocument = null;
            this._pageMatches = [];
            this._pageMatchesLength = [];
            this._state = null;
            this._selected = {
              pageIdx: -1,
              matchIdx: -1
            };
            this._offset = {
              pageIdx: null,
              matchIdx: null,
              wrapped: false
            };
            this._extractTextPromises = [];
            this._pageContents = [];
            this._pageDiffs = [];
            this._hasDiacritics = [];
            this._matchesCountTotal = 0;
            this._pagesToSearch = null;
            this._pendingFindMatches = new Set();
            this._resumePageIdx = null;
            this._dirtyMatch = false;
            clearTimeout(this._findTimeout);
            this._findTimeout = null;
            this._firstPageCapability = (0, _pdfjsLib.createPromiseCapability)();
          }

          get #query() {
            if (this._state.query !== this._rawQuery) {
              this._rawQuery = this._state.query;
              [this._normalizedQuery] = normalize(this._state.query);
            }

            return this._normalizedQuery;
          }

          #shouldDirtyMatch(state) {
            if (state.query !== this._state.query) {
              return true;
            }

            switch (state.type) {
              case "again":
                const pageNumber = this._selected.pageIdx + 1;
                const linkService = this._linkService;

                if (pageNumber >= 1 && pageNumber <= linkService.pagesCount && pageNumber !== linkService.page && !linkService.isPageVisible(pageNumber)) {
                  return true;
                }

                return false;

              case "highlightallchange":
                return false;
            }

            return true;
          }

          #isEntireWord(content, startIdx, length) {
            let match = content.slice(0, startIdx).match(NOT_DIACRITIC_FROM_END_REG_EXP);

            if (match) {
              const first = content.charCodeAt(startIdx);
              const limit = match[1].charCodeAt(0);

              if ((0, _pdf_find_utils.getCharacterType)(first) === (0, _pdf_find_utils.getCharacterType)(limit)) {
                return false;
              }
            }

            match = content.slice(startIdx + length).match(NOT_DIACRITIC_FROM_START_REG_EXP);

            if (match) {
              const last = content.charCodeAt(startIdx + length - 1);
              const limit = match[1].charCodeAt(0);

              if ((0, _pdf_find_utils.getCharacterType)(last) === (0, _pdf_find_utils.getCharacterType)(limit)) {
                return false;
              }
            }

            return true;
          }

          #calculateRegExpMatch(query, entireWord, pageIndex, pageContent) {
            const matches = [],
                  matchesLength = [];
            const diffs = this._pageDiffs[pageIndex];
            let match;

            while ((match = query.exec(pageContent)) !== null) {
              if (entireWord && !this.#isEntireWord(pageContent, match.index, match[0].length)) {
                continue;
              }

              const [matchPos, matchLen] = getOriginalIndex(diffs, match.index, match[0].length);

              if (matchLen) {
                matches.push(matchPos);
                matchesLength.push(matchLen);
              }
            }

            this._pageMatches[pageIndex] = matches;
            this._pageMatchesLength[pageIndex] = matchesLength;
          }

          #convertToRegExpString(query, hasDiacritics) {
            const {
              matchDiacritics
            } = this._state;
            let isUnicode = false;
            query = query.replace(SPECIAL_CHARS_REG_EXP, (match, p1, p2, p3, p4, p5) => {
              if (p1) {
                return `[ ]*\\${p1}[ ]*`;
              }

              if (p2) {
                return `[ ]*${p2}[ ]*`;
              }

              if (p3) {
                return "[ ]+";
              }

              if (matchDiacritics) {
                return p4 || p5;
              }

              if (p4) {
                return DIACRITICS_EXCEPTION.has(p4.charCodeAt(0)) ? p4 : "";
              }

              if (hasDiacritics) {
                isUnicode = true;
                return `${p5}\\p{M}*`;
              }

              return p5;
            });
            const trailingSpaces = "[ ]*";

            if (query.endsWith(trailingSpaces)) {
              query = query.slice(0, query.length - trailingSpaces.length);
            }

            if (matchDiacritics) {
              if (hasDiacritics) {
                isUnicode = true;
                query = `${query}(?=[${DIACRITICS_EXCEPTION_STR}]|[^\\p{M}]|$)`;
              }
            }

            return [isUnicode, query];
          }

          #calculateMatch(pageIndex) {
            let query = this.#query;

            if (query.length === 0) {
              return;
            }

            const {
              caseSensitive,
              entireWord,
              phraseSearch
            } = this._state;
            const pageContent = this._pageContents[pageIndex];
            const hasDiacritics = this._hasDiacritics[pageIndex];
            let isUnicode = false;

            if (phraseSearch) {
              [isUnicode, query] = this.#convertToRegExpString(query, hasDiacritics);
            } else {
              const match = query.match(/\S+/g);

              if (match) {
                query = match.sort().reverse().map(q => {
                  const [isUnicodePart, queryPart] = this.#convertToRegExpString(q, hasDiacritics);
                  isUnicode ||= isUnicodePart;
                  return `(${queryPart})`;
                }).join("|");
              }
            }

            const flags = `g${isUnicode ? "u" : ""}${caseSensitive ? "" : "i"}`;
            query = new RegExp(query, flags);
            this.#calculateRegExpMatch(query, entireWord, pageIndex, pageContent);

            if (this._state.highlightAll) {
              this.#updatePage(pageIndex);
            }

            if (this._resumePageIdx === pageIndex) {
              this._resumePageIdx = null;
              this.#nextPageMatch();
            }

            const pageMatchesCount = this._pageMatches[pageIndex].length;

            if (pageMatchesCount > 0) {
              this._matchesCountTotal += pageMatchesCount;
              this.#updateUIResultsCount();
            }
          }

          #extractText() {
            if (this._extractTextPromises.length > 0) {
              return;
            }

            let promise = Promise.resolve();

            for (let i = 0, ii = this._linkService.pagesCount; i < ii; i++) {
              const extractTextCapability = (0, _pdfjsLib.createPromiseCapability)();
              this._extractTextPromises[i] = extractTextCapability.promise;
              promise = promise.then(() => {
                return this._pdfDocument.getPage(i + 1).then(pdfPage => {
                  return pdfPage.getTextContent();
                }).then(textContent => {
                  const strBuf = [];

                  for (const textItem of textContent.items) {
                    strBuf.push(textItem.str);

                    if (textItem.hasEOL) {
                      strBuf.push("\n");
                    }
                  }

                  [this._pageContents[i], this._pageDiffs[i], this._hasDiacritics[i]] = normalize(strBuf.join(""));
                  extractTextCapability.resolve();
                }, reason => {
                  console.error(`Unable to get text content for page ${i + 1}`, reason);
                  this._pageContents[i] = "";
                  this._pageDiffs[i] = null;
                  this._hasDiacritics[i] = false;
                  extractTextCapability.resolve();
                });
              });
            }
          }

          #updatePage(index) {
            if (this._scrollMatches && this._selected.pageIdx === index) {
              this._linkService.page = index + 1;
            }

            this._eventBus.dispatch("updatetextlayermatches", {
              source: this,
              pageIndex: index
            });
          }

          #updateAllPages() {
            this._eventBus.dispatch("updatetextlayermatches", {
              source: this,
              pageIndex: -1
            });
          }

          #nextMatch() {
            const previous = this._state.findPrevious;
            const currentPageIndex = this._linkService.page - 1;
            const numPages = this._linkService.pagesCount;
            this._highlightMatches = true;

            if (this._dirtyMatch) {
              this._dirtyMatch = false;
              this._selected.pageIdx = this._selected.matchIdx = -1;
              this._offset.pageIdx = currentPageIndex;
              this._offset.matchIdx = null;
              this._offset.wrapped = false;
              this._resumePageIdx = null;
              this._pageMatches.length = 0;
              this._pageMatchesLength.length = 0;
              this._matchesCountTotal = 0;
              this.#updateAllPages();

              for (let i = 0; i < numPages; i++) {
                if (this._pendingFindMatches.has(i)) {
                  continue;
                }

                this._pendingFindMatches.add(i);

                this._extractTextPromises[i].then(() => {
                  this._pendingFindMatches.delete(i);

                  this.#calculateMatch(i);
                });
              }
            }

            if (this.#query === "") {
              this.#updateUIState(FindState.FOUND);
              return;
            }

            if (this._resumePageIdx) {
              return;
            }

            const offset = this._offset;
            this._pagesToSearch = numPages;

            if (offset.matchIdx !== null) {
              const numPageMatches = this._pageMatches[offset.pageIdx].length;

              if (!previous && offset.matchIdx + 1 < numPageMatches || previous && offset.matchIdx > 0) {
                offset.matchIdx = previous ? offset.matchIdx - 1 : offset.matchIdx + 1;
                this.#updateMatch(true);
                return;
              }

              this.#advanceOffsetPage(previous);
            }

            this.#nextPageMatch();
          }

          #matchesReady(matches) {
            const offset = this._offset;
            const numMatches = matches.length;
            const previous = this._state.findPrevious;

            if (numMatches) {
              offset.matchIdx = previous ? numMatches - 1 : 0;
              this.#updateMatch(true);
              return true;
            }

            this.#advanceOffsetPage(previous);

            if (offset.wrapped) {
              offset.matchIdx = null;

              if (this._pagesToSearch < 0) {
                this.#updateMatch(false);
                return true;
              }
            }

            return false;
          }

          #nextPageMatch() {
            if (this._resumePageIdx !== null) {
              console.error("There can only be one pending page.");
            }

            let matches = null;

            do {
              const pageIdx = this._offset.pageIdx;
              matches = this._pageMatches[pageIdx];

              if (!matches) {
                this._resumePageIdx = pageIdx;
                break;
              }
            } while (!this.#matchesReady(matches));
          }

          #advanceOffsetPage(previous) {
            const offset = this._offset;
            const numPages = this._linkService.pagesCount;
            offset.pageIdx = previous ? offset.pageIdx - 1 : offset.pageIdx + 1;
            offset.matchIdx = null;
            this._pagesToSearch--;

            if (offset.pageIdx >= numPages || offset.pageIdx < 0) {
              offset.pageIdx = previous ? numPages - 1 : 0;
              offset.wrapped = true;
            }
          }

          #updateMatch(found = false) {
            let state = FindState.NOT_FOUND;
            const wrapped = this._offset.wrapped;
            this._offset.wrapped = false;

            if (found) {
              const previousPage = this._selected.pageIdx;
              this._selected.pageIdx = this._offset.pageIdx;
              this._selected.matchIdx = this._offset.matchIdx;
              state = wrapped ? FindState.WRAPPED : FindState.FOUND;

              if (previousPage !== -1 && previousPage !== this._selected.pageIdx) {
                this.#updatePage(previousPage);
              }
            }

            this.#updateUIState(state, this._state.findPrevious);

            if (this._selected.pageIdx !== -1) {
              this._scrollMatches = true;
              this.#updatePage(this._selected.pageIdx);
            }
          }

          #onFindBarClose(evt) {
            const pdfDocument = this._pdfDocument;

            this._firstPageCapability.promise.then(() => {
              if (!this._pdfDocument || pdfDocument && this._pdfDocument !== pdfDocument) {
                return;
              }

              if (this._findTimeout) {
                clearTimeout(this._findTimeout);
                this._findTimeout = null;
              }

              if (this._resumePageIdx) {
                this._resumePageIdx = null;
                this._dirtyMatch = true;
              }

              this.#updateUIState(FindState.FOUND);
              this._highlightMatches = false;
              this.#updateAllPages();
            });
          }

          #requestMatchesCount() {
            const {
              pageIdx,
              matchIdx
            } = this._selected;
            let current = 0,
                total = this._matchesCountTotal;

            if (matchIdx !== -1) {
              for (let i = 0; i < pageIdx; i++) {
                current += this._pageMatches[i]?.length || 0;
              }

              current += matchIdx + 1;
            }

            if (current < 1 || current > total) {
              current = total = 0;
            }

            return {
              current,
              total
            };
          }

          #updateUIResultsCount() {
            this._eventBus.dispatch("updatefindmatchescount", {
              source: this,
              matchesCount: this.#requestMatchesCount()
            });
          }

          #updateUIState(state, previous = false) {
            this._eventBus.dispatch("updatefindcontrolstate", {
              source: this,
              state,
              previous,
              matchesCount: this.#requestMatchesCount(),
              rawQuery: this._state?.query ?? null
            });
          }

        }

        exports.PDFFindController = PDFFindController;
        /***/
      },
      /* 21 */

      /***/
      (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CharacterType = void 0;
        exports.getCharacterType = getCharacterType;
        const CharacterType = {
          SPACE: 0,
          ALPHA_LETTER: 1,
          PUNCT: 2,
          HAN_LETTER: 3,
          KATAKANA_LETTER: 4,
          HIRAGANA_LETTER: 5,
          HALFWIDTH_KATAKANA_LETTER: 6,
          THAI_LETTER: 7
        };
        exports.CharacterType = CharacterType;

        function isAlphabeticalScript(charCode) {
          return charCode < 0x2e80;
        }

        function isAscii(charCode) {
          return (charCode & 0xff80) === 0;
        }

        function isAsciiAlpha(charCode) {
          return charCode >= 0x61 && charCode <= 0x7a || charCode >= 0x41 && charCode <= 0x5a;
        }

        function isAsciiDigit(charCode) {
          return charCode >= 0x30 && charCode <= 0x39;
        }

        function isAsciiSpace(charCode) {
          return charCode === 0x20 || charCode === 0x09 || charCode === 0x0d || charCode === 0x0a;
        }

        function isHan(charCode) {
          return charCode >= 0x3400 && charCode <= 0x9fff || charCode >= 0xf900 && charCode <= 0xfaff;
        }

        function isKatakana(charCode) {
          return charCode >= 0x30a0 && charCode <= 0x30ff;
        }

        function isHiragana(charCode) {
          return charCode >= 0x3040 && charCode <= 0x309f;
        }

        function isHalfwidthKatakana(charCode) {
          return charCode >= 0xff60 && charCode <= 0xff9f;
        }

        function isThai(charCode) {
          return (charCode & 0xff80) === 0x0e00;
        }

        function getCharacterType(charCode) {
          if (isAlphabeticalScript(charCode)) {
            if (isAscii(charCode)) {
              if (isAsciiSpace(charCode)) {
                return CharacterType.SPACE;
              } else if (isAsciiAlpha(charCode) || isAsciiDigit(charCode) || charCode === 0x5f) {
                return CharacterType.ALPHA_LETTER;
              }

              return CharacterType.PUNCT;
            } else if (isThai(charCode)) {
              return CharacterType.THAI_LETTER;
            } else if (charCode === 0xa0) {
              return CharacterType.SPACE;
            }

            return CharacterType.ALPHA_LETTER;
          }

          if (isHan(charCode)) {
            return CharacterType.HAN_LETTER;
          } else if (isKatakana(charCode)) {
            return CharacterType.KATAKANA_LETTER;
          } else if (isHiragana(charCode)) {
            return CharacterType.HIRAGANA_LETTER;
          } else if (isHalfwidthKatakana(charCode)) {
            return CharacterType.HALFWIDTH_KATAKANA_LETTER;
          }

          return CharacterType.ALPHA_LETTER;
        }
        /***/

      },
      /* 22 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFHistory = void 0;
        exports.isDestArraysEqual = isDestArraysEqual;
        exports.isDestHashesEqual = isDestHashesEqual;

        var _ui_utils = __w_pdfjs_require__(6);

        var _event_utils = __w_pdfjs_require__(17);

        const HASH_CHANGE_TIMEOUT = 1000;
        const POSITION_UPDATED_THRESHOLD = 50;
        const UPDATE_VIEWAREA_TIMEOUT = 1000;

        function getCurrentHash() {
          return document.location.hash;
        }

        class PDFHistory {
          constructor({
            linkService,
            eventBus
          }) {
            this.linkService = linkService;
            this.eventBus = eventBus;
            this._initialized = false;
            this._fingerprint = "";
            this.reset();
            this._boundEvents = null;

            this.eventBus._on("pagesinit", () => {
              this._isPagesLoaded = false;

              this.eventBus._on("pagesloaded", evt => {
                this._isPagesLoaded = !!evt.pagesCount;
              }, {
                once: true
              });
            });
          }

          initialize({
            fingerprint,
            resetHistory = false,
            updateUrl = false
          }) {
            if (!fingerprint || typeof fingerprint !== "string") {
              console.error('PDFHistory.initialize: The "fingerprint" must be a non-empty string.');
              return;
            }

            if (this._initialized) {
              this.reset();
            }

            const reInitialized = this._fingerprint !== "" && this._fingerprint !== fingerprint;
            this._fingerprint = fingerprint;
            this._updateUrl = updateUrl === true;
            this._initialized = true;

            this._bindEvents();

            const state = window.history.state;
            this._popStateInProgress = false;
            this._blockHashChange = 0;
            this._currentHash = getCurrentHash();
            this._numPositionUpdates = 0;
            this._uid = this._maxUid = 0;
            this._destination = null;
            this._position = null;

            if (!this._isValidState(state, true) || resetHistory) {
              const {
                hash,
                page,
                rotation
              } = this._parseCurrentHash(true);

              if (!hash || reInitialized || resetHistory) {
                this._pushOrReplaceState(null, true);

                return;
              }

              this._pushOrReplaceState({
                hash,
                page,
                rotation
              }, true);

              return;
            }

            const destination = state.destination;

            this._updateInternalState(destination, state.uid, true);

            if (destination.rotation !== undefined) {
              this._initialRotation = destination.rotation;
            }

            if (destination.dest) {
              this._initialBookmark = JSON.stringify(destination.dest);
              this._destination.page = null;
            } else if (destination.hash) {
              this._initialBookmark = destination.hash;
            } else if (destination.page) {
              this._initialBookmark = `page=${destination.page}`;
            }
          }

          reset() {
            if (this._initialized) {
              this._pageHide();

              this._initialized = false;

              this._unbindEvents();
            }

            if (this._updateViewareaTimeout) {
              clearTimeout(this._updateViewareaTimeout);
              this._updateViewareaTimeout = null;
            }

            this._initialBookmark = null;
            this._initialRotation = null;
          }

          push({
            namedDest = null,
            explicitDest,
            pageNumber
          }) {
            if (!this._initialized) {
              return;
            }

            if (namedDest && typeof namedDest !== "string") {
              console.error("PDFHistory.push: " + `"${namedDest}" is not a valid namedDest parameter.`);
              return;
            } else if (!Array.isArray(explicitDest)) {
              console.error("PDFHistory.push: " + `"${explicitDest}" is not a valid explicitDest parameter.`);
              return;
            } else if (!this._isValidPage(pageNumber)) {
              if (pageNumber !== null || this._destination) {
                console.error("PDFHistory.push: " + `"${pageNumber}" is not a valid pageNumber parameter.`);
                return;
              }
            }

            const hash = namedDest || JSON.stringify(explicitDest);

            if (!hash) {
              return;
            }

            let forceReplace = false;

            if (this._destination && (isDestHashesEqual(this._destination.hash, hash) || isDestArraysEqual(this._destination.dest, explicitDest))) {
              if (this._destination.page) {
                return;
              }

              forceReplace = true;
            }

            if (this._popStateInProgress && !forceReplace) {
              return;
            }

            this._pushOrReplaceState({
              dest: explicitDest,
              hash,
              page: pageNumber,
              rotation: this.linkService.rotation
            }, forceReplace);

            if (!this._popStateInProgress) {
              this._popStateInProgress = true;
              Promise.resolve().then(() => {
                this._popStateInProgress = false;
              });
            }
          }

          pushPage(pageNumber) {
            if (!this._initialized) {
              return;
            }

            if (!this._isValidPage(pageNumber)) {
              console.error(`PDFHistory.pushPage: "${pageNumber}" is not a valid page number.`);
              return;
            }

            if (this._destination?.page === pageNumber) {
              return;
            }

            if (this._popStateInProgress) {
              return;
            }

            this._pushOrReplaceState({
              dest: null,
              hash: `page=${pageNumber}`,
              page: pageNumber,
              rotation: this.linkService.rotation
            });

            if (!this._popStateInProgress) {
              this._popStateInProgress = true;
              Promise.resolve().then(() => {
                this._popStateInProgress = false;
              });
            }
          }

          pushCurrentPosition() {
            if (!this._initialized || this._popStateInProgress) {
              return;
            }

            this._tryPushCurrentPosition();
          }

          back() {
            if (!this._initialized || this._popStateInProgress) {
              return;
            }

            const state = window.history.state;

            if (this._isValidState(state) && state.uid > 0) {
              window.history.back();
            }
          }

          forward() {
            if (!this._initialized || this._popStateInProgress) {
              return;
            }

            const state = window.history.state;

            if (this._isValidState(state) && state.uid < this._maxUid) {
              window.history.forward();
            }
          }

          get popStateInProgress() {
            return this._initialized && (this._popStateInProgress || this._blockHashChange > 0);
          }

          get initialBookmark() {
            return this._initialized ? this._initialBookmark : null;
          }

          get initialRotation() {
            return this._initialized ? this._initialRotation : null;
          }

          _pushOrReplaceState(destination, forceReplace = false) {
            const shouldReplace = forceReplace || !this._destination;
            const newState = {
              fingerprint: this._fingerprint,
              uid: shouldReplace ? this._uid : this._uid + 1,
              destination
            };

            this._updateInternalState(destination, newState.uid);

            let newUrl;

            if (this._updateUrl && destination?.hash) {
              const baseUrl = document.location.href.split("#")[0];

              if (!baseUrl.startsWith("file://")) {
                newUrl = `${baseUrl}#${destination.hash}`;
              }
            }

            if (shouldReplace) {
              window.history.replaceState(newState, "", newUrl);
            } else {
              window.history.pushState(newState, "", newUrl);
            }
          }

          _tryPushCurrentPosition(temporary = false) {
            if (!this._position) {
              return;
            }

            let position = this._position;

            if (temporary) {
              position = Object.assign(Object.create(null), this._position);
              position.temporary = true;
            }

            if (!this._destination) {
              this._pushOrReplaceState(position);

              return;
            }

            if (this._destination.temporary) {
              this._pushOrReplaceState(position, true);

              return;
            }

            if (this._destination.hash === position.hash) {
              return;
            }

            if (!this._destination.page && (POSITION_UPDATED_THRESHOLD <= 0 || this._numPositionUpdates <= POSITION_UPDATED_THRESHOLD)) {
              return;
            }

            let forceReplace = false;

            if (this._destination.page >= position.first && this._destination.page <= position.page) {
              if (this._destination.dest !== undefined || !this._destination.first) {
                return;
              }

              forceReplace = true;
            }

            this._pushOrReplaceState(position, forceReplace);
          }

          _isValidPage(val) {
            return Number.isInteger(val) && val > 0 && val <= this.linkService.pagesCount;
          }

          _isValidState(state, checkReload = false) {
            if (!state) {
              return false;
            }

            if (state.fingerprint !== this._fingerprint) {
              if (checkReload) {
                if (typeof state.fingerprint !== "string" || state.fingerprint.length !== this._fingerprint.length) {
                  return false;
                }

                const [perfEntry] = performance.getEntriesByType("navigation");

                if (perfEntry?.type !== "reload") {
                  return false;
                }
              } else {
                return false;
              }
            }

            if (!Number.isInteger(state.uid) || state.uid < 0) {
              return false;
            }

            if (state.destination === null || typeof state.destination !== "object") {
              return false;
            }

            return true;
          }

          _updateInternalState(destination, uid, removeTemporary = false) {
            if (this._updateViewareaTimeout) {
              clearTimeout(this._updateViewareaTimeout);
              this._updateViewareaTimeout = null;
            }

            if (removeTemporary && destination?.temporary) {
              delete destination.temporary;
            }

            this._destination = destination;
            this._uid = uid;
            this._maxUid = Math.max(this._maxUid, uid);
            this._numPositionUpdates = 0;
          }

          _parseCurrentHash(checkNameddest = false) {
            const hash = unescape(getCurrentHash()).substring(1);
            const params = (0, _ui_utils.parseQueryString)(hash);
            const nameddest = params.get("nameddest") || "";
            let page = params.get("page") | 0;

            if (!this._isValidPage(page) || checkNameddest && nameddest.length > 0) {
              page = null;
            }

            return {
              hash,
              page,
              rotation: this.linkService.rotation
            };
          }

          _updateViewarea({
            location
          }) {
            if (this._updateViewareaTimeout) {
              clearTimeout(this._updateViewareaTimeout);
              this._updateViewareaTimeout = null;
            }

            this._position = {
              hash: location.pdfOpenParams.substring(1),
              page: this.linkService.page,
              first: location.pageNumber,
              rotation: location.rotation
            };

            if (this._popStateInProgress) {
              return;
            }

            if (POSITION_UPDATED_THRESHOLD > 0 && this._isPagesLoaded && this._destination && !this._destination.page) {
              this._numPositionUpdates++;
            }

            if (UPDATE_VIEWAREA_TIMEOUT > 0) {
              this._updateViewareaTimeout = setTimeout(() => {
                if (!this._popStateInProgress) {
                  this._tryPushCurrentPosition(true);
                }

                this._updateViewareaTimeout = null;
              }, UPDATE_VIEWAREA_TIMEOUT);
            }
          }

          _popState({
            state
          }) {
            const newHash = getCurrentHash(),
                  hashChanged = this._currentHash !== newHash;
            this._currentHash = newHash;

            if (!state) {
              this._uid++;

              const {
                hash,
                page,
                rotation
              } = this._parseCurrentHash();

              this._pushOrReplaceState({
                hash,
                page,
                rotation
              }, true);

              return;
            }

            if (!this._isValidState(state)) {
              return;
            }

            this._popStateInProgress = true;

            if (hashChanged) {
              this._blockHashChange++;
              (0, _event_utils.waitOnEventOrTimeout)({
                target: window,
                name: "hashchange",
                delay: HASH_CHANGE_TIMEOUT
              }).then(() => {
                this._blockHashChange--;
              });
            }

            const destination = state.destination;

            this._updateInternalState(destination, state.uid, true);

            if ((0, _ui_utils.isValidRotation)(destination.rotation)) {
              this.linkService.rotation = destination.rotation;
            }

            if (destination.dest) {
              this.linkService.goToDestination(destination.dest);
            } else if (destination.hash) {
              this.linkService.setHash(destination.hash);
            } else if (destination.page) {
              this.linkService.page = destination.page;
            }

            Promise.resolve().then(() => {
              this._popStateInProgress = false;
            });
          }

          _pageHide() {
            if (!this._destination || this._destination.temporary) {
              this._tryPushCurrentPosition();
            }
          }

          _bindEvents() {
            if (this._boundEvents) {
              return;
            }

            this._boundEvents = {
              updateViewarea: this._updateViewarea.bind(this),
              popState: this._popState.bind(this),
              pageHide: this._pageHide.bind(this)
            };

            this.eventBus._on("updateviewarea", this._boundEvents.updateViewarea);

            window.addEventListener("popstate", this._boundEvents.popState);
            window.addEventListener("pagehide", this._boundEvents.pageHide);
          }

          _unbindEvents() {
            if (!this._boundEvents) {
              return;
            }

            this.eventBus._off("updateviewarea", this._boundEvents.updateViewarea);

            window.removeEventListener("popstate", this._boundEvents.popState);
            window.removeEventListener("pagehide", this._boundEvents.pageHide);
            this._boundEvents = null;
          }

        }

        exports.PDFHistory = PDFHistory;

        function isDestHashesEqual(destHash, pushHash) {
          if (typeof destHash !== "string" || typeof pushHash !== "string") {
            return false;
          }

          if (destHash === pushHash) {
            return true;
          }

          const nameddest = (0, _ui_utils.parseQueryString)(destHash).get("nameddest");

          if (nameddest === pushHash) {
            return true;
          }

          return false;
        }

        function isDestArraysEqual(firstDest, secondDest) {
          function isEntryEqual(first, second) {
            if (typeof first !== typeof second) {
              return false;
            }

            if (Array.isArray(first) || Array.isArray(second)) {
              return false;
            }

            if (first !== null && typeof first === "object" && second !== null) {
              if (Object.keys(first).length !== Object.keys(second).length) {
                return false;
              }

              for (const key in first) {
                if (!isEntryEqual(first[key], second[key])) {
                  return false;
                }
              }

              return true;
            }

            return first === second || Number.isNaN(first) && Number.isNaN(second);
          }

          if (!(Array.isArray(firstDest) && Array.isArray(secondDest))) {
            return false;
          }

          if (firstDest.length !== secondDest.length) {
            return false;
          }

          for (let i = 0, ii = firstDest.length; i < ii; i++) {
            if (!isEntryEqual(firstDest[i], secondDest[i])) {
              return false;
            }
          }

          return true;
        }
        /***/

      },
      /* 23 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFScriptingManager = void 0;

        var _ui_utils = __w_pdfjs_require__(6);

        var _pdfjsLib = __w_pdfjs_require__(3);

        class PDFScriptingManager {
          constructor({
            eventBus,
            sandboxBundleSrc = null,
            scriptingFactory = null,
            docPropertiesLookup = null
          }) {
            this._pdfDocument = null;
            this._pdfViewer = null;
            this._closeCapability = null;
            this._destroyCapability = null;
            this._scripting = null;
            this._mouseState = Object.create(null);
            this._ready = false;
            this._eventBus = eventBus;
            this._sandboxBundleSrc = sandboxBundleSrc;
            this._scriptingFactory = scriptingFactory;
            this._docPropertiesLookup = docPropertiesLookup;

            if (!this._scriptingFactory) {
              window.addEventListener("updatefromsandbox", event => {
                this._eventBus.dispatch("updatefromsandbox", {
                  source: window,
                  detail: event.detail
                });
              });
            }
          }

          setViewer(pdfViewer) {
            this._pdfViewer = pdfViewer;
          }

          setDocument(pdfDocument) {
            var _this13 = this;

            return _asyncToGenerator(function* () {
              if (_this13._pdfDocument) {
                yield _this13._destroyScripting();
              }

              _this13._pdfDocument = pdfDocument;

              if (!pdfDocument) {
                return;
              }

              const [objects, calculationOrder, docActions] = yield Promise.all([pdfDocument.getFieldObjects(), pdfDocument.getCalculationOrderIds(), pdfDocument.getJSActions()]);

              if (!objects && !docActions) {
                yield _this13._destroyScripting();
                return;
              }

              if (pdfDocument !== _this13._pdfDocument) {
                return;
              }

              try {
                _this13._scripting = _this13._createScripting();
              } catch (error) {
                console.error(`PDFScriptingManager.setDocument: "${error?.message}".`);
                yield _this13._destroyScripting();
                return;
              }

              _this13._internalEvents.set("updatefromsandbox", event => {
                if (event?.source !== window) {
                  return;
                }

                _this13._updateFromSandbox(event.detail);
              });

              _this13._internalEvents.set("dispatcheventinsandbox", event => {
                _this13._scripting?.dispatchEventInSandbox(event.detail);
              });

              _this13._internalEvents.set("pagechanging", ({
                pageNumber,
                previous
              }) => {
                if (pageNumber === previous) {
                  return;
                }

                _this13._dispatchPageClose(previous);

                _this13._dispatchPageOpen(pageNumber);
              });

              _this13._internalEvents.set("pagerendered", ({
                pageNumber
              }) => {
                if (!_this13._pageOpenPending.has(pageNumber)) {
                  return;
                }

                if (pageNumber !== _this13._pdfViewer.currentPageNumber) {
                  return;
                }

                _this13._dispatchPageOpen(pageNumber);
              });

              _this13._internalEvents.set("pagesdestroy", /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator(function* (event) {
                  yield _this13._dispatchPageClose(_this13._pdfViewer.currentPageNumber);
                  yield _this13._scripting?.dispatchEventInSandbox({
                    id: "doc",
                    name: "WillClose"
                  });
                  _this13._closeCapability?.resolve();
                });

                return function (_x) {
                  return _ref3.apply(this, arguments);
                };
              }());

              _this13._domEvents.set("mousedown", event => {
                _this13._mouseState.isDown = true;
              });

              _this13._domEvents.set("mouseup", event => {
                _this13._mouseState.isDown = false;
              });

              for (const [name, listener] of _this13._internalEvents) {
                _this13._eventBus._on(name, listener);
              }

              for (const [name, listener] of _this13._domEvents) {
                window.addEventListener(name, listener, true);
              }

              try {
                const docProperties = yield _this13._getDocProperties();

                if (pdfDocument !== _this13._pdfDocument) {
                  return;
                }

                yield _this13._scripting.createSandbox({
                  objects,
                  calculationOrder,
                  appInfo: {
                    platform: navigator.platform,
                    language: navigator.language
                  },
                  docInfo: { ...docProperties,
                    actions: docActions
                  }
                });

                _this13._eventBus.dispatch("sandboxcreated", {
                  source: _this13
                });
              } catch (error) {
                console.error(`PDFScriptingManager.setDocument: "${error?.message}".`);
                yield _this13._destroyScripting();
                return;
              }

              yield _this13._scripting?.dispatchEventInSandbox({
                id: "doc",
                name: "Open"
              });
              yield _this13._dispatchPageOpen(_this13._pdfViewer.currentPageNumber, true);
              Promise.resolve().then(() => {
                if (pdfDocument === _this13._pdfDocument) {
                  _this13._ready = true;
                }
              });
            })();
          }

          dispatchWillSave(detail) {
            var _this14 = this;

            return _asyncToGenerator(function* () {
              return _this14._scripting?.dispatchEventInSandbox({
                id: "doc",
                name: "WillSave"
              });
            })();
          }

          dispatchDidSave(detail) {
            var _this15 = this;

            return _asyncToGenerator(function* () {
              return _this15._scripting?.dispatchEventInSandbox({
                id: "doc",
                name: "DidSave"
              });
            })();
          }

          dispatchWillPrint(detail) {
            var _this16 = this;

            return _asyncToGenerator(function* () {
              return _this16._scripting?.dispatchEventInSandbox({
                id: "doc",
                name: "WillPrint"
              });
            })();
          }

          dispatchDidPrint(detail) {
            var _this17 = this;

            return _asyncToGenerator(function* () {
              return _this17._scripting?.dispatchEventInSandbox({
                id: "doc",
                name: "DidPrint"
              });
            })();
          }

          get mouseState() {
            return this._mouseState;
          }

          get destroyPromise() {
            return this._destroyCapability?.promise || null;
          }

          get ready() {
            return this._ready;
          }

          get _internalEvents() {
            return (0, _pdfjsLib.shadow)(this, "_internalEvents", new Map());
          }

          get _domEvents() {
            return (0, _pdfjsLib.shadow)(this, "_domEvents", new Map());
          }

          get _pageOpenPending() {
            return (0, _pdfjsLib.shadow)(this, "_pageOpenPending", new Set());
          }

          get _visitedPages() {
            return (0, _pdfjsLib.shadow)(this, "_visitedPages", new Map());
          }

          _updateFromSandbox(detail) {
            var _this18 = this;

            return _asyncToGenerator(function* () {
              const isInPresentationMode = _this18._pdfViewer.isInPresentationMode || _this18._pdfViewer.isChangingPresentationMode;
              const {
                id,
                siblings,
                command,
                value
              } = detail;

              if (!id) {
                switch (command) {
                  case "clear":
                    console.clear();
                    break;

                  case "error":
                    console.error(value);
                    break;

                  case "layout":
                    if (isInPresentationMode) {
                      return;
                    }

                    const modes = (0, _ui_utils.apiPageLayoutToViewerModes)(value);
                    _this18._pdfViewer.spreadMode = modes.spreadMode;
                    break;

                  case "page-num":
                    _this18._pdfViewer.currentPageNumber = value + 1;
                    break;

                  case "print":
                    yield _this18._pdfViewer.pagesPromise;

                    _this18._eventBus.dispatch("print", {
                      source: _this18
                    });

                    break;

                  case "println":
                    console.log(value);
                    break;

                  case "zoom":
                    if (isInPresentationMode) {
                      return;
                    }

                    _this18._pdfViewer.currentScaleValue = value;
                    break;

                  case "SaveAs":
                    _this18._eventBus.dispatch("save", {
                      source: _this18
                    });

                    break;

                  case "FirstPage":
                    _this18._pdfViewer.currentPageNumber = 1;
                    break;

                  case "LastPage":
                    _this18._pdfViewer.currentPageNumber = _this18._pdfViewer.pagesCount;
                    break;

                  case "NextPage":
                    _this18._pdfViewer.nextPage();

                    break;

                  case "PrevPage":
                    _this18._pdfViewer.previousPage();

                    break;

                  case "ZoomViewIn":
                    if (isInPresentationMode) {
                      return;
                    }

                    _this18._pdfViewer.increaseScale();

                    break;

                  case "ZoomViewOut":
                    if (isInPresentationMode) {
                      return;
                    }

                    _this18._pdfViewer.decreaseScale();

                    break;
                }

                return;
              }

              if (isInPresentationMode) {
                if (detail.focus) {
                  return;
                }
              }

              delete detail.id;
              delete detail.siblings;
              const ids = siblings ? [id, ...siblings] : [id];

              for (const elementId of ids) {
                const element = document.getElementById(elementId);

                if (element) {
                  element.dispatchEvent(new CustomEvent("updatefromsandbox", {
                    detail
                  }));
                } else {
                  _this18._pdfDocument?.annotationStorage.setValue(elementId, detail);
                }
              }
            })();
          }

          _dispatchPageOpen(pageNumber, initialize = false) {
            var _this19 = this;

            return _asyncToGenerator(function* () {
              const pdfDocument = _this19._pdfDocument,
                    visitedPages = _this19._visitedPages;

              if (initialize) {
                _this19._closeCapability = (0, _pdfjsLib.createPromiseCapability)();
              }

              if (!_this19._closeCapability) {
                return;
              }

              const pageView = _this19._pdfViewer.getPageView(pageNumber - 1);

              if (pageView?.renderingState !== _ui_utils.RenderingStates.FINISHED) {
                _this19._pageOpenPending.add(pageNumber);

                return;
              }

              _this19._pageOpenPending.delete(pageNumber);

              const actionsPromise = _asyncToGenerator(function* () {
                const actions = yield !visitedPages.has(pageNumber) ? pageView.pdfPage?.getJSActions() : null;

                if (pdfDocument !== _this19._pdfDocument) {
                  return;
                }

                yield _this19._scripting?.dispatchEventInSandbox({
                  id: "page",
                  name: "PageOpen",
                  pageNumber,
                  actions
                });
              })();

              visitedPages.set(pageNumber, actionsPromise);
            })();
          }

          _dispatchPageClose(pageNumber) {
            var _this20 = this;

            return _asyncToGenerator(function* () {
              const pdfDocument = _this20._pdfDocument,
                    visitedPages = _this20._visitedPages;

              if (!_this20._closeCapability) {
                return;
              }

              if (_this20._pageOpenPending.has(pageNumber)) {
                return;
              }

              const actionsPromise = visitedPages.get(pageNumber);

              if (!actionsPromise) {
                return;
              }

              visitedPages.set(pageNumber, null);
              yield actionsPromise;

              if (pdfDocument !== _this20._pdfDocument) {
                return;
              }

              yield _this20._scripting?.dispatchEventInSandbox({
                id: "page",
                name: "PageClose",
                pageNumber
              });
            })();
          }

          _getDocProperties() {
            var _this21 = this;

            return _asyncToGenerator(function* () {
              if (_this21._docPropertiesLookup) {
                return _this21._docPropertiesLookup(_this21._pdfDocument);
              }

              const {
                docPropertiesLookup
              } = __w_pdfjs_require__(24);

              return docPropertiesLookup(_this21._pdfDocument);
            })();
          }

          _createScripting() {
            this._destroyCapability = (0, _pdfjsLib.createPromiseCapability)();

            if (this._scripting) {
              throw new Error("_createScripting: Scripting already exists.");
            }

            if (this._scriptingFactory) {
              return this._scriptingFactory.createScripting({
                sandboxBundleSrc: this._sandboxBundleSrc
              });
            }

            const {
              GenericScripting
            } = __w_pdfjs_require__(24);

            return new GenericScripting(this._sandboxBundleSrc);
          }

          _destroyScripting() {
            var _this22 = this;

            return _asyncToGenerator(function* () {
              if (!_this22._scripting) {
                _this22._pdfDocument = null;
                _this22._destroyCapability?.resolve();
                return;
              }

              if (_this22._closeCapability) {
                yield Promise.race([_this22._closeCapability.promise, new Promise(resolve => {
                  setTimeout(resolve, 1000);
                })]).catch(reason => {});
                _this22._closeCapability = null;
              }

              _this22._pdfDocument = null;

              try {
                yield _this22._scripting.destroySandbox();
              } catch (ex) {}

              for (const [name, listener] of _this22._internalEvents) {
                _this22._eventBus._off(name, listener);
              }

              _this22._internalEvents.clear();

              for (const [name, listener] of _this22._domEvents) {
                window.removeEventListener(name, listener, true);
              }

              _this22._domEvents.clear();

              _this22._pageOpenPending.clear();

              _this22._visitedPages.clear();

              _this22._scripting = null;
              delete _this22._mouseState.isDown;
              _this22._ready = false;
              _this22._destroyCapability?.resolve();
            })();
          }

        }

        exports.PDFScriptingManager = PDFScriptingManager;
        /***/
      },
      /* 24 */

      /***/
      (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GenericScripting = void 0;
        exports.docPropertiesLookup = docPropertiesLookup;

        var _pdfjsLib = __w_pdfjs_require__(3);

        function docPropertiesLookup(_x2) {
          return _docPropertiesLookup.apply(this, arguments);
        }

        function _docPropertiesLookup() {
          _docPropertiesLookup = _asyncToGenerator(function* (pdfDocument) {
            const url = "",
                  baseUrl = url.split("#")[0];
            let {
              info,
              metadata,
              contentDispositionFilename,
              contentLength
            } = yield pdfDocument.getMetadata();

            if (!contentLength) {
              const {
                length
              } = yield pdfDocument.getDownloadInfo();
              contentLength = length;
            }

            return { ...info,
              baseURL: baseUrl,
              filesize: contentLength,
              filename: contentDispositionFilename || (0, _pdfjsLib.getPdfFilenameFromUrl)(url),
              metadata: metadata?.getRaw(),
              authors: metadata?.get("dc:creator"),
              numPages: pdfDocument.numPages,
              URL: url
            };
          });
          return _docPropertiesLookup.apply(this, arguments);
        }

        class GenericScripting {
          constructor(sandboxBundleSrc) {
            this._ready = (0, _pdfjsLib.loadScript)(sandboxBundleSrc, true).then(() => {
              return window.pdfjsSandbox.QuickJSSandbox();
            });
          }

          createSandbox(data) {
            var _this23 = this;

            return _asyncToGenerator(function* () {
              const sandbox = yield _this23._ready;
              sandbox.create(data);
            })();
          }

          dispatchEventInSandbox(event) {
            var _this24 = this;

            return _asyncToGenerator(function* () {
              const sandbox = yield _this24._ready;
              setTimeout(() => sandbox.dispatchEvent(event), 0);
            })();
          }

          destroySandbox() {
            var _this25 = this;

            return _asyncToGenerator(function* () {
              const sandbox = yield _this25._ready;
              sandbox.nukeSandbox();
            })();
          }

        }

        exports.GenericScripting = GenericScripting;
        /***/
      }
      /******/
      ];
      /************************************************************************/

      /******/
      // The module cache

      /******/

      var __webpack_module_cache__ = {};
      /******/

      /******/
      // The require function

      /******/

      function __w_pdfjs_require__(moduleId) {
        /******/
        // Check if module is in cache

        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/

        if (cachedModule !== undefined) {
          /******/
          return cachedModule.exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed

          /******/
          // no module.loaded needed

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);
        /******/

        /******/
        // Return the exports of the module

        /******/


        return module.exports;
        /******/
      }
      /******/

      /************************************************************************/


      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

      (() => {
        var exports = __webpack_exports__;
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "AnnotationLayerBuilder", {
          enumerable: true,
          get: function () {
            return _annotation_layer_builder.AnnotationLayerBuilder;
          }
        });
        Object.defineProperty(exports, "DefaultAnnotationLayerFactory", {
          enumerable: true,
          get: function () {
            return _default_factory.DefaultAnnotationLayerFactory;
          }
        });
        Object.defineProperty(exports, "DefaultStructTreeLayerFactory", {
          enumerable: true,
          get: function () {
            return _default_factory.DefaultStructTreeLayerFactory;
          }
        });
        Object.defineProperty(exports, "DefaultTextLayerFactory", {
          enumerable: true,
          get: function () {
            return _default_factory.DefaultTextLayerFactory;
          }
        });
        Object.defineProperty(exports, "DefaultXfaLayerFactory", {
          enumerable: true,
          get: function () {
            return _default_factory.DefaultXfaLayerFactory;
          }
        });
        Object.defineProperty(exports, "DownloadManager", {
          enumerable: true,
          get: function () {
            return _download_manager.DownloadManager;
          }
        });
        Object.defineProperty(exports, "EventBus", {
          enumerable: true,
          get: function () {
            return _event_utils.EventBus;
          }
        });
        Object.defineProperty(exports, "GenericL10n", {
          enumerable: true,
          get: function () {
            return _genericl10n.GenericL10n;
          }
        });
        Object.defineProperty(exports, "LinkTarget", {
          enumerable: true,
          get: function () {
            return _pdf_link_service.LinkTarget;
          }
        });
        Object.defineProperty(exports, "NullL10n", {
          enumerable: true,
          get: function () {
            return _l10n_utils.NullL10n;
          }
        });
        Object.defineProperty(exports, "PDFFindController", {
          enumerable: true,
          get: function () {
            return _pdf_find_controller.PDFFindController;
          }
        });
        Object.defineProperty(exports, "PDFHistory", {
          enumerable: true,
          get: function () {
            return _pdf_history.PDFHistory;
          }
        });
        Object.defineProperty(exports, "PDFLinkService", {
          enumerable: true,
          get: function () {
            return _pdf_link_service.PDFLinkService;
          }
        });
        Object.defineProperty(exports, "PDFPageView", {
          enumerable: true,
          get: function () {
            return _pdf_page_view.PDFPageView;
          }
        });
        Object.defineProperty(exports, "PDFScriptingManager", {
          enumerable: true,
          get: function () {
            return _pdf_scripting_manager.PDFScriptingManager;
          }
        });
        Object.defineProperty(exports, "PDFSinglePageViewer", {
          enumerable: true,
          get: function () {
            return _pdf_viewer.PDFSinglePageViewer;
          }
        });
        Object.defineProperty(exports, "PDFViewer", {
          enumerable: true,
          get: function () {
            return _pdf_viewer.PDFViewer;
          }
        });
        Object.defineProperty(exports, "ProgressBar", {
          enumerable: true,
          get: function () {
            return _ui_utils.ProgressBar;
          }
        });
        Object.defineProperty(exports, "SimpleLinkService", {
          enumerable: true,
          get: function () {
            return _pdf_link_service.SimpleLinkService;
          }
        });
        Object.defineProperty(exports, "StructTreeLayerBuilder", {
          enumerable: true,
          get: function () {
            return _struct_tree_layer_builder.StructTreeLayerBuilder;
          }
        });
        Object.defineProperty(exports, "TextLayerBuilder", {
          enumerable: true,
          get: function () {
            return _text_layer_builder.TextLayerBuilder;
          }
        });
        Object.defineProperty(exports, "XfaLayerBuilder", {
          enumerable: true,
          get: function () {
            return _xfa_layer_builder.XfaLayerBuilder;
          }
        });
        Object.defineProperty(exports, "parseQueryString", {
          enumerable: true,
          get: function () {
            return _ui_utils.parseQueryString;
          }
        });

        var _default_factory = __w_pdfjs_require__(1);

        var _pdf_link_service = __w_pdfjs_require__(5);

        var _ui_utils = __w_pdfjs_require__(6);

        var _pdf_viewer = __w_pdfjs_require__(10);

        var _annotation_layer_builder = __w_pdfjs_require__(2);

        var _download_manager = __w_pdfjs_require__(16);

        var _event_utils = __w_pdfjs_require__(17);

        var _genericl10n = __w_pdfjs_require__(18);

        var _l10n_utils = __w_pdfjs_require__(4);

        var _pdf_find_controller = __w_pdfjs_require__(20);

        var _pdf_history = __w_pdfjs_require__(22);

        var _pdf_page_view = __w_pdfjs_require__(12);

        var _pdf_scripting_manager = __w_pdfjs_require__(23);

        var _struct_tree_layer_builder = __w_pdfjs_require__(7);

        var _text_layer_builder = __w_pdfjs_require__(8);

        var _xfa_layer_builder = __w_pdfjs_require__(9);

        const pdfjsVersion = '2.14.305';
        const pdfjsBuild = 'eaaa8b4ad';
      })();
      /******/


      return __webpack_exports__;
      /******/
    })()
  );
}); //# sourceMappingURL=pdf_viewer.js.map

/***/ }),

/***/ 1135:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BehaviorSubject": () => (/* binding */ BehaviorSubject)
/* harmony export */ });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subject */ 6758);

class BehaviorSubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }

  get value() {
    return this.getValue();
  }

  _subscribe(subscriber) {
    const subscription = super._subscribe(subscriber);

    !subscription.closed && subscriber.next(this._value);
    return subscription;
  }

  getValue() {
    const {
      hasError,
      thrownError,
      _value
    } = this;

    if (hasError) {
      throw thrownError;
    }

    this._throwIfClosed();

    return _value;
  }

  next(value) {
    super.next(this._value = value);
  }

} //# sourceMappingURL=BehaviorSubject.js.map

/***/ }),

/***/ 3395:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/NotificationFactories.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "COMPLETE_NOTIFICATION": () => (/* binding */ COMPLETE_NOTIFICATION),
/* harmony export */   "createNotification": () => (/* binding */ createNotification),
/* harmony export */   "errorNotification": () => (/* binding */ errorNotification),
/* harmony export */   "nextNotification": () => (/* binding */ nextNotification)
/* harmony export */ });
const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined))();
function errorNotification(error) {
  return createNotification('E', undefined, error);
}
function nextNotification(value) {
  return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
} //# sourceMappingURL=NotificationFactories.js.map

/***/ }),

/***/ 9751:
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Observable.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observable": () => (/* binding */ Observable)
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscriber */ 3934);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Subscription */ 6921);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbol/observable */ 8822);
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/pipe */ 9635);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ 2416);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/isFunction */ 576);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/errorContext */ 2806);







let Observable = /*#__PURE__*/(() => {
  class Observable {
    constructor(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }

    lift(operator) {
      const observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    }

    subscribe(observerOrNext, error, complete) {
      const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber(observerOrNext, error, complete);
      (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_1__.errorContext)(() => {
        const {
          operator,
          source
        } = this;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));
      });
      return subscriber;
    }

    _trySubscribe(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    }

    forEach(next, promiseCtor) {
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor((resolve, reject) => {
        const subscriber = new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.SafeSubscriber({
          next: value => {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        this.subscribe(subscriber);
      });
    }

    _subscribe(subscriber) {
      var _a;

      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    }

    [_symbol_observable__WEBPACK_IMPORTED_MODULE_2__.observable]() {
      return this;
    }

    pipe(...operations) {
      return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_3__.pipeFromArray)(operations)(this);
    }

    toPromise(promiseCtor) {
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor((resolve, reject) => {
        let value;
        this.subscribe(x => value = x, err => reject(err), () => resolve(value));
      });
    }

  }

  Observable.create = subscribe => {
    return new Observable(subscribe);
  };

  return Observable;
})();

function getPromiseCtor(promiseCtor) {
  var _a;

  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : _config__WEBPACK_IMPORTED_MODULE_4__.config.Promise) !== null && _a !== void 0 ? _a : Promise;
}

function isObserver(value) {
  return value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.next) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.error) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_5__.isFunction)(value.complete);
}

function isSubscriber(value) {
  return value && value instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber || isObserver(value) && (0,_Subscription__WEBPACK_IMPORTED_MODULE_6__.isSubscription)(value);
} //# sourceMappingURL=Observable.js.map

/***/ }),

/***/ 6646:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Scheduler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scheduler": () => (/* binding */ Scheduler)
/* harmony export */ });
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduler/dateTimestampProvider */ 6063);

class Scheduler {
  constructor(schedulerActionCtor, now = Scheduler.now) {
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }

  schedule(work, delay = 0, state) {
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  }

}
Scheduler.now = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__.dateTimestampProvider.now; //# sourceMappingURL=Scheduler.js.map

/***/ }),

/***/ 6758:
/*!********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Subject.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnonymousSubject": () => (/* binding */ AnonymousSubject),
/* harmony export */   "Subject": () => (/* binding */ Subject)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable */ 9751);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ 6921);
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ 7448);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/arrRemove */ 8737);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/errorContext */ 2806);





let Subject = /*#__PURE__*/(() => {
  class Subject extends _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable {
    constructor() {
      super();
      this.closed = false;
      this.currentObservers = null;
      this.observers = [];
      this.isStopped = false;
      this.hasError = false;
      this.thrownError = null;
    }

    lift(operator) {
      const subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    }

    _throwIfClosed() {
      if (this.closed) {
        throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__.ObjectUnsubscribedError();
      }
    }

    next(value) {
      (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(() => {
        this._throwIfClosed();

        if (!this.isStopped) {
          if (!this.currentObservers) {
            this.currentObservers = Array.from(this.observers);
          }

          for (const observer of this.currentObservers) {
            observer.next(value);
          }
        }
      });
    }

    error(err) {
      (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(() => {
        this._throwIfClosed();

        if (!this.isStopped) {
          this.hasError = this.isStopped = true;
          this.thrownError = err;
          const {
            observers
          } = this;

          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    }

    complete() {
      (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_2__.errorContext)(() => {
        this._throwIfClosed();

        if (!this.isStopped) {
          this.isStopped = true;
          const {
            observers
          } = this;

          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    }

    unsubscribe() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    }

    get observed() {
      var _a;

      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }

    _trySubscribe(subscriber) {
      this._throwIfClosed();

      return super._trySubscribe(subscriber);
    }

    _subscribe(subscriber) {
      this._throwIfClosed();

      this._checkFinalizedStatuses(subscriber);

      return this._innerSubscribe(subscriber);
    }

    _innerSubscribe(subscriber) {
      const {
        hasError,
        isStopped,
        observers
      } = this;

      if (hasError || isStopped) {
        return _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;
      }

      this.currentObservers = null;
      observers.push(subscriber);
      return new _Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription(() => {
        this.currentObservers = null;
        (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_4__.arrRemove)(observers, subscriber);
      });
    }

    _checkFinalizedStatuses(subscriber) {
      const {
        hasError,
        thrownError,
        isStopped
      } = this;

      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    }

    asObservable() {
      const observable = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
      observable.source = this;
      return observable;
    }

  }

  Subject.create = (destination, source) => {
    return new AnonymousSubject(destination, source);
  };

  return Subject;
})();
class AnonymousSubject extends Subject {
  constructor(destination, source) {
    super();
    this.destination = destination;
    this.source = source;
  }

  next(value) {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  }

  error(err) {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  }

  complete() {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  }

  _subscribe(subscriber) {
    var _a, _b;

    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : _Subscription__WEBPACK_IMPORTED_MODULE_3__.EMPTY_SUBSCRIPTION;
  }

} //# sourceMappingURL=Subject.js.map

/***/ }),

/***/ 3934:
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Subscriber.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EMPTY_OBSERVER": () => (/* binding */ EMPTY_OBSERVER),
/* harmony export */   "SafeSubscriber": () => (/* binding */ SafeSubscriber),
/* harmony export */   "Subscriber": () => (/* binding */ Subscriber)
/* harmony export */ });
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isFunction */ 576);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscription */ 6921);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ 2416);
/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/reportUnhandledError */ 7849);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/noop */ 5032);
/* harmony import */ var _NotificationFactories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NotificationFactories */ 3395);
/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scheduler/timeoutProvider */ 3410);
/* harmony import */ var _util_errorContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/errorContext */ 2806);








class Subscriber extends _Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription {
  constructor(destination) {
    super();
    this.isStopped = false;

    if (destination) {
      this.destination = destination;

      if ((0,_Subscription__WEBPACK_IMPORTED_MODULE_0__.isSubscription)(destination)) {
        destination.add(this);
      }
    } else {
      this.destination = EMPTY_OBSERVER;
    }
  }

  static create(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }

  next(value) {
    if (this.isStopped) {
      handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_1__.nextNotification)(value), this);
    } else {
      this._next(value);
    }
  }

  error(err) {
    if (this.isStopped) {
      handleStoppedNotification((0,_NotificationFactories__WEBPACK_IMPORTED_MODULE_1__.errorNotification)(err), this);
    } else {
      this.isStopped = true;

      this._error(err);
    }
  }

  complete() {
    if (this.isStopped) {
      handleStoppedNotification(_NotificationFactories__WEBPACK_IMPORTED_MODULE_1__.COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;

      this._complete();
    }
  }

  unsubscribe() {
    if (!this.closed) {
      this.isStopped = true;
      super.unsubscribe();
      this.destination = null;
    }
  }

  _next(value) {
    this.destination.next(value);
  }

  _error(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }

  _complete() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }

}
const _bind = Function.prototype.bind;

function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}

class ConsumerObserver {
  constructor(partialObserver) {
    this.partialObserver = partialObserver;
  }

  next(value) {
    const {
      partialObserver
    } = this;

    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }

  error(err) {
    const {
      partialObserver
    } = this;

    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  }

  complete() {
    const {
      partialObserver
    } = this;

    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }

}

class SafeSubscriber extends Subscriber {
  constructor(observerOrNext, error, complete) {
    super();
    let partialObserver;

    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_2__.isFunction)(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
        error: error !== null && error !== void 0 ? error : undefined,
        complete: complete !== null && complete !== void 0 ? complete : undefined
      };
    } else {
      let context;

      if (this && _config__WEBPACK_IMPORTED_MODULE_3__.config.useDeprecatedNextContext) {
        context = Object.create(observerOrNext);

        context.unsubscribe = () => this.unsubscribe();

        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context),
          error: observerOrNext.error && bind(observerOrNext.error, context),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }

    this.destination = new ConsumerObserver(partialObserver);
  }

}

function handleUnhandledError(error) {
  if (_config__WEBPACK_IMPORTED_MODULE_3__.config.useDeprecatedSynchronousErrorHandling) {
    (0,_util_errorContext__WEBPACK_IMPORTED_MODULE_4__.captureError)(error);
  } else {
    (0,_util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_5__.reportUnhandledError)(error);
  }
}

function defaultErrorHandler(err) {
  throw err;
}

function handleStoppedNotification(notification, subscriber) {
  const {
    onStoppedNotification
  } = _config__WEBPACK_IMPORTED_MODULE_3__.config;
  onStoppedNotification && _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_6__.timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));
}

const EMPTY_OBSERVER = {
  closed: true,
  next: _util_noop__WEBPACK_IMPORTED_MODULE_7__.noop,
  error: defaultErrorHandler,
  complete: _util_noop__WEBPACK_IMPORTED_MODULE_7__.noop
}; //# sourceMappingURL=Subscriber.js.map

/***/ }),

/***/ 6921:
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Subscription.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EMPTY_SUBSCRIPTION": () => (/* binding */ EMPTY_SUBSCRIPTION),
/* harmony export */   "Subscription": () => (/* binding */ Subscription),
/* harmony export */   "isSubscription": () => (/* binding */ isSubscription)
/* harmony export */ });
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isFunction */ 576);
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/UnsubscriptionError */ 7896);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/arrRemove */ 8737);



class Subscription {
  constructor(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }

  unsubscribe() {
    let errors;

    if (!this.closed) {
      this.closed = true;
      const {
        _parentage
      } = this;

      if (_parentage) {
        this._parentage = null;

        if (Array.isArray(_parentage)) {
          for (const parent of _parentage) {
            parent.remove(this);
          }
        } else {
          _parentage.remove(this);
        }
      }

      const {
        initialTeardown: initialFinalizer
      } = this;

      if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError ? e.errors : [e];
        }
      }

      const {
        _finalizers
      } = this;

      if (_finalizers) {
        this._finalizers = null;

        for (const finalizer of _finalizers) {
          try {
            execFinalizer(finalizer);
          } catch (err) {
            errors = errors !== null && errors !== void 0 ? errors : [];

            if (err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) {
              errors = [...errors, ...err.errors];
            } else {
              errors.push(err);
            }
          }
        }
      }

      if (errors) {
        throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError(errors);
      }
    }
  }

  add(teardown) {
    var _a;

    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }

          teardown._addParent(this);
        }

        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  }

  _hasParent(parent) {
    const {
      _parentage
    } = this;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }

  _addParent(parent) {
    const {
      _parentage
    } = this;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }

  _removeParent(parent) {
    const {
      _parentage
    } = this;

    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__.arrRemove)(_parentage, parent);
    }
  }

  remove(teardown) {
    const {
      _finalizers
    } = this;
    _finalizers && (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__.arrRemove)(_finalizers, teardown);

    if (teardown instanceof Subscription) {
      teardown._removeParent(this);
    }
  }

}

Subscription.EMPTY = (() => {
  const empty = new Subscription();
  empty.closed = true;
  return empty;
})();

const EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && 'closed' in value && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.remove) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.add) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.unsubscribe);
}

function execFinalizer(finalizer) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
} //# sourceMappingURL=Subscription.js.map

/***/ }),

/***/ 2416:
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/config.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": () => (/* binding */ config)
/* harmony export */ });
const config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: undefined,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
}; //# sourceMappingURL=config.js.map

/***/ }),

/***/ 4033:
/*!*********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectableObservable": () => (/* binding */ ConnectableObservable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscription */ 6921);
/* harmony import */ var _operators_refCount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/refCount */ 8343);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/OperatorSubscriber */ 5403);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);





class ConnectableObservable extends _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable {
  constructor(source, subjectFactory) {
    super();
    this.source = source;
    this.subjectFactory = subjectFactory;
    this._subject = null;
    this._refCount = 0;
    this._connection = null;

    if ((0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.hasLift)(source)) {
      this.lift = source.lift;
    }
  }

  _subscribe(subscriber) {
    return this.getSubject().subscribe(subscriber);
  }

  getSubject() {
    const subject = this._subject;

    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }

    return this._subject;
  }

  _teardown() {
    this._refCount = 0;
    const {
      _connection
    } = this;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  }

  connect() {
    let connection = this._connection;

    if (!connection) {
      connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_2__.Subscription();
      const subject = this.getSubject();
      connection.add(this.source.subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__.createOperatorSubscriber)(subject, undefined, () => {
        this._teardown();

        subject.complete();
      }, err => {
        this._teardown();

        subject.error(err);
      }, () => this._teardown())));

      if (connection.closed) {
        this._connection = null;
        connection = _Subscription__WEBPACK_IMPORTED_MODULE_2__.Subscription.EMPTY;
      }
    }

    return connection;
  }

  refCount() {
    return (0,_operators_refCount__WEBPACK_IMPORTED_MODULE_4__.refCount)()(this);
  }

} //# sourceMappingURL=ConnectableObservable.js.map

/***/ }),

/***/ 9841:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/combineLatest.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combineLatest": () => (/* binding */ combineLatest),
/* harmony export */   "combineLatestInit": () => (/* binding */ combineLatestInit)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/argsArgArrayOrObject */ 4742);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./from */ 188);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/identity */ 4671);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ 3268);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _util_createObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/createObject */ 1810);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operators/OperatorSubscriber */ 5403);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/executeSchedule */ 9672);









function combineLatest(...args) {
  const scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(args);
  const resultSelector = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popResultSelector)(args);
  const {
    args: observables,
    keys
  } = (0,_util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__.argsArgArrayOrObject)(args);

  if (observables.length === 0) {
    return (0,_from__WEBPACK_IMPORTED_MODULE_2__.from)([], scheduler);
  }

  const result = new _Observable__WEBPACK_IMPORTED_MODULE_3__.Observable(combineLatestInit(observables, scheduler, keys ? values => (0,_util_createObject__WEBPACK_IMPORTED_MODULE_4__.createObject)(keys, values) : _util_identity__WEBPACK_IMPORTED_MODULE_5__.identity));
  return resultSelector ? result.pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__.mapOneOrManyArgs)(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform = _util_identity__WEBPACK_IMPORTED_MODULE_5__.identity) {
  return subscriber => {
    maybeSchedule(scheduler, () => {
      const {
        length
      } = observables;
      const values = new Array(length);
      let active = length;
      let remainingFirstValues = length;

      for (let i = 0; i < length; i++) {
        maybeSchedule(scheduler, () => {
          const source = (0,_from__WEBPACK_IMPORTED_MODULE_2__.from)(observables[i], scheduler);
          let hasFirstValue = false;
          source.subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_7__.createOperatorSubscriber)(subscriber, value => {
            values[i] = value;

            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }

            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, () => {
            if (! --active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      }
    }, subscriber);
  };
}

function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_8__.executeSchedule)(subscription, scheduler, execute);
  } else {
    execute();
  }
} //# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ 1350:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/concat.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat)
/* harmony export */ });
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operators/concatAll */ 7886);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ 188);



function concat(...args) {
  return (0,_operators_concatAll__WEBPACK_IMPORTED_MODULE_0__.concatAll)()((0,_from__WEBPACK_IMPORTED_MODULE_1__.from)(args, (0,_util_args__WEBPACK_IMPORTED_MODULE_2__.popScheduler)(args)));
} //# sourceMappingURL=concat.js.map

/***/ }),

/***/ 9770:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/defer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defer": () => (/* binding */ defer)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./innerFrom */ 8421);


function defer(observableFactory) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    (0,_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(observableFactory()).subscribe(subscriber);
  });
} //# sourceMappingURL=defer.js.map

/***/ }),

/***/ 515:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/empty.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EMPTY": () => (/* binding */ EMPTY),
/* harmony export */   "empty": () => (/* binding */ empty)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);

const EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => subscriber.complete());
function empty(scheduler) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}

function emptyScheduled(scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => scheduler.schedule(() => subscriber.complete()));
} //# sourceMappingURL=empty.js.map

/***/ }),

/***/ 4128:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forkJoin": () => (/* binding */ forkJoin)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/argsArgArrayOrObject */ 4742);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./innerFrom */ 8421);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/OperatorSubscriber */ 5403);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ 3268);
/* harmony import */ var _util_createObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/createObject */ 1810);







function forkJoin(...args) {
  const resultSelector = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popResultSelector)(args);
  const {
    args: sources,
    keys
  } = (0,_util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__.argsArgArrayOrObject)(args);
  const result = new _Observable__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
    const {
      length
    } = sources;

    if (!length) {
      subscriber.complete();
      return;
    }

    const values = new Array(length);
    let remainingCompletions = length;
    let remainingEmissions = length;

    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {
      let hasValue = false;
      (0,_innerFrom__WEBPACK_IMPORTED_MODULE_3__.innerFrom)(sources[sourceIndex]).subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__.createOperatorSubscriber)(subscriber, value => {
        if (!hasValue) {
          hasValue = true;
          remainingEmissions--;
        }

        values[sourceIndex] = value;
      }, () => remainingCompletions--, undefined, () => {
        if (!remainingCompletions || !hasValue) {
          if (!remainingEmissions) {
            subscriber.next(keys ? (0,_util_createObject__WEBPACK_IMPORTED_MODULE_5__.createObject)(keys, values) : values);
          }

          subscriber.complete();
        }
      }));
    }
  });
  return resultSelector ? result.pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__.mapOneOrManyArgs)(resultSelector)) : result;
} //# sourceMappingURL=forkJoin.js.map

/***/ }),

/***/ 188:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/from.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "from": () => (/* binding */ from)
/* harmony export */ });
/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduled/scheduled */ 5864);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./innerFrom */ 8421);


function from(input, scheduler) {
  return scheduler ? (0,_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_0__.scheduled)(input, scheduler) : (0,_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(input);
} //# sourceMappingURL=from.js.map

/***/ }),

/***/ 4968:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromEvent": () => (/* binding */ fromEvent)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/mergeMap */ 6099);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ 1144);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 576);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ 3268);






const nodeEventEmitterMethods = ['addListener', 'removeListener'];
const eventTargetMethods = ['addEventListener', 'removeEventListener'];
const jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options)) {
    resultSelector = options;
    options = undefined;
  }

  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__.mapOneOrManyArgs)(resultSelector));
  }

  const [add, remove] = isEventTarget(target) ? eventTargetMethods.map(methodName => handler => target[methodName](eventName, handler, options)) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [];

  if (!add) {
    if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(target)) {
      return (0,_operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(subTarget => fromEvent(subTarget, eventName, options))((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__.innerFrom)(target));
    }
  }

  if (!add) {
    throw new TypeError('Invalid event target');
  }

  return new _Observable__WEBPACK_IMPORTED_MODULE_5__.Observable(subscriber => {
    const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);

    add(handler);
    return () => remove(handler);
  });
}

function toCommonHandlerRegistry(target, eventName) {
  return methodName => handler => target[methodName](eventName, handler);
}

function isNodeStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeListener);
}

function isJQueryStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.on) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.off);
}

function isEventTarget(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addEventListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeEventListener);
} //# sourceMappingURL=fromEvent.js.map

/***/ }),

/***/ 8421:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromArrayLike": () => (/* binding */ fromArrayLike),
/* harmony export */   "fromAsyncIterable": () => (/* binding */ fromAsyncIterable),
/* harmony export */   "fromInteropObservable": () => (/* binding */ fromInteropObservable),
/* harmony export */   "fromIterable": () => (/* binding */ fromIterable),
/* harmony export */   "fromPromise": () => (/* binding */ fromPromise),
/* harmony export */   "fromReadableStreamLike": () => (/* binding */ fromReadableStreamLike),
/* harmony export */   "innerFrom": () => (/* binding */ innerFrom)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ 655);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ 1144);
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isPromise */ 8239);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isInteropObservable */ 3670);
/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isAsyncIterable */ 2206);
/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/throwUnobservableError */ 4532);
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isIterable */ 6495);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isReadableStreamLike */ 3260);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/isFunction */ 576);
/* harmony import */ var _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/reportUnhandledError */ 7849);
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../symbol/observable */ 8822);












function innerFrom(input) {
  if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable) {
    return input;
  }

  if (input != null) {
    if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_1__.isInteropObservable)(input)) {
      return fromInteropObservable(input);
    }

    if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(input)) {
      return fromArrayLike(input);
    }

    if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_3__.isPromise)(input)) {
      return fromPromise(input);
    }

    if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_4__.isAsyncIterable)(input)) {
      return fromAsyncIterable(input);
    }

    if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_5__.isIterable)(input)) {
      return fromIterable(input);
    }

    if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.isReadableStreamLike)(input)) {
      return fromReadableStreamLike(input);
    }
  }

  throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_7__.createInvalidObservableTypeError)(input);
}
function fromInteropObservable(obj) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    const obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__.observable]();

    if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_9__.isFunction)(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }

    throw new TypeError('Provided object does not correctly implement Symbol.observable');
  });
}
function fromArrayLike(array) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    for (let i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }

    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    promise.then(value => {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, err => subscriber.error(err)).then(null, _util_reportUnhandledError__WEBPACK_IMPORTED_MODULE_10__.reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    for (const value of iterable) {
      subscriber.next(value);

      if (subscriber.closed) {
        return;
      }
    }

    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    process(asyncIterable, subscriber).catch(err => subscriber.error(err));
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_6__.readableStreamLikeToAsyncGenerator)(readableStream));
}

function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;

  var e_1, _a;

  return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
    try {
      for (asyncIterable_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done;) {
        const value = asyncIterable_1_1.value;
        subscriber.next(value);

        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)) yield _a.call(asyncIterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    subscriber.complete();
  });
} //# sourceMappingURL=innerFrom.js.map

/***/ }),

/***/ 6451:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/merge.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "merge": () => (/* binding */ merge)
/* harmony export */ });
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/mergeAll */ 8189);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./innerFrom */ 8421);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty */ 515);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./from */ 188);





function merge(...args) {
  const scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(args);
  const concurrent = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popNumber)(args, Infinity);
  const sources = args;
  return !sources.length ? _empty__WEBPACK_IMPORTED_MODULE_1__.EMPTY : sources.length === 1 ? (0,_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(sources[0]) : (0,_operators_mergeAll__WEBPACK_IMPORTED_MODULE_3__.mergeAll)(concurrent)((0,_from__WEBPACK_IMPORTED_MODULE_4__.from)(sources, scheduler));
} //# sourceMappingURL=merge.js.map

/***/ }),

/***/ 9646:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/of.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "of": () => (/* binding */ of)
/* harmony export */ });
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ 188);


function of(...args) {
  const scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(args);
  return (0,_from__WEBPACK_IMPORTED_MODULE_1__.from)(args, scheduler);
} //# sourceMappingURL=of.js.map

/***/ }),

/***/ 2843:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/throwError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throwError": () => (/* binding */ throwError)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 576);


function throwError(errorOrErrorFactory, scheduler) {
  const errorFactory = (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;

  const init = subscriber => subscriber.error(errorFactory());

  return new _Observable__WEBPACK_IMPORTED_MODULE_1__.Observable(scheduler ? subscriber => scheduler.schedule(init, 0, subscriber) : init);
} //# sourceMappingURL=throwError.js.map

/***/ }),

/***/ 5403:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperatorSubscriber": () => (/* binding */ OperatorSubscriber),
/* harmony export */   "createOperatorSubscriber": () => (/* binding */ createOperatorSubscriber)
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ 3934);

function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
class OperatorSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber {
  constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    super(destination);
    this.onFinalize = onFinalize;
    this.shouldUnsubscribe = shouldUnsubscribe;
    this._next = onNext ? function (value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : super._next;
    this._error = onError ? function (err) {
      try {
        onError(err);
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : super._error;
    this._complete = onComplete ? function () {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : super._complete;
  }

  unsubscribe() {
    var _a;

    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      const {
        closed
      } = this;
      super.unsubscribe();
      !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  }

} //# sourceMappingURL=OperatorSubscriber.js.map

/***/ }),

/***/ 262:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/catchError.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "catchError": () => (/* binding */ catchError)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);



function catchError(selector) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let innerSub = null;
    let syncUnsub = false;
    let handledResult;
    innerSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, undefined, undefined, err => {
      handledResult = (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(selector(err, catchError(selector)(source)));

      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));

    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
} //# sourceMappingURL=catchError.js.map

/***/ }),

/***/ 7886:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/concatAll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatAll": () => (/* binding */ concatAll)
/* harmony export */ });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeAll */ 8189);

function concatAll() {
  return (0,_mergeAll__WEBPACK_IMPORTED_MODULE_0__.mergeAll)(1);
} //# sourceMappingURL=concatAll.js.map

/***/ }),

/***/ 4351:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/concatMap.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatMap": () => (/* binding */ concatMap)
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeMap */ 6099);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 576);


function concatMap(project, resultSelector) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(resultSelector) ? (0,_mergeMap__WEBPACK_IMPORTED_MODULE_1__.mergeMap)(project, resultSelector, 1) : (0,_mergeMap__WEBPACK_IMPORTED_MODULE_1__.mergeMap)(project, 1);
} //# sourceMappingURL=concatMap.js.map

/***/ }),

/***/ 8372:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounceTime": () => (/* binding */ debounceTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 4986);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function debounceTime(dueTime, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let activeTask = null;
    let lastValue = null;
    let lastTime = null;

    const emit = () => {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };

    function emitWhenIdle() {
      const targetTime = lastTime + dueTime;
      const now = scheduler.now();

      if (now < targetTime) {
        activeTask = this.schedule(undefined, targetTime - now);
        subscriber.add(activeTask);
        return;
      }

      emit();
    }

    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      lastValue = value;
      lastTime = scheduler.now();

      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, () => {
      emit();
      subscriber.complete();
    }, undefined, () => {
      lastValue = activeTask = null;
    }));
  });
} //# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ 6590:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultIfEmpty": () => (/* binding */ defaultIfEmpty)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);


function defaultIfEmpty(defaultValue) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let hasValue = false;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      hasValue = true;
      subscriber.next(value);
    }, () => {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }

      subscriber.complete();
    }));
  });
} //# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ 1884:
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distinctUntilChanged": () => (/* binding */ distinctUntilChanged)
/* harmony export */ });
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/identity */ 4671);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function distinctUntilChanged(comparator, keySelector = _util_identity__WEBPACK_IMPORTED_MODULE_0__.identity) {
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let previousKey;
    let first = true;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      const currentKey = keySelector(value);

      if (first || !comparator(previousKey, currentKey)) {
        first = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}

function defaultCompare(a, b) {
  return a === b;
} //# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ 9300:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/filter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filter": () => (/* binding */ filter)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);


function filter(predicate, thisArg) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let index = 0;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => predicate.call(thisArg, value, index++) && subscriber.next(value)));
  });
} //# sourceMappingURL=filter.js.map

/***/ }),

/***/ 8746:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/finalize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "finalize": () => (/* binding */ finalize)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);

function finalize(callback) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
} //# sourceMappingURL=finalize.js.map

/***/ }),

/***/ 590:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/first.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "first": () => (/* binding */ first)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ 6805);
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 9300);
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./take */ 5698);
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ 6590);
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ 8068);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 4671);






function first(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return source => source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)((v, i) => predicate(v, i, source)) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0,_take__WEBPACK_IMPORTED_MODULE_2__.take)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(() => new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError()));
} //# sourceMappingURL=first.js.map

/***/ }),

/***/ 3103:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/last.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "last": () => (/* binding */ last)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/EmptyError */ 6805);
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 9300);
/* harmony import */ var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./takeLast */ 2035);
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ 8068);
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ 6590);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 4671);






function last(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return source => source.pipe(predicate ? (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)((v, i) => predicate(v, i, source)) : _util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, (0,_takeLast__WEBPACK_IMPORTED_MODULE_2__.takeLast)(1), hasDefaultValue ? (0,_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__.defaultIfEmpty)(defaultValue) : (0,_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__.throwIfEmpty)(() => new _util_EmptyError__WEBPACK_IMPORTED_MODULE_5__.EmptyError()));
} //# sourceMappingURL=last.js.map

/***/ }),

/***/ 4004:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "map": () => (/* binding */ map)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);


function map(project, thisArg) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let index = 0;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
} //# sourceMappingURL=map.js.map

/***/ }),

/***/ 8189:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeAll": () => (/* binding */ mergeAll)
/* harmony export */ });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ 6099);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ 4671);


function mergeAll(concurrent = Infinity) {
  return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_0__.mergeMap)(_util_identity__WEBPACK_IMPORTED_MODULE_1__.identity, concurrent);
} //# sourceMappingURL=mergeAll.js.map

/***/ }),

/***/ 2733:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeInternals": () => (/* binding */ mergeInternals)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/executeSchedule */ 9672);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  const buffer = [];
  let active = 0;
  let index = 0;
  let isComplete = false;

  const checkComplete = () => {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };

  const outerNext = value => active < concurrent ? doInnerSub(value) : buffer.push(value);

  const doInnerSub = value => {
    expand && subscriber.next(value);
    active++;
    let innerComplete = false;
    (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(project(value, index++)).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, innerValue => {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);

      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, () => {
      innerComplete = true;
    }, undefined, () => {
      if (innerComplete) {
        try {
          active--;

          while (buffer.length && active < concurrent) {
            const bufferedValue = buffer.shift();

            if (innerSubScheduler) {
              (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));
            } else {
              doInnerSub(bufferedValue);
            }
          }

          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };

  source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, outerNext, () => {
    isComplete = true;
    checkComplete();
  }));
  return () => {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
} //# sourceMappingURL=mergeInternals.js.map

/***/ }),

/***/ 6099:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeMap": () => (/* binding */ mergeMap)
/* harmony export */ });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ 4004);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _mergeInternals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mergeInternals */ 2733);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 576);





function mergeMap(project, resultSelector, concurrent = Infinity) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(resultSelector)) {
    return mergeMap((a, i) => (0,_map__WEBPACK_IMPORTED_MODULE_1__.map)((b, ii) => resultSelector(a, b, i, ii))((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(project(a, i))), concurrent);
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }

  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_3__.operate)((source, subscriber) => (0,_mergeInternals__WEBPACK_IMPORTED_MODULE_4__.mergeInternals)(source, subscriber, project, concurrent));
} //# sourceMappingURL=mergeMap.js.map

/***/ }),

/***/ 5363:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/observeOn.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observeOn": () => (/* binding */ observeOn)
/* harmony export */ });
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/executeSchedule */ 9672);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function observeOn(scheduler, delay = 0) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, () => subscriber.next(value), delay), () => (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, () => subscriber.complete(), delay), err => (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_2__.executeSchedule)(subscriber, scheduler, () => subscriber.error(err), delay)));
  });
} //# sourceMappingURL=observeOn.js.map

/***/ }),

/***/ 8343:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/refCount.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "refCount": () => (/* binding */ refCount)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);


function refCount() {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let connection = null;
    source._refCount++;
    const refCounter = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, undefined, undefined, undefined, () => {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }

      const sharedConnection = source._connection;
      const conn = connection;
      connection = null;

      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }

      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);

    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
} //# sourceMappingURL=refCount.js.map

/***/ }),

/***/ 2940:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/scan.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scan": () => (/* binding */ scan)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _scanInternals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scanInternals */ 7359);


function scan(accumulator, seed) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((0,_scanInternals__WEBPACK_IMPORTED_MODULE_1__.scanInternals)(accumulator, seed, arguments.length >= 2, true));
} //# sourceMappingURL=scan.js.map

/***/ }),

/***/ 7359:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/scanInternals.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scanInternals": () => (/* binding */ scanInternals)
/* harmony export */ });
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return (source, subscriber) => {
    let hasState = hasSeed;
    let state = seed;
    let index = 0;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_0__.createOperatorSubscriber)(subscriber, value => {
      const i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && (() => {
      hasState && subscriber.next(state);
      subscriber.complete();
    })));
  };
} //# sourceMappingURL=scanInternals.js.map

/***/ }),

/***/ 3099:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/share.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "share": () => (/* binding */ share)
/* harmony export */ });
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable/from */ 188);
/* harmony import */ var _operators_take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/take */ 5698);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ 6758);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ 3934);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);





function share(options = {}) {
  const {
    connector = () => new _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject(),
    resetOnError = true,
    resetOnComplete = true,
    resetOnRefCountZero = true
  } = options;
  return wrapperSource => {
    let connection = null;
    let resetConnection = null;
    let subject = null;
    let refCount = 0;
    let hasCompleted = false;
    let hasErrored = false;

    const cancelReset = () => {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = null;
    };

    const reset = () => {
      cancelReset();
      connection = subject = null;
      hasCompleted = hasErrored = false;
    };

    const resetAndUnsubscribe = () => {
      const conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };

    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
      refCount++;

      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }

      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(() => {
        refCount--;

        if (refCount === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);

      if (!connection) {
        connection = new _Subscriber__WEBPACK_IMPORTED_MODULE_2__.SafeSubscriber({
          next: value => dest.next(value),
          error: err => {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: () => {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        (0,_observable_from__WEBPACK_IMPORTED_MODULE_3__.from)(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}

function handleReset(reset, on, ...args) {
  if (on === true) {
    reset();
    return null;
  }

  if (on === false) {
    return null;
  }

  return on(...args).pipe((0,_operators_take__WEBPACK_IMPORTED_MODULE_4__.take)(1)).subscribe(() => reset());
} //# sourceMappingURL=share.js.map

/***/ }),

/***/ 5684:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/skip.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "skip": () => (/* binding */ skip)
/* harmony export */ });
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 9300);

function skip(count) {
  return (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)((_, index) => count <= index);
} //# sourceMappingURL=skip.js.map

/***/ }),

/***/ 8675:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/startWith.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "startWith": () => (/* binding */ startWith)
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/concat */ 1350);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 3269);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);



function startWith(...values) {
  const scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popScheduler)(values);
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    (scheduler ? (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__.concat)(values, source, scheduler) : (0,_observable_concat__WEBPACK_IMPORTED_MODULE_2__.concat)(values, source)).subscribe(subscriber);
  });
} //# sourceMappingURL=startWith.js.map

/***/ }),

/***/ 9468:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeOn": () => (/* binding */ subscribeOn)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);

function subscribeOn(scheduler, delay = 0) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));
  });
} //# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ 3900:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "switchMap": () => (/* binding */ switchMap)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function switchMap(project, resultSelector) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let innerSubscriber = null;
    let index = 0;
    let isComplete = false;

    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();

    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      let innerIndex = 0;
      const outerIndex = index++;
      (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(project(value, outerIndex)).subscribe(innerSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, innerValue => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {
        innerSubscriber = null;
        checkComplete();
      }));
    }, () => {
      isComplete = true;
      checkComplete();
    }));
  });
} //# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ 5698:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/take.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "take": () => (/* binding */ take)
/* harmony export */ });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/empty */ 515);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function take(count) {
  return count <= 0 ? () => _observable_empty__WEBPACK_IMPORTED_MODULE_0__.EMPTY : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let seen = 0;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      if (++seen <= count) {
        subscriber.next(value);

        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
} //# sourceMappingURL=take.js.map

/***/ }),

/***/ 2035:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/takeLast.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeLast": () => (/* binding */ takeLast)
/* harmony export */ });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/empty */ 515);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function takeLast(count) {
  return count <= 0 ? () => _observable_empty__WEBPACK_IMPORTED_MODULE_0__.EMPTY : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let buffer = [];
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, () => {
      for (const value of buffer) {
        subscriber.next(value);
      }

      subscriber.complete();
    }, undefined, () => {
      buffer = null;
    }));
  });
} //# sourceMappingURL=takeLast.js.map

/***/ }),

/***/ 2722:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeUntil": () => (/* binding */ takeUntil)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/noop */ 5032);




function takeUntil(notifier) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(notifier).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, () => subscriber.complete(), _util_noop__WEBPACK_IMPORTED_MODULE_3__.noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
} //# sourceMappingURL=takeUntil.js.map

/***/ }),

/***/ 8505:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/tap.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tap": () => (/* binding */ tap)
/* harmony export */ });
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 576);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/identity */ 4671);




function tap(observerOrNext, error, complete) {
  const tapObserver = (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(observerOrNext) || error || complete ? {
    next: observerOrNext,
    error,
    complete
  } : observerOrNext;
  return tapObserver ? (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    var _a;

    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    let isUnsub = true;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      var _a;

      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
      subscriber.next(value);
    }, () => {
      var _a;

      isUnsub = false;
      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      subscriber.complete();
    }, err => {
      var _a;

      isUnsub = false;
      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
      subscriber.error(err);
    }, () => {
      var _a, _b;

      if (isUnsub) {
        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      }

      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : _util_identity__WEBPACK_IMPORTED_MODULE_3__.identity;
} //# sourceMappingURL=tap.js.map

/***/ }),

/***/ 8068:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throwIfEmpty": () => (/* binding */ throwIfEmpty)
/* harmony export */ });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/EmptyError */ 6805);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 4482);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 5403);



function throwIfEmpty(errorFactory = defaultErrorFactory) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let hasValue = false;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      hasValue = true;
      subscriber.next(value);
    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));
  });
}

function defaultErrorFactory() {
  return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_2__.EmptyError();
} //# sourceMappingURL=throwIfEmpty.js.map

/***/ }),

/***/ 3854:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleArray": () => (/* binding */ scheduleArray)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);

function scheduleArray(input, scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    let i = 0;
    return scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);

        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
} //# sourceMappingURL=scheduleArray.js.map

/***/ }),

/***/ 3777:
/*!********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleAsyncIterable": () => (/* binding */ scheduleAsyncIterable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/executeSchedule */ 9672);


function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }

  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, () => {
      const iterator = input[Symbol.asyncIterator]();
      (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, () => {
        iterator.next().then(result => {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
} //# sourceMappingURL=scheduleAsyncIterable.js.map

/***/ }),

/***/ 6340:
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleIterable": () => (/* binding */ scheduleIterable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 9751);
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/iterator */ 2202);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isFunction */ 576);
/* harmony import */ var _util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/executeSchedule */ 9672);




function scheduleIterable(input, scheduler) {
  return new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(subscriber => {
    let iterator;
    (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, () => {
      iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__.iterator]();
      (0,_util_executeSchedule__WEBPACK_IMPORTED_MODULE_1__.executeSchedule)(subscriber, scheduler, () => {
        let value;
        let done;

        try {
          ({
            value,
            done
          } = iterator.next());
        } catch (err) {
          subscriber.error(err);
          return;
        }

        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return () => (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_3__.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
  });
} //# sourceMappingURL=scheduleIterable.js.map

/***/ }),

/***/ 3904:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleObservable": () => (/* binding */ scheduleObservable)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/observeOn */ 5363);
/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/subscribeOn */ 9468);



function scheduleObservable(input, scheduler) {
  return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__.subscribeOn)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__.observeOn)(scheduler));
} //# sourceMappingURL=scheduleObservable.js.map

/***/ }),

/***/ 2226:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "schedulePromise": () => (/* binding */ schedulePromise)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/innerFrom */ 8421);
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/observeOn */ 5363);
/* harmony import */ var _operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/subscribeOn */ 9468);



function schedulePromise(input, scheduler) {
  return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_0__.innerFrom)(input).pipe((0,_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_1__.subscribeOn)(scheduler), (0,_operators_observeOn__WEBPACK_IMPORTED_MODULE_2__.observeOn)(scheduler));
} //# sourceMappingURL=schedulePromise.js.map

/***/ }),

/***/ 6042:
/*!*************************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduleReadableStreamLike": () => (/* binding */ scheduleReadableStreamLike)
/* harmony export */ });
/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduleAsyncIterable */ 3777);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isReadableStreamLike */ 3260);


function scheduleReadableStreamLike(input, scheduler) {
  return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_0__.scheduleAsyncIterable)((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_1__.readableStreamLikeToAsyncGenerator)(input), scheduler);
} //# sourceMappingURL=scheduleReadableStreamLike.js.map

/***/ }),

/***/ 5864:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scheduled": () => (/* binding */ scheduled)
/* harmony export */ });
/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduleObservable */ 3904);
/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulePromise */ 2226);
/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scheduleArray */ 3854);
/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scheduleIterable */ 6340);
/* harmony import */ var _scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduleAsyncIterable */ 3777);
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isInteropObservable */ 3670);
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isPromise */ 8239);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ 1144);
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/isIterable */ 6495);
/* harmony import */ var _util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isAsyncIterable */ 2206);
/* harmony import */ var _util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/throwUnobservableError */ 4532);
/* harmony import */ var _util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/isReadableStreamLike */ 3260);
/* harmony import */ var _scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scheduleReadableStreamLike */ 6042);













function scheduled(input, scheduler) {
  if (input != null) {
    if ((0,_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_0__.isInteropObservable)(input)) {
      return (0,_scheduleObservable__WEBPACK_IMPORTED_MODULE_1__.scheduleObservable)(input, scheduler);
    }

    if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(input)) {
      return (0,_scheduleArray__WEBPACK_IMPORTED_MODULE_3__.scheduleArray)(input, scheduler);
    }

    if ((0,_util_isPromise__WEBPACK_IMPORTED_MODULE_4__.isPromise)(input)) {
      return (0,_schedulePromise__WEBPACK_IMPORTED_MODULE_5__.schedulePromise)(input, scheduler);
    }

    if ((0,_util_isAsyncIterable__WEBPACK_IMPORTED_MODULE_6__.isAsyncIterable)(input)) {
      return (0,_scheduleAsyncIterable__WEBPACK_IMPORTED_MODULE_7__.scheduleAsyncIterable)(input, scheduler);
    }

    if ((0,_util_isIterable__WEBPACK_IMPORTED_MODULE_8__.isIterable)(input)) {
      return (0,_scheduleIterable__WEBPACK_IMPORTED_MODULE_9__.scheduleIterable)(input, scheduler);
    }

    if ((0,_util_isReadableStreamLike__WEBPACK_IMPORTED_MODULE_10__.isReadableStreamLike)(input)) {
      return (0,_scheduleReadableStreamLike__WEBPACK_IMPORTED_MODULE_11__.scheduleReadableStreamLike)(input, scheduler);
    }
  }

  throw (0,_util_throwUnobservableError__WEBPACK_IMPORTED_MODULE_12__.createInvalidObservableTypeError)(input);
} //# sourceMappingURL=scheduled.js.map

/***/ }),

/***/ 3071:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/Action.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Action": () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ 6921);

class Action extends _Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription {
  constructor(scheduler, work) {
    super();
  }

  schedule(state, delay = 0) {
    return this;
  }

} //# sourceMappingURL=Action.js.map

/***/ }),

/***/ 7567:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncAction": () => (/* binding */ AsyncAction)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ 3071);
/* harmony import */ var _intervalProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intervalProvider */ 9213);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/arrRemove */ 8737);



class AsyncAction extends _Action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.pending = false;
  }

  schedule(state, delay = 0) {
    if (this.closed) {
      return this;
    }

    this.state = state;
    const id = this.id;
    const scheduler = this.scheduler;

    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }

    this.pending = true;
    this.delay = delay;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
    return this;
  }

  requestAsyncId(scheduler, _id, delay = 0) {
    return _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  }

  recycleAsyncId(_scheduler, id, delay = 0) {
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }

    _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.clearInterval(id);
    return undefined;
  }

  execute(state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }

    this.pending = false;

    const error = this._execute(state, delay);

    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  }

  _execute(state, _delay) {
    let errored = false;
    let errorValue;

    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error('Scheduled action threw falsy error');
    }

    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  }

  unsubscribe() {
    if (!this.closed) {
      const {
        id,
        scheduler
      } = this;
      const {
        actions
      } = scheduler;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__.arrRemove)(actions, this);

      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }

      this.delay = null;
      super.unsubscribe();
    }
  }

} //# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ 8950:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncScheduler": () => (/* binding */ AsyncScheduler)
/* harmony export */ });
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Scheduler */ 6646);

class AsyncScheduler extends _Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler {
  constructor(SchedulerAction, now = _Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler.now) {
    super(SchedulerAction, now);
    this.actions = [];
    this._active = false;
    this._scheduled = undefined;
  }

  flush(action) {
    const {
      actions
    } = this;

    if (this._active) {
      actions.push(action);
      return;
    }

    let error;
    this._active = true;

    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());

    this._active = false;

    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }

      throw error;
    }
  }

} //# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ 4986:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/async.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "async": () => (/* binding */ async),
/* harmony export */   "asyncScheduler": () => (/* binding */ asyncScheduler)
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ 7567);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ 8950);


const asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);
const async = asyncScheduler; //# sourceMappingURL=async.js.map

/***/ }),

/***/ 6063:
/*!********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dateTimestampProvider": () => (/* binding */ dateTimestampProvider)
/* harmony export */ });
const dateTimestampProvider = {
  now() {
    return (dateTimestampProvider.delegate || Date).now();
  },

  delegate: undefined
}; //# sourceMappingURL=dateTimestampProvider.js.map

/***/ }),

/***/ 9213:
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intervalProvider": () => (/* binding */ intervalProvider)
/* harmony export */ });
const intervalProvider = {
  setInterval(handler, timeout, ...args) {
    const {
      delegate
    } = intervalProvider;

    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval(handler, timeout, ...args);
    }

    return setInterval(handler, timeout, ...args);
  },

  clearInterval(handle) {
    const {
      delegate
    } = intervalProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },

  delegate: undefined
}; //# sourceMappingURL=intervalProvider.js.map

/***/ }),

/***/ 3410:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "timeoutProvider": () => (/* binding */ timeoutProvider)
/* harmony export */ });
const timeoutProvider = {
  setTimeout(handler, timeout, ...args) {
    const {
      delegate
    } = timeoutProvider;

    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout(handler, timeout, ...args);
    }

    return setTimeout(handler, timeout, ...args);
  },

  clearTimeout(handle) {
    const {
      delegate
    } = timeoutProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },

  delegate: undefined
}; //# sourceMappingURL=timeoutProvider.js.map

/***/ }),

/***/ 2202:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/symbol/iterator.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSymbolIterator": () => (/* binding */ getSymbolIterator),
/* harmony export */   "iterator": () => (/* binding */ iterator)
/* harmony export */ });
function getSymbolIterator() {
  if (typeof Symbol !== 'function' || !Symbol.iterator) {
    return '@@iterator';
  }

  return Symbol.iterator;
}
const iterator = getSymbolIterator(); //# sourceMappingURL=iterator.js.map

/***/ }),

/***/ 8822:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/symbol/observable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observable": () => (/* binding */ observable)
/* harmony export */ });
const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')(); //# sourceMappingURL=observable.js.map

/***/ }),

/***/ 6805:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/EmptyError.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EmptyError": () => (/* binding */ EmptyError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ 3888);

const EmptyError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(_super => function EmptyErrorImpl() {
  _super(this);

  this.name = 'EmptyError';
  this.message = 'no elements in sequence';
}); //# sourceMappingURL=EmptyError.js.map

/***/ }),

/***/ 7448:
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectUnsubscribedError": () => (/* binding */ ObjectUnsubscribedError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ 3888);

const ObjectUnsubscribedError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(_super => function ObjectUnsubscribedErrorImpl() {
  _super(this);

  this.name = 'ObjectUnsubscribedError';
  this.message = 'object unsubscribed';
}); //# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),

/***/ 7896:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnsubscriptionError": () => (/* binding */ UnsubscriptionError)
/* harmony export */ });
/* harmony import */ var _createErrorClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createErrorClass */ 3888);

const UnsubscriptionError = (0,_createErrorClass__WEBPACK_IMPORTED_MODULE_0__.createErrorClass)(_super => function UnsubscriptionErrorImpl(errors) {
  _super(this);

  this.message = errors ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\n  ')}` : '';
  this.name = 'UnsubscriptionError';
  this.errors = errors;
}); //# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),

/***/ 3269:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/args.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "popNumber": () => (/* binding */ popNumber),
/* harmony export */   "popResultSelector": () => (/* binding */ popResultSelector),
/* harmony export */   "popScheduler": () => (/* binding */ popScheduler)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);
/* harmony import */ var _isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isScheduler */ 3532);



function last(arr) {
  return arr[arr.length - 1];
}

function popResultSelector(args) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
  return (0,_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === 'number' ? args.pop() : defaultValue;
} //# sourceMappingURL=args.js.map

/***/ }),

/***/ 4742:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argsArgArrayOrObject": () => (/* binding */ argsArgArrayOrObject)
/* harmony export */ });
const {
  isArray
} = Array;
const {
  getPrototypeOf,
  prototype: objectProto,
  keys: getKeys
} = Object;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    const first = args[0];

    if (isArray(first)) {
      return {
        args: first,
        keys: null
      };
    }

    if (isPOJO(first)) {
      const keys = getKeys(first);
      return {
        args: keys.map(key => first[key]),
        keys
      };
    }
  }

  return {
    args: args,
    keys: null
  };
}

function isPOJO(obj) {
  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
} //# sourceMappingURL=argsArgArrayOrObject.js.map

/***/ }),

/***/ 8737:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/arrRemove.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrRemove": () => (/* binding */ arrRemove)
/* harmony export */ });
function arrRemove(arr, item) {
  if (arr) {
    const index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
} //# sourceMappingURL=arrRemove.js.map

/***/ }),

/***/ 3888:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/createErrorClass.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createErrorClass": () => (/* binding */ createErrorClass)
/* harmony export */ });
function createErrorClass(createImpl) {
  const _super = instance => {
    Error.call(instance);
    instance.stack = new Error().stack;
  };

  const ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
} //# sourceMappingURL=createErrorClass.js.map

/***/ }),

/***/ 1810:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/createObject.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createObject": () => (/* binding */ createObject)
/* harmony export */ });
function createObject(keys, values) {
  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});
} //# sourceMappingURL=createObject.js.map

/***/ }),

/***/ 2806:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/errorContext.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "captureError": () => (/* binding */ captureError),
/* harmony export */   "errorContext": () => (/* binding */ errorContext)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ 2416);

let context = null;
function errorContext(cb) {
  if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {
    const isRoot = !context;

    if (isRoot) {
      context = {
        errorThrown: false,
        error: null
      };
    }

    cb();

    if (isRoot) {
      const {
        errorThrown,
        error
      } = context;
      context = null;

      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
} //# sourceMappingURL=errorContext.js.map

/***/ }),

/***/ 9672:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeSchedule": () => (/* binding */ executeSchedule)
/* harmony export */ });
function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {
  const scheduleSubscription = scheduler.schedule(function () {
    work();

    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);

  if (!repeat) {
    return scheduleSubscription;
  }
} //# sourceMappingURL=executeSchedule.js.map

/***/ }),

/***/ 4671:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/identity.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": () => (/* binding */ identity)
/* harmony export */ });
function identity(x) {
  return x;
} //# sourceMappingURL=identity.js.map

/***/ }),

/***/ 1144:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isArrayLike.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayLike": () => (/* binding */ isArrayLike)
/* harmony export */ });
const isArrayLike = x => x && typeof x.length === 'number' && typeof x !== 'function'; //# sourceMappingURL=isArrayLike.js.map

/***/ }),

/***/ 2206:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isAsyncIterable": () => (/* binding */ isAsyncIterable)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);

function isAsyncIterable(obj) {
  return Symbol.asyncIterator && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
} //# sourceMappingURL=isAsyncIterable.js.map

/***/ }),

/***/ 576:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isFunction.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFunction": () => (/* binding */ isFunction)
/* harmony export */ });
function isFunction(value) {
  return typeof value === 'function';
} //# sourceMappingURL=isFunction.js.map

/***/ }),

/***/ 3670:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInteropObservable": () => (/* binding */ isInteropObservable)
/* harmony export */ });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/observable */ 8822);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);


function isInteropObservable(input) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input[_symbol_observable__WEBPACK_IMPORTED_MODULE_1__.observable]);
} //# sourceMappingURL=isInteropObservable.js.map

/***/ }),

/***/ 6495:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isIterable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIterable": () => (/* binding */ isIterable)
/* harmony export */ });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/iterator */ 2202);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);


function isIterable(input) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(input === null || input === void 0 ? void 0 : input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator]);
} //# sourceMappingURL=isIterable.js.map

/***/ }),

/***/ 8239:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isPromise.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPromise": () => (/* binding */ isPromise)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);

function isPromise(value) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value === null || value === void 0 ? void 0 : value.then);
} //# sourceMappingURL=isPromise.js.map

/***/ }),

/***/ 3260:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isReadableStreamLike": () => (/* binding */ isReadableStreamLike),
/* harmony export */   "readableStreamLikeToAsyncGenerator": () => (/* binding */ readableStreamLikeToAsyncGenerator)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 655);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction */ 576);


function readableStreamLikeToAsyncGenerator(readableStream) {
  return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__asyncGenerator)(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {
    const reader = readableStream.getReader();

    try {
      while (true) {
        const {
          value,
          done
        } = yield (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(reader.read());

        if (done) {
          return yield (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(void 0);
        }

        yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__await)(value);
      }
    } finally {
      reader.releaseLock();
    }
  });
}
function isReadableStreamLike(obj) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);
} //# sourceMappingURL=isReadableStreamLike.js.map

/***/ }),

/***/ 3532:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isScheduler.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isScheduler": () => (/* binding */ isScheduler)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);

function isScheduler(value) {
  return value && (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value.schedule);
} //# sourceMappingURL=isScheduler.js.map

/***/ }),

/***/ 4482:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/lift.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasLift": () => (/* binding */ hasLift),
/* harmony export */   "operate": () => (/* binding */ operate)
/* harmony export */ });
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFunction */ 576);

function hasLift(source) {
  return (0,_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return source => {
    if (hasLift(source)) {
      return source.lift(function (liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }

    throw new TypeError('Unable to lift unknown Observable type');
  };
} //# sourceMappingURL=lift.js.map

/***/ }),

/***/ 3268:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapOneOrManyArgs": () => (/* binding */ mapOneOrManyArgs)
/* harmony export */ });
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operators/map */ 4004);

const {
  isArray
} = Array;

function callOrApply(fn, args) {
  return isArray(args) ? fn(...args) : fn(args);
}

function mapOneOrManyArgs(fn) {
  return (0,_operators_map__WEBPACK_IMPORTED_MODULE_0__.map)(args => callOrApply(fn, args));
} //# sourceMappingURL=mapOneOrManyArgs.js.map

/***/ }),

/***/ 5032:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/noop.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "noop": () => (/* binding */ noop)
/* harmony export */ });
function noop() {} //# sourceMappingURL=noop.js.map

/***/ }),

/***/ 9635:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/pipe.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "pipeFromArray": () => (/* binding */ pipeFromArray)
/* harmony export */ });
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ 4671);

function pipe(...fns) {
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;
  }

  if (fns.length === 1) {
    return fns[0];
  }

  return function piped(input) {
    return fns.reduce((prev, fn) => fn(prev), input);
  };
} //# sourceMappingURL=pipe.js.map

/***/ }),

/***/ 7849:
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reportUnhandledError": () => (/* binding */ reportUnhandledError)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ 2416);
/* harmony import */ var _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/timeoutProvider */ 3410);


function reportUnhandledError(err) {
  _scheduler_timeoutProvider__WEBPACK_IMPORTED_MODULE_0__.timeoutProvider.setTimeout(() => {
    const {
      onUnhandledError
    } = _config__WEBPACK_IMPORTED_MODULE_1__.config;

    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
} //# sourceMappingURL=reportUnhandledError.js.map

/***/ }),

/***/ 4532:
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createInvalidObservableTypeError": () => (/* binding */ createInvalidObservableTypeError)
/* harmony export */ });
function createInvalidObservableTypeError(input) {
  return new TypeError(`You provided ${input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);
} //# sourceMappingURL=throwUnobservableError.js.map

/***/ }),

/***/ 7463:
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/***/ ((module) => {

"use strict";
/* eslint-env node */
 // SDP helpers.

const SDPUtils = {}; // Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883

SDPUtils.generateIdentifier = function () {
  return Math.random().toString(36).substr(2, 10);
}; // The RTCP CNAME used by all peerconnections from the same JS.


SDPUtils.localCName = SDPUtils.generateIdentifier(); // Splits SDP into lines, dealing with both CRLF and LF.

SDPUtils.splitLines = function (blob) {
  return blob.trim().split('\n').map(line => line.trim());
}; // Splits SDP into sessionpart and mediasections. Ensures CRLF.


SDPUtils.splitSections = function (blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\r\n');
}; // Returns the session description.


SDPUtils.getDescription = function (blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
}; // Returns the individual media sections.


SDPUtils.getMediaSections = function (blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
}; // Returns lines that start with a certain prefix.


SDPUtils.matchPrefix = function (blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
}; // Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.


SDPUtils.parseCandidate = function (line) {
  let parts; // Parse both variants.

  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {
      1: 'rtp',
      2: 'rtcp'
    }[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4],
    // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;

      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;

      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;

      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.

        candidate.usernameFragment = parts[i + 1];
        break;

      default:
        // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }

        break;
    }
  }

  return candidate;
}; // Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!


SDPUtils.writeCandidate = function (candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);
  const component = candidate.component;

  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }

  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);
  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);

  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }

  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }

  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }

  return 'candidate:' + sdp.join(' ');
}; // Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar


SDPUtils.parseIceOptions = function (line) {
  return line.substr(14).split(' ');
}; // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2


SDPUtils.parseRtpMap = function (line) {
  let parts = line.substr(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id

  };
  parts = parts[0].split('/');
  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate

  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // legacy alias, got renamed back to channels in ORTC.

  parsed.numChannels = parsed.channels;
  return parsed;
}; // Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.


SDPUtils.writeRtpMap = function (codec) {
  let pt = codec.payloadType;

  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }

  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\r\n';
}; // Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset


SDPUtils.parseExtmap = function (line) {
  const parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
}; // Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.


SDPUtils.writeExtmap = function (headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\r\n';
}; // Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on


SDPUtils.parseFmtp = function (line) {
  const parsed = {};
  let kv;
  const parts = line.substr(line.indexOf(' ') + 1).split(';');

  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }

  return parsed;
}; // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.


SDPUtils.writeFmtp = function (codec) {
  let line = '';
  let pt = codec.payloadType;

  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }

  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }

  return line;
}; // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi


SDPUtils.parseRtcpFb = function (line) {
  const parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
}; // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.


SDPUtils.writeRtcpFb = function (codec) {
  let lines = '';
  let pt = codec.payloadType;

  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }

  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\r\n';
    });
  }

  return lines;
}; // Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something


SDPUtils.parseSsrcMedia = function (line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  const colon = line.indexOf(':', sp);

  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }

  return parts;
}; // Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34


SDPUtils.parseSsrcGroup = function (line) {
  const parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10))
  };
}; // Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.


SDPUtils.getMid = function (mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];

  if (mid) {
    return mid.substr(6);
  }
}; // Parses a fingerprint line for DTLS-SRTP.


SDPUtils.parseFingerprint = function (line) {
  const parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(),
    // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.

  };
}; // Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.


SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:'); // Note: a=setup line is ignored since we use the 'auto' role in Edge.

  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
}; // Serializes DTLS parameters to SDP.


SDPUtils.writeDtlsParameters = function (params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
}; // Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members


SDPUtils.parseCryptoLine = function (line) {
  const parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3)
  };
};

SDPUtils.writeCryptoLine = function (parameters) {
  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\r\n';
}; // Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*


SDPUtils.parseCryptoKeyParams = function (keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }

  const parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined
  };
};

SDPUtils.writeCryptoKeyParams = function (keyParams) {
  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');
}; // Extracts all SDES parameters.


SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
}; // Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.


SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];

  if (!(ufrag && pwd)) {
    return null;
  }

  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10)
  };
}; // Serializes ICE parameters to SDP.


SDPUtils.writeIceParameters = function (params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' + 'a=ice-pwd:' + params.password + '\r\n';

  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }

  return sdp;
}; // Parses the SDP media section and returns RTCRtpParameters.


SDPUtils.parseRtpParameters = function (mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');

  for (let i = 3; i < mline.length; i++) {
    // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];

    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' '); // Only the first a=fmtp:<pt> is considered.

      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec); // parse FEC mechanisms from rtpmap lines.

      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;

        default:
          // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }

  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  }); // FIXME: parse rtcp.

  return description;
}; // Generates parts of the SDP media section describing the capabilities /
// parameters.


SDPUtils.writeRtpDescription = function (kind, caps) {
  let sdp = ''; // Build the mline.

  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.

  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }

    return codec.payloadType;
  }).join(' ') + '\r\n';
  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n'; // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.

  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });

  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  } // FIXME: write fecMechanisms.


  return sdp;
}; // Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.


SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1; // filter a=ssrc:... cname:, ignore PlanB-msid

  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;
  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {
    const parts = line.substr(17).split(' ');
    return parts.map(part => parseInt(part, 10));
  });

  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };

      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {
          ssrc: secondarySsrc
        };
      }

      encodingParameters.push(encParam);

      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });

  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  } // we support both b=AS and b=TIAS but interpret AS as TIAS.


  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');

  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
    } else {
      bandwidth = undefined;
    }

    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }

  return encodingParameters;
}; // parses http://draft.ortc.org/#rtcrtcpparameters*


SDPUtils.parseRtcpParameters = function (mediaSection) {
  const rtcpParameters = {}; // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.

  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];

  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  } // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize


  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0; // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.

  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;
  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function (rtcpParameters) {
  let sdp = '';

  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }

  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }

  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\r\n';
  }

  return sdp;
}; // parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.


SDPUtils.parseMsid = function (mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');

  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {
      stream: parts[0],
      track: parts[1]
    };
  }

  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');

  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {
      stream: parts[0],
      track: parts[1]
    };
  }
}; // SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05


SDPUtils.parseSctpDescription = function (mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;

  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }

  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }

  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');

  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize
    };
  }

  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');

  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0].substr(10).split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize
    };
  }
}; // SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)


SDPUtils.writeSctpDescription = function (media, sctp) {
  let output = [];

  if (media.protocol !== 'DTLS/SCTP') {
    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctp-port:' + sctp.port + '\r\n'];
  } else {
    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'];
  }

  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }

  return output.join('');
}; // Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range


SDPUtils.generateSessionId = function () {
  return Math.random().toString().substr(2, 21);
}; // Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'


SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;

  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }

  const user = sessUser || 'thisisadapterortc'; // FIXME: sess-id should be an NTP timestamp.

  return 'v=0\r\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\r\n' + 's=-\r\n' + 't=0 0\r\n';
}; // Gets the direction from the mediaSection or the sessionpart.


SDPUtils.getDirection = function (mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);

  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);

      default: // FIXME: What should happen here?

    }
  }

  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }

  return 'sendrecv';
};

SDPUtils.getKind = function (mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function (mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function (mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function (mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
}; // a very naive interpretation of a valid SDP.


SDPUtils.isValidSDP = function (blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }

  const lines = SDPUtils.splitLines(blob);

  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    } // TODO: check the modifier a bit more.

  }

  return true;
}; // Expose public methods.


if (true) {
  module.exports = SDPUtils;
}

/***/ }),

/***/ 6868:
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter_factory.js */ 7450);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */



const adapter = (0,_adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__.adapterFactory)({
  window: typeof window === 'undefined' ? undefined : window
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (adapter);

/***/ }),

/***/ 7450:
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "adapterFactory": () => (/* binding */ adapterFactory)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 6794);
/* harmony import */ var _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrome/chrome_shim */ 7587);
/* harmony import */ var _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firefox/firefox_shim */ 5188);
/* harmony import */ var _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./safari/safari_shim */ 9681);
/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common_shim */ 656);
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sdp */ 7463);
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_5__);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 // Browser shims.





 // Shimming starts here.

function adapterFactory({
  window
} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true
}) {
  // Utils.
  const logging = _utils__WEBPACK_IMPORTED_MODULE_0__.log;
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__.detectBrowser(window);
  const adapter = {
    browserDetails,
    commonShim: _common_shim__WEBPACK_IMPORTED_MODULE_4__,
    extractVersion: _utils__WEBPACK_IMPORTED_MODULE_0__.extractVersion,
    disableLog: _utils__WEBPACK_IMPORTED_MODULE_0__.disableLog,
    disableWarnings: _utils__WEBPACK_IMPORTED_MODULE_0__.disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp: sdp__WEBPACK_IMPORTED_MODULE_5__
  }; // Shim browser if found.

  switch (browserDetails.browser) {
    case 'chrome':
      if (!_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ || !_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection || !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }

      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }

      logging('adapter.js shimming chrome.'); // Export to the adapter global object visible in the browser.

      adapter.browserShim = _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__; // Must be called before shimPeerConnection.

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimMediaStream(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimOnTrack(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimAddTrackRemoveTrack(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetSendersWithDtmf(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetStats(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimSenderReceiverGetStats(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.fixNegotiationNeeded(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);
      break;

    case 'firefox':
      if (!_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ || !_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection || !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }

      logging('adapter.js shimming firefox.'); // Export to the adapter global object visible in the browser.

      adapter.browserShim = _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__; // Must be called before shimPeerConnection.

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetUserMedia(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimOnTrack(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRemoveStream(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimSenderGetStats(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimReceiverGetStats(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRTCDataChannel(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimAddTransceiver(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetParameters(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateOffer(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateAnswer(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      break;

    case 'safari':
      if (!_safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }

      logging('adapter.js shimming safari.'); // Export to the adapter global object visible in the browser.

      adapter.browserShim = _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__; // Must be called before shimCallbackAPI.

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRTCIceServerUrls(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCreateOfferLegacy(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCallbacksAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimLocalStreamsAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRemoteStreamsAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimTrackEventTransceiver(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimGetUserMedia(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimAudioContext(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);
      break;

    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}

/***/ }),

/***/ 7587:
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fixNegotiationNeeded": () => (/* binding */ fixNegotiationNeeded),
/* harmony export */   "shimAddTrackRemoveTrack": () => (/* binding */ shimAddTrackRemoveTrack),
/* harmony export */   "shimAddTrackRemoveTrackWithNative": () => (/* binding */ shimAddTrackRemoveTrackWithNative),
/* harmony export */   "shimGetDisplayMedia": () => (/* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia),
/* harmony export */   "shimGetSendersWithDtmf": () => (/* binding */ shimGetSendersWithDtmf),
/* harmony export */   "shimGetStats": () => (/* binding */ shimGetStats),
/* harmony export */   "shimGetUserMedia": () => (/* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia),
/* harmony export */   "shimMediaStream": () => (/* binding */ shimMediaStream),
/* harmony export */   "shimOnTrack": () => (/* binding */ shimOnTrack),
/* harmony export */   "shimPeerConnection": () => (/* binding */ shimPeerConnection),
/* harmony export */   "shimSenderReceiverGetStats": () => (/* binding */ shimSenderReceiverGetStats)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ 6794);
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ 4463);
/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ 1761);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */





function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}
function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },

      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }

        this.addEventListener('track', this._ontrack = f);
      },

      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      if (!this._ontrackpoly) {
        this._ontrackpoly = e => {
          // onaddstream does not fire when a track is added to an existing
          // stream. But stream.onaddtrack is implemented so we use that.
          e.stream.addEventListener('addtrack', te => {
            let receiver;

            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);
            } else {
              receiver = {
                track: te.track
              };
            }

            const event = new Event('track');
            event.track = te.track;
            event.receiver = receiver;
            event.transceiver = {
              receiver
            };
            event.streams = [e.stream];
            this.dispatchEvent(event);
          });
          e.stream.getTracks().forEach(track => {
            let receiver;

            if (window.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);
            } else {
              receiver = {
                track
              };
            }

            const event = new Event('track');
            event.track = track;
            event.receiver = receiver;
            event.transceiver = {
              receiver
            };
            event.streams = [e.stream];
            this.dispatchEvent(event);
          });
        };

        this.addEventListener('addstream', this._ontrackpoly);
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver', {
          value: {
            receiver: e.receiver
          }
        });
      }

      return e;
    });
  }
}
function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function (pc, track) {
      return {
        track,

        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }

          return this._dtmf;
        },

        _pc: pc
      };
    }; // augment addTrack when getSenders is not available.


    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };

      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        let sender = origAddTrack.apply(this, arguments);

        if (!sender) {
          sender = shimSenderWithDtmf(this, track);

          this._senders.push(sender);
        }

        return sender;
      };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;

      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);

        const idx = this._senders.indexOf(sender);

        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }

    const origAddStream = window.RTCPeerConnection.prototype.addStream;

    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        const sender = this._senders.find(s => s.track === track);

        if (sender) {
          // remove sender
          this._senders.splice(this._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }

        return this._dtmf;
      }

    });
  }
}
function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;

  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments; // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.

    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    } // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.


    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function (response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    }; // shim getStats with maplike support


    const makeMapStats = function (stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function (response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_, selector]);
    } // promise-support


    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [function (response) {
        resolve(makeMapStats(fixChromeStats_(response)));
      }, reject]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  } // shim sender stats.


  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }

    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
      /* Note: this will include stats of all senders that
       *   send a track with the same id as sender.track as
       *   it is not possible to identify the RTCRtpSender.
       */
      _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, sender.track, true));
    };
  } // shim receiver stats.


  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;

    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        const receivers = origGetReceivers.apply(this, []);
        receivers.forEach(receiver => receiver._pc = this);
        return receivers;
      };
    }

    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });

    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result => _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  } // shim RTCPeerConnection.getStats(track).


  const origGetStats = window.RTCPeerConnection.prototype.getStats;

  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }

        return r.track === track;
      });

      if (err || sender && receiver) {
        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }

      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
    }

    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);
  };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }

    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    const sender = origAddTrack.apply(this, arguments);

    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }

    return sender;
  };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;

  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);

      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;

  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach(streamId => {
        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);

        if (idx !== -1) {
          this._shimmedLocalStreams[streamId].splice(idx, 1);
        }

        if (this._shimmedLocalStreams[streamId].length === 1) {
          delete this._shimmedLocalStreams[streamId];
        }
      });
    }

    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  } // shim addTrack and removeTrack.


  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  } // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.


  const origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;

  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    const nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map(stream => this._reverseStreams[stream.id]);
  };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;

  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);

      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
    }); // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.

    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }

    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };

  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    }

    const streams = [].slice.call(arguments, 1);

    if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {
      // this is not fully correct but all we can manage without
      // [[associated MediaStreams]] internal slot.
      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
    }

    const alreadyExists = this.getSenders().find(s => s.track === track);

    if (alreadyExists) {
      throw new DOMException('Track already exists.', 'InvalidAccessError');
    }

    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    const oldStream = this._streams[stream.id];

    if (oldStream) {
      // this is using odd Chrome behaviour, use with caution:
      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
      // Note: we rely on the high-level addTrack/dtmf shim to
      // create the sender with a dtmf sender.
      oldStream.addTrack(track); // Trigger ONN async.

      Promise.resolve().then(() => {
        this.dispatchEvent(new Event('negotiationneeded'));
      });
    } else {
      const newStream = new window.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }

    return this.getSenders().find(s => s.track === track);
  }; // replace the internal stream id with the external one and
  // vice versa.


  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }

  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }

  ['createOffer', 'createAnswer'].forEach(function (method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {
      [method]() {
        const args = arguments;
        const isLegacyCall = arguments.length && typeof arguments[0] === 'function';

        if (isLegacyCall) {
          return nativeMethod.apply(this, [description => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          }, err => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]]);
        }

        return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));
      }

    };
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  const origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;

  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }

    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  }; // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier


  const origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
    get() {
      const description = origLocalDescription.get.apply(this);

      if (description.type === '') {
        return description;
      }

      return replaceInternalStreamId(this, description);
    }

  });

  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    if (this.signalingState === 'closed') {
      throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
    } // We can not yet check for sender instanceof RTCRtpSender
    // since we shim RTPSender. So we check if sender._pc is set.


    if (!sender._pc) {
      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
    }

    const isLocal = sender._pc === this;

    if (!isLocal) {
      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
    } // Search for the native stream the senders track belongs to.


    this._streams = this._streams || {};
    let stream;
    Object.keys(this._streams).forEach(streamid => {
      const hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);

      if (hasTrack) {
        stream = this._streams[streamid];
      }
    });

    if (stream) {
      if (stream.getTracks().length === 1) {
        // if this is the last track of the stream, remove the stream. This
        // takes care of any shimmed _senders.
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        // relying on the same odd chrome behaviour as above.
        stream.removeTrack(sender.track);
      }

      this.dispatchEvent(new Event('negotiationneeded'));
    }
  };
}
function shimPeerConnection(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }

  if (!window.RTCPeerConnection) {
    return;
  } // shim implicit creation of RTCSessionDescription/RTCIceCandidate


  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      const nativeMethod = window.RTCPeerConnection.prototype[method];
      const methodObj = {
        [method]() {
          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }

      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
} // Attempt to fix ONN in plan-b mode.

function fixNegotiationNeeded(window, browserDetails) {
  _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {
    const pc = e.target;

    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }

    return e;
  });
}

/***/ }),

/***/ 1761:
/*!**********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetDisplayMedia": () => (/* binding */ shimGetDisplayMedia)
/* harmony export */ });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */


function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }

  if (!window.navigator.mediaDevices) {
    return;
  } // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.


  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
    return;
  }

  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then(sourceId => {
      const widthSpecified = constraints.video && constraints.video.width;
      const heightSpecified = constraints.video && constraints.video.height;
      const frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: 'desktop',
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };

      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }

      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }

      return window.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}

/***/ }),

/***/ 4463:
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ 6794);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */



const logging = _utils_js__WEBPACK_IMPORTED_MODULE_0__.log;
function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const constraintsToChrome_ = function (c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }

    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }

      const r = typeof c[key] === 'object' ? c[key] : {
        ideal: c[key]
      };

      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }

      const oldname_ = function (prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }

        return name === 'deviceId' ? 'sourceId' : name;
      };

      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};

        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }

      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });

    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }

    return cc;
  };

  const shimConstraints_ = function (constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }

    constraints = JSON.parse(JSON.stringify(constraints));

    if (constraints && typeof constraints.audio === 'object') {
      const remap = function (obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };

      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }

    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && (typeof face === 'object' ? face : {
        ideal: face
      });
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;

        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }

        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices().then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));

            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }

            if (dev) {
              constraints.video.deviceId = face.exact ? {
                exact: dev.deviceId
              } : {
                ideal: dev.deviceId
              };
            }

            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }

      constraints.video = constraintsToChrome_(constraints.video);
    }

    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function (e) {
    if (browserDetails.version >= 64) {
      return e;
    }

    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,

      toString() {
        return this.name + (this.message && ': ') + this.message;
      }

    };
  };

  const getUserMedia_ = function (constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };

  navigator.getUserMedia = getUserMedia_.bind(navigator); // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.

  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);

    navigator.mediaDevices.getUserMedia = function (cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }

        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}

/***/ }),

/***/ 656:
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "removeExtmapAllowMixed": () => (/* binding */ removeExtmapAllowMixed),
/* harmony export */   "shimAddIceCandidateNullOrEmpty": () => (/* binding */ shimAddIceCandidateNullOrEmpty),
/* harmony export */   "shimConnectionState": () => (/* binding */ shimConnectionState),
/* harmony export */   "shimMaxMessageSize": () => (/* binding */ shimMaxMessageSize),
/* harmony export */   "shimParameterlessSetLocalDescription": () => (/* binding */ shimParameterlessSetLocalDescription),
/* harmony export */   "shimRTCIceCandidate": () => (/* binding */ shimRTCIceCandidate),
/* harmony export */   "shimSendThrowTypeError": () => (/* binding */ shimSendThrowTypeError)
/* harmony export */ });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ 7463);
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ 6794);
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */




function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;

  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate); // Add a serializer that does not serialize the extra attributes.

      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment
        };
      };

      return augmentedCandidate;
    }

    return new NativeRTCIceCandidate(args);
  };

  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype; // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)

  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }

    return e;
  });
}
function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }

    });
  }

  const sctpInDescription = function (description) {
    if (!description || !description.sdp) {
      return false;
    }

    const sections = sdp__WEBPACK_IMPORTED_MODULE_0___default().splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseMLine(mediaSection);
      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function (description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);

    if (match === null || match.length < 2) {
      return -1;
    }

    const version = parseInt(match[1], 10); // Test for NaN (yes, this is ugly)

    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function (remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;

    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }

    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function (description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536; // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697

    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = sdp__WEBPACK_IMPORTED_MODULE_0___default().matchPrefix(description.sdp, 'a=max-message-size:');

    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }

    return maxMessageSize;
  };

  const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null; // Chrome decided to not expose .sctp in plan-b mode.
    // As usual, adapter.js has to do an 'ugly worakaround'
    // to cover up the mess.

    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
      const {
        sdpSemantics
      } = this.getConfiguration();

      if (sdpSemantics === 'plan-b') {
        Object.defineProperty(this, 'sctp', {
          get() {
            return typeof this._sctp === 'undefined' ? null : this._sctp;
          },

          enumerable: true,
          configurable: true
        });
      }
    }

    if (sctpInDescription(arguments[0])) {
      // Check if the remote is FF.
      const isFirefox = getRemoteFirefoxVersion(arguments[0]); // Get the maximum message size the local peer is capable of sending

      const canSendMMS = getCanSendMaxMessageSize(isFirefox); // Get the maximum message size of the remote peer.

      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox); // Determine final maximum message size

      let maxMessageSize;

      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      } // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
      // attribute.


      const sctp = {};
      Object.defineProperty(sctp, 'maxMessageSize', {
        get() {
          return maxMessageSize;
        }

      });
      this._sctp = sctp;
    }

    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  } // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831


  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;

    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;

      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
      }

      return origDataChannelSend.apply(dc, arguments);
    };
  }

  const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;

  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    const dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };

  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}
/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */

function shimConnectionState(window) {
  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }

  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },

    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },

    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }

      if (cb) {
        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
      }
    },

    enumerable: true,
    configurable: true
  });
  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {
    const origMethod = proto[method];

    proto[method] = function () {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;

          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }

          return e;
        };

        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
      }

      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }

  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }

  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }

  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;

  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      const sdp = desc.sdp.split('\n').filter(line => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n'); // Safari enforces read-only-ness of RTCSessionDescription fields.

      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp
        });
      } else {
        desc.sdp = sdp;
      }
    }

    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }

  const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;

  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }

  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }

      return Promise.resolve();
    } // Firefox 68+ emits and processes {candidate: "", ...}, ignore
    // in older versions.
    // Native support for ignoring exists for Chrome M77+.
    // Safari ignores as well, exact version unknown but works in the same
    // version that also ignores addIceCandidate(null).


    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
      return Promise.resolve();
    }

    return nativeAddIceCandidate.apply(this, arguments);
  };
} // Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length

function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }

  const nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;

  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }

  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    let desc = arguments[0] || {};

    if (typeof desc !== 'object' || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    } // The remaining steps should technically happen when SLD comes off the
    // RTCPeerConnection's operations chain (not ahead of going on it), but
    // this is too difficult to shim. Instead, this shim only covers the
    // common case where the operations chain is empty. This is imperfect, but
    // should cover many cases. Rationale: Even if we can't reduce the glare
    // window to zero on imperfect implementations, there's value in tapping
    // into the perfect negotiation pattern that several browsers support.


    desc = {
      type: desc.type,
      sdp: desc.sdp
    };

    if (!desc.type) {
      switch (this.signalingState) {
        case 'stable':
        case 'have-local-offer':
        case 'have-remote-pranswer':
          desc.type = 'offer';
          break;

        default:
          desc.type = 'answer';
          break;
      }
    }

    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
      return nativeSetLocalDescription.apply(this, [desc]);
    }

    const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
    return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));
  };
}

/***/ }),

/***/ 5188:
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimAddTransceiver": () => (/* binding */ shimAddTransceiver),
/* harmony export */   "shimCreateAnswer": () => (/* binding */ shimCreateAnswer),
/* harmony export */   "shimCreateOffer": () => (/* binding */ shimCreateOffer),
/* harmony export */   "shimGetDisplayMedia": () => (/* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia),
/* harmony export */   "shimGetParameters": () => (/* binding */ shimGetParameters),
/* harmony export */   "shimGetUserMedia": () => (/* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia),
/* harmony export */   "shimOnTrack": () => (/* binding */ shimOnTrack),
/* harmony export */   "shimPeerConnection": () => (/* binding */ shimPeerConnection),
/* harmony export */   "shimRTCDataChannel": () => (/* binding */ shimRTCDataChannel),
/* harmony export */   "shimReceiverGetStats": () => (/* binding */ shimReceiverGetStats),
/* harmony export */   "shimRemoveStream": () => (/* binding */ shimRemoveStream),
/* harmony export */   "shimSenderGetStats": () => (/* binding */ shimSenderGetStats)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ 6794);
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ 8364);
/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ 1274);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */





function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {
          receiver: this.receiver
        };
      }

    });
  }
}
function shimPeerConnection(window, browserDetails) {
  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }

  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
      const nativeMethod = window.RTCPeerConnection.prototype[method];
      const methodObj = {
        [method]() {
          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }

      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };
  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;

  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null]).then(stats => {
      if (browserDetails.version < 53 && !onSucc) {
        // Shim only promise getStats with spec-hyphens in type names
        // Leave callback version alone; misc old uses of forEach before Map
        try {
          stats.forEach(stat => {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e) {
          if (e.name !== 'TypeError') {
            throw e;
          } // Avoid TypeError: "type" is read-only, in old versions. 34-43ish


          stats.forEach((stat, i) => {
            stats.set(i, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }

      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }

  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }

  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }

  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
  };
}
function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
    return;
  }

  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }

  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;

  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }

  _utils__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });

  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window) {
  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }

  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('removeStream', 'removeTrack');
    this.getSenders().forEach(sender => {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        this.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}
function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }

  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;

  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      const initParameters = arguments[1];
      const shouldPerformCheck = initParameters && 'sendEncodings' in initParameters;

      if (shouldPerformCheck) {
        // If sendEncodings params are provided, validate grammar
        initParameters.sendEncodings.forEach(encodingParam => {
          if ('rid' in encodingParam) {
            const ridRegex = /^[a-z0-9]{0,16}$/i;

            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError('Invalid RID value provided.');
            }
          }

          if ('scaleResolutionDownBy' in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
              throw new RangeError('scale_resolution_down_by must be >= 1.0');
            }
          }

          if ('maxFramerate' in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError('max_framerate must be >= 0.0');
            }
          }
        });
      }

      const transceiver = origAddTransceiver.apply(this, arguments);

      if (shouldPerformCheck) {
        // Check if the init options were applied. If not we do this in an
        // asynchronous way and save the promise reference in a global object.
        // This is an ugly hack, but at the same time is way more robust than
        // checking the sender parameters before and after the createOffer
        // Also note that after the createoffer we are not 100% sure that
        // the params were asynchronously applied so we might miss the
        // opportunity to recreate offer.
        const {
          sender
        } = transceiver;
        const params = sender.getParameters();

        if (!('encodings' in params) || // Avoid being fooled by patched getParameters() below.
        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = initParameters.sendEncodings;
          sender.sendEncodings = initParameters.sendEncodings;
          this.setParametersPromises.push(sender.setParameters(params).then(() => {
            delete sender.sendEncodings;
          }).catch(() => {
            delete sender.sendEncodings;
          }));
        }
      }

      return transceiver;
    };
  }
}
function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }

  const origGetParameters = window.RTCRtpSender.prototype.getParameters;

  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters = function getParameters() {
      const params = origGetParameters.apply(this, arguments);

      if (!('encodings' in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }

      return params;
    };
  }
}
function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }

  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;

  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateOffer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }

    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }

  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;

  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateAnswer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }

    return origCreateAnswer.apply(this, arguments);
  };
}

/***/ }),

/***/ 1274:
/*!***********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetDisplayMedia": () => (/* binding */ shimGetDisplayMedia)
/* harmony export */ });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }

  if (!window.navigator.mediaDevices) {
    return;
  }

  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      const err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
      err.name = 'NotFoundError'; // from https://heycam.github.io/webidl/#idl-DOMException-error-names

      err.code = 8;
      return Promise.reject(err);
    }

    if (constraints.video === true) {
      constraints.video = {
        mediaSource: preferredMediaSource
      };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }

    return window.navigator.mediaDevices.getUserMedia(constraints);
  };
}

/***/ }),

/***/ 8364:
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ 6794);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */



function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function (constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function (obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);

    navigator.mediaDevices.getUserMedia = function (c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }

      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;

      MediaStreamTrack.prototype.getSettings = function () {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;

      MediaStreamTrack.prototype.applyConstraints = function (c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }

        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}

/***/ }),

/***/ 9681:
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimAudioContext": () => (/* binding */ shimAudioContext),
/* harmony export */   "shimCallbacksAPI": () => (/* binding */ shimCallbacksAPI),
/* harmony export */   "shimConstraints": () => (/* binding */ shimConstraints),
/* harmony export */   "shimCreateOfferLegacy": () => (/* binding */ shimCreateOfferLegacy),
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia),
/* harmony export */   "shimLocalStreamsAPI": () => (/* binding */ shimLocalStreamsAPI),
/* harmony export */   "shimRTCIceServerUrls": () => (/* binding */ shimRTCIceServerUrls),
/* harmony export */   "shimRemoteStreamsAPI": () => (/* binding */ shimRemoteStreamsAPI),
/* harmony export */   "shimTrackEventTransceiver": () => (/* binding */ shimTrackEventTransceiver)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ 6794);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }

  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }

      return this._localStreams;
    };
  }

  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;

    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }

      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      } // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.


      stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));
    };

    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, ...streams) {
      if (streams) {
        streams.forEach(stream => {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (!this._localStreams.includes(stream)) {
            this._localStreams.push(stream);
          }
        });
      }

      return _addTrack.apply(this, arguments);
    };
  }

  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }

      const index = this._localStreams.indexOf(stream);

      if (index === -1) {
        return;
      }

      this._localStreams.splice(index, 1);

      const tracks = stream.getTracks();
      this.getSenders().forEach(sender => {
        if (tracks.includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }

  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }

  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },

      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }

        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = e => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }

            if (this._remoteStreams.includes(stream)) {
              return;
            }

            this._remoteStreams.push(stream);

            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }

    });
    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      const pc = this;

      if (!this._onaddstreampoly) {
        this.addEventListener('track', this._onaddstreampoly = function (e) {
          e.streams.forEach(stream => {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }

            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }

            pc._remoteStreams.push(stream);

            const event = new Event('addstream');
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }

      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}
function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }

  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateOffer.apply(this, [options]);

    if (!failureCallback) {
      return promise;
    }

    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateAnswer.apply(this, [options]);

    if (!failureCallback) {
      return promise;
    }

    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  let withCallback = function (description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);

    if (!failureCallback) {
      return promise;
    }

    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  prototype.setLocalDescription = withCallback;

  withCallback = function (description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);

    if (!failureCallback) {
      return promise;
    }

    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  prototype.setRemoteDescription = withCallback;

  withCallback = function (candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);

    if (!failureCallback) {
      return promise;
    }

    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };

  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;

    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);

    navigator.mediaDevices.getUserMedia = constraints => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({}, constraints, {
      video: _utils__WEBPACK_IMPORTED_MODULE_0__.compactObject(constraints.video)
    });
  }

  return constraints;
}
function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  } // migrate from non-spec RTCIceServer.url to RTCIceServer.urls


  const OrigPeerConnection = window.RTCPeerConnection;

  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      const newIceServers = [];

      for (let i = 0; i < pcConfig.iceServers.length; i++) {
        let server = pcConfig.iceServers[i];

        if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
          _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i]);
        }
      }

      pcConfig.iceServers = newIceServers;
    }

    return new OrigPeerConnection(pcConfig, pcConstraints);
  };

  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype; // wrap static methods. Currently just generateCertificate.

  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }

    });
  }
}
function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {
          receiver: this.receiver
        };
      }

    });
  }
}
function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;

  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }

      const audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');

      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === 'sendrecv') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('sendonly');
          } else {
            audioTransceiver.direction = 'sendonly';
          }
        } else if (audioTransceiver.direction === 'recvonly') {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection('inactive');
          } else {
            audioTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver('audio', {
          direction: 'recvonly'
        });
      }

      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
        // support bit values
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }

      const videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');

      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === 'sendrecv') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('sendonly');
          } else {
            videoTransceiver.direction = 'sendonly';
          }
        } else if (videoTransceiver.direction === 'recvonly') {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection('inactive');
          } else {
            videoTransceiver.direction = 'inactive';
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver('video', {
          direction: 'recvonly'
        });
      }
    }

    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }

  window.AudioContext = window.webkitAudioContext;
}

/***/ }),

/***/ 6794:
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compactObject": () => (/* binding */ compactObject),
/* harmony export */   "deprecated": () => (/* binding */ deprecated),
/* harmony export */   "detectBrowser": () => (/* binding */ detectBrowser),
/* harmony export */   "disableLog": () => (/* binding */ disableLog),
/* harmony export */   "disableWarnings": () => (/* binding */ disableWarnings),
/* harmony export */   "extractVersion": () => (/* binding */ extractVersion),
/* harmony export */   "filterStats": () => (/* binding */ filterStats),
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "walkStats": () => (/* binding */ walkStats),
/* harmony export */   "wrapPeerConnectionEvent": () => (/* binding */ wrapPeerConnectionEvent)
/* harmony export */ });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

/* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;
/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */

function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
} // Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).

function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;

  proto.addEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }

    const wrappedCallback = e => {
      const modifiedEvent = wrapper(e);

      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };

    this._eventMap = this._eventMap || {};

    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }

    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);

    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;

  proto.removeEventListener = function (nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }

    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }

    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);

    this._eventMap[eventNameToWrap].delete(cb);

    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }

    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }

    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },

    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }

      if (cb) {
        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
      }
    },

    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
  }

  logDisabled_ = bool;
  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
}
/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */

function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
  }

  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}
function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }

    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}
/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */

function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }

  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
}
/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */

function detectBrowser(window) {
  // Returned result object.
  const result = {
    browser: null,
    version: null
  }; // Fail early if it's not a browser

  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {
    navigator
  } = window;

  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection && !window.RTCIceGatherer) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}
/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */

function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}
/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */


function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function (accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;

    if (value === undefined || isEmptyObject) {
      return accumulator;
    }

    return Object.assign(accumulator, {
      [key]: value
    });
  }, {});
}
/* iterates the stats graph recursively. */

function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }

  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}
/* filter getStats for a sender/receiver track. */

function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();

  if (track === null) {
    return filteredResult;
  }

  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

/***/ }),

/***/ 2069:
/*!*************************************************!*\
  !*** ./node_modules/wildemitter/wildemitter.js ***!
  \*************************************************/
/***/ ((module) => {

/*
WildEmitter.js is a slim little event emitter by @henrikjoreteg largely based
on @visionmedia's Emitter from UI Kit.

Why? I wanted it standalone.

I also wanted support for wildcard emitters like this:

emitter.on('*', function (eventName, other, event, payloads) {

});

emitter.on('somenamespace*', function (eventName, payloads) {

});

Please note that callbacks triggered by wildcard registered events also get
the event name as the first argument.
*/
module.exports = WildEmitter;

function WildEmitter() {}

WildEmitter.mixin = function (constructor) {
  var prototype = constructor.prototype || constructor;
  prototype.isWildEmitter = true; // Listen on the given `event` with `fn`. Store a group name if present.

  prototype.on = function (event, groupName, fn) {
    this.callbacks = this.callbacks || {};
    var hasGroup = arguments.length === 3,
        group = hasGroup ? arguments[1] : undefined,
        func = hasGroup ? arguments[2] : arguments[1];
    func._groupName = group;
    (this.callbacks[event] = this.callbacks[event] || []).push(func);
    return this;
  }; // Adds an `event` listener that will be invoked a single
  // time then automatically removed.


  prototype.once = function (event, groupName, fn) {
    var self = this,
        hasGroup = arguments.length === 3,
        group = hasGroup ? arguments[1] : undefined,
        func = hasGroup ? arguments[2] : arguments[1];

    function on() {
      self.off(event, on);
      func.apply(this, arguments);
    }

    this.on(event, group, on);
    return this;
  }; // Unbinds an entire group


  prototype.releaseGroup = function (groupName) {
    this.callbacks = this.callbacks || {};
    var item, i, len, handlers;

    for (item in this.callbacks) {
      handlers = this.callbacks[item];

      for (i = 0, len = handlers.length; i < len; i++) {
        if (handlers[i]._groupName === groupName) {
          //console.log('removing');
          // remove it and shorten the array we're looping through
          handlers.splice(i, 1);
          i--;
          len--;
        }
      }
    }

    return this;
  }; // Remove the given callback for `event` or all
  // registered callbacks.


  prototype.off = function (event, fn) {
    this.callbacks = this.callbacks || {};
    var callbacks = this.callbacks[event],
        i;
    if (!callbacks) return this; // remove all handlers

    if (arguments.length === 1) {
      delete this.callbacks[event];
      return this;
    } // remove specific handler


    i = callbacks.indexOf(fn);

    if (i !== -1) {
      callbacks.splice(i, 1);

      if (callbacks.length === 0) {
        delete this.callbacks[event];
      }
    }

    return this;
  }; /// Emit `event` with the given args.
  // also calls any `*` handlers


  prototype.emit = function (event) {
    this.callbacks = this.callbacks || {};
    var args = [].slice.call(arguments, 1),
        callbacks = this.callbacks[event],
        specialCallbacks = this.getWildcardCallbacks(event),
        i,
        len,
        item,
        listeners;

    if (callbacks) {
      listeners = callbacks.slice();

      for (i = 0, len = listeners.length; i < len; ++i) {
        if (!listeners[i]) {
          break;
        }

        listeners[i].apply(this, args);
      }
    }

    if (specialCallbacks) {
      len = specialCallbacks.length;
      listeners = specialCallbacks.slice();

      for (i = 0, len = listeners.length; i < len; ++i) {
        if (!listeners[i]) {
          break;
        }

        listeners[i].apply(this, [event].concat(args));
      }
    }

    return this;
  }; // Helper for for finding special wildcard event handlers that match the event


  prototype.getWildcardCallbacks = function (eventName) {
    this.callbacks = this.callbacks || {};
    var item,
        split,
        result = [];

    for (item in this.callbacks) {
      split = item.split('*');

      if (item === '*' || split.length === 2 && eventName.slice(0, split[0].length) === split[0]) {
        result = result.concat(this.callbacks[item]);
      }
    }

    return result;
  };
};

WildEmitter.mixin(WildEmitter);

/***/ }),

/***/ 8926:
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 5044:
/*!*********************************************************************!*\
  !*** ./node_modules/@ngneat/dialog/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ 655:
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldIn": () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}


/***/ }),

/***/ 3414:
/*!************************!*\
  !*** canvas (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 172:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 2001:
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 3779:
/*!***********************!*\
  !*** https (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 6558:
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 2258:
/*!**********************!*\
  !*** zlib (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 1777:
/*!******************************************************************!*\
  !*** ./node_modules/@angular/animations/fesm2015/animations.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AUTO_STYLE": () => (/* binding */ AUTO_STYLE),
/* harmony export */   "AnimationBuilder": () => (/* binding */ AnimationBuilder),
/* harmony export */   "AnimationFactory": () => (/* binding */ AnimationFactory),
/* harmony export */   "NoopAnimationPlayer": () => (/* binding */ NoopAnimationPlayer),
/* harmony export */   "animate": () => (/* binding */ animate),
/* harmony export */   "animateChild": () => (/* binding */ animateChild),
/* harmony export */   "animation": () => (/* binding */ animation),
/* harmony export */   "group": () => (/* binding */ group),
/* harmony export */   "keyframes": () => (/* binding */ keyframes),
/* harmony export */   "query": () => (/* binding */ query),
/* harmony export */   "sequence": () => (/* binding */ sequence),
/* harmony export */   "stagger": () => (/* binding */ stagger),
/* harmony export */   "state": () => (/* binding */ state),
/* harmony export */   "style": () => (/* binding */ style),
/* harmony export */   "transition": () => (/* binding */ transition),
/* harmony export */   "trigger": () => (/* binding */ trigger),
/* harmony export */   "useAnimation": () => (/* binding */ useAnimation),
/* harmony export */   "ɵAnimationGroupPlayer": () => (/* binding */ AnimationGroupPlayer),
/* harmony export */   "ɵPRE_STYLE": () => (/* binding */ ɵPRE_STYLE)
/* harmony export */ });
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */

/**
 * An injectable service that produces an animation sequence programmatically within an
 * Angular component or directive.
 * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
 *
 * @usageNotes
 *
 * To use this service, add it to your component or directive as a dependency.
 * The service is instantiated along with your component.
 *
 * Apps do not typically need to create their own animation players, but if you
 * do need to, follow these steps:
 *
 * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method
 * to create a programmatic animation. The method returns an `AnimationFactory` instance.
 *
 * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
 *
 * 3. Use the player object to control the animation programmatically.
 *
 * For example:
 *
 * ```ts
 * // import the service from BrowserAnimationsModule
 * import {AnimationBuilder} from '@angular/animations';
 * // require the service as a dependency
 * class MyCmp {
 *   constructor(private _builder: AnimationBuilder) {}
 *
 *   makeAnimation(element: any) {
 *     // first define a reusable animation
 *     const myAnimation = this._builder.build([
 *       style({ width: 0 }),
 *       animate(1000, style({ width: '100px' }))
 *     ]);
 *
 *     // use the returned factory object to create a player
 *     const player = myAnimation.create(element);
 *
 *     player.play();
 *   }
 * }
 * ```
 *
 * @publicApi
 */
class AnimationBuilder {}
/**
 * A factory object returned from the
 * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>
 * method.
 *
 * @publicApi
 */


class AnimationFactory {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Specifies automatic styling.
 *
 * @publicApi
 */


const AUTO_STYLE = '*';
/**
 * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)
 * and `transition()` entries to be evaluated when the expression
 * bound to the trigger changes.
 *
 * @param name An identifying string.
 * @param definitions  An animation definition object, containing an array of
 * [`state()`](api/animations/state) and `transition()` declarations.
 *
 * @return An object that encapsulates the trigger data.
 *
 * @usageNotes
 * Define an animation trigger in the `animations` section of `@Component` metadata.
 * In the template, reference the trigger by name and bind it to a trigger expression that
 * evaluates to a defined animation state, using the following format:
 *
 * `[@triggerName]="expression"`
 *
 * Animation trigger bindings convert all values to strings, and then match the
 * previous and current values against any linked transitions.
 * Booleans can be specified as `1` or `true` and `0` or `false`.
 *
 * ### Usage Example
 *
 * The following example creates an animation trigger reference based on the provided
 * name value.
 * The provided animation value is expected to be an array consisting of state and
 * transition declarations.
 *
 * ```typescript
 * @Component({
 *   selector: "my-component",
 *   templateUrl: "my-component-tpl.html",
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component makes use of the defined trigger
 * by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ### Using an inline function
 * The `transition` animation method also supports reading an inline function which can decide
 * if its associated animation should be run.
 *
 * ```typescript
 * // this method is run each time the `myAnimationTrigger` trigger value changes.
 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
 string]: any}): boolean {
 *   // notice that `element` and `params` are also available here
 *   return toState == 'yes-please-animate';
 * }
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger('myAnimationTrigger', [
 *       transition(myInlineMatcherFn, [
 *         // the animation sequence code
 *       ]),
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "yes-please-animate";
 * }
 * ```
 *
 * ### Disabling Animations
 * When true, the special animation control binding `@.disabled` binding prevents
 * all animations from rendering.
 * Place the  `@.disabled` binding on an element to disable
 * animations on the element itself, as well as any inner animation triggers
 * within the element.
 *
 * The following example shows how to use this feature:
 *
 * ```typescript
 * @Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [@.disabled]="isDisabled">
 *       <div [@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
 * along with any inner animations.
 *
 * ### Disable animations application-wide
 * When an area of the template is set to have animations disabled,
 * **all** inner components have their animations disabled as well.
 * This means that you can disable all animations for an app
 * by placing a host binding set on `@.disabled` on the topmost Angular component.
 *
 * ```typescript
 * import {Component, HostBinding} from '@angular/core';
 *
 * @Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   @HostBinding('@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### Overriding disablement of inner animations
 * Despite inner animations being disabled, a parent animation can `query()`
 * for inner elements located in disabled areas of the template and still animate
 * them if needed. This is also the case for when a sub animation is
 * queried by a parent and then later animated using `animateChild()`.
 *
 * ### Detecting when an animation is disabled
 * If a region of the DOM (or the entire application) has its animations disabled, the animation
 * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
 * an instance of an `AnimationEvent`. If animations are disabled,
 * the `.disabled` flag on the event is true.
 *
 * @publicApi
 */

function trigger(name, definitions) {
  return {
    type: 7
    /* Trigger */
    ,
    name,
    definitions,
    options: {}
  };
}
/**
 * Defines an animation step that combines styling information with timing information.
 *
 * @param timings Sets `AnimateTimings` for the parent animation.
 * A string in the format "duration [delay] [easing]".
 *  - Duration and delay are expressed as a number and optional time unit,
 * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
 * The default unit is milliseconds.
 *  - The easing value controls how the animation accelerates and decelerates
 * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
 * `ease-in-out`, or a `cubic-bezier()` function call.
 * If not supplied, no easing is applied.
 *
 * For example, the string "1s 100ms ease-out" specifies a duration of
 * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
 * which decelerates near the end of the duration.
 * @param styles Sets AnimationStyles for the parent animation.
 * A function call to either `style()` or `keyframes()`
 * that returns a collection of CSS style entries to be applied to the parent animation.
 * When null, uses the styles from the destination state.
 * This is useful when describing an animation step that will complete an animation;
 * see "Animating to the final state" in `transitions()`.
 * @returns An object that encapsulates the animation step.
 *
 * @usageNotes
 * Call within an animation `sequence()`, `{@link animations/group group()}`, or
 * `transition()` call to specify an animation step
 * that applies given style data to the parent animation for a given amount of time.
 *
 * ### Syntax Examples
 * **Timing examples**
 *
 * The following examples show various `timings` specifications.
 * - `animate(500)` : Duration is 500 milliseconds.
 * - `animate("1s")` : Duration is 1000 milliseconds.
 * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
 * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
 * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
 * milliseconds, easing according to a bezier curve.
 *
 * **Style examples**
 *
 * The following example calls `style()` to set a single CSS style.
 * ```typescript
 * animate(500, style({ background: "red" }))
 * ```
 * The following example calls `keyframes()` to set a CSS style
 * to different values for successive keyframes.
 * ```typescript
 * animate(500, keyframes(
 *  [
 *   style({ background: "blue" }),
 *   style({ background: "red" })
 *  ])
 * ```
 *
 * @publicApi
 */


function animate(timings, styles = null) {
  return {
    type: 4
    /* Animate */
    ,
    styles,
    timings
  };
}
/**
 * @description Defines a list of animation steps to be run in parallel.
 *
 * @param steps An array of animation step objects.
 * - When steps are defined by `style()` or `animate()`
 * function calls, each call within the group is executed instantly.
 * - To specify offset styles to be applied at a later time, define steps with
 * `keyframes()`, or use `animate()` calls with a delay value.
 * For example:
 *
 * ```typescript
 * group([
 *   animate("1s", style({ background: "black" })),
 *   animate("2s", style({ color: "white" }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the group data.
 *
 * @usageNotes
 * Grouped animations are useful when a series of styles must be
 * animated at different starting times and closed off at different ending times.
 *
 * When called within a `sequence()` or a
 * `transition()` call, does not continue to the next
 * instruction until all of the inner animation steps have completed.
 *
 * @publicApi
 */


function group(steps, options = null) {
  return {
    type: 3
    /* Group */
    ,
    steps,
    options
  };
}
/**
 * Defines a list of animation steps to be run sequentially, one by one.
 *
 * @param steps An array of animation step objects.
 * - Steps defined by `style()` calls apply the styling data immediately.
 * - Steps defined by `animate()` calls apply the styling data over time
 *   as specified by the timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 }),
 *   animate("1s", style({ opacity: 1 }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the sequence data.
 *
 * @usageNotes
 * When you pass an array of steps to a
 * `transition()` call, the steps run sequentially by default.
 * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
 *parallel.
 *
 * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
 * execution continues to the next instruction only after each of the inner animation
 * steps have completed.
 *
 * @publicApi
 **/


function sequence(steps, options = null) {
  return {
    type: 2
    /* Sequence */
    ,
    steps,
    options
  };
}
/**
 * Declares a key/value object containing CSS properties/styles that
 * can then be used for an animation [`state`](api/animations/state), within an animation
 *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.
 *
 * @param tokens A set of CSS styles or HTML styles associated with an animation state.
 * The value can be any of the following:
 * - A key-value style pair associating a CSS property with a value.
 * - An array of key-value style pairs.
 * - An asterisk (*), to use auto-styling, where styles are derived from the element
 * being animated and applied to the animation when it starts.
 *
 * Auto-styling can be used to define a state that depends on layout or other
 * environmental factors.
 *
 * @return An object that encapsulates the style data.
 *
 * @usageNotes
 * The following examples create animation styles that collect a set of
 * CSS property values:
 *
 * ```typescript
 * // string values for CSS properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical pixel values
 * style({ width: 100, height: 0 })
 * ```
 *
 * The following example uses auto-styling to allow an element to animate from
 * a height of 0 up to its full height:
 *
 * ```
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * @publicApi
 **/


function style(tokens) {
  return {
    type: 6
    /* Style */
    ,
    styles: tokens,
    offset: null
  };
}
/**
 * Declares an animation state within a trigger attached to an element.
 *
 * @param name One or more names for the defined state in a comma-separated string.
 * The following reserved state names can be supplied to define a style for specific use
 * cases:
 *
 * - `void` You can associate styles with this name to be used when
 * the element is detached from the application. For example, when an `ngIf` evaluates
 * to false, the state of the associated element is void.
 *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
 * to be used as the fallback when the state that is being animated is not declared
 * within the trigger.
 *
 * @param styles A set of CSS styles associated with this state, created using the
 * `style()` function.
 * This set of styles persists on the element once the state has been reached.
 * @param options Parameters that can be passed to the state when it is invoked.
 * 0 or more key-value pairs.
 * @return An object that encapsulates the new state data.
 *
 * @usageNotes
 * Use the `trigger()` function to register states to an animation trigger.
 * Use the `transition()` function to animate between states.
 * When a state is active within a component, its associated styles persist on the element,
 * even when the animation ends.
 *
 * @publicApi
 **/


function state(name, styles, options) {
  return {
    type: 0
    /* State */
    ,
    name,
    styles,
    options
  };
}
/**
 * Defines a set of animation styles, associating each style with an optional `offset` value.
 *
 * @param steps A set of animation styles with optional offset data.
 * The optional `offset` value for a style specifies a percentage of the total animation
 * time at which that style is applied.
 * @returns An object that encapsulates the keyframes data.
 *
 * @usageNotes
 * Use with the `animate()` call. Instead of applying animations
 * from the current state
 * to the destination state, keyframes describe how each style entry is applied and at what point
 * within the animation arc.
 * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
 *
 * ### Usage
 *
 * In the following example, the offset values describe
 * when each `backgroundColor` value is applied. The color is red at the start, and changes to
 * blue when 20% of the total time has elapsed.
 *
 * ```typescript
 * // the provided offset values
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * If there are no `offset` values specified in the style entries, the offsets
 * are calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 *```

 * @publicApi
 */


function keyframes(steps) {
  return {
    type: 5
    /* Keyframes */
    ,
    steps
  };
}
/**
 * Declares an animation transition which is played when a certain specified condition is met.
 *
 * @param stateChangeExpr A string with a specific format or a function that specifies when the
 * animation transition should occur (see [State Change Expression](#state-change-expression)).
 *
 * @param steps One or more animation objects that represent the animation's instructions.
 *
 * @param options An options object that can be used to specify a delay for the animation or provide
 * custom parameters for it.
 *
 * @returns An object that encapsulates the transition data.
 *
 * @usageNotes
 *
 * ### State Change Expression
 *
 * The State Change Expression instructs Angular when to run the transition's animations, it can
 *either be
 *  - a string with a specific syntax
 *  - or a function that compares the previous and current state (value of the expression bound to
 *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise
 *
 * The string format can be:
 *  - `fromState => toState`, which indicates that the transition's animations should occur then the
 *    expression bound to the trigger's element goes from `fromState` to `toState`
 *
 *    _Example:_
 *      ```typescript
 *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))
 *      ```
 *
 *  - `fromState <=> toState`, which indicates that the transition's animations should occur then
 *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa
 *
 *    _Example:_
 *      ```typescript
 *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))
 *      ```
 *
 *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the
 *    element enters or exists the DOM
 *
 *    _Example:_
 *      ```typescript
 *        transition(':enter', [
 *          style({ opacity: 0 }),
 *          animate('500ms', style({ opacity: 1 }))
 *        ])
 *      ```
 *
 *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when
 *    the numerical expression bound to the trigger's element has increased in value or decreased
 *
 *    _Example:_
 *      ```typescript
 *        transition(':increment', query('@counter', animateChild()))
 *      ```
 *
 *  - a sequence of any of the above divided by commas, which indicates that transition's animations
 *    should occur whenever one of the state change expressions matches
 *
 *    _Example:_
 *      ```typescript
 *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([
 *          style({ transform: 'scale(1)', offset: 0}),
 *          style({ transform: 'scale(1.1)', offset: 0.7}),
 *          style({ transform: 'scale(1)', offset: 1})
 *        ]))),
 *      ```
 *
 * Also note that in such context:
 *  - `void` can be used to indicate the absence of the element
 *  - asterisks can be used as wildcards that match any state
 *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is
 *    equivalent to `:leave`)
 *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match
 *    _truthy_ and _falsy_ values)
 *
 * <div class="alert is-helpful">
 *
 *  Be careful about entering end leaving elements as their transitions present a common
 *  pitfall for developers.
 *
 *  Note that when an element with a trigger enters the DOM its `:enter` transition always
 *  gets executed, but its `:leave` transition will not be executed if the element is removed
 *  alongside its parent (as it will be removed "without warning" before its transition has
 *  a chance to be executed, the only way that such transition can occur is if the element
 *  is exiting the DOM on its own).
 *
 *
 * </div>
 *
 * ### Animating to a Final State
 *
 * If the final step in a transition is a call to `animate()` that uses a timing value
 * with no `style` data, that step is automatically considered the final animation arc,
 * for the element to reach the final state, in such case Angular automatically adds or removes
 * CSS styles to ensure that the element is in the correct final state.
 *
 *
 * ### Usage Examples
 *
 *  - Transition animations applied based on
 *    the trigger's expression value
 *
 *   ```HTML
 *   <div [@myAnimationTrigger]="myStatusExp">
 *    ...
 *   </div>
 *   ```
 *
 *   ```typescript
 *   trigger("myAnimationTrigger", [
 *     ..., // states
 *     transition("on => off, open => closed", animate(500)),
 *     transition("* <=> error", query('.indicator', animateChild()))
 *   ])
 *   ```
 *
 *  - Transition animations applied based on custom logic dependent
 *    on the trigger's expression value and provided parameters
 *
 *    ```HTML
 *    <div [@myAnimationTrigger]="{
 *     value: stepName,
 *     params: { target: currentTarget }
 *    }">
 *     ...
 *    </div>
 *    ```
 *
 *    ```typescript
 *    trigger("myAnimationTrigger", [
 *      ..., // states
 *      transition(
 *        (fromState, toState, _element, params) =>
 *          ['firststep', 'laststep'].includes(fromState.toLowerCase())
 *          && toState === params?.['target'],
 *        animate('1s')
 *      )
 *    ])
 *    ```
 *
 * @publicApi
 **/


function transition(stateChangeExpr, steps, options = null) {
  return {
    type: 1
    /* Transition */
    ,
    expr: stateChangeExpr,
    animation: steps,
    options
  };
}
/**
 * Produces a reusable animation that can be invoked in another animation or sequence,
 * by calling the `useAnimation()` function.
 *
 * @param steps One or more animation objects, as returned by the `animate()`
 * or `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional developer-defined parameters.
 * Provided values for additional parameters are used as defaults,
 * and override values can be passed to the caller on invocation.
 * @returns An object that encapsulates the animation data.
 *
 * @usageNotes
 * The following example defines a reusable animation, providing some default parameter
 * values.
 *
 * ```typescript
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *   style({ opacity: '{{ end }}'}))
 *   ],
 *   { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * The following invokes the defined animation with a call to `useAnimation()`,
 * passing in override parameter values.
 *
 * ```js
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If any of the passed-in parameter values are missing from this call,
 * the default values are used. If one or more parameter values are missing before a step is
 * animated, `useAnimation()` throws an error.
 *
 * @publicApi
 */


function animation(steps, options = null) {
  return {
    type: 8
    /* Reference */
    ,
    animation: steps,
    options
  };
}
/**
 * Executes a queried inner animation element within an animation sequence.
 *
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional override values for developer-defined parameters.
 * @return An object that encapsulates the child animation data.
 *
 * @usageNotes
 * Each time an animation is triggered in Angular, the parent animation
 * has priority and any child animations are blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations, and run them using this function.
 *
 * Note that this feature is designed to be used with `query()` and it will only work
 * with animations that are assigned using the Angular animation library. CSS keyframes
 * and transitions are not handled by this API.
 *
 * @publicApi
 */


function animateChild(options = null) {
  return {
    type: 9
    /* AnimateChild */
    ,
    options
  };
}
/**
 * Starts a reusable animation that is created using the `animation()` function.
 *
 * @param animation The reusable animation to start.
 * @param options An options object that can contain a delay value for the start of
 * the animation, and additional override values for developer-defined parameters.
 * @return An object that contains the animation parameters.
 *
 * @publicApi
 */


function useAnimation(animation, options = null) {
  return {
    type: 10
    /* AnimateRef */
    ,
    animation,
    options
  };
}
/**
 * Finds one or more inner elements within the current element that is
 * being animated within a sequence. Use with `animate()`.
 *
 * @param selector The element to query, or a set of elements that contain Angular-specific
 * characteristics, specified with one or more of the following tokens.
 *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements (not
 *     all elements can be queried via these tokens, see
 *     [Entering and Leaving Elements](#entering-and-leaving-elements))
 *  - `query(":animating")` : Query all currently animating elements.
 *  - `query("@triggerName")` : Query elements that contain an animation trigger.
 *  - `query("@*")` : Query all elements that contain an animation triggers.
 *  - `query(":self")` : Include the current element into the animation sequence.
 *
 * @param animation One or more animation steps to apply to the queried element or elements.
 * An array is treated as an animation sequence.
 * @param options An options object. Use the 'limit' field to limit the total number of
 * items to collect.
 * @return An object that encapsulates the query data.
 *
 * @usageNotes
 *
 * ### Multiple Tokens
 *
 * Tokens can be merged into a combined query selector string. For example:
 *
 * ```typescript
 *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
 * ```
 *
 * The `query()` function collects multiple elements and works internally by using
 * `element.querySelectorAll`. Use the `limit` field of an options object to limit
 * the total number of items to be collected. For example:
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * By default, throws an error when zero items are found. Set the
 * `optional` flag to ignore this error. For example:
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Entering and Leaving Elements
 *
 * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones
 * that can are those that Angular assumes can enter/leave based on their own logic
 * (if their insertion/removal is simply a consequence of that of their parent they
 * should be queried via a different token in their parent's `:enter`/`:leave` transitions).
 *
 * The only elements Angular assumes can enter/leave based on their own logic (thus the only
 * ones that can be queried via the `:enter` and `:leave` tokens) are:
 *  - Those inserted dynamically (via `ViewContainerRef`)
 *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)
 *
 * <div class="alert is-helpful">
 *
 *  Note that elements will be successfully queried via `:enter`/`:leave` even if their
 *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural
 *  directive (e.g. they enter/exit alongside their parent).
 *
 * </div>
 *
 * <div class="alert is-important">
 *
 *  There is an exception to what previously mentioned, besides elements entering/leaving based on
 *  their own logic, elements with an animation trigger can always be queried via `:leave` when
 * their parent is also leaving.
 *
 * </div>
 *
 * ### Usage Example
 *
 * The following example queries for inner elements and animates them
 * individually using `animate()`.
 *
 * ```typescript
 * @Component({
 *   selector: 'inner',
 *   template: `
 *     <div [@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 }))),
 *        query('.content', animate(1000, style({ opacity: 1 }))),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * @publicApi
 */


function query(selector, animation, options = null) {
  return {
    type: 11
    /* Query */
    ,
    selector,
    animation,
    options
  };
}
/**
 * Use within an animation `query()` call to issue a timing gap after
 * each queried item is animated.
 *
 * @param timings A delay value.
 * @param animation One ore more animation steps.
 * @returns An object that encapsulates the stagger data.
 *
 * @usageNotes
 * In the following example, a container element wraps a list of items stamped out
 * by an `ngFor`. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * Each time items are added, the opacity fade-in animation runs,
 * and each removed item is faded out.
 * When either of these animations occur, the stagger effect is
 * applied after each item's animation is started.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * Here is the component code:
 *
 * ```typescript
 * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
 * @Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *     ...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *    }
 *  }
 * ```
 *
 * Here is the animation trigger code:
 *
 * ```typescript
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * @publicApi
 */


function stagger(timings, animation) {
  return {
    type: 12
    /* Stagger */
    ,
    timings,
    animation
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function scheduleMicroTask(cb) {
  Promise.resolve(null).then(cb);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An empty programmatic controller for reusable animations.
 * Used internally when animations are disabled, to avoid
 * checking for the null case when an animation player is expected.
 *
 * @see `animate()`
 * @see `AnimationPlayer`
 * @see `GroupPlayer`
 *
 * @publicApi
 */


class NoopAnimationPlayer {
  constructor(duration = 0, delay = 0) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._started = false;
    this._destroyed = false;
    this._finished = false;
    this._position = 0;
    this.parentPlayer = null;
    this.totalTime = duration + delay;
  }

  _onFinish() {
    if (!this._finished) {
      this._finished = true;

      this._onDoneFns.forEach(fn => fn());

      this._onDoneFns = [];
    }
  }

  onStart(fn) {
    this._onStartFns.push(fn);
  }

  onDone(fn) {
    this._onDoneFns.push(fn);
  }

  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }

  hasStarted() {
    return this._started;
  }

  init() {}

  play() {
    if (!this.hasStarted()) {
      this._onStart();

      this.triggerMicrotask();
    }

    this._started = true;
  }
  /** @internal */


  triggerMicrotask() {
    scheduleMicroTask(() => this._onFinish());
  }

  _onStart() {
    this._onStartFns.forEach(fn => fn());

    this._onStartFns = [];
  }

  pause() {}

  restart() {}

  finish() {
    this._onFinish();
  }

  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;

      if (!this.hasStarted()) {
        this._onStart();
      }

      this.finish();

      this._onDestroyFns.forEach(fn => fn());

      this._onDestroyFns = [];
    }
  }

  reset() {
    this._started = false;
  }

  setPosition(position) {
    this._position = this.totalTime ? position * this.totalTime : 1;
  }

  getPosition() {
    return this.totalTime ? this._position / this.totalTime : 1;
  }
  /** @internal */


  triggerCallback(phaseName) {
    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A programmatic controller for a group of reusable animations.
 * Used internally to control animations.
 *
 * @see `AnimationPlayer`
 * @see `{@link animations/group group()}`
 *
 */


class AnimationGroupPlayer {
  constructor(_players) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._onDestroyFns = [];
    this.parentPlayer = null;
    this.totalTime = 0;
    this.players = _players;
    let doneCount = 0;
    let destroyCount = 0;
    let startCount = 0;
    const total = this.players.length;

    if (total == 0) {
      scheduleMicroTask(() => this._onFinish());
    } else {
      this.players.forEach(player => {
        player.onDone(() => {
          if (++doneCount == total) {
            this._onFinish();
          }
        });
        player.onDestroy(() => {
          if (++destroyCount == total) {
            this._onDestroy();
          }
        });
        player.onStart(() => {
          if (++startCount == total) {
            this._onStart();
          }
        });
      });
    }

    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);
  }

  _onFinish() {
    if (!this._finished) {
      this._finished = true;

      this._onDoneFns.forEach(fn => fn());

      this._onDoneFns = [];
    }
  }

  init() {
    this.players.forEach(player => player.init());
  }

  onStart(fn) {
    this._onStartFns.push(fn);
  }

  _onStart() {
    if (!this.hasStarted()) {
      this._started = true;

      this._onStartFns.forEach(fn => fn());

      this._onStartFns = [];
    }
  }

  onDone(fn) {
    this._onDoneFns.push(fn);
  }

  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }

  hasStarted() {
    return this._started;
  }

  play() {
    if (!this.parentPlayer) {
      this.init();
    }

    this._onStart();

    this.players.forEach(player => player.play());
  }

  pause() {
    this.players.forEach(player => player.pause());
  }

  restart() {
    this.players.forEach(player => player.restart());
  }

  finish() {
    this._onFinish();

    this.players.forEach(player => player.finish());
  }

  destroy() {
    this._onDestroy();
  }

  _onDestroy() {
    if (!this._destroyed) {
      this._destroyed = true;

      this._onFinish();

      this.players.forEach(player => player.destroy());

      this._onDestroyFns.forEach(fn => fn());

      this._onDestroyFns = [];
    }
  }

  reset() {
    this.players.forEach(player => player.reset());
    this._destroyed = false;
    this._finished = false;
    this._started = false;
  }

  setPosition(p) {
    const timeAtPosition = p * this.totalTime;
    this.players.forEach(player => {
      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
      player.setPosition(position);
    });
  }

  getPosition() {
    const longestPlayer = this.players.reduce((longestSoFar, player) => {
      const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
      return newPlayerIsLongest ? player : longestSoFar;
    }, null);
    return longestPlayer != null ? longestPlayer.getPosition() : 0;
  }

  beforeDestroy() {
    this.players.forEach(player => {
      if (player.beforeDestroy) {
        player.beforeDestroy();
      }
    });
  }
  /** @internal */


  triggerCallback(phaseName) {
    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ɵPRE_STYLE = '!';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */

 //# sourceMappingURL=animations.mjs.map

/***/ }),

/***/ 4117:
/*!***************************************************************!*\
  !*** ./node_modules/@angular/animations/fesm2015/browser.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationDriver": () => (/* binding */ AnimationDriver),
/* harmony export */   "ɵAnimation": () => (/* binding */ Animation),
/* harmony export */   "ɵAnimationEngine": () => (/* binding */ AnimationEngine),
/* harmony export */   "ɵAnimationStyleNormalizer": () => (/* binding */ AnimationStyleNormalizer),
/* harmony export */   "ɵNoopAnimationDriver": () => (/* binding */ NoopAnimationDriver),
/* harmony export */   "ɵNoopAnimationStyleNormalizer": () => (/* binding */ NoopAnimationStyleNormalizer),
/* harmony export */   "ɵWebAnimationsDriver": () => (/* binding */ WebAnimationsDriver),
/* harmony export */   "ɵWebAnimationsPlayer": () => (/* binding */ WebAnimationsPlayer),
/* harmony export */   "ɵWebAnimationsStyleNormalizer": () => (/* binding */ WebAnimationsStyleNormalizer),
/* harmony export */   "ɵallowPreviousPlayerStylesMerge": () => (/* binding */ allowPreviousPlayerStylesMerge),
/* harmony export */   "ɵcontainsElement": () => (/* binding */ containsElement),
/* harmony export */   "ɵgetParentElement": () => (/* binding */ getParentElement),
/* harmony export */   "ɵinvokeQuery": () => (/* binding */ invokeQuery),
/* harmony export */   "ɵvalidateStyleProperty": () => (/* binding */ validateStyleProperty)
/* harmony export */ });
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/animations */ 1777);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */



/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

const NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;
const LINE_START = '\n - ';

function invalidTimingValue(exp) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3000
  /* INVALID_TIMING_VALUE */
  , NG_DEV_MODE$1 && `The provided timing value "${exp}" is invalid.`);
}

function negativeStepValue() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3100
  /* NEGATIVE_STEP_VALUE */
  , NG_DEV_MODE$1 && 'Duration values below 0 are not allowed for this animation step.');
}

function negativeDelayValue() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3101
  /* NEGATIVE_DELAY_VALUE */
  , NG_DEV_MODE$1 && 'Delay values below 0 are not allowed for this animation step.');
}

function invalidStyleParams(varName) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3001
  /* INVALID_STYLE_PARAMS */
  , NG_DEV_MODE$1 && `Unable to resolve the local animation param ${varName} in the given list of values`);
}

function invalidParamValue(varName) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3003
  /* INVALID_PARAM_VALUE */
  , NG_DEV_MODE$1 && `Please provide a value for the animation param ${varName}`);
}

function invalidNodeType(nodeType) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3004
  /* INVALID_NODE_TYPE */
  , NG_DEV_MODE$1 && `Unable to resolve animation metadata node #${nodeType}`);
}

function invalidCssUnitValue(userProvidedProperty, value) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3005
  /* INVALID_CSS_UNIT_VALUE */
  , NG_DEV_MODE$1 && `Please provide a CSS unit value for ${userProvidedProperty}:${value}`);
}

function invalidTrigger() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3006
  /* INVALID_TRIGGER */
  , NG_DEV_MODE$1 && 'animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
}

function invalidDefinition() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3007
  /* INVALID_DEFINITION */
  , NG_DEV_MODE$1 && 'only state() and transition() definitions can sit inside of a trigger()');
}

function invalidState(metadataName, missingSubs) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3008
  /* INVALID_STATE */
  , NG_DEV_MODE$1 && `state("${metadataName}", ...) must define default values for all the following style substitutions: ${missingSubs.join(', ')}`);
}

function invalidStyleValue(value) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3002
  /* INVALID_STYLE_VALUE */
  , NG_DEV_MODE$1 && `The provided style string value ${value} is not allowed.`);
}

function invalidProperty(prop) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3009
  /* INVALID_PROPERTY */
  , NG_DEV_MODE$1 && `The provided animation property "${prop}" is not a supported CSS property for animations`);
}

function invalidParallelAnimation(prop, firstStart, firstEnd, secondStart, secondEnd) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3010
  /* INVALID_PARALLEL_ANIMATION */
  , NG_DEV_MODE$1 && `The CSS property "${prop}" that exists between the times of "${firstStart}ms" and "${firstEnd}ms" is also being animated in a parallel animation between the times of "${secondStart}ms" and "${secondEnd}ms"`);
}

function invalidKeyframes() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3011
  /* INVALID_KEYFRAMES */
  , NG_DEV_MODE$1 && `keyframes() must be placed inside of a call to animate()`);
}

function invalidOffset() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3012
  /* INVALID_OFFSET */
  , NG_DEV_MODE$1 && `Please ensure that all keyframe offsets are between 0 and 1`);
}

function keyframeOffsetsOutOfOrder() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3200
  /* KEYFRAME_OFFSETS_OUT_OF_ORDER */
  , NG_DEV_MODE$1 && `Please ensure that all keyframe offsets are in order`);
}

function keyframesMissingOffsets() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3202
  /* KEYFRAMES_MISSING_OFFSETS */
  , NG_DEV_MODE$1 && `Not all style() steps within the declared keyframes() contain offsets`);
}

function invalidStagger() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3013
  /* INVALID_STAGGER */
  , NG_DEV_MODE$1 && `stagger() can only be used inside of query()`);
}

function invalidQuery(selector) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3014
  /* INVALID_QUERY */
  , NG_DEV_MODE$1 && `\`query("${selector}")\` returned zero elements. (Use \`query("${selector}", { optional: true })\` if you wish to allow this.)`);
}

function invalidExpression(expr) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3015
  /* INVALID_EXPRESSION */
  , NG_DEV_MODE$1 && `The provided transition expression "${expr}" is not supported`);
}

function invalidTransitionAlias(alias) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3016
  /* INVALID_TRANSITION_ALIAS */
  , NG_DEV_MODE$1 && `The transition alias value "${alias}" is not supported`);
}

function validationFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3500
  /* VALIDATION_FAILED */
  , NG_DEV_MODE$1 && `animation validation failed:\n${errors.map(err => err.message).join('\n')}`);
}

function buildingFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3501
  /* BUILDING_FAILED */
  , NG_DEV_MODE$1 && `animation building failed:\n${errors.map(err => err.message).join('\n')}`);
}

function triggerBuildFailed(name, errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3404
  /* TRIGGER_BUILD_FAILED */
  , NG_DEV_MODE$1 && `The animation trigger "${name}" has failed to build due to the following errors:\n - ${errors.map(err => err.message).join('\n - ')}`);
}

function animationFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3502
  /* ANIMATION_FAILED */
  , NG_DEV_MODE$1 && `Unable to animate due to the following errors:${LINE_START}${errors.map(err => err.message).join(LINE_START)}`);
}

function registerFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3503
  /* REGISTRATION_FAILED */
  , NG_DEV_MODE$1 && `Unable to build the animation due to the following errors: ${errors.map(err => err.message).join('\n')}`);
}

function missingOrDestroyedAnimation() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3300
  /* MISSING_OR_DESTROYED_ANIMATION */
  , NG_DEV_MODE$1 && 'The requested animation doesn\'t exist or has already been destroyed');
}

function createAnimationFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3504
  /* CREATE_ANIMATION_FAILED */
  , NG_DEV_MODE$1 && `Unable to create the animation due to the following errors:${errors.map(err => err.message).join('\n')}`);
}

function missingPlayer(id) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3301
  /* MISSING_PLAYER */
  , NG_DEV_MODE$1 && `Unable to find the timeline player referenced by ${id}`);
}

function missingTrigger(phase, name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3302
  /* MISSING_TRIGGER */
  , NG_DEV_MODE$1 && `Unable to listen on the animation trigger event "${phase}" because the animation trigger "${name}" doesn\'t exist!`);
}

function missingEvent(name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3303
  /* MISSING_EVENT */
  , NG_DEV_MODE$1 && `Unable to listen on the animation trigger "${name}" because the provided event is undefined!`);
}

function unsupportedTriggerEvent(phase, name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3400
  /* UNSUPPORTED_TRIGGER_EVENT */
  , NG_DEV_MODE$1 && `The provided animation trigger event "${phase}" for the animation trigger "${name}" is not supported!`);
}

function unregisteredTrigger(name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3401
  /* UNREGISTERED_TRIGGER */
  , NG_DEV_MODE$1 && `The provided animation trigger "${name}" has not been registered!`);
}

function triggerTransitionsFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3402
  /* TRIGGER_TRANSITIONS_FAILED */
  , NG_DEV_MODE$1 && `Unable to process animations due to the following failed trigger transitions\n ${errors.map(err => err.message).join('\n')}`);
}

function triggerParsingFailed(name, errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3403
  /* TRIGGER_PARSING_FAILED */
  , NG_DEV_MODE$1 && `Animation parsing for the ${name} trigger have failed:${LINE_START}${errors.map(err => err.message).join(LINE_START)}`);
}

function transitionFailed(name, errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3505
  /* TRANSITION_FAILED */
  , NG_DEV_MODE$1 && `@${name} has failed due to:\n ${errors.map(err => err.message).join('\n- ')}`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function isBrowser() {
  return typeof window !== 'undefined' && typeof window.document !== 'undefined';
}

function isNode() {
  // Checking only for `process` isn't enough to identify whether or not we're in a Node
  // environment, because Webpack by default will polyfill the `process`. While we can discern
  // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
  // might not be future-proof. Instead we look at the stringified version of `process` which
  // is `[object process]` in Node and `[object Object]` when polyfilled.
  return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
}

function optimizeGroupPlayer(players) {
  switch (players.length) {
    case 0:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__.NoopAnimationPlayer();

    case 1:
      return players[0];

    default:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__["ɵAnimationGroupPlayer"](players);
  }
}

function normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {
  const errors = [];
  const normalizedKeyframes = [];
  let previousOffset = -1;
  let previousKeyframe = null;
  keyframes.forEach(kf => {
    const offset = kf['offset'];
    const isSameOffset = offset == previousOffset;
    const normalizedKeyframe = isSameOffset && previousKeyframe || {};
    Object.keys(kf).forEach(prop => {
      let normalizedProp = prop;
      let normalizedValue = kf[prop];

      if (prop !== 'offset') {
        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);

        switch (normalizedValue) {
          case _angular_animations__WEBPACK_IMPORTED_MODULE_1__["ɵPRE_STYLE"]:
            normalizedValue = preStyles[prop];
            break;

          case _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE:
            normalizedValue = postStyles[prop];
            break;

          default:
            normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
            break;
        }
      }

      normalizedKeyframe[normalizedProp] = normalizedValue;
    });

    if (!isSameOffset) {
      normalizedKeyframes.push(normalizedKeyframe);
    }

    previousKeyframe = normalizedKeyframe;
    previousOffset = offset;
  });

  if (errors.length) {
    throw animationFailed(errors);
  }

  return normalizedKeyframes;
}

function listenOnPlayer(player, eventName, event, callback) {
  switch (eventName) {
    case 'start':
      player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player)));
      break;

    case 'done':
      player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player)));
      break;

    case 'destroy':
      player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player)));
      break;
  }
}

function copyAnimationEvent(e, phaseName, player) {
  const totalTime = player.totalTime;
  const disabled = player.disabled ? true : false;
  const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
  const data = e['_data'];

  if (data != null) {
    event['_data'] = data;
  }

  return event;
}

function makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {
  return {
    element,
    triggerName,
    fromState,
    toState,
    phaseName,
    totalTime,
    disabled: !!disabled
  };
}

function getOrSetAsInMap(map, key, defaultValue) {
  let value;

  if (map instanceof Map) {
    value = map.get(key);

    if (!value) {
      map.set(key, value = defaultValue);
    }
  } else {
    value = map[key];

    if (!value) {
      value = map[key] = defaultValue;
    }
  }

  return value;
}

function parseTimelineCommand(command) {
  const separatorPos = command.indexOf(':');
  const id = command.substring(1, separatorPos);
  const action = command.substr(separatorPos + 1);
  return [id, action];
}

let _contains = (elm1, elm2) => false;

let _query = (element, selector, multi) => {
  return [];
};

let _documentElement = null;

function getParentElement(element) {
  const parent = element.parentNode || element.host; // consider host to support shadow DOM

  if (parent === _documentElement) {
    return null;
  }

  return parent;
} // Define utility methods for browsers and platform-server(domino) where Element
// and utility methods exist.


const _isNode = /*#__PURE__*/isNode();

if (_isNode || typeof Element !== 'undefined') {
  if (! /*#__PURE__*/isBrowser()) {
    _contains = (elm1, elm2) => elm1.contains(elm2);
  } else {
    // Read the document element in an IIFE that's been marked pure to avoid a top-level property
    // read that may prevent tree-shaking.
    _documentElement = /* @__PURE__ */(() => document.documentElement)();

    _contains = (elm1, elm2) => {
      while (elm2) {
        if (elm2 === elm1) {
          return true;
        }

        elm2 = getParentElement(elm2);
      }

      return false;
    };
  }

  _query = (element, selector, multi) => {
    if (multi) {
      return Array.from(element.querySelectorAll(selector));
    }

    const elem = element.querySelector(selector);
    return elem ? [elem] : [];
  };
}

function containsVendorPrefix(prop) {
  // Webkit is the only real popular vendor prefix nowadays
  // cc: http://shouldiprefix.com/
  return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
}

let _CACHED_BODY = null;
let _IS_WEBKIT = false;

function validateStyleProperty(prop) {
  if (!_CACHED_BODY) {
    _CACHED_BODY = getBodyNode() || {};
    _IS_WEBKIT = _CACHED_BODY.style ? 'WebkitAppearance' in _CACHED_BODY.style : false;
  }

  let result = true;

  if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
    result = prop in _CACHED_BODY.style;

    if (!result && _IS_WEBKIT) {
      const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
      result = camelProp in _CACHED_BODY.style;
    }
  }

  return result;
}

function getBodyNode() {
  if (typeof document != 'undefined') {
    return document.body;
  }

  return null;
}

const containsElement = _contains;
const invokeQuery = _query;

function hypenatePropsObject(object) {
  const newObj = {};
  Object.keys(object).forEach(prop => {
    const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
    newObj[newProp] = object[prop];
  });
  return newObj;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


let NoopAnimationDriver = /*#__PURE__*/(() => {
  class NoopAnimationDriver {
    validateStyleProperty(prop) {
      return validateStyleProperty(prop);
    }

    matchesElement(_element, _selector) {
      // This method is deprecated and no longer in use so we return false.
      return false;
    }

    containsElement(elm1, elm2) {
      return containsElement(elm1, elm2);
    }

    getParentElement(element) {
      return getParentElement(element);
    }

    query(element, selector, multi) {
      return invokeQuery(element, selector, multi);
    }

    computeStyle(element, prop, defaultValue) {
      return defaultValue || '';
    }

    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__.NoopAnimationPlayer(duration, delay);
    }

  }

  NoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) {
    return new (t || NoopAnimationDriver)();
  };

  NoopAnimationDriver.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: NoopAnimationDriver,
    factory: NoopAnimationDriver.ɵfac
  });
  return NoopAnimationDriver;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @publicApi
 */


let AnimationDriver = /*#__PURE__*/(() => {
  class AnimationDriver {}

  AnimationDriver.NOOP = /* @__PURE__ */new NoopAnimationDriver();
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */

  return AnimationDriver;
})();
const ONE_SECOND = 1000;
const SUBSTITUTION_EXPR_START = '{{';
const SUBSTITUTION_EXPR_END = '}}';
const ENTER_CLASSNAME = 'ng-enter';
const LEAVE_CLASSNAME = 'ng-leave';
const NG_TRIGGER_CLASSNAME = 'ng-trigger';
const NG_TRIGGER_SELECTOR = '.ng-trigger';
const NG_ANIMATING_CLASSNAME = 'ng-animating';
const NG_ANIMATING_SELECTOR = '.ng-animating';

function resolveTimingValue(value) {
  if (typeof value == 'number') return value;
  const matches = value.match(/^(-?[\.\d]+)(m?s)/);
  if (!matches || matches.length < 2) return 0;
  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}

function _convertTimeValueToMS(value, unit) {
  switch (unit) {
    case 's':
      return value * ONE_SECOND;

    default:
      // ms or something else
      return value;
  }
}

function resolveTiming(timings, errors, allowNegativeValues) {
  return timings.hasOwnProperty('duration') ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
}

function parseTimeExpression(exp, errors, allowNegativeValues) {
  const regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
  let duration;
  let delay = 0;
  let easing = '';

  if (typeof exp === 'string') {
    const matches = exp.match(regex);

    if (matches === null) {
      errors.push(invalidTimingValue(exp));
      return {
        duration: 0,
        delay: 0,
        easing: ''
      };
    }

    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    const delayMatch = matches[3];

    if (delayMatch != null) {
      delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
    }

    const easingVal = matches[5];

    if (easingVal) {
      easing = easingVal;
    }
  } else {
    duration = exp;
  }

  if (!allowNegativeValues) {
    let containsErrors = false;
    let startIndex = errors.length;

    if (duration < 0) {
      errors.push(negativeStepValue());
      containsErrors = true;
    }

    if (delay < 0) {
      errors.push(negativeDelayValue());
      containsErrors = true;
    }

    if (containsErrors) {
      errors.splice(startIndex, 0, invalidTimingValue(exp));
    }
  }

  return {
    duration,
    delay,
    easing
  };
}

function copyObj(obj, destination = {}) {
  Object.keys(obj).forEach(prop => {
    destination[prop] = obj[prop];
  });
  return destination;
}

function normalizeStyles(styles) {
  const normalizedStyles = {};

  if (Array.isArray(styles)) {
    styles.forEach(data => copyStyles(data, false, normalizedStyles));
  } else {
    copyStyles(styles, false, normalizedStyles);
  }

  return normalizedStyles;
}

function copyStyles(styles, readPrototype, destination = {}) {
  if (readPrototype) {
    // we make use of a for-in loop so that the
    // prototypically inherited properties are
    // revealed from the backFill map
    for (let prop in styles) {
      destination[prop] = styles[prop];
    }
  } else {
    copyObj(styles, destination);
  }

  return destination;
}

function getStyleAttributeString(element, key, value) {
  // Return the key-value pair string to be added to the style attribute for the
  // given CSS style key.
  if (value) {
    return key + ':' + value + ';';
  } else {
    return '';
  }
}

function writeStyleAttribute(element) {
  // Read the style property of the element and manually reflect it to the
  // style attribute. This is needed because Domino on platform-server doesn't
  // understand the full set of allowed CSS properties and doesn't reflect some
  // of them automatically.
  let styleAttrValue = '';

  for (let i = 0; i < element.style.length; i++) {
    const key = element.style.item(i);
    styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
  }

  for (const key in element.style) {
    // Skip internal Domino properties that don't need to be reflected.
    if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {
      continue;
    }

    const dashKey = camelCaseToDashCase(key);
    styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);
  }

  element.setAttribute('style', styleAttrValue);
}

function setStyles(element, styles, formerStyles) {
  if (element['style']) {
    Object.keys(styles).forEach(prop => {
      const camelProp = dashCaseToCamelCase(prop);

      if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
        formerStyles[prop] = element.style[camelProp];
      }

      element.style[camelProp] = styles[prop];
    }); // On the server set the 'style' attribute since it's not automatically reflected.

    if (isNode()) {
      writeStyleAttribute(element);
    }
  }
}

function eraseStyles(element, styles) {
  if (element['style']) {
    Object.keys(styles).forEach(prop => {
      const camelProp = dashCaseToCamelCase(prop);
      element.style[camelProp] = '';
    }); // On the server set the 'style' attribute since it's not automatically reflected.

    if (isNode()) {
      writeStyleAttribute(element);
    }
  }
}

function normalizeAnimationEntry(steps) {
  if (Array.isArray(steps)) {
    if (steps.length == 1) return steps[0];
    return (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__.sequence)(steps);
  }

  return steps;
}

function validateStyleParams(value, options, errors) {
  const params = options.params || {};
  const matches = extractStyleParams(value);

  if (matches.length) {
    matches.forEach(varName => {
      if (!params.hasOwnProperty(varName)) {
        errors.push(invalidStyleParams(varName));
      }
    });
  }
}

const PARAM_REGEX = /*#__PURE__*/new RegExp(`${SUBSTITUTION_EXPR_START}\\s*(.+?)\\s*${SUBSTITUTION_EXPR_END}`, 'g');

function extractStyleParams(value) {
  let params = [];

  if (typeof value === 'string') {
    let match;

    while (match = PARAM_REGEX.exec(value)) {
      params.push(match[1]);
    }

    PARAM_REGEX.lastIndex = 0;
  }

  return params;
}

function interpolateParams(value, params, errors) {
  const original = value.toString();
  const str = original.replace(PARAM_REGEX, (_, varName) => {
    let localVal = params[varName]; // this means that the value was never overridden by the data passed in by the user

    if (!params.hasOwnProperty(varName)) {
      errors.push(invalidParamValue(varName));
      localVal = '';
    }

    return localVal.toString();
  }); // we do this to assert that numeric values stay as they are

  return str == original ? value : str;
}

function iteratorToArray(iterator) {
  const arr = [];
  let item = iterator.next();

  while (!item.done) {
    arr.push(item.value);
    item = iterator.next();
  }

  return arr;
}

const DASH_CASE_REGEXP = /-+([a-z0-9])/g;

function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}

function camelCaseToDashCase(input) {
  return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function allowPreviousPlayerStylesMerge(duration, delay) {
  return duration === 0 || delay === 0;
}

function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
  const previousStyleProps = Object.keys(previousStyles);

  if (previousStyleProps.length && keyframes.length) {
    let startingKeyframe = keyframes[0];
    let missingStyleProps = [];
    previousStyleProps.forEach(prop => {
      if (!startingKeyframe.hasOwnProperty(prop)) {
        missingStyleProps.push(prop);
      }

      startingKeyframe[prop] = previousStyles[prop];
    });

    if (missingStyleProps.length) {
      // tslint:disable-next-line
      for (var i = 1; i < keyframes.length; i++) {
        let kf = keyframes[i];
        missingStyleProps.forEach(function (prop) {
          kf[prop] = computeStyle(element, prop);
        });
      }
    }
  }

  return keyframes;
}

function visitDslNode(visitor, node, context) {
  switch (node.type) {
    case 7
    /* Trigger */
    :
      return visitor.visitTrigger(node, context);

    case 0
    /* State */
    :
      return visitor.visitState(node, context);

    case 1
    /* Transition */
    :
      return visitor.visitTransition(node, context);

    case 2
    /* Sequence */
    :
      return visitor.visitSequence(node, context);

    case 3
    /* Group */
    :
      return visitor.visitGroup(node, context);

    case 4
    /* Animate */
    :
      return visitor.visitAnimate(node, context);

    case 5
    /* Keyframes */
    :
      return visitor.visitKeyframes(node, context);

    case 6
    /* Style */
    :
      return visitor.visitStyle(node, context);

    case 8
    /* Reference */
    :
      return visitor.visitReference(node, context);

    case 9
    /* AnimateChild */
    :
      return visitor.visitAnimateChild(node, context);

    case 10
    /* AnimateRef */
    :
      return visitor.visitAnimateRef(node, context);

    case 11
    /* Query */
    :
      return visitor.visitQuery(node, context);

    case 12
    /* Stagger */
    :
      return visitor.visitStagger(node, context);

    default:
      throw invalidNodeType(node.type);
  }
}

function computeStyle(element, prop) {
  return window.getComputedStyle(element)[prop];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;

function createListOfWarnings(warnings) {
  const LINE_START = '\n - ';
  return `${LINE_START}${warnings.filter(Boolean).map(warning => warning).join(LINE_START)}`;
}

function warnValidation(warnings) {
  NG_DEV_MODE && console.warn(`animation validation warnings:${createListOfWarnings(warnings)}`);
}

function warnTriggerBuild(name, warnings) {
  NG_DEV_MODE && console.warn(`The animation trigger "${name}" has built with the following warnings:${createListOfWarnings(warnings)}`);
}

function warnRegister(warnings) {
  NG_DEV_MODE && console.warn(`Animation built with the following warnings:${createListOfWarnings(warnings)}`);
}

function triggerParsingWarnings(name, warnings) {
  NG_DEV_MODE && console.warn(`Animation parsing for the ${name} trigger presents the following warnings:${createListOfWarnings(warnings)}`);
}

function pushUnrecognizedPropertiesWarning(warnings, props) {
  if (ngDevMode && props.length) {
    warnings.push(`The provided CSS properties are not recognized properties supported for animations: ${props.join(', ')}`);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ANY_STATE = '*';

function parseTransitionExpr(transitionValue, errors) {
  const expressions = [];

  if (typeof transitionValue == 'string') {
    transitionValue.split(/\s*,\s*/).forEach(str => parseInnerTransitionStr(str, expressions, errors));
  } else {
    expressions.push(transitionValue);
  }

  return expressions;
}

function parseInnerTransitionStr(eventStr, expressions, errors) {
  if (eventStr[0] == ':') {
    const result = parseAnimationAlias(eventStr, errors);

    if (typeof result == 'function') {
      expressions.push(result);
      return;
    }

    eventStr = result;
  }

  const match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);

  if (match == null || match.length < 4) {
    errors.push(invalidExpression(eventStr));
    return expressions;
  }

  const fromState = match[1];
  const separator = match[2];
  const toState = match[3];
  expressions.push(makeLambdaFromStates(fromState, toState));
  const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;

  if (separator[0] == '<' && !isFullAnyStateExpr) {
    expressions.push(makeLambdaFromStates(toState, fromState));
  }
}

function parseAnimationAlias(alias, errors) {
  switch (alias) {
    case ':enter':
      return 'void => *';

    case ':leave':
      return '* => void';

    case ':increment':
      return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);

    case ':decrement':
      return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);

    default:
      errors.push(invalidTransitionAlias(alias));
      return '* => *';
  }
} // DO NOT REFACTOR ... keep the follow set instantiations
// with the values intact (closure compiler for some reason
// removes follow-up lines that add the values outside of
// the constructor...


const TRUE_BOOLEAN_VALUES = /*#__PURE__*/new Set(['true', '1']);
const FALSE_BOOLEAN_VALUES = /*#__PURE__*/new Set(['false', '0']);

function makeLambdaFromStates(lhs, rhs) {
  const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
  const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
  return (fromState, toState) => {
    let lhsMatch = lhs == ANY_STATE || lhs == fromState;
    let rhsMatch = rhs == ANY_STATE || rhs == toState;

    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
    }

    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
    }

    return lhsMatch && rhsMatch;
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const SELF_TOKEN = ':self';
const SELF_TOKEN_REGEX = /*#__PURE__*/new RegExp(`\s*${SELF_TOKEN}\s*,?`, 'g');
/*
 * [Validation]
 * The visitor code below will traverse the animation AST generated by the animation verb functions
 * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
 * following corner-cases will be validated:
 *
 * 1. Overlap of animations
 * Given that a CSS property cannot be animated in more than one place at the same time, it's
 * important that this behavior is detected and validated. The way in which this occurs is that
 * each time a style property is examined, a string-map containing the property will be updated with
 * the start and end times for when the property is used within an animation step.
 *
 * If there are two or more parallel animations that are currently running (these are invoked by the
 * group()) on the same element then the validator will throw an error. Since the start/end timing
 * values are collected for each property then if the current animation step is animating the same
 * property and its timing values fall anywhere into the window of time that the property is
 * currently being animated within then this is what causes an error.
 *
 * 2. Timing values
 * The validator will validate to see if a timing value of `duration delay easing` or
 * `durationNumber` is valid or not.
 *
 * (note that upon validation the code below will replace the timing data with an object containing
 * {duration,delay,easing}.
 *
 * 3. Offset Validation
 * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
 * Offsets within keyframes() are considered valid when:
 *
 *   - No offsets are used at all
 *   - Each style() entry contains an offset value
 *   - Each offset is between 0 and 1
 *   - Each offset is greater to or equal than the previous one
 *
 * Otherwise an error will be thrown.
 */

function buildAnimationAst(driver, metadata, errors, warnings) {
  return new AnimationAstBuilderVisitor(driver).build(metadata, errors, warnings);
}

const ROOT_SELECTOR = '';

class AnimationAstBuilderVisitor {
  constructor(_driver) {
    this._driver = _driver;
  }

  build(metadata, errors, warnings) {
    const context = new AnimationAstBuilderContext(errors);

    this._resetContextStyleTimingState(context);

    const ast = visitDslNode(this, normalizeAnimationEntry(metadata), context);

    if (context.unsupportedCSSPropertiesFound.size) {
      pushUnrecognizedPropertiesWarning(warnings, [...context.unsupportedCSSPropertiesFound.keys()]);
    }

    return ast;
  }

  _resetContextStyleTimingState(context) {
    context.currentQuerySelector = ROOT_SELECTOR;
    context.collectedStyles = {};
    context.collectedStyles[ROOT_SELECTOR] = {};
    context.currentTime = 0;
  }

  visitTrigger(metadata, context) {
    let queryCount = context.queryCount = 0;
    let depCount = context.depCount = 0;
    const states = [];
    const transitions = [];

    if (metadata.name.charAt(0) == '@') {
      context.errors.push(invalidTrigger());
    }

    metadata.definitions.forEach(def => {
      this._resetContextStyleTimingState(context);

      if (def.type == 0
      /* State */
      ) {
        const stateDef = def;
        const name = stateDef.name;
        name.toString().split(/\s*,\s*/).forEach(n => {
          stateDef.name = n;
          states.push(this.visitState(stateDef, context));
        });
        stateDef.name = name;
      } else if (def.type == 1
      /* Transition */
      ) {
        const transition = this.visitTransition(def, context);
        queryCount += transition.queryCount;
        depCount += transition.depCount;
        transitions.push(transition);
      } else {
        context.errors.push(invalidDefinition());
      }
    });
    return {
      type: 7
      /* Trigger */
      ,
      name: metadata.name,
      states,
      transitions,
      queryCount,
      depCount,
      options: null
    };
  }

  visitState(metadata, context) {
    const styleAst = this.visitStyle(metadata.styles, context);
    const astParams = metadata.options && metadata.options.params || null;

    if (styleAst.containsDynamicStyles) {
      const missingSubs = new Set();
      const params = astParams || {};
      styleAst.styles.forEach(value => {
        if (isObject(value)) {
          const stylesObj = value;
          Object.keys(stylesObj).forEach(prop => {
            extractStyleParams(stylesObj[prop]).forEach(sub => {
              if (!params.hasOwnProperty(sub)) {
                missingSubs.add(sub);
              }
            });
          });
        }
      });

      if (missingSubs.size) {
        const missingSubsArr = iteratorToArray(missingSubs.values());
        context.errors.push(invalidState(metadata.name, missingSubsArr));
      }
    }

    return {
      type: 0
      /* State */
      ,
      name: metadata.name,
      style: styleAst,
      options: astParams ? {
        params: astParams
      } : null
    };
  }

  visitTransition(metadata, context) {
    context.queryCount = 0;
    context.depCount = 0;
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    const matchers = parseTransitionExpr(metadata.expr, context.errors);
    return {
      type: 1
      /* Transition */
      ,
      matchers,
      animation,
      queryCount: context.queryCount,
      depCount: context.depCount,
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitSequence(metadata, context) {
    return {
      type: 2
      /* Sequence */
      ,
      steps: metadata.steps.map(s => visitDslNode(this, s, context)),
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitGroup(metadata, context) {
    const currentTime = context.currentTime;
    let furthestTime = 0;
    const steps = metadata.steps.map(step => {
      context.currentTime = currentTime;
      const innerAst = visitDslNode(this, step, context);
      furthestTime = Math.max(furthestTime, context.currentTime);
      return innerAst;
    });
    context.currentTime = furthestTime;
    return {
      type: 3
      /* Group */
      ,
      steps,
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitAnimate(metadata, context) {
    const timingAst = constructTimingAst(metadata.timings, context.errors);
    context.currentAnimateTimings = timingAst;
    let styleAst;
    let styleMetadata = metadata.styles ? metadata.styles : (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__.style)({});

    if (styleMetadata.type == 5
    /* Keyframes */
    ) {
      styleAst = this.visitKeyframes(styleMetadata, context);
    } else {
      let styleMetadata = metadata.styles;
      let isEmpty = false;

      if (!styleMetadata) {
        isEmpty = true;
        const newStyleData = {};

        if (timingAst.easing) {
          newStyleData['easing'] = timingAst.easing;
        }

        styleMetadata = (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__.style)(newStyleData);
      }

      context.currentTime += timingAst.duration + timingAst.delay;

      const _styleAst = this.visitStyle(styleMetadata, context);

      _styleAst.isEmptyStep = isEmpty;
      styleAst = _styleAst;
    }

    context.currentAnimateTimings = null;
    return {
      type: 4
      /* Animate */
      ,
      timings: timingAst,
      style: styleAst,
      options: null
    };
  }

  visitStyle(metadata, context) {
    const ast = this._makeStyleAst(metadata, context);

    this._validateStyleAst(ast, context);

    return ast;
  }

  _makeStyleAst(metadata, context) {
    const styles = [];

    if (Array.isArray(metadata.styles)) {
      metadata.styles.forEach(styleTuple => {
        if (typeof styleTuple == 'string') {
          if (styleTuple == _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE) {
            styles.push(styleTuple);
          } else {
            context.errors.push(invalidStyleValue(styleTuple));
          }
        } else {
          styles.push(styleTuple);
        }
      });
    } else {
      styles.push(metadata.styles);
    }

    let containsDynamicStyles = false;
    let collectedEasing = null;
    styles.forEach(styleData => {
      if (isObject(styleData)) {
        const styleMap = styleData;
        const easing = styleMap['easing'];

        if (easing) {
          collectedEasing = easing;
          delete styleMap['easing'];
        }

        if (!containsDynamicStyles) {
          for (let prop in styleMap) {
            const value = styleMap[prop];

            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
              containsDynamicStyles = true;
              break;
            }
          }
        }
      }
    });
    return {
      type: 6
      /* Style */
      ,
      styles,
      easing: collectedEasing,
      offset: metadata.offset,
      containsDynamicStyles,
      options: null
    };
  }

  _validateStyleAst(ast, context) {
    const timings = context.currentAnimateTimings;
    let endTime = context.currentTime;
    let startTime = context.currentTime;

    if (timings && startTime > 0) {
      startTime -= timings.duration + timings.delay;
    }

    ast.styles.forEach(tuple => {
      if (typeof tuple == 'string') return;
      Object.keys(tuple).forEach(prop => {
        if (!this._driver.validateStyleProperty(prop)) {
          delete tuple[prop];
          context.unsupportedCSSPropertiesFound.add(prop);
          return;
        }

        const collectedStyles = context.collectedStyles[context.currentQuerySelector];
        const collectedEntry = collectedStyles[prop];
        let updateCollectedStyle = true;

        if (collectedEntry) {
          if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
            context.errors.push(invalidParallelAnimation(prop, collectedEntry.startTime, collectedEntry.endTime, startTime, endTime));
            updateCollectedStyle = false;
          } // we always choose the smaller start time value since we
          // want to have a record of the entire animation window where
          // the style property is being animated in between


          startTime = collectedEntry.startTime;
        }

        if (updateCollectedStyle) {
          collectedStyles[prop] = {
            startTime,
            endTime
          };
        }

        if (context.options) {
          validateStyleParams(tuple[prop], context.options, context.errors);
        }
      });
    });
  }

  visitKeyframes(metadata, context) {
    const ast = {
      type: 5
      /* Keyframes */
      ,
      styles: [],
      options: null
    };

    if (!context.currentAnimateTimings) {
      context.errors.push(invalidKeyframes());
      return ast;
    }

    const MAX_KEYFRAME_OFFSET = 1;
    let totalKeyframesWithOffsets = 0;
    const offsets = [];
    let offsetsOutOfOrder = false;
    let keyframesOutOfRange = false;
    let previousOffset = 0;
    const keyframes = metadata.steps.map(styles => {
      const style = this._makeStyleAst(styles, context);

      let offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
      let offset = 0;

      if (offsetVal != null) {
        totalKeyframesWithOffsets++;
        offset = style.offset = offsetVal;
      }

      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
      previousOffset = offset;
      offsets.push(offset);
      return style;
    });

    if (keyframesOutOfRange) {
      context.errors.push(invalidOffset());
    }

    if (offsetsOutOfOrder) {
      context.errors.push(keyframeOffsetsOutOfOrder());
    }

    const length = metadata.steps.length;
    let generatedOffset = 0;

    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
      context.errors.push(keyframesMissingOffsets());
    } else if (totalKeyframesWithOffsets == 0) {
      generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
    }

    const limit = length - 1;
    const currentTime = context.currentTime;
    const currentAnimateTimings = context.currentAnimateTimings;
    const animateDuration = currentAnimateTimings.duration;
    keyframes.forEach((kf, i) => {
      const offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
      const durationUpToThisFrame = offset * animateDuration;
      context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
      currentAnimateTimings.duration = durationUpToThisFrame;

      this._validateStyleAst(kf, context);

      kf.offset = offset;
      ast.styles.push(kf);
    });
    return ast;
  }

  visitReference(metadata, context) {
    return {
      type: 8
      /* Reference */
      ,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitAnimateChild(metadata, context) {
    context.depCount++;
    return {
      type: 9
      /* AnimateChild */
      ,
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitAnimateRef(metadata, context) {
    return {
      type: 10
      /* AnimateRef */
      ,
      animation: this.visitReference(metadata.animation, context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitQuery(metadata, context) {
    const parentSelector = context.currentQuerySelector;
    const options = metadata.options || {};
    context.queryCount++;
    context.currentQuery = metadata;
    const [selector, includeSelf] = normalizeSelector(metadata.selector);
    context.currentQuerySelector = parentSelector.length ? parentSelector + ' ' + selector : selector;
    getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    context.currentQuery = null;
    context.currentQuerySelector = parentSelector;
    return {
      type: 11
      /* Query */
      ,
      selector,
      limit: options.limit || 0,
      optional: !!options.optional,
      includeSelf,
      animation,
      originalSelector: metadata.selector,
      options: normalizeAnimationOptions(metadata.options)
    };
  }

  visitStagger(metadata, context) {
    if (!context.currentQuery) {
      context.errors.push(invalidStagger());
    }

    const timings = metadata.timings === 'full' ? {
      duration: 0,
      delay: 0,
      easing: 'full'
    } : resolveTiming(metadata.timings, context.errors, true);
    return {
      type: 12
      /* Stagger */
      ,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      timings,
      options: null
    };
  }

}

function normalizeSelector(selector) {
  const hasAmpersand = selector.split(/\s*,\s*/).find(token => token == SELF_TOKEN) ? true : false;

  if (hasAmpersand) {
    selector = selector.replace(SELF_TOKEN_REGEX, '');
  } // Note: the :enter and :leave aren't normalized here since those
  // selectors are filled in at runtime during timeline building


  selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.substr(1)).replace(/:animating/g, NG_ANIMATING_SELECTOR);
  return [selector, hasAmpersand];
}

function normalizeParams(obj) {
  return obj ? copyObj(obj) : null;
}

class AnimationAstBuilderContext {
  constructor(errors) {
    this.errors = errors;
    this.queryCount = 0;
    this.depCount = 0;
    this.currentTransition = null;
    this.currentQuery = null;
    this.currentQuerySelector = null;
    this.currentAnimateTimings = null;
    this.currentTime = 0;
    this.collectedStyles = {};
    this.options = null;
    this.unsupportedCSSPropertiesFound = new Set();
  }

}

function consumeOffset(styles) {
  if (typeof styles == 'string') return null;
  let offset = null;

  if (Array.isArray(styles)) {
    styles.forEach(styleTuple => {
      if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
        const obj = styleTuple;
        offset = parseFloat(obj['offset']);
        delete obj['offset'];
      }
    });
  } else if (isObject(styles) && styles.hasOwnProperty('offset')) {
    const obj = styles;
    offset = parseFloat(obj['offset']);
    delete obj['offset'];
  }

  return offset;
}

function isObject(value) {
  return !Array.isArray(value) && typeof value == 'object';
}

function constructTimingAst(value, errors) {
  if (value.hasOwnProperty('duration')) {
    return value;
  }

  if (typeof value == 'number') {
    const duration = resolveTiming(value, errors).duration;
    return makeTimingAst(duration, 0, '');
  }

  const strValue = value;
  const isDynamic = strValue.split(/\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');

  if (isDynamic) {
    const ast = makeTimingAst(0, 0, '');
    ast.dynamic = true;
    ast.strValue = strValue;
    return ast;
  }

  const timings = resolveTiming(strValue, errors);
  return makeTimingAst(timings.duration, timings.delay, timings.easing);
}

function normalizeAnimationOptions(options) {
  if (options) {
    options = copyObj(options);

    if (options['params']) {
      options['params'] = normalizeParams(options['params']);
    }
  } else {
    options = {};
  }

  return options;
}

function makeTimingAst(duration, delay, easing) {
  return {
    duration,
    delay,
    easing
  };
}

function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {
  return {
    type: 1
    /* TimelineAnimation */
    ,
    element,
    keyframes,
    preStyleProps,
    postStyleProps,
    duration,
    delay,
    totalTime: duration + delay,
    easing,
    subTimeline
  };
}

class ElementInstructionMap {
  constructor() {
    this._map = new Map();
  }

  get(element) {
    return this._map.get(element) || [];
  }

  append(element, instructions) {
    let existingInstructions = this._map.get(element);

    if (!existingInstructions) {
      this._map.set(element, existingInstructions = []);
    }

    existingInstructions.push(...instructions);
  }

  has(element) {
    return this._map.has(element);
  }

  clear() {
    this._map.clear();
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ONE_FRAME_IN_MILLISECONDS = 1;
const ENTER_TOKEN = ':enter';
const ENTER_TOKEN_REGEX = /*#__PURE__*/new RegExp(ENTER_TOKEN, 'g');
const LEAVE_TOKEN = ':leave';
const LEAVE_TOKEN_REGEX = /*#__PURE__*/new RegExp(LEAVE_TOKEN, 'g');
/*
 * The code within this file aims to generate web-animations-compatible keyframes from Angular's
 * animation DSL code.
 *
 * The code below will be converted from:
 *
 * ```
 * sequence([
 *   style({ opacity: 0 }),
 *   animate(1000, style({ opacity: 0 }))
 * ])
 * ```
 *
 * To:
 * ```
 * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
 * duration = 1000
 * delay = 0
 * easing = ''
 * ```
 *
 * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
 * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
 *
 * [AST Traversal]
 * Each of the animation verbs, when executed, will return an string-map object representing what
 * type of action it is (style, animate, group, etc...) and the data associated with it. This means
 * that when functional composition mix of these functions is evaluated (like in the example above)
 * then it will end up producing a tree of objects representing the animation itself.
 *
 * When this animation object tree is processed by the visitor code below it will visit each of the
 * verb statements within the visitor. And during each visit it will build the context of the
 * animation keyframes by interacting with the `TimelineBuilder`.
 *
 * [TimelineBuilder]
 * This class is responsible for tracking the styles and building a series of keyframe objects for a
 * timeline between a start and end time. The builder starts off with an initial timeline and each
 * time the AST comes across a `group()`, `keyframes()` or a combination of the two within a
 * `sequence()` then it will generate a sub timeline for each step as well as a new one after
 * they are complete.
 *
 * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
 * timeline was created (based on one of the cases above) then the parent timeline will attempt to
 * merge the styles used within the sub timelines into itself (only with group() this will happen).
 * This happens with a merge operation (much like how the merge works in mergeSort) and it will only
 * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
 * that if the styles are used later on in another phase of the animation then they will be the most
 * up-to-date values.
 *
 * [How Missing Styles Are Updated]
 * Each timeline has a `backFill` property which is responsible for filling in new styles into
 * already processed keyframes if a new style shows up later within the animation sequence.
 *
 * ```
 * sequence([
 *   style({ width: 0 }),
 *   animate(1000, style({ width: 100 })),
 *   animate(1000, style({ width: 200 })),
 *   animate(1000, style({ width: 300 }))
 *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
 * else
 * ])
 * ```
 *
 * What is happening here is that the `height` value is added later in the sequence, but is missing
 * from all previous animation steps. Therefore when a keyframe is created it would also be missing
 * from all previous keyframes up until where it is first used. For the timeline keyframe generation
 * to properly fill in the style it will place the previous value (the value from the parent
 * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
 * styles is an object that prototypically inherits from the backFill object, this means that if a
 * value is added into the backFill then it will automatically propagate any missing values to all
 * keyframes. Therefore the missing `height` value will be properly filled into the already
 * processed keyframes.
 *
 * When a sub-timeline is created it will have its own backFill property. This is done so that
 * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
 * keyframes
 *
 * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
 *
 * [Validation]
 * The code in this file is not responsible for validation. That functionality happens with within
 * the `AnimationValidatorVisitor` code.
 */

function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {
  return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}

class AnimationTimelineBuilderVisitor {
  buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {
    subInstructions = subInstructions || new ElementInstructionMap();
    const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
    context.options = options;
    context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
    visitDslNode(this, ast, context); // this checks to see if an actual animation happened

    const timelines = context.timelines.filter(timeline => timeline.containsAnimation());

    if (Object.keys(finalStyles).length) {
      // note: we just want to apply the final styles for the rootElement, so we do not
      //       just apply the styles to the last timeline but the last timeline which
      //       element is the root one (basically `*`-styles are replaced with the actual
      //       state style values only for the root element)
      let lastRootTimeline;

      for (let i = timelines.length - 1; i >= 0; i--) {
        const timeline = timelines[i];

        if (timeline.element === rootElement) {
          lastRootTimeline = timeline;
          break;
        }
      }

      if (lastRootTimeline && !lastRootTimeline.allowOnlyTimelineStyles()) {
        lastRootTimeline.setStyles([finalStyles], null, context.errors, options);
      }
    }

    return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) : [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
  }

  visitTrigger(ast, context) {// these values are not visited in this AST
  }

  visitState(ast, context) {// these values are not visited in this AST
  }

  visitTransition(ast, context) {// these values are not visited in this AST
  }

  visitAnimateChild(ast, context) {
    const elementInstructions = context.subInstructions.get(context.element);

    if (elementInstructions) {
      const innerContext = context.createSubContext(ast.options);
      const startTime = context.currentTimeline.currentTime;

      const endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);

      if (startTime != endTime) {
        // we do this on the upper context because we created a sub context for
        // the sub child animations
        context.transformIntoNewTimeline(endTime);
      }
    }

    context.previousNode = ast;
  }

  visitAnimateRef(ast, context) {
    const innerContext = context.createSubContext(ast.options);
    innerContext.transformIntoNewTimeline();
    this.visitReference(ast.animation, innerContext);
    context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
    context.previousNode = ast;
  }

  _visitSubInstructions(instructions, context, options) {
    const startTime = context.currentTimeline.currentTime;
    let furthestTime = startTime; // this is a special-case for when a user wants to skip a sub
    // animation from being fired entirely.

    const duration = options.duration != null ? resolveTimingValue(options.duration) : null;
    const delay = options.delay != null ? resolveTimingValue(options.delay) : null;

    if (duration !== 0) {
      instructions.forEach(instruction => {
        const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
        furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
      });
    }

    return furthestTime;
  }

  visitReference(ast, context) {
    context.updateOptions(ast.options, true);
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast;
  }

  visitSequence(ast, context) {
    const subContextCount = context.subContextCount;
    let ctx = context;
    const options = ast.options;

    if (options && (options.params || options.delay)) {
      ctx = context.createSubContext(options);
      ctx.transformIntoNewTimeline();

      if (options.delay != null) {
        if (ctx.previousNode.type == 6
        /* Style */
        ) {
          ctx.currentTimeline.snapshotCurrentStyles();
          ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }

        const delay = resolveTimingValue(options.delay);
        ctx.delayNextStep(delay);
      }
    }

    if (ast.steps.length) {
      ast.steps.forEach(s => visitDslNode(this, s, ctx)); // this is here just in case the inner steps only contain or end with a style() call

      ctx.currentTimeline.applyStylesToKeyframe(); // this means that some animation function within the sequence
      // ended up creating a sub timeline (which means the current
      // timeline cannot overlap with the contents of the sequence)

      if (ctx.subContextCount > subContextCount) {
        ctx.transformIntoNewTimeline();
      }
    }

    context.previousNode = ast;
  }

  visitGroup(ast, context) {
    const innerTimelines = [];
    let furthestTime = context.currentTimeline.currentTime;
    const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
    ast.steps.forEach(s => {
      const innerContext = context.createSubContext(ast.options);

      if (delay) {
        innerContext.delayNextStep(delay);
      }

      visitDslNode(this, s, innerContext);
      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
      innerTimelines.push(innerContext.currentTimeline);
    }); // this operation is run after the AST loop because otherwise
    // if the parent timeline's collected styles were updated then
    // it would pass in invalid data into the new-to-be forked items

    innerTimelines.forEach(timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));
    context.transformIntoNewTimeline(furthestTime);
    context.previousNode = ast;
  }

  _visitTiming(ast, context) {
    if (ast.dynamic) {
      const strValue = ast.strValue;
      const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
      return resolveTiming(timingValue, context.errors);
    } else {
      return {
        duration: ast.duration,
        delay: ast.delay,
        easing: ast.easing
      };
    }
  }

  visitAnimate(ast, context) {
    const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);

    const timeline = context.currentTimeline;

    if (timings.delay) {
      context.incrementTime(timings.delay);
      timeline.snapshotCurrentStyles();
    }

    const style = ast.style;

    if (style.type == 5
    /* Keyframes */
    ) {
      this.visitKeyframes(style, context);
    } else {
      context.incrementTime(timings.duration);
      this.visitStyle(style, context);
      timeline.applyStylesToKeyframe();
    }

    context.currentAnimateTimings = null;
    context.previousNode = ast;
  }

  visitStyle(ast, context) {
    const timeline = context.currentTimeline;
    const timings = context.currentAnimateTimings; // this is a special case for when a style() call
    // directly follows  an animate() call (but not inside of an animate() call)

    if (!timings && timeline.getCurrentStyleProperties().length) {
      timeline.forwardFrame();
    }

    const easing = timings && timings.easing || ast.easing;

    if (ast.isEmptyStep) {
      timeline.applyEmptyStep(easing);
    } else {
      timeline.setStyles(ast.styles, easing, context.errors, context.options);
    }

    context.previousNode = ast;
  }

  visitKeyframes(ast, context) {
    const currentAnimateTimings = context.currentAnimateTimings;
    const startTime = context.currentTimeline.duration;
    const duration = currentAnimateTimings.duration;
    const innerContext = context.createSubContext();
    const innerTimeline = innerContext.currentTimeline;
    innerTimeline.easing = currentAnimateTimings.easing;
    ast.styles.forEach(step => {
      const offset = step.offset || 0;
      innerTimeline.forwardTime(offset * duration);
      innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
      innerTimeline.applyStylesToKeyframe();
    }); // this will ensure that the parent timeline gets all the styles from
    // the child even if the new timeline below is not used

    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline); // we do this because the window between this timeline and the sub timeline
    // should ensure that the styles within are exactly the same as they were before

    context.transformIntoNewTimeline(startTime + duration);
    context.previousNode = ast;
  }

  visitQuery(ast, context) {
    // in the event that the first step before this is a style step we need
    // to ensure the styles are applied before the children are animated
    const startTime = context.currentTimeline.currentTime;
    const options = ast.options || {};
    const delay = options.delay ? resolveTimingValue(options.delay) : 0;

    if (delay && (context.previousNode.type === 6
    /* Style */
    || startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length)) {
      context.currentTimeline.snapshotCurrentStyles();
      context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    }

    let furthestTime = startTime;
    const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
    context.currentQueryTotal = elms.length;
    let sameElementTimeline = null;
    elms.forEach((element, i) => {
      context.currentQueryIndex = i;
      const innerContext = context.createSubContext(ast.options, element);

      if (delay) {
        innerContext.delayNextStep(delay);
      }

      if (element === context.element) {
        sameElementTimeline = innerContext.currentTimeline;
      }

      visitDslNode(this, ast.animation, innerContext); // this is here just incase the inner steps only contain or end
      // with a style() call (which is here to signal that this is a preparatory
      // call to style an element before it is animated again)

      innerContext.currentTimeline.applyStylesToKeyframe();
      const endTime = innerContext.currentTimeline.currentTime;
      furthestTime = Math.max(furthestTime, endTime);
    });
    context.currentQueryIndex = 0;
    context.currentQueryTotal = 0;
    context.transformIntoNewTimeline(furthestTime);

    if (sameElementTimeline) {
      context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
      context.currentTimeline.snapshotCurrentStyles();
    }

    context.previousNode = ast;
  }

  visitStagger(ast, context) {
    const parentContext = context.parentContext;
    const tl = context.currentTimeline;
    const timings = ast.timings;
    const duration = Math.abs(timings.duration);
    const maxTime = duration * (context.currentQueryTotal - 1);
    let delay = duration * context.currentQueryIndex;
    let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;

    switch (staggerTransformer) {
      case 'reverse':
        delay = maxTime - delay;
        break;

      case 'full':
        delay = parentContext.currentStaggerTime;
        break;
    }

    const timeline = context.currentTimeline;

    if (delay) {
      timeline.delayNextStep(delay);
    }

    const startingTime = timeline.currentTime;
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast; // time = duration + delay
    // the reason why this computation is so complex is because
    // the inner timeline may either have a delay value or a stretched
    // keyframe depending on if a subtimeline is not used or is used.

    parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
  }

}

const DEFAULT_NOOP_PREVIOUS_NODE = {};

class AnimationTimelineContext {
  constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
    this._driver = _driver;
    this.element = element;
    this.subInstructions = subInstructions;
    this._enterClassName = _enterClassName;
    this._leaveClassName = _leaveClassName;
    this.errors = errors;
    this.timelines = timelines;
    this.parentContext = null;
    this.currentAnimateTimings = null;
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.subContextCount = 0;
    this.options = {};
    this.currentQueryIndex = 0;
    this.currentQueryTotal = 0;
    this.currentStaggerTime = 0;
    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
    timelines.push(this.currentTimeline);
  }

  get params() {
    return this.options.params;
  }

  updateOptions(options, skipIfExists) {
    if (!options) return;
    const newOptions = options;
    let optionsToUpdate = this.options; // NOTE: this will get patched up when other animation methods support duration overrides

    if (newOptions.duration != null) {
      optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
    }

    if (newOptions.delay != null) {
      optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
    }

    const newParams = newOptions.params;

    if (newParams) {
      let paramsToUpdate = optionsToUpdate.params;

      if (!paramsToUpdate) {
        paramsToUpdate = this.options.params = {};
      }

      Object.keys(newParams).forEach(name => {
        if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
          paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);
        }
      });
    }
  }

  _copyOptions() {
    const options = {};

    if (this.options) {
      const oldParams = this.options.params;

      if (oldParams) {
        const params = options['params'] = {};
        Object.keys(oldParams).forEach(name => {
          params[name] = oldParams[name];
        });
      }
    }

    return options;
  }

  createSubContext(options = null, element, newTime) {
    const target = element || this.element;
    const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
    context.previousNode = this.previousNode;
    context.currentAnimateTimings = this.currentAnimateTimings;
    context.options = this._copyOptions();
    context.updateOptions(options);
    context.currentQueryIndex = this.currentQueryIndex;
    context.currentQueryTotal = this.currentQueryTotal;
    context.parentContext = this;
    this.subContextCount++;
    return context;
  }

  transformIntoNewTimeline(newTime) {
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
    this.timelines.push(this.currentTimeline);
    return this.currentTimeline;
  }

  appendInstructionToTimeline(instruction, duration, delay) {
    const updatedTimings = {
      duration: duration != null ? duration : instruction.duration,
      delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
      easing: ''
    };
    const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
    this.timelines.push(builder);
    return updatedTimings;
  }

  incrementTime(time) {
    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
  }

  delayNextStep(delay) {
    // negative delays are not yet supported
    if (delay > 0) {
      this.currentTimeline.delayNextStep(delay);
    }
  }

  invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
    let results = [];

    if (includeSelf) {
      results.push(this.element);
    }

    if (selector.length > 0) {
      // only if :self is used then the selector can be empty
      selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
      selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
      const multi = limit != 1;

      let elements = this._driver.query(this.element, selector, multi);

      if (limit !== 0) {
        elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
      }

      results.push(...elements);
    }

    if (!optional && results.length == 0) {
      errors.push(invalidQuery(originalSelector));
    }

    return results;
  }

}

class TimelineBuilder {
  constructor(_driver, element, startTime, _elementTimelineStylesLookup) {
    this._driver = _driver;
    this.element = element;
    this.startTime = startTime;
    this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
    this.duration = 0;
    this._previousKeyframe = {};
    this._currentKeyframe = {};
    this._keyframes = new Map();
    this._styleSummary = {};
    this._pendingStyles = {};
    this._backFill = {};
    this._currentEmptyStepKeyframe = null;

    if (!this._elementTimelineStylesLookup) {
      this._elementTimelineStylesLookup = new Map();
    }

    this._localTimelineStyles = Object.create(this._backFill, {});
    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);

    if (!this._globalTimelineStyles) {
      this._globalTimelineStyles = this._localTimelineStyles;

      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
    }

    this._loadKeyframe();
  }

  containsAnimation() {
    switch (this._keyframes.size) {
      case 0:
        return false;

      case 1:
        return this.getCurrentStyleProperties().length > 0;

      default:
        return true;
    }
  }

  getCurrentStyleProperties() {
    return Object.keys(this._currentKeyframe);
  }

  get currentTime() {
    return this.startTime + this.duration;
  }

  delayNextStep(delay) {
    // in the event that a style() step is placed right before a stagger()
    // and that style() step is the very first style() value in the animation
    // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
    // properly applies the style() values to work with the stagger...
    const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;

    if (this.duration || hasPreStyleStep) {
      this.forwardTime(this.currentTime + delay);

      if (hasPreStyleStep) {
        this.snapshotCurrentStyles();
      }
    } else {
      this.startTime += delay;
    }
  }

  fork(element, currentTime) {
    this.applyStylesToKeyframe();
    return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
  }

  _loadKeyframe() {
    if (this._currentKeyframe) {
      this._previousKeyframe = this._currentKeyframe;
    }

    this._currentKeyframe = this._keyframes.get(this.duration);

    if (!this._currentKeyframe) {
      this._currentKeyframe = Object.create(this._backFill, {});

      this._keyframes.set(this.duration, this._currentKeyframe);
    }
  }

  forwardFrame() {
    this.duration += ONE_FRAME_IN_MILLISECONDS;

    this._loadKeyframe();
  }

  forwardTime(time) {
    this.applyStylesToKeyframe();
    this.duration = time;

    this._loadKeyframe();
  }

  _updateStyle(prop, value) {
    this._localTimelineStyles[prop] = value;
    this._globalTimelineStyles[prop] = value;
    this._styleSummary[prop] = {
      time: this.currentTime,
      value
    };
  }

  allowOnlyTimelineStyles() {
    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
  }

  applyEmptyStep(easing) {
    if (easing) {
      this._previousKeyframe['easing'] = easing;
    } // special case for animate(duration):
    // all missing styles are filled with a `*` value then
    // if any destination styles are filled in later on the same
    // keyframe then they will override the overridden styles
    // We use `_globalTimelineStyles` here because there may be
    // styles in previous keyframes that are not present in this timeline


    Object.keys(this._globalTimelineStyles).forEach(prop => {
      this._backFill[prop] = this._globalTimelineStyles[prop] || _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE;
      this._currentKeyframe[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE;
    });
    this._currentEmptyStepKeyframe = this._currentKeyframe;
  }

  setStyles(input, easing, errors, options) {
    if (easing) {
      this._previousKeyframe['easing'] = easing;
    }

    const params = options && options.params || {};
    const styles = flattenStyles(input, this._globalTimelineStyles);
    Object.keys(styles).forEach(prop => {
      const val = interpolateParams(styles[prop], params, errors);
      this._pendingStyles[prop] = val;

      if (!this._localTimelineStyles.hasOwnProperty(prop)) {
        this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ? this._globalTimelineStyles[prop] : _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE;
      }

      this._updateStyle(prop, val);
    });
  }

  applyStylesToKeyframe() {
    const styles = this._pendingStyles;
    const props = Object.keys(styles);
    if (props.length == 0) return;
    this._pendingStyles = {};
    props.forEach(prop => {
      const val = styles[prop];
      this._currentKeyframe[prop] = val;
    });
    Object.keys(this._localTimelineStyles).forEach(prop => {
      if (!this._currentKeyframe.hasOwnProperty(prop)) {
        this._currentKeyframe[prop] = this._localTimelineStyles[prop];
      }
    });
  }

  snapshotCurrentStyles() {
    Object.keys(this._localTimelineStyles).forEach(prop => {
      const val = this._localTimelineStyles[prop];
      this._pendingStyles[prop] = val;

      this._updateStyle(prop, val);
    });
  }

  getFinalKeyframe() {
    return this._keyframes.get(this.duration);
  }

  get properties() {
    const properties = [];

    for (let prop in this._currentKeyframe) {
      properties.push(prop);
    }

    return properties;
  }

  mergeTimelineCollectedStyles(timeline) {
    Object.keys(timeline._styleSummary).forEach(prop => {
      const details0 = this._styleSummary[prop];
      const details1 = timeline._styleSummary[prop];

      if (!details0 || details1.time > details0.time) {
        this._updateStyle(prop, details1.value);
      }
    });
  }

  buildKeyframes() {
    this.applyStylesToKeyframe();
    const preStyleProps = new Set();
    const postStyleProps = new Set();
    const isEmpty = this._keyframes.size === 1 && this.duration === 0;
    let finalKeyframes = [];

    this._keyframes.forEach((keyframe, time) => {
      const finalKeyframe = copyStyles(keyframe, true);
      Object.keys(finalKeyframe).forEach(prop => {
        const value = finalKeyframe[prop];

        if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_1__["ɵPRE_STYLE"]) {
          preStyleProps.add(prop);
        } else if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE) {
          postStyleProps.add(prop);
        }
      });

      if (!isEmpty) {
        finalKeyframe['offset'] = time / this.duration;
      }

      finalKeyframes.push(finalKeyframe);
    });

    const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
    const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : []; // special case for a 0-second animation (which is designed just to place styles onscreen)

    if (isEmpty) {
      const kf0 = finalKeyframes[0];
      const kf1 = copyObj(kf0);
      kf0['offset'] = 0;
      kf1['offset'] = 1;
      finalKeyframes = [kf0, kf1];
    }

    return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
  }

}

class SubTimelineBuilder extends TimelineBuilder {
  constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {
    super(driver, element, timings.delay);
    this.keyframes = keyframes;
    this.preStyleProps = preStyleProps;
    this.postStyleProps = postStyleProps;
    this._stretchStartingKeyframe = _stretchStartingKeyframe;
    this.timings = {
      duration: timings.duration,
      delay: timings.delay,
      easing: timings.easing
    };
  }

  containsAnimation() {
    return this.keyframes.length > 1;
  }

  buildKeyframes() {
    let keyframes = this.keyframes;
    let {
      delay,
      duration,
      easing
    } = this.timings;

    if (this._stretchStartingKeyframe && delay) {
      const newKeyframes = [];
      const totalTime = duration + delay;
      const startingGap = delay / totalTime; // the original starting keyframe now starts once the delay is done

      const newFirstKeyframe = copyStyles(keyframes[0], false);
      newFirstKeyframe['offset'] = 0;
      newKeyframes.push(newFirstKeyframe);
      const oldFirstKeyframe = copyStyles(keyframes[0], false);
      oldFirstKeyframe['offset'] = roundOffset(startingGap);
      newKeyframes.push(oldFirstKeyframe);
      /*
        When the keyframe is stretched then it means that the delay before the animation
        starts is gone. Instead the first keyframe is placed at the start of the animation
        and it is then copied to where it starts when the original delay is over. This basically
        means nothing animates during that delay, but the styles are still rendered. For this
        to work the original offset values that exist in the original keyframes must be "warped"
        so that they can take the new keyframe + delay into account.
               delay=1000, duration=1000, keyframes = 0 .5 1
               turns into
               delay=0, duration=2000, keyframes = 0 .33 .66 1
       */
      // offsets between 1 ... n -1 are all warped by the keyframe stretch

      const limit = keyframes.length - 1;

      for (let i = 1; i <= limit; i++) {
        let kf = copyStyles(keyframes[i], false);
        const oldOffset = kf['offset'];
        const timeAtKeyframe = delay + oldOffset * duration;
        kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
        newKeyframes.push(kf);
      } // the new starting keyframe should be added at the start


      duration = totalTime;
      delay = 0;
      easing = '';
      keyframes = newKeyframes;
    }

    return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
  }

}

function roundOffset(offset, decimalPoints = 3) {
  const mult = Math.pow(10, decimalPoints - 1);
  return Math.round(offset * mult) / mult;
}

function flattenStyles(input, allStyles) {
  const styles = {};
  let allProperties;
  input.forEach(token => {
    if (token === '*') {
      allProperties = allProperties || Object.keys(allStyles);
      allProperties.forEach(prop => {
        styles[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE;
      });
    } else {
      copyStyles(token, false, styles);
    }
  });
  return styles;
}

class Animation {
  constructor(_driver, input) {
    this._driver = _driver;
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(_driver, input, errors, warnings);

    if (errors.length) {
      throw validationFailed(errors);
    }

    if (warnings.length) {
      warnValidation(warnings);
    }

    this._animationAst = ast;
  }

  buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
    const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
    const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
    const errors = [];
    subInstructions = subInstructions || new ElementInstructionMap();
    const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);

    if (errors.length) {
      throw buildingFailed(errors);
    }

    return result;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


class AnimationStyleNormalizer {}
/**
 * @publicApi
 */


class NoopAnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return propertyName;
  }

  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    return value;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return dashCaseToCamelCase(propertyName);
  }

  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    let unit = '';
    const strVal = value.toString().trim();

    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
      if (typeof value === 'number') {
        unit = 'px';
      } else {
        const valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);

        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errors.push(invalidCssUnitValue(userProvidedProperty, value));
        }
      }
    }

    return strVal + unit;
  }

}

const DIMENSIONAL_PROP_MAP = /*#__PURE__*/(() => makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(',')))();

function makeBooleanMap(keys) {
  const map = {};
  keys.forEach(key => map[key] = true);
  return map;
}

function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
  return {
    type: 0
    /* TransitionAnimation */
    ,
    element,
    triggerName,
    isRemovalTransition,
    fromState,
    fromStyles,
    toState,
    toStyles,
    timelines,
    queriedElements,
    preStyleProps,
    postStyleProps,
    totalTime,
    errors
  };
}

const EMPTY_OBJECT = {};

class AnimationTransitionFactory {
  constructor(_triggerName, ast, _stateStyles) {
    this._triggerName = _triggerName;
    this.ast = ast;
    this._stateStyles = _stateStyles;
  }

  match(currentState, nextState, element, params) {
    return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
  }

  buildStyles(stateName, params, errors) {
    const backupStateStyler = this._stateStyles['*'];
    const stateStyler = this._stateStyles[stateName];
    const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
    return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
  }

  build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
    const errors = [];
    const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
    const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
    const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
    const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
    const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
    const queriedElements = new Set();
    const preStyleMap = new Map();
    const postStyleMap = new Map();
    const isRemoval = nextState === 'void';
    const animationOptions = {
      params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams)
    };
    const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
    let totalTime = 0;
    timelines.forEach(tl => {
      totalTime = Math.max(tl.duration + tl.delay, totalTime);
    });

    if (errors.length) {
      return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
    }

    timelines.forEach(tl => {
      const elm = tl.element;
      const preProps = getOrSetAsInMap(preStyleMap, elm, {});
      tl.preStyleProps.forEach(prop => preProps[prop] = true);
      const postProps = getOrSetAsInMap(postStyleMap, elm, {});
      tl.postStyleProps.forEach(prop => postProps[prop] = true);

      if (elm !== element) {
        queriedElements.add(elm);
      }
    });
    const queriedElementsList = iteratorToArray(queriedElements.values());
    return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
  }

}

function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
  return matchFns.some(fn => fn(currentState, nextState, element, params));
}

class AnimationStateStyles {
  constructor(styles, defaultParams, normalizer) {
    this.styles = styles;
    this.defaultParams = defaultParams;
    this.normalizer = normalizer;
  }

  buildStyles(params, errors) {
    const finalStyles = {};
    const combinedParams = copyObj(this.defaultParams);
    Object.keys(params).forEach(key => {
      const value = params[key];

      if (value != null) {
        combinedParams[key] = value;
      }
    });
    this.styles.styles.forEach(value => {
      if (typeof value !== 'string') {
        const styleObj = value;
        Object.keys(styleObj).forEach(prop => {
          let val = styleObj[prop];

          if (val.length > 1) {
            val = interpolateParams(val, combinedParams, errors);
          }

          const normalizedProp = this.normalizer.normalizePropertyName(prop, errors);
          val = this.normalizer.normalizeStyleValue(prop, normalizedProp, val, errors);
          finalStyles[normalizedProp] = val;
        });
      }
    });
    return finalStyles;
  }

}

function buildTrigger(name, ast, normalizer) {
  return new AnimationTrigger(name, ast, normalizer);
}

class AnimationTrigger {
  constructor(name, ast, _normalizer) {
    this.name = name;
    this.ast = ast;
    this._normalizer = _normalizer;
    this.transitionFactories = [];
    this.states = {};
    ast.states.forEach(ast => {
      const defaultParams = ast.options && ast.options.params || {};
      this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams, _normalizer);
    });
    balanceProperties(this.states, 'true', '1');
    balanceProperties(this.states, 'false', '0');
    ast.transitions.forEach(ast => {
      this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));
    });
    this.fallbackTransition = createFallbackTransition(name, this.states, this._normalizer);
  }

  get containsQueries() {
    return this.ast.queryCount > 0;
  }

  matchTransition(currentState, nextState, element, params) {
    const entry = this.transitionFactories.find(f => f.match(currentState, nextState, element, params));
    return entry || null;
  }

  matchStyles(currentState, params, errors) {
    return this.fallbackTransition.buildStyles(currentState, params, errors);
  }

}

function createFallbackTransition(triggerName, states, normalizer) {
  const matchers = [(fromState, toState) => true];
  const animation = {
    type: 2
    /* Sequence */
    ,
    steps: [],
    options: null
  };
  const transition = {
    type: 1
    /* Transition */
    ,
    animation,
    matchers,
    options: null,
    queryCount: 0,
    depCount: 0
  };
  return new AnimationTransitionFactory(triggerName, transition, states);
}

function balanceProperties(obj, key1, key2) {
  if (obj.hasOwnProperty(key1)) {
    if (!obj.hasOwnProperty(key2)) {
      obj[key2] = obj[key1];
    }
  } else if (obj.hasOwnProperty(key2)) {
    obj[key1] = obj[key2];
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const EMPTY_INSTRUCTION_MAP = /*#__PURE__*/new ElementInstructionMap();

class TimelineAnimationEngine {
  constructor(bodyNode, _driver, _normalizer) {
    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._animations = {};
    this._playersById = {};
    this.players = [];
  }

  register(id, metadata) {
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(this._driver, metadata, errors, warnings);

    if (errors.length) {
      throw registerFailed(errors);
    } else {
      if (warnings.length) {
        warnRegister(warnings);
      }

      this._animations[id] = ast;
    }
  }

  _buildPlayer(i, preStyles, postStyles) {
    const element = i.element;
    const keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
    return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
  }

  create(id, element, options = {}) {
    const errors = [];
    const ast = this._animations[id];
    let instructions;
    const autoStylesMap = new Map();

    if (ast) {
      instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
      instructions.forEach(inst => {
        const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
        inst.postStyleProps.forEach(prop => styles[prop] = null);
      });
    } else {
      errors.push(missingOrDestroyedAnimation());
      instructions = [];
    }

    if (errors.length) {
      throw createAnimationFailed(errors);
    }

    autoStylesMap.forEach((styles, element) => {
      Object.keys(styles).forEach(prop => {
        styles[prop] = this._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE);
      });
    });
    const players = instructions.map(i => {
      const styles = autoStylesMap.get(i.element);
      return this._buildPlayer(i, {}, styles);
    });
    const player = optimizeGroupPlayer(players);
    this._playersById[id] = player;
    player.onDestroy(() => this.destroy(id));
    this.players.push(player);
    return player;
  }

  destroy(id) {
    const player = this._getPlayer(id);

    player.destroy();
    delete this._playersById[id];
    const index = this.players.indexOf(player);

    if (index >= 0) {
      this.players.splice(index, 1);
    }
  }

  _getPlayer(id) {
    const player = this._playersById[id];

    if (!player) {
      throw missingPlayer(id);
    }

    return player;
  }

  listen(id, element, eventName, callback) {
    // triggerName, fromState, toState are all ignored for timeline animations
    const baseEvent = makeAnimationEvent(element, '', '', '');
    listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
    return () => {};
  }

  command(id, element, command, args) {
    if (command == 'register') {
      this.register(id, args[0]);
      return;
    }

    if (command == 'create') {
      const options = args[0] || {};
      this.create(id, element, options);
      return;
    }

    const player = this._getPlayer(id);

    switch (command) {
      case 'play':
        player.play();
        break;

      case 'pause':
        player.pause();
        break;

      case 'reset':
        player.reset();
        break;

      case 'restart':
        player.restart();
        break;

      case 'finish':
        player.finish();
        break;

      case 'init':
        player.init();
        break;

      case 'setPosition':
        player.setPosition(parseFloat(args[0]));
        break;

      case 'destroy':
        this.destroy(id);
        break;
    }
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const QUEUED_CLASSNAME = 'ng-animate-queued';
const QUEUED_SELECTOR = '.ng-animate-queued';
const DISABLED_CLASSNAME = 'ng-animate-disabled';
const DISABLED_SELECTOR = '.ng-animate-disabled';
const STAR_CLASSNAME = 'ng-star-inserted';
const STAR_SELECTOR = '.ng-star-inserted';
const EMPTY_PLAYER_ARRAY = [];
const NULL_REMOVAL_STATE = {
  namespaceId: '',
  setForRemoval: false,
  setForMove: false,
  hasAnimation: false,
  removedBeforeQueried: false
};
const NULL_REMOVED_QUERIED_STATE = {
  namespaceId: '',
  setForMove: false,
  setForRemoval: false,
  hasAnimation: false,
  removedBeforeQueried: true
};
const REMOVAL_FLAG = '__ng_removed';

class StateValue {
  constructor(input, namespaceId = '') {
    this.namespaceId = namespaceId;
    const isObj = input && input.hasOwnProperty('value');
    const value = isObj ? input['value'] : input;
    this.value = normalizeTriggerValue(value);

    if (isObj) {
      const options = copyObj(input);
      delete options['value'];
      this.options = options;
    } else {
      this.options = {};
    }

    if (!this.options.params) {
      this.options.params = {};
    }
  }

  get params() {
    return this.options.params;
  }

  absorbOptions(options) {
    const newParams = options.params;

    if (newParams) {
      const oldParams = this.options.params;
      Object.keys(newParams).forEach(prop => {
        if (oldParams[prop] == null) {
          oldParams[prop] = newParams[prop];
        }
      });
    }
  }

}

const VOID_VALUE = 'void';
const DEFAULT_STATE_VALUE = /*#__PURE__*/new StateValue(VOID_VALUE);

class AnimationTransitionNamespace {
  constructor(id, hostElement, _engine) {
    this.id = id;
    this.hostElement = hostElement;
    this._engine = _engine;
    this.players = [];
    this._triggers = {};
    this._queue = [];
    this._elementListeners = new Map();
    this._hostClassName = 'ng-tns-' + id;
    addClass(hostElement, this._hostClassName);
  }

  listen(element, name, phase, callback) {
    if (!this._triggers.hasOwnProperty(name)) {
      throw missingTrigger(phase, name);
    }

    if (phase == null || phase.length == 0) {
      throw missingEvent(name);
    }

    if (!isTriggerEventValid(phase)) {
      throw unsupportedTriggerEvent(phase, name);
    }

    const listeners = getOrSetAsInMap(this._elementListeners, element, []);
    const data = {
      name,
      phase,
      callback
    };
    listeners.push(data);
    const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});

    if (!triggersWithStates.hasOwnProperty(name)) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
      triggersWithStates[name] = DEFAULT_STATE_VALUE;
    }

    return () => {
      // the event listener is removed AFTER the flush has occurred such
      // that leave animations callbacks can fire (otherwise if the node
      // is removed in between then the listeners would be deregistered)
      this._engine.afterFlush(() => {
        const index = listeners.indexOf(data);

        if (index >= 0) {
          listeners.splice(index, 1);
        }

        if (!this._triggers[name]) {
          delete triggersWithStates[name];
        }
      });
    };
  }

  register(name, ast) {
    if (this._triggers[name]) {
      // throw
      return false;
    } else {
      this._triggers[name] = ast;
      return true;
    }
  }

  _getTrigger(name) {
    const trigger = this._triggers[name];

    if (!trigger) {
      throw unregisteredTrigger(name);
    }

    return trigger;
  }

  trigger(element, triggerName, value, defaultToFallback = true) {
    const trigger = this._getTrigger(triggerName);

    const player = new TransitionAnimationPlayer(this.id, triggerName, element);

    let triggersWithStates = this._engine.statesByElement.get(element);

    if (!triggersWithStates) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);

      this._engine.statesByElement.set(element, triggersWithStates = {});
    }

    let fromState = triggersWithStates[triggerName];
    const toState = new StateValue(value, this.id);
    const isObj = value && value.hasOwnProperty('value');

    if (!isObj && fromState) {
      toState.absorbOptions(fromState.options);
    }

    triggersWithStates[triggerName] = toState;

    if (!fromState) {
      fromState = DEFAULT_STATE_VALUE;
    }

    const isRemoval = toState.value === VOID_VALUE; // normally this isn't reached by here, however, if an object expression
    // is passed in then it may be a new object each time. Comparing the value
    // is important since that will stay the same despite there being a new object.
    // The removal arc here is special cased because the same element is triggered
    // twice in the event that it contains animations on the outer/inner portions
    // of the host container

    if (!isRemoval && fromState.value === toState.value) {
      // this means that despite the value not changing, some inner params
      // have changed which means that the animation final styles need to be applied
      if (!objEquals(fromState.params, toState.params)) {
        const errors = [];
        const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
        const toStyles = trigger.matchStyles(toState.value, toState.params, errors);

        if (errors.length) {
          this._engine.reportError(errors);
        } else {
          this._engine.afterFlush(() => {
            eraseStyles(element, fromStyles);
            setStyles(element, toStyles);
          });
        }
      }

      return;
    }

    const playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
    playersOnElement.forEach(player => {
      // only remove the player if it is queued on the EXACT same trigger/namespace
      // we only also deal with queued players here because if the animation has
      // started then we want to keep the player alive until the flush happens
      // (which is where the previousPlayers are passed into the new player)
      if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {
        player.destroy();
      }
    });
    let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
    let isFallbackTransition = false;

    if (!transition) {
      if (!defaultToFallback) return;
      transition = trigger.fallbackTransition;
      isFallbackTransition = true;
    }

    this._engine.totalQueuedPlayers++;

    this._queue.push({
      element,
      triggerName,
      transition,
      fromState,
      toState,
      player,
      isFallbackTransition
    });

    if (!isFallbackTransition) {
      addClass(element, QUEUED_CLASSNAME);
      player.onStart(() => {
        removeClass(element, QUEUED_CLASSNAME);
      });
    }

    player.onDone(() => {
      let index = this.players.indexOf(player);

      if (index >= 0) {
        this.players.splice(index, 1);
      }

      const players = this._engine.playersByElement.get(element);

      if (players) {
        let index = players.indexOf(player);

        if (index >= 0) {
          players.splice(index, 1);
        }
      }
    });
    this.players.push(player);
    playersOnElement.push(player);
    return player;
  }

  deregister(name) {
    delete this._triggers[name];

    this._engine.statesByElement.forEach((stateMap, element) => {
      delete stateMap[name];
    });

    this._elementListeners.forEach((listeners, element) => {
      this._elementListeners.set(element, listeners.filter(entry => {
        return entry.name != name;
      }));
    });
  }

  clearElementCache(element) {
    this._engine.statesByElement.delete(element);

    this._elementListeners.delete(element);

    const elementPlayers = this._engine.playersByElement.get(element);

    if (elementPlayers) {
      elementPlayers.forEach(player => player.destroy());

      this._engine.playersByElement.delete(element);
    }
  }

  _signalRemovalForInnerTriggers(rootElement, context) {
    const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true); // emulate a leave animation for all inner nodes within this node.
    // If there are no animations found for any of the nodes then clear the cache
    // for the element.


    elements.forEach(elm => {
      // this means that an inner remove() operation has already kicked off
      // the animation on this element...
      if (elm[REMOVAL_FLAG]) return;

      const namespaces = this._engine.fetchNamespacesByElement(elm);

      if (namespaces.size) {
        namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));
      } else {
        this.clearElementCache(elm);
      }
    }); // If the child elements were removed along with the parent, their animations might not
    // have completed. Clear all the elements from the cache so we don't end up with a memory leak.

    this._engine.afterFlushAnimationsDone(() => elements.forEach(elm => this.clearElementCache(elm)));
  }

  triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
    const triggerStates = this._engine.statesByElement.get(element);

    const previousTriggersValues = new Map();

    if (triggerStates) {
      const players = [];
      Object.keys(triggerStates).forEach(triggerName => {
        previousTriggersValues.set(triggerName, triggerStates[triggerName].value); // this check is here in the event that an element is removed
        // twice (both on the host level and the component level)

        if (this._triggers[triggerName]) {
          const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);

          if (player) {
            players.push(player);
          }
        }
      });

      if (players.length) {
        this._engine.markElementAsRemoved(this.id, element, true, context, previousTriggersValues);

        if (destroyAfterComplete) {
          optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));
        }

        return true;
      }
    }

    return false;
  }

  prepareLeaveAnimationListeners(element) {
    const listeners = this._elementListeners.get(element);

    const elementStates = this._engine.statesByElement.get(element); // if this statement fails then it means that the element was picked up
    // by an earlier flush (or there are no listeners at all to track the leave).


    if (listeners && elementStates) {
      const visitedTriggers = new Set();
      listeners.forEach(listener => {
        const triggerName = listener.name;
        if (visitedTriggers.has(triggerName)) return;
        visitedTriggers.add(triggerName);
        const trigger = this._triggers[triggerName];
        const transition = trigger.fallbackTransition;
        const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
        const toState = new StateValue(VOID_VALUE);
        const player = new TransitionAnimationPlayer(this.id, triggerName, element);
        this._engine.totalQueuedPlayers++;

        this._queue.push({
          element,
          triggerName,
          transition,
          fromState,
          toState,
          player,
          isFallbackTransition: true
        });
      });
    }
  }

  removeNode(element, context) {
    const engine = this._engine;

    if (element.childElementCount) {
      this._signalRemovalForInnerTriggers(element, context);
    } // this means that a * => VOID animation was detected and kicked off


    if (this.triggerLeaveAnimation(element, context, true)) return; // find the player that is animating and make sure that the
    // removal is delayed until that player has completed

    let containsPotentialParentTransition = false;

    if (engine.totalAnimations) {
      const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : []; // when this `if statement` does not continue forward it means that
      // a previous animation query has selected the current element and
      // is animating it. In this situation want to continue forwards and
      // allow the element to be queued up for animation later.

      if (currentPlayers && currentPlayers.length) {
        containsPotentialParentTransition = true;
      } else {
        let parent = element;

        while (parent = parent.parentNode) {
          const triggers = engine.statesByElement.get(parent);

          if (triggers) {
            containsPotentialParentTransition = true;
            break;
          }
        }
      }
    } // at this stage we know that the element will either get removed
    // during flush or will be picked up by a parent query. Either way
    // we need to fire the listeners for this element when it DOES get
    // removed (once the query parent animation is done or after flush)


    this.prepareLeaveAnimationListeners(element); // whether or not a parent has an animation we need to delay the deferral of the leave
    // operation until we have more information (which we do after flush() has been called)

    if (containsPotentialParentTransition) {
      engine.markElementAsRemoved(this.id, element, false, context);
    } else {
      const removalFlag = element[REMOVAL_FLAG];

      if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
        // we do this after the flush has occurred such
        // that the callbacks can be fired
        engine.afterFlush(() => this.clearElementCache(element));
        engine.destroyInnerAnimations(element);

        engine._onRemovalComplete(element, context);
      }
    }
  }

  insertNode(element, parent) {
    addClass(element, this._hostClassName);
  }

  drainQueuedTransitions(microtaskId) {
    const instructions = [];

    this._queue.forEach(entry => {
      const player = entry.player;
      if (player.destroyed) return;
      const element = entry.element;

      const listeners = this._elementListeners.get(element);

      if (listeners) {
        listeners.forEach(listener => {
          if (listener.name == entry.triggerName) {
            const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
            baseEvent['_data'] = microtaskId;
            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
          }
        });
      }

      if (player.markedForDestroy) {
        this._engine.afterFlush(() => {
          // now we can destroy the element properly since the event listeners have
          // been bound to the player
          player.destroy();
        });
      } else {
        instructions.push(entry);
      }
    });

    this._queue = [];
    return instructions.sort((a, b) => {
      // if depCount == 0 them move to front
      // otherwise if a contains b then move back
      const d0 = a.transition.ast.depCount;
      const d1 = b.transition.ast.depCount;

      if (d0 == 0 || d1 == 0) {
        return d0 - d1;
      }

      return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
    });
  }

  destroy(context) {
    this.players.forEach(p => p.destroy());

    this._signalRemovalForInnerTriggers(this.hostElement, context);
  }

  elementContainsData(element) {
    let containsData = false;
    if (this._elementListeners.has(element)) containsData = true;
    containsData = (this._queue.find(entry => entry.element === element) ? true : false) || containsData;
    return containsData;
  }

}

class TransitionAnimationEngine {
  constructor(bodyNode, driver, _normalizer) {
    this.bodyNode = bodyNode;
    this.driver = driver;
    this._normalizer = _normalizer;
    this.players = [];
    this.newHostElements = new Map();
    this.playersByElement = new Map();
    this.playersByQueriedElement = new Map();
    this.statesByElement = new Map();
    this.disabledNodes = new Set();
    this.totalAnimations = 0;
    this.totalQueuedPlayers = 0;
    this._namespaceLookup = {};
    this._namespaceList = [];
    this._flushFns = [];
    this._whenQuietFns = [];
    this.namespacesByHostElement = new Map();
    this.collectedEnterElements = [];
    this.collectedLeaveElements = []; // this method is designed to be overridden by the code that uses this engine

    this.onRemovalComplete = (element, context) => {};
  }
  /** @internal */


  _onRemovalComplete(element, context) {
    this.onRemovalComplete(element, context);
  }

  get queuedPlayers() {
    const players = [];

    this._namespaceList.forEach(ns => {
      ns.players.forEach(player => {
        if (player.queued) {
          players.push(player);
        }
      });
    });

    return players;
  }

  createNamespace(namespaceId, hostElement) {
    const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);

    if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
      this._balanceNamespaceList(ns, hostElement);
    } else {
      // defer this later until flush during when the host element has
      // been inserted so that we know exactly where to place it in
      // the namespace list
      this.newHostElements.set(hostElement, ns); // given that this host element is a part of the animation code, it
      // may or may not be inserted by a parent node that is of an
      // animation renderer type. If this happens then we can still have
      // access to this item when we query for :enter nodes. If the parent
      // is a renderer then the set data-structure will normalize the entry

      this.collectEnterElement(hostElement);
    }

    return this._namespaceLookup[namespaceId] = ns;
  }

  _balanceNamespaceList(ns, hostElement) {
    const namespaceList = this._namespaceList;
    const namespacesByHostElement = this.namespacesByHostElement;
    const limit = namespaceList.length - 1;

    if (limit >= 0) {
      let found = false;

      if (this.driver.getParentElement !== undefined) {
        // Fast path for when the driver implements `getParentElement`, which allows us to find the
        // closest ancestor with an existing namespace that we can then insert `ns` after, without
        // having to inspect all existing namespaces.
        let ancestor = this.driver.getParentElement(hostElement);

        while (ancestor) {
          const ancestorNs = namespacesByHostElement.get(ancestor);

          if (ancestorNs) {
            // An animation namespace has been registered for this ancestor, so we insert `ns`
            // right after it to establish top-down ordering of animation namespaces.
            const index = namespaceList.indexOf(ancestorNs);
            namespaceList.splice(index + 1, 0, ns);
            found = true;
            break;
          }

          ancestor = this.driver.getParentElement(ancestor);
        }
      } else {
        // Slow path for backwards compatibility if the driver does not implement
        // `getParentElement`, to be removed once `getParentElement` is a required method.
        for (let i = limit; i >= 0; i--) {
          const nextNamespace = namespaceList[i];

          if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
            namespaceList.splice(i + 1, 0, ns);
            found = true;
            break;
          }
        }
      }

      if (!found) {
        // No namespace exists that is an ancestor of `ns`, so `ns` is inserted at the front to
        // ensure that any existing descendants are ordered after `ns`, retaining the desired
        // top-down ordering.
        namespaceList.unshift(ns);
      }
    } else {
      namespaceList.push(ns);
    }

    namespacesByHostElement.set(hostElement, ns);
    return ns;
  }

  register(namespaceId, hostElement) {
    let ns = this._namespaceLookup[namespaceId];

    if (!ns) {
      ns = this.createNamespace(namespaceId, hostElement);
    }

    return ns;
  }

  registerTrigger(namespaceId, name, trigger) {
    let ns = this._namespaceLookup[namespaceId];

    if (ns && ns.register(name, trigger)) {
      this.totalAnimations++;
    }
  }

  destroy(namespaceId, context) {
    if (!namespaceId) return;

    const ns = this._fetchNamespace(namespaceId);

    this.afterFlush(() => {
      this.namespacesByHostElement.delete(ns.hostElement);
      delete this._namespaceLookup[namespaceId];

      const index = this._namespaceList.indexOf(ns);

      if (index >= 0) {
        this._namespaceList.splice(index, 1);
      }
    });
    this.afterFlushAnimationsDone(() => ns.destroy(context));
  }

  _fetchNamespace(id) {
    return this._namespaceLookup[id];
  }

  fetchNamespacesByElement(element) {
    // normally there should only be one namespace per element, however
    // if @triggers are placed on both the component element and then
    // its host element (within the component code) then there will be
    // two namespaces returned. We use a set here to simply deduplicate
    // the namespaces in case (for the reason described above) there are multiple triggers
    const namespaces = new Set();
    const elementStates = this.statesByElement.get(element);

    if (elementStates) {
      const keys = Object.keys(elementStates);

      for (let i = 0; i < keys.length; i++) {
        const nsId = elementStates[keys[i]].namespaceId;

        if (nsId) {
          const ns = this._fetchNamespace(nsId);

          if (ns) {
            namespaces.add(ns);
          }
        }
      }
    }

    return namespaces;
  }

  trigger(namespaceId, element, name, value) {
    if (isElementNode(element)) {
      const ns = this._fetchNamespace(namespaceId);

      if (ns) {
        ns.trigger(element, name, value);
        return true;
      }
    }

    return false;
  }

  insertNode(namespaceId, element, parent, insertBefore) {
    if (!isElementNode(element)) return; // special case for when an element is removed and reinserted (move operation)
    // when this occurs we do not want to use the element for deletion later

    const details = element[REMOVAL_FLAG];

    if (details && details.setForRemoval) {
      details.setForRemoval = false;
      details.setForMove = true;
      const index = this.collectedLeaveElements.indexOf(element);

      if (index >= 0) {
        this.collectedLeaveElements.splice(index, 1);
      }
    } // in the event that the namespaceId is blank then the caller
    // code does not contain any animation code in it, but it is
    // just being called so that the node is marked as being inserted


    if (namespaceId) {
      const ns = this._fetchNamespace(namespaceId); // This if-statement is a workaround for router issue #21947.
      // The router sometimes hits a race condition where while a route
      // is being instantiated a new navigation arrives, triggering leave
      // animation of DOM that has not been fully initialized, until this
      // is resolved, we need to handle the scenario when DOM is not in a
      // consistent state during the animation.


      if (ns) {
        ns.insertNode(element, parent);
      }
    } // only *directives and host elements are inserted before


    if (insertBefore) {
      this.collectEnterElement(element);
    }
  }

  collectEnterElement(element) {
    this.collectedEnterElements.push(element);
  }

  markElementAsDisabled(element, value) {
    if (value) {
      if (!this.disabledNodes.has(element)) {
        this.disabledNodes.add(element);
        addClass(element, DISABLED_CLASSNAME);
      }
    } else if (this.disabledNodes.has(element)) {
      this.disabledNodes.delete(element);
      removeClass(element, DISABLED_CLASSNAME);
    }
  }

  removeNode(namespaceId, element, isHostElement, context) {
    if (isElementNode(element)) {
      const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;

      if (ns) {
        ns.removeNode(element, context);
      } else {
        this.markElementAsRemoved(namespaceId, element, false, context);
      }

      if (isHostElement) {
        const hostNS = this.namespacesByHostElement.get(element);

        if (hostNS && hostNS.id !== namespaceId) {
          hostNS.removeNode(element, context);
        }
      }
    } else {
      this._onRemovalComplete(element, context);
    }
  }

  markElementAsRemoved(namespaceId, element, hasAnimation, context, previousTriggersValues) {
    this.collectedLeaveElements.push(element);
    element[REMOVAL_FLAG] = {
      namespaceId,
      setForRemoval: context,
      hasAnimation,
      removedBeforeQueried: false,
      previousTriggersValues
    };
  }

  listen(namespaceId, element, name, phase, callback) {
    if (isElementNode(element)) {
      return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
    }

    return () => {};
  }

  _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
    return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
  }

  destroyInnerAnimations(containerElement) {
    let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach(element => this.destroyActiveAnimationsForElement(element));
    if (this.playersByQueriedElement.size == 0) return;
    elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
    elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));
  }

  destroyActiveAnimationsForElement(element) {
    const players = this.playersByElement.get(element);

    if (players) {
      players.forEach(player => {
        // special case for when an element is set for destruction, but hasn't started.
        // in this situation we want to delay the destruction until the flush occurs
        // so that any event listeners attached to the player are triggered.
        if (player.queued) {
          player.markedForDestroy = true;
        } else {
          player.destroy();
        }
      });
    }
  }

  finishActiveQueriedAnimationOnElement(element) {
    const players = this.playersByQueriedElement.get(element);

    if (players) {
      players.forEach(player => player.finish());
    }
  }

  whenRenderingDone() {
    return new Promise(resolve => {
      if (this.players.length) {
        return optimizeGroupPlayer(this.players).onDone(() => resolve());
      } else {
        resolve();
      }
    });
  }

  processLeaveNode(element) {
    var _a;

    const details = element[REMOVAL_FLAG];

    if (details && details.setForRemoval) {
      // this will prevent it from removing it twice
      element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;

      if (details.namespaceId) {
        this.destroyInnerAnimations(element);

        const ns = this._fetchNamespace(details.namespaceId);

        if (ns) {
          ns.clearElementCache(element);
        }
      }

      this._onRemovalComplete(element, details.setForRemoval);
    }

    if ((_a = element.classList) === null || _a === void 0 ? void 0 : _a.contains(DISABLED_CLASSNAME)) {
      this.markElementAsDisabled(element, false);
    }

    this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {
      this.markElementAsDisabled(node, false);
    });
  }

  flush(microtaskId = -1) {
    let players = [];

    if (this.newHostElements.size) {
      this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));
      this.newHostElements.clear();
    }

    if (this.totalAnimations && this.collectedEnterElements.length) {
      for (let i = 0; i < this.collectedEnterElements.length; i++) {
        const elm = this.collectedEnterElements[i];
        addClass(elm, STAR_CLASSNAME);
      }
    }

    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
      const cleanupFns = [];

      try {
        players = this._flushAnimations(cleanupFns, microtaskId);
      } finally {
        for (let i = 0; i < cleanupFns.length; i++) {
          cleanupFns[i]();
        }
      }
    } else {
      for (let i = 0; i < this.collectedLeaveElements.length; i++) {
        const element = this.collectedLeaveElements[i];
        this.processLeaveNode(element);
      }
    }

    this.totalQueuedPlayers = 0;
    this.collectedEnterElements.length = 0;
    this.collectedLeaveElements.length = 0;

    this._flushFns.forEach(fn => fn());

    this._flushFns = [];

    if (this._whenQuietFns.length) {
      // we move these over to a variable so that
      // if any new callbacks are registered in another
      // flush they do not populate the existing set
      const quietFns = this._whenQuietFns;
      this._whenQuietFns = [];

      if (players.length) {
        optimizeGroupPlayer(players).onDone(() => {
          quietFns.forEach(fn => fn());
        });
      } else {
        quietFns.forEach(fn => fn());
      }
    }
  }

  reportError(errors) {
    throw triggerTransitionsFailed(errors);
  }

  _flushAnimations(cleanupFns, microtaskId) {
    const subTimelines = new ElementInstructionMap();
    const skippedPlayers = [];
    const skippedPlayersMap = new Map();
    const queuedInstructions = [];
    const queriedElements = new Map();
    const allPreStyleElements = new Map();
    const allPostStyleElements = new Map();
    const disabledElementsSet = new Set();
    this.disabledNodes.forEach(node => {
      disabledElementsSet.add(node);
      const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);

      for (let i = 0; i < nodesThatAreDisabled.length; i++) {
        disabledElementsSet.add(nodesThatAreDisabled[i]);
      }
    });
    const bodyNode = this.bodyNode;
    const allTriggerElements = Array.from(this.statesByElement.keys());
    const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements); // this must occur before the instructions are built below such that
    // the :enter queries match the elements (since the timeline queries
    // are fired during instruction building).

    const enterNodeMapIds = new Map();
    let i = 0;
    enterNodeMap.forEach((nodes, root) => {
      const className = ENTER_CLASSNAME + i++;
      enterNodeMapIds.set(root, className);
      nodes.forEach(node => addClass(node, className));
    });
    const allLeaveNodes = [];
    const mergedLeaveNodes = new Set();
    const leaveNodesWithoutAnimations = new Set();

    for (let i = 0; i < this.collectedLeaveElements.length; i++) {
      const element = this.collectedLeaveElements[i];
      const details = element[REMOVAL_FLAG];

      if (details && details.setForRemoval) {
        allLeaveNodes.push(element);
        mergedLeaveNodes.add(element);

        if (details.hasAnimation) {
          this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));
        } else {
          leaveNodesWithoutAnimations.add(element);
        }
      }
    }

    const leaveNodeMapIds = new Map();
    const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
    leaveNodeMap.forEach((nodes, root) => {
      const className = LEAVE_CLASSNAME + i++;
      leaveNodeMapIds.set(root, className);
      nodes.forEach(node => addClass(node, className));
    });
    cleanupFns.push(() => {
      enterNodeMap.forEach((nodes, root) => {
        const className = enterNodeMapIds.get(root);
        nodes.forEach(node => removeClass(node, className));
      });
      leaveNodeMap.forEach((nodes, root) => {
        const className = leaveNodeMapIds.get(root);
        nodes.forEach(node => removeClass(node, className));
      });
      allLeaveNodes.forEach(element => {
        this.processLeaveNode(element);
      });
    });
    const allPlayers = [];
    const erroneousTransitions = [];

    for (let i = this._namespaceList.length - 1; i >= 0; i--) {
      const ns = this._namespaceList[i];
      ns.drainQueuedTransitions(microtaskId).forEach(entry => {
        const player = entry.player;
        const element = entry.element;
        allPlayers.push(player);

        if (this.collectedEnterElements.length) {
          const details = element[REMOVAL_FLAG]; // animations for move operations (elements being removed and reinserted,
          // e.g. when the order of an *ngFor list changes) are currently not supported

          if (details && details.setForMove) {
            if (details.previousTriggersValues && details.previousTriggersValues.has(entry.triggerName)) {
              const previousValue = details.previousTriggersValues.get(entry.triggerName); // we need to restore the previous trigger value since the element has
              // only been moved and hasn't actually left the DOM

              const triggersWithStates = this.statesByElement.get(entry.element);

              if (triggersWithStates && triggersWithStates[entry.triggerName]) {
                triggersWithStates[entry.triggerName].value = previousValue;
              }
            }

            player.destroy();
            return;
          }
        }

        const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);
        const leaveClassName = leaveNodeMapIds.get(element);
        const enterClassName = enterNodeMapIds.get(element);

        const instruction = this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);

        if (instruction.errors && instruction.errors.length) {
          erroneousTransitions.push(instruction);
          return;
        } // even though the element may not be in the DOM, it may still
        // be added at a later point (due to the mechanics of content
        // projection and/or dynamic component insertion) therefore it's
        // important to still style the element.


        if (nodeIsOrphaned) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        } // if an unmatched transition is queued and ready to go
        // then it SHOULD NOT render an animation and cancel the
        // previously running animations.


        if (entry.isFallbackTransition) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        } // this means that if a parent animation uses this animation as a sub-trigger
        // then it will instruct the timeline builder not to add a player delay, but
        // instead stretch the first keyframe gap until the animation starts. This is
        // important in order to prevent extra initialization styles from being
        // required by the user for the animation.


        const timelines = [];
        instruction.timelines.forEach(tl => {
          tl.stretchStartingKeyframe = true;

          if (!this.disabledNodes.has(tl.element)) {
            timelines.push(tl);
          }
        });
        instruction.timelines = timelines;
        subTimelines.append(element, instruction.timelines);
        const tuple = {
          instruction,
          player,
          element
        };
        queuedInstructions.push(tuple);
        instruction.queriedElements.forEach(element => getOrSetAsInMap(queriedElements, element, []).push(player));
        instruction.preStyleProps.forEach((stringMap, element) => {
          const props = Object.keys(stringMap);

          if (props.length) {
            let setVal = allPreStyleElements.get(element);

            if (!setVal) {
              allPreStyleElements.set(element, setVal = new Set());
            }

            props.forEach(prop => setVal.add(prop));
          }
        });
        instruction.postStyleProps.forEach((stringMap, element) => {
          const props = Object.keys(stringMap);
          let setVal = allPostStyleElements.get(element);

          if (!setVal) {
            allPostStyleElements.set(element, setVal = new Set());
          }

          props.forEach(prop => setVal.add(prop));
        });
      });
    }

    if (erroneousTransitions.length) {
      const errors = [];
      erroneousTransitions.forEach(instruction => {
        errors.push(transitionFailed(instruction.triggerName, instruction.errors));
      });
      allPlayers.forEach(player => player.destroy());
      this.reportError(errors);
    }

    const allPreviousPlayersMap = new Map(); // this map tells us which element in the DOM tree is contained by
    // which animation. Further down this map will get populated once
    // the players are built and in doing so we can use it to efficiently
    // figure out if a sub player is skipped due to a parent player having priority.

    const animationElementMap = new Map();
    queuedInstructions.forEach(entry => {
      const element = entry.element;

      if (subTimelines.has(element)) {
        animationElementMap.set(element, element);

        this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
      }
    });
    skippedPlayers.forEach(player => {
      const element = player.element;

      const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);

      previousPlayers.forEach(prevPlayer => {
        getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
        prevPlayer.destroy();
      });
    }); // this is a special case for nodes that will be removed either by
    // having their own leave animations or by being queried in a container
    // that will be removed once a parent animation is complete. The idea
    // here is that * styles must be identical to ! styles because of
    // backwards compatibility (* is also filled in by default in many places).
    // Otherwise * styles will return an empty value or "auto" since the element
    // passed to getComputedStyle will not be visible (since * === destination)

    const replaceNodes = allLeaveNodes.filter(node => {
      return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
    }); // POST STAGE: fill the * styles

    const postStylesMap = new Map();
    const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.AUTO_STYLE);
    allLeaveQueriedNodes.forEach(node => {
      if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
        replaceNodes.push(node);
      }
    }); // PRE STAGE: fill the ! styles

    const preStylesMap = new Map();
    enterNodeMap.forEach((nodes, root) => {
      cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_1__["ɵPRE_STYLE"]);
    });
    replaceNodes.forEach(node => {
      const post = postStylesMap.get(node);
      const pre = preStylesMap.get(node);
      postStylesMap.set(node, Object.assign(Object.assign({}, post), pre));
    });
    const rootPlayers = [];
    const subPlayers = [];
    const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
    queuedInstructions.forEach(entry => {
      const {
        element,
        player,
        instruction
      } = entry; // this means that it was never consumed by a parent animation which
      // means that it is independent and therefore should be set for animation

      if (subTimelines.has(element)) {
        if (disabledElementsSet.has(element)) {
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          player.disabled = true;
          player.overrideTotalTime(instruction.totalTime);
          skippedPlayers.push(player);
          return;
        } // this will flow up the DOM and query the map to figure out
        // if a parent animation has priority over it. In the situation
        // that a parent is detected then it will cancel the loop. If
        // nothing is detected, or it takes a few hops to find a parent,
        // then it will fill in the missing nodes and signal them as having
        // a detected parent (or a NO_PARENT value via a special constant).


        let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;

        if (animationElementMap.size > 1) {
          let elm = element;
          const parentsToAdd = [];

          while (elm = elm.parentNode) {
            const detectedParent = animationElementMap.get(elm);

            if (detectedParent) {
              parentWithAnimation = detectedParent;
              break;
            }

            parentsToAdd.push(elm);
          }

          parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));
        }

        const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);

        player.setRealPlayer(innerPlayer);

        if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
          rootPlayers.push(player);
        } else {
          const parentPlayers = this.playersByElement.get(parentWithAnimation);

          if (parentPlayers && parentPlayers.length) {
            player.parentPlayer = optimizeGroupPlayer(parentPlayers);
          }

          skippedPlayers.push(player);
        }
      } else {
        eraseStyles(element, instruction.fromStyles);
        player.onDestroy(() => setStyles(element, instruction.toStyles)); // there still might be a ancestor player animating this
        // element therefore we will still add it as a sub player
        // even if its animation may be disabled

        subPlayers.push(player);

        if (disabledElementsSet.has(element)) {
          skippedPlayers.push(player);
        }
      }
    }); // find all of the sub players' corresponding inner animation players

    subPlayers.forEach(player => {
      // even if no players are found for a sub animation it
      // will still complete itself after the next tick since it's Noop
      const playersForElement = skippedPlayersMap.get(player.element);

      if (playersForElement && playersForElement.length) {
        const innerPlayer = optimizeGroupPlayer(playersForElement);
        player.setRealPlayer(innerPlayer);
      }
    }); // the reason why we don't actually play the animation is
    // because all that a skipped player is designed to do is to
    // fire the start/done transition callback events

    skippedPlayers.forEach(player => {
      if (player.parentPlayer) {
        player.syncPlayerEvents(player.parentPlayer);
      } else {
        player.destroy();
      }
    }); // run through all of the queued removals and see if they
    // were picked up by a query. If not then perform the removal
    // operation right away unless a parent animation is ongoing.

    for (let i = 0; i < allLeaveNodes.length; i++) {
      const element = allLeaveNodes[i];
      const details = element[REMOVAL_FLAG];
      removeClass(element, LEAVE_CLASSNAME); // this means the element has a removal animation that is being
      // taken care of and therefore the inner elements will hang around
      // until that animation is over (or the parent queried animation)

      if (details && details.hasAnimation) continue;
      let players = []; // if this element is queried or if it contains queried children
      // then we want for the element not to be removed from the page
      // until the queried animations have finished

      if (queriedElements.size) {
        let queriedPlayerResults = queriedElements.get(element);

        if (queriedPlayerResults && queriedPlayerResults.length) {
          players.push(...queriedPlayerResults);
        }

        let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);

        for (let j = 0; j < queriedInnerElements.length; j++) {
          let queriedPlayers = queriedElements.get(queriedInnerElements[j]);

          if (queriedPlayers && queriedPlayers.length) {
            players.push(...queriedPlayers);
          }
        }
      }

      const activePlayers = players.filter(p => !p.destroyed);

      if (activePlayers.length) {
        removeNodesAfterAnimationDone(this, element, activePlayers);
      } else {
        this.processLeaveNode(element);
      }
    } // this is required so the cleanup method doesn't remove them


    allLeaveNodes.length = 0;
    rootPlayers.forEach(player => {
      this.players.push(player);
      player.onDone(() => {
        player.destroy();
        const index = this.players.indexOf(player);
        this.players.splice(index, 1);
      });
      player.play();
    });
    return rootPlayers;
  }

  elementContainsData(namespaceId, element) {
    let containsData = false;
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) containsData = true;
    if (this.playersByElement.has(element)) containsData = true;
    if (this.playersByQueriedElement.has(element)) containsData = true;
    if (this.statesByElement.has(element)) containsData = true;
    return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
  }

  afterFlush(callback) {
    this._flushFns.push(callback);
  }

  afterFlushAnimationsDone(callback) {
    this._whenQuietFns.push(callback);
  }

  _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
    let players = [];

    if (isQueriedElement) {
      const queriedElementPlayers = this.playersByQueriedElement.get(element);

      if (queriedElementPlayers) {
        players = queriedElementPlayers;
      }
    } else {
      const elementPlayers = this.playersByElement.get(element);

      if (elementPlayers) {
        const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
        elementPlayers.forEach(player => {
          if (player.queued) return;
          if (!isRemovalAnimation && player.triggerName != triggerName) return;
          players.push(player);
        });
      }
    }

    if (namespaceId || triggerName) {
      players = players.filter(player => {
        if (namespaceId && namespaceId != player.namespaceId) return false;
        if (triggerName && triggerName != player.triggerName) return false;
        return true;
      });
    }

    return players;
  }

  _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element; // when a removal animation occurs, ALL previous players are collected
    // and destroyed (even if they are outside of the current namespace)

    const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
    const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;

    for (const timelineInstruction of instruction.timelines) {
      const element = timelineInstruction.element;
      const isQueriedElement = element !== rootElement;
      const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);

      const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);

      previousPlayers.forEach(player => {
        const realPlayer = player.getRealPlayer();

        if (realPlayer.beforeDestroy) {
          realPlayer.beforeDestroy();
        }

        player.destroy();
        players.push(player);
      });
    } // this needs to be done so that the PRE/POST styles can be
    // computed properly without interfering with the previous animation


    eraseStyles(rootElement, instruction.fromStyles);
  }

  _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element; // we first run this so that the previous animation player
    // data can be passed into the successive animation players

    const allQueriedPlayers = [];
    const allConsumedElements = new Set();
    const allSubElements = new Set();
    const allNewPlayers = instruction.timelines.map(timelineInstruction => {
      const element = timelineInstruction.element;
      allConsumedElements.add(element); // FIXME (matsko): make sure to-be-removed animations are removed properly

      const details = element[REMOVAL_FLAG];
      if (details && details.removedBeforeQueried) return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__.NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
      const isQueriedElement = element !== rootElement;
      const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map(p => p.getRealPlayer())).filter(p => {
        // the `element` is not apart of the AnimationPlayer definition, but
        // Mock/WebAnimations
        // use the element within their implementation. This will be added in Angular5 to
        // AnimationPlayer
        const pp = p;
        return pp.element ? pp.element === element : false;
      });
      const preStyles = preStylesMap.get(element);
      const postStyles = postStylesMap.get(element);
      const keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);

      const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers); // this means that this particular player belongs to a sub trigger. It is
      // important that we match this player up with the corresponding (@trigger.listener)


      if (timelineInstruction.subTimeline && skippedPlayersMap) {
        allSubElements.add(element);
      }

      if (isQueriedElement) {
        const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
        wrappedPlayer.setRealPlayer(player);
        allQueriedPlayers.push(wrappedPlayer);
      }

      return player;
    });
    allQueriedPlayers.forEach(player => {
      getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);
      player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));
    });
    allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));
    const player = optimizeGroupPlayer(allNewPlayers);
    player.onDestroy(() => {
      allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));
      setStyles(rootElement, instruction.toStyles);
    }); // this basically makes all of the callbacks for sub element animations
    // be dependent on the upper players for when they finish

    allSubElements.forEach(element => {
      getOrSetAsInMap(skippedPlayersMap, element, []).push(player);
    });
    return player;
  }

  _buildPlayer(instruction, keyframes, previousPlayers) {
    if (keyframes.length > 0) {
      return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
    } // special case for when an empty transition|definition is provided
    // ... there is no point in rendering an empty animation


    return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__.NoopAnimationPlayer(instruction.duration, instruction.delay);
  }

}

class TransitionAnimationPlayer {
  constructor(namespaceId, triggerName, element) {
    this.namespaceId = namespaceId;
    this.triggerName = triggerName;
    this.element = element;
    this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_1__.NoopAnimationPlayer();
    this._containsRealPlayer = false;
    this._queuedCallbacks = {};
    this.destroyed = false;
    this.markedForDestroy = false;
    this.disabled = false;
    this.queued = true;
    this.totalTime = 0;
  }

  setRealPlayer(player) {
    if (this._containsRealPlayer) return;
    this._player = player;
    Object.keys(this._queuedCallbacks).forEach(phase => {
      this._queuedCallbacks[phase].forEach(callback => listenOnPlayer(player, phase, undefined, callback));
    });
    this._queuedCallbacks = {};
    this._containsRealPlayer = true;
    this.overrideTotalTime(player.totalTime);
    this.queued = false;
  }

  getRealPlayer() {
    return this._player;
  }

  overrideTotalTime(totalTime) {
    this.totalTime = totalTime;
  }

  syncPlayerEvents(player) {
    const p = this._player;

    if (p.triggerCallback) {
      player.onStart(() => p.triggerCallback('start'));
    }

    player.onDone(() => this.finish());
    player.onDestroy(() => this.destroy());
  }

  _queueEvent(name, callback) {
    getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
  }

  onDone(fn) {
    if (this.queued) {
      this._queueEvent('done', fn);
    }

    this._player.onDone(fn);
  }

  onStart(fn) {
    if (this.queued) {
      this._queueEvent('start', fn);
    }

    this._player.onStart(fn);
  }

  onDestroy(fn) {
    if (this.queued) {
      this._queueEvent('destroy', fn);
    }

    this._player.onDestroy(fn);
  }

  init() {
    this._player.init();
  }

  hasStarted() {
    return this.queued ? false : this._player.hasStarted();
  }

  play() {
    !this.queued && this._player.play();
  }

  pause() {
    !this.queued && this._player.pause();
  }

  restart() {
    !this.queued && this._player.restart();
  }

  finish() {
    this._player.finish();
  }

  destroy() {
    this.destroyed = true;

    this._player.destroy();
  }

  reset() {
    !this.queued && this._player.reset();
  }

  setPosition(p) {
    if (!this.queued) {
      this._player.setPosition(p);
    }
  }

  getPosition() {
    return this.queued ? 0 : this._player.getPosition();
  }
  /** @internal */


  triggerCallback(phaseName) {
    const p = this._player;

    if (p.triggerCallback) {
      p.triggerCallback(phaseName);
    }
  }

}

function deleteOrUnsetInMap(map, key, value) {
  let currentValues;

  if (map instanceof Map) {
    currentValues = map.get(key);

    if (currentValues) {
      if (currentValues.length) {
        const index = currentValues.indexOf(value);
        currentValues.splice(index, 1);
      }

      if (currentValues.length == 0) {
        map.delete(key);
      }
    }
  } else {
    currentValues = map[key];

    if (currentValues) {
      if (currentValues.length) {
        const index = currentValues.indexOf(value);
        currentValues.splice(index, 1);
      }

      if (currentValues.length == 0) {
        delete map[key];
      }
    }
  }

  return currentValues;
}

function normalizeTriggerValue(value) {
  // we use `!= null` here because it's the most simple
  // way to test against a "falsy" value without mixing
  // in empty strings or a zero value. DO NOT OPTIMIZE.
  return value != null ? value : null;
}

function isElementNode(node) {
  return node && node['nodeType'] === 1;
}

function isTriggerEventValid(eventName) {
  return eventName == 'start' || eventName == 'done';
}

function cloakElement(element, value) {
  const oldValue = element.style.display;
  element.style.display = value != null ? value : 'none';
  return oldValue;
}

function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
  const cloakVals = [];
  elements.forEach(element => cloakVals.push(cloakElement(element)));
  const failedElements = [];
  elementPropsMap.forEach((props, element) => {
    const styles = {};
    props.forEach(prop => {
      const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle); // there is no easy way to detect this because a sub element could be removed
      // by a parent animation element being detached.

      if (!value || value.length == 0) {
        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
        failedElements.push(element);
      }
    });
    valuesMap.set(element, styles);
  }); // we use a index variable here since Set.forEach(a, i) does not return
  // an index value for the closure (but instead just the value)

  let i = 0;
  elements.forEach(element => cloakElement(element, cloakVals[i++]));
  return failedElements;
}
/*
Since the Angular renderer code will return a collection of inserted
nodes in all areas of a DOM tree, it's up to this algorithm to figure
out which nodes are roots for each animation @trigger.

By placing each inserted node into a Set and traversing upwards, it
is possible to find the @trigger elements and well any direct *star
insertion nodes, if a @trigger root is found then the enter element
is placed into the Map[@trigger] spot.
 */


function buildRootMap(roots, nodes) {
  const rootMap = new Map();
  roots.forEach(root => rootMap.set(root, []));
  if (nodes.length == 0) return rootMap;
  const NULL_NODE = 1;
  const nodeSet = new Set(nodes);
  const localRootMap = new Map();

  function getRoot(node) {
    if (!node) return NULL_NODE;
    let root = localRootMap.get(node);
    if (root) return root;
    const parent = node.parentNode;

    if (rootMap.has(parent)) {
      // ngIf inside @trigger
      root = parent;
    } else if (nodeSet.has(parent)) {
      // ngIf inside ngIf
      root = NULL_NODE;
    } else {
      // recurse upwards
      root = getRoot(parent);
    }

    localRootMap.set(node, root);
    return root;
  }

  nodes.forEach(node => {
    const root = getRoot(node);

    if (root !== NULL_NODE) {
      rootMap.get(root).push(node);
    }
  });
  return rootMap;
}

function addClass(element, className) {
  var _a;

  (_a = element.classList) === null || _a === void 0 ? void 0 : _a.add(className);
}

function removeClass(element, className) {
  var _a;

  (_a = element.classList) === null || _a === void 0 ? void 0 : _a.remove(className);
}

function removeNodesAfterAnimationDone(engine, element, players) {
  optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));
}

function flattenGroupPlayers(players) {
  const finalPlayers = [];

  _flattenGroupPlayersRecur(players, finalPlayers);

  return finalPlayers;
}

function _flattenGroupPlayersRecur(players, finalPlayers) {
  for (let i = 0; i < players.length; i++) {
    const player = players[i];

    if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_1__["ɵAnimationGroupPlayer"]) {
      _flattenGroupPlayersRecur(player.players, finalPlayers);
    } else {
      finalPlayers.push(player);
    }
  }
}

function objEquals(a, b) {
  const k1 = Object.keys(a);
  const k2 = Object.keys(b);
  if (k1.length != k2.length) return false;

  for (let i = 0; i < k1.length; i++) {
    const prop = k1[i];
    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
  }

  return true;
}

function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
  const postEntry = allPostStyleElements.get(element);
  if (!postEntry) return false;
  let preEntry = allPreStyleElements.get(element);

  if (preEntry) {
    postEntry.forEach(data => preEntry.add(data));
  } else {
    allPreStyleElements.set(element, postEntry);
  }

  allPostStyleElements.delete(element);
  return true;
}

class AnimationEngine {
  constructor(bodyNode, _driver, _normalizer) {
    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._triggerCache = {}; // this method is designed to be overridden by the code that uses this engine

    this.onRemovalComplete = (element, context) => {};

    this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, _normalizer);
    this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, _normalizer);

    this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);
  }

  registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
    const cacheKey = componentId + '-' + name;
    let trigger = this._triggerCache[cacheKey];

    if (!trigger) {
      const errors = [];
      const warnings = [];
      const ast = buildAnimationAst(this._driver, metadata, errors, warnings);

      if (errors.length) {
        throw triggerBuildFailed(name, errors);
      }

      if (warnings.length) {
        warnTriggerBuild(name, warnings);
      }

      trigger = buildTrigger(name, ast, this._normalizer);
      this._triggerCache[cacheKey] = trigger;
    }

    this._transitionEngine.registerTrigger(namespaceId, name, trigger);
  }

  register(namespaceId, hostElement) {
    this._transitionEngine.register(namespaceId, hostElement);
  }

  destroy(namespaceId, context) {
    this._transitionEngine.destroy(namespaceId, context);
  }

  onInsert(namespaceId, element, parent, insertBefore) {
    this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
  }

  onRemove(namespaceId, element, context, isHostElement) {
    this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
  }

  disableAnimations(element, disable) {
    this._transitionEngine.markElementAsDisabled(element, disable);
  }

  process(namespaceId, element, property, value) {
    if (property.charAt(0) == '@') {
      const [id, action] = parseTimelineCommand(property);
      const args = value;

      this._timelineEngine.command(id, element, action, args);
    } else {
      this._transitionEngine.trigger(namespaceId, element, property, value);
    }
  }

  listen(namespaceId, element, eventName, eventPhase, callback) {
    // @@listen
    if (eventName.charAt(0) == '@') {
      const [id, action] = parseTimelineCommand(eventName);
      return this._timelineEngine.listen(id, element, action, callback);
    }

    return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
  }

  flush(microtaskId = -1) {
    this._transitionEngine.flush(microtaskId);
  }

  get players() {
    return this._transitionEngine.players.concat(this._timelineEngine.players);
  }

  whenRenderingDone() {
    return this._transitionEngine.whenRenderingDone();
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
 * detected.
 *
 * In CSS there exist properties that cannot be animated within a keyframe animation
 * (whether it be via CSS keyframes or web-animations) and the animation implementation
 * will ignore them. This function is designed to detect those special cased styles and
 * return a container that will be executed at the start and end of the animation.
 *
 * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
 */


function packageNonAnimatableStyles(element, styles) {
  let startStyles = null;
  let endStyles = null;

  if (Array.isArray(styles) && styles.length) {
    startStyles = filterNonAnimatableStyles(styles[0]);

    if (styles.length > 1) {
      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
    }
  } else if (styles) {
    startStyles = filterNonAnimatableStyles(styles);
  }

  return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
}
/**
 * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
 *
 * When started (when the `start()` method is run) then the provided `startStyles`
 * will be applied. When finished (when the `finish()` method is called) the
 * `endStyles` will be applied as well any any starting styles. Finally when
 * `destroy()` is called then all styles will be removed.
 */


let SpecialCasedStyles = /*#__PURE__*/(() => {
  class SpecialCasedStyles {
    constructor(_element, _startStyles, _endStyles) {
      this._element = _element;
      this._startStyles = _startStyles;
      this._endStyles = _endStyles;
      this._state = 0
      /* Pending */
      ;
      let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);

      if (!initialStyles) {
        SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
      }

      this._initialStyles = initialStyles;
    }

    start() {
      if (this._state < 1
      /* Started */
      ) {
        if (this._startStyles) {
          setStyles(this._element, this._startStyles, this._initialStyles);
        }

        this._state = 1
        /* Started */
        ;
      }
    }

    finish() {
      this.start();

      if (this._state < 2
      /* Finished */
      ) {
        setStyles(this._element, this._initialStyles);

        if (this._endStyles) {
          setStyles(this._element, this._endStyles);
          this._endStyles = null;
        }

        this._state = 1
        /* Started */
        ;
      }
    }

    destroy() {
      this.finish();

      if (this._state < 3
      /* Destroyed */
      ) {
        SpecialCasedStyles.initialStylesByElement.delete(this._element);

        if (this._startStyles) {
          eraseStyles(this._element, this._startStyles);
          this._endStyles = null;
        }

        if (this._endStyles) {
          eraseStyles(this._element, this._endStyles);
          this._endStyles = null;
        }

        setStyles(this._element, this._initialStyles);
        this._state = 3
        /* Destroyed */
        ;
      }
    }

  }

  SpecialCasedStyles.initialStylesByElement = /* @__PURE__ */new WeakMap();
  return SpecialCasedStyles;
})();

function filterNonAnimatableStyles(styles) {
  let result = null;
  const props = Object.keys(styles);

  for (let i = 0; i < props.length; i++) {
    const prop = props[i];

    if (isNonAnimatableStyle(prop)) {
      result = result || {};
      result[prop] = styles[prop];
    }
  }

  return result;
}

function isNonAnimatableStyle(prop) {
  return prop === 'display' || prop === 'position';
}

class WebAnimationsPlayer {
  constructor(element, keyframes, options, _specialStyles) {
    this.element = element;
    this.keyframes = keyframes;
    this.options = options;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._initialized = false;
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this.time = 0;
    this.parentPlayer = null;
    this.currentSnapshot = {};
    this._duration = options['duration'];
    this._delay = options['delay'] || 0;
    this.time = this._duration + this._delay;
  }

  _onFinish() {
    if (!this._finished) {
      this._finished = true;

      this._onDoneFns.forEach(fn => fn());

      this._onDoneFns = [];
    }
  }

  init() {
    this._buildPlayer();

    this._preparePlayerBeforeStart();
  }

  _buildPlayer() {
    if (this._initialized) return;
    this._initialized = true;
    const keyframes = this.keyframes;
    this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
    this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
    this.domPlayer.addEventListener('finish', () => this._onFinish());
  }

  _preparePlayerBeforeStart() {
    // this is required so that the player doesn't start to animate right away
    if (this._delay) {
      this._resetDomPlayerState();
    } else {
      this.domPlayer.pause();
    }
  }
  /** @internal */


  _triggerWebAnimation(element, keyframes, options) {
    // jscompiler doesn't seem to know animate is a native property because it's not fully
    // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
    return element['animate'](keyframes, options);
  }

  onStart(fn) {
    this._onStartFns.push(fn);
  }

  onDone(fn) {
    this._onDoneFns.push(fn);
  }

  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }

  play() {
    this._buildPlayer();

    if (!this.hasStarted()) {
      this._onStartFns.forEach(fn => fn());

      this._onStartFns = [];
      this._started = true;

      if (this._specialStyles) {
        this._specialStyles.start();
      }
    }

    this.domPlayer.play();
  }

  pause() {
    this.init();
    this.domPlayer.pause();
  }

  finish() {
    this.init();

    if (this._specialStyles) {
      this._specialStyles.finish();
    }

    this._onFinish();

    this.domPlayer.finish();
  }

  reset() {
    this._resetDomPlayerState();

    this._destroyed = false;
    this._finished = false;
    this._started = false;
  }

  _resetDomPlayerState() {
    if (this.domPlayer) {
      this.domPlayer.cancel();
    }
  }

  restart() {
    this.reset();
    this.play();
  }

  hasStarted() {
    return this._started;
  }

  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;

      this._resetDomPlayerState();

      this._onFinish();

      if (this._specialStyles) {
        this._specialStyles.destroy();
      }

      this._onDestroyFns.forEach(fn => fn());

      this._onDestroyFns = [];
    }
  }

  setPosition(p) {
    if (this.domPlayer === undefined) {
      this.init();
    }

    this.domPlayer.currentTime = p * this.time;
  }

  getPosition() {
    return this.domPlayer.currentTime / this.time;
  }

  get totalTime() {
    return this._delay + this._duration;
  }

  beforeDestroy() {
    const styles = {};

    if (this.hasStarted()) {
      // note: this code is invoked only when the `play` function was called prior to this
      // (thus `hasStarted` returns true), this implies that the code that initializes
      // `_finalKeyframe` has also been executed and the non-null assertion can be safely used here
      const finalKeyframe = this._finalKeyframe;
      Object.keys(finalKeyframe).forEach(prop => {
        if (prop != 'offset') {
          styles[prop] = this._finished ? finalKeyframe[prop] : computeStyle(this.element, prop);
        }
      });
    }

    this.currentSnapshot = styles;
  }
  /** @internal */


  triggerCallback(phaseName) {
    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }

}

class WebAnimationsDriver {
  validateStyleProperty(prop) {
    return validateStyleProperty(prop);
  }

  matchesElement(_element, _selector) {
    // This method is deprecated and no longer in use so we return false.
    return false;
  }

  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }

  getParentElement(element) {
    return getParentElement(element);
  }

  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }

  computeStyle(element, prop, defaultValue) {
    return window.getComputedStyle(element)[prop];
  }

  animate(element, keyframes, duration, delay, easing, previousPlayers = []) {
    const fill = delay == 0 ? 'both' : 'forwards';
    const playerOptions = {
      duration,
      delay,
      fill
    }; // we check for this to avoid having a null|undefined value be present
    // for the easing (which results in an error for certain browsers #9752)

    if (easing) {
      playerOptions['easing'] = easing;
    }

    const previousStyles = {};
    const previousWebAnimationPlayers = previousPlayers.filter(player => player instanceof WebAnimationsPlayer);

    if (allowPreviousPlayerStylesMerge(duration, delay)) {
      previousWebAnimationPlayers.forEach(player => {
        let styles = player.currentSnapshot;
        Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);
      });
    }

    keyframes = keyframes.map(styles => copyStyles(styles, false));
    keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
    const specialStyles = packageNonAnimatableStyles(element, keyframes);
    return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=browser.mjs.map

/***/ }),

/***/ 5664:
/*!*****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/a11y.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A11yModule": () => (/* binding */ A11yModule),
/* harmony export */   "ActiveDescendantKeyManager": () => (/* binding */ ActiveDescendantKeyManager),
/* harmony export */   "AriaDescriber": () => (/* binding */ AriaDescriber),
/* harmony export */   "CDK_DESCRIBEDBY_HOST_ATTRIBUTE": () => (/* binding */ CDK_DESCRIBEDBY_HOST_ATTRIBUTE),
/* harmony export */   "CDK_DESCRIBEDBY_ID_PREFIX": () => (/* binding */ CDK_DESCRIBEDBY_ID_PREFIX),
/* harmony export */   "CdkAriaLive": () => (/* binding */ CdkAriaLive),
/* harmony export */   "CdkMonitorFocus": () => (/* binding */ CdkMonitorFocus),
/* harmony export */   "CdkTrapFocus": () => (/* binding */ CdkTrapFocus),
/* harmony export */   "ConfigurableFocusTrap": () => (/* binding */ ConfigurableFocusTrap),
/* harmony export */   "ConfigurableFocusTrapFactory": () => (/* binding */ ConfigurableFocusTrapFactory),
/* harmony export */   "EventListenerFocusTrapInertStrategy": () => (/* binding */ EventListenerFocusTrapInertStrategy),
/* harmony export */   "FOCUS_MONITOR_DEFAULT_OPTIONS": () => (/* binding */ FOCUS_MONITOR_DEFAULT_OPTIONS),
/* harmony export */   "FOCUS_TRAP_INERT_STRATEGY": () => (/* binding */ FOCUS_TRAP_INERT_STRATEGY),
/* harmony export */   "FocusKeyManager": () => (/* binding */ FocusKeyManager),
/* harmony export */   "FocusMonitor": () => (/* binding */ FocusMonitor),
/* harmony export */   "FocusTrap": () => (/* binding */ FocusTrap),
/* harmony export */   "FocusTrapFactory": () => (/* binding */ FocusTrapFactory),
/* harmony export */   "HighContrastModeDetector": () => (/* binding */ HighContrastModeDetector),
/* harmony export */   "INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS": () => (/* binding */ INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS),
/* harmony export */   "INPUT_MODALITY_DETECTOR_OPTIONS": () => (/* binding */ INPUT_MODALITY_DETECTOR_OPTIONS),
/* harmony export */   "InputModalityDetector": () => (/* binding */ InputModalityDetector),
/* harmony export */   "InteractivityChecker": () => (/* binding */ InteractivityChecker),
/* harmony export */   "IsFocusableConfig": () => (/* binding */ IsFocusableConfig),
/* harmony export */   "LIVE_ANNOUNCER_DEFAULT_OPTIONS": () => (/* binding */ LIVE_ANNOUNCER_DEFAULT_OPTIONS),
/* harmony export */   "LIVE_ANNOUNCER_ELEMENT_TOKEN": () => (/* binding */ LIVE_ANNOUNCER_ELEMENT_TOKEN),
/* harmony export */   "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY": () => (/* binding */ LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY),
/* harmony export */   "ListKeyManager": () => (/* binding */ ListKeyManager),
/* harmony export */   "LiveAnnouncer": () => (/* binding */ LiveAnnouncer),
/* harmony export */   "MESSAGES_CONTAINER_ID": () => (/* binding */ MESSAGES_CONTAINER_ID),
/* harmony export */   "isFakeMousedownFromScreenReader": () => (/* binding */ isFakeMousedownFromScreenReader),
/* harmony export */   "isFakeTouchstartFromScreenReader": () => (/* binding */ isFakeTouchstartFromScreenReader)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/platform */ 925);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6921);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ 1135);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 9646);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ 1159);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 8505);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 8372);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 9300);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 4004);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 5698);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 5684);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 1884);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 2722);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/coercion */ 3191);
/* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/observers */ 7144);











/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** IDs are delimited by an empty space, as per the spec. */

const ID_DELIMITER = ' ';
/**
 * Adds the given ID to the specified ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */

function addAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);

  if (ids.some(existingId => existingId.trim() == id.trim())) {
    return;
  }

  ids.push(id.trim());
  el.setAttribute(attr, ids.join(ID_DELIMITER));
}
/**
 * Removes the given ID from the specified ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */


function removeAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  const filteredIds = ids.filter(val => val != id.trim());

  if (filteredIds.length) {
    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
  } else {
    el.removeAttribute(attr);
  }
}
/**
 * Gets the list of IDs referenced by the given ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */


function getAriaReferenceIds(el, attr) {
  // Get string array of all individual ids (whitespace delimited) in the attribute value
  return (el.getAttribute(attr) || '').match(/\S+/g) || [];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * ID used for the body container where all messages are appended.
 * @deprecated No longer being used. To be removed.
 * @breaking-change 14.0.0
 */


const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
/**
 * ID prefix used for each created message element.
 * @deprecated To be turned into a private variable.
 * @breaking-change 14.0.0
 */

const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
/**
 * Attribute given to each host element that is described by a message element.
 * @deprecated To be turned into a private variable.
 * @breaking-change 14.0.0
 */

const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
/** Global incremental identifier for each registered message element. */

let nextId = 0;
/**
 * Utility that creates visually hidden elements with a message content. Useful for elements that
 * want to use aria-describedby to further describe themselves without adding additional visual
 * content.
 */

let AriaDescriber = /*#__PURE__*/(() => {
  class AriaDescriber {
    constructor(_document,
    /**
     * @deprecated To be turned into a required parameter.
     * @breaking-change 14.0.0
     */
    _platform) {
      this._platform = _platform;
      /** Map of all registered message elements that have been placed into the document. */

      this._messageRegistry = new Map();
      /** Container for all registered messages. */

      this._messagesContainer = null;
      /** Unique ID for the service. */

      this._id = `${nextId++}`;
      this._document = _document;
    }

    describe(hostElement, message, role) {
      if (!this._canBeDescribed(hostElement, message)) {
        return;
      }

      const key = getKey(message, role);

      if (typeof message !== 'string') {
        // We need to ensure that the element has an ID.
        setMessageId(message);

        this._messageRegistry.set(key, {
          messageElement: message,
          referenceCount: 0
        });
      } else if (!this._messageRegistry.has(key)) {
        this._createMessageElement(message, role);
      }

      if (!this._isElementDescribedByMessage(hostElement, key)) {
        this._addMessageReference(hostElement, key);
      }
    }

    removeDescription(hostElement, message, role) {
      var _a;

      if (!message || !this._isElementNode(hostElement)) {
        return;
      }

      const key = getKey(message, role);

      if (this._isElementDescribedByMessage(hostElement, key)) {
        this._removeMessageReference(hostElement, key);
      } // If the message is a string, it means that it's one that we created for the
      // consumer so we can remove it safely, otherwise we should leave it in place.


      if (typeof message === 'string') {
        const registeredMessage = this._messageRegistry.get(key);

        if (registeredMessage && registeredMessage.referenceCount === 0) {
          this._deleteMessageElement(key);
        }
      }

      if (((_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.childNodes.length) === 0) {
        this._messagesContainer.remove();

        this._messagesContainer = null;
      }
    }
    /** Unregisters all created message elements and removes the message container. */


    ngOnDestroy() {
      var _a;

      const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}="${this._id}"]`);

      for (let i = 0; i < describedElements.length; i++) {
        this._removeCdkDescribedByReferenceIds(describedElements[i]);

        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
      }

      (_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.remove();
      this._messagesContainer = null;

      this._messageRegistry.clear();
    }
    /**
     * Creates a new element in the visually hidden message container element with the message
     * as its content and adds it to the message registry.
     */


    _createMessageElement(message, role) {
      const messageElement = this._document.createElement('div');

      setMessageId(messageElement);
      messageElement.textContent = message;

      if (role) {
        messageElement.setAttribute('role', role);
      }

      this._createMessagesContainer();

      this._messagesContainer.appendChild(messageElement);

      this._messageRegistry.set(getKey(message, role), {
        messageElement,
        referenceCount: 0
      });
    }
    /** Deletes the message element from the global messages container. */


    _deleteMessageElement(key) {
      var _a, _b;

      (_b = (_a = this._messageRegistry.get(key)) === null || _a === void 0 ? void 0 : _a.messageElement) === null || _b === void 0 ? void 0 : _b.remove();

      this._messageRegistry.delete(key);
    }
    /** Creates the global container for all aria-describedby messages. */


    _createMessagesContainer() {
      if (this._messagesContainer) {
        return;
      }

      const containerClassName = 'cdk-describedby-message-container';

      const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform="server"]`);

      for (let i = 0; i < serverContainers.length; i++) {
        // When going from the server to the client, we may end up in a situation where there's
        // already a container on the page, but we don't have a reference to it. Clear the
        // old container so we don't get duplicates. Doing this, instead of emptying the previous
        // container, should be slightly faster.
        serverContainers[i].remove();
      }

      const messagesContainer = this._document.createElement('div'); // We add `visibility: hidden` in order to prevent text in this container from
      // being searchable by the browser's Ctrl + F functionality.
      // Screen-readers will still read the description for elements with aria-describedby even
      // when the description element is not visible.


      messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that
      // the description element doesn't impact page layout.

      messagesContainer.classList.add(containerClassName);
      messagesContainer.classList.add('cdk-visually-hidden'); // @breaking-change 14.0.0 Remove null check for `_platform`.

      if (this._platform && !this._platform.isBrowser) {
        messagesContainer.setAttribute('platform', 'server');
      }

      this._document.body.appendChild(messagesContainer);

      this._messagesContainer = messagesContainer;
    }
    /** Removes all cdk-describedby messages that are hosted through the element. */


    _removeCdkDescribedByReferenceIds(element) {
      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
      const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);
      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
    }
    /**
     * Adds a message reference to the element using aria-describedby and increments the registered
     * message's reference count.
     */


    _addMessageReference(element, key) {
      const registeredMessage = this._messageRegistry.get(key); // Add the aria-describedby reference and set the
      // describedby_host attribute to mark the element.


      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);
      registeredMessage.referenceCount++;
    }
    /**
     * Removes a message reference from the element using aria-describedby
     * and decrements the registered message's reference count.
     */


    _removeMessageReference(element, key) {
      const registeredMessage = this._messageRegistry.get(key);

      registeredMessage.referenceCount--;
      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
    }
    /** Returns true if the element has been described by the provided message ID. */


    _isElementDescribedByMessage(element, key) {
      const referenceIds = getAriaReferenceIds(element, 'aria-describedby');

      const registeredMessage = this._messageRegistry.get(key);

      const messageId = registeredMessage && registeredMessage.messageElement.id;
      return !!messageId && referenceIds.indexOf(messageId) != -1;
    }
    /** Determines whether a message can be described on a particular element. */


    _canBeDescribed(element, message) {
      if (!this._isElementNode(element)) {
        return false;
      }

      if (message && typeof message === 'object') {
        // We'd have to make some assumptions about the description element's text, if the consumer
        // passed in an element. Assume that if an element is passed in, the consumer has verified
        // that it can be used as a description.
        return true;
      }

      const trimmedMessage = message == null ? '' : `${message}`.trim();
      const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
      // element, because screen readers will end up reading out the same text twice in a row.

      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
    }
    /** Checks whether a node is an Element node. */


    _isElementNode(element) {
      return element.nodeType === this._document.ELEMENT_NODE;
    }

  }

  AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {
    return new (t || AriaDescriber)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform));
  };

  AriaDescriber.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: AriaDescriber,
    factory: AriaDescriber.ɵfac,
    providedIn: 'root'
  });
  return AriaDescriber;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** Gets a key that can be used to look messages up in the registry. */


function getKey(message, role) {
  return typeof message === 'string' ? `${role || ''}/${message}` : message;
}
/** Assigns a unique ID to an element, if it doesn't have one already. */


function setMessageId(element) {
  if (!element.id) {
    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This class manages keyboard events for selectable lists. If you pass it a query list
 * of items, it will set the active item correctly when arrow events occur.
 */


class ListKeyManager {
  constructor(_items) {
    this._items = _items;
    this._activeItemIndex = -1;
    this._activeItem = null;
    this._wrap = false;
    this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
    this._vertical = true;
    this._allowedModifierKeys = [];
    this._homeAndEnd = false;
    /**
     * Predicate function that can be used to check whether an item should be skipped
     * by the key manager. By default, disabled items are skipped.
     */

    this._skipPredicateFn = item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.


    this._pressedLetters = [];
    /**
     * Stream that emits any time the TAB key is pressed, so components can react
     * when focus is shifted off of the list.
     */

    this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    /** Stream that emits whenever the active item of the list manager changes. */

    this.change = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject(); // We allow for the items to be an array because, in some cases, the consumer may
    // not have access to a QueryList of the items they want to manage (e.g. when the
    // items aren't being collected via `ViewChildren` or `ContentChildren`).

    if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList) {
      _items.changes.subscribe(newItems => {
        if (this._activeItem) {
          const itemArray = newItems.toArray();
          const newIndex = itemArray.indexOf(this._activeItem);

          if (newIndex > -1 && newIndex !== this._activeItemIndex) {
            this._activeItemIndex = newIndex;
          }
        }
      });
    }
  }
  /**
   * Sets the predicate function that determines which items should be skipped by the
   * list key manager.
   * @param predicate Function that determines whether the given item should be skipped.
   */


  skipPredicate(predicate) {
    this._skipPredicateFn = predicate;
    return this;
  }
  /**
   * Configures wrapping mode, which determines whether the active item will wrap to
   * the other end of list when there are no more items in the given direction.
   * @param shouldWrap Whether the list should wrap when reaching the end.
   */


  withWrap(shouldWrap = true) {
    this._wrap = shouldWrap;
    return this;
  }
  /**
   * Configures whether the key manager should be able to move the selection vertically.
   * @param enabled Whether vertical selection should be enabled.
   */


  withVerticalOrientation(enabled = true) {
    this._vertical = enabled;
    return this;
  }
  /**
   * Configures the key manager to move the selection horizontally.
   * Passing in `null` will disable horizontal movement.
   * @param direction Direction in which the selection can be moved.
   */


  withHorizontalOrientation(direction) {
    this._horizontal = direction;
    return this;
  }
  /**
   * Modifier keys which are allowed to be held down and whose default actions will be prevented
   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
   */


  withAllowedModifierKeys(keys) {
    this._allowedModifierKeys = keys;
    return this;
  }
  /**
   * Turns on typeahead mode which allows users to set the active item by typing.
   * @param debounceInterval Time to wait after the last keystroke before setting the active item.
   */


  withTypeAhead(debounceInterval = 200) {
    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {
      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
    }

    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
    // and convert those letters back into a string. Afterwards find the first item that starts
    // with that string and select it.


    this._typeaheadSubscription = this._letterKeyStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(letter => this._pressedLetters.push(letter)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.debounceTime)(debounceInterval), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)(() => this._pressedLetters.length > 0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(() => this._pressedLetters.join(''))).subscribe(inputString => {
      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately
      // following the current active item.


      for (let i = 1; i < items.length + 1; i++) {
        const index = (this._activeItemIndex + i) % items.length;
        const item = items[index];

        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
          this.setActiveItem(index);
          break;
        }
      }

      this._pressedLetters = [];
    });
    return this;
  }
  /**
   * Configures the key manager to activate the first and last items
   * respectively when the Home or End key is pressed.
   * @param enabled Whether pressing the Home or End key activates the first/last item.
   */


  withHomeAndEnd(enabled = true) {
    this._homeAndEnd = enabled;
    return this;
  }

  setActiveItem(item) {
    const previousActiveItem = this._activeItem;
    this.updateActiveItem(item);

    if (this._activeItem !== previousActiveItem) {
      this.change.next(this._activeItemIndex);
    }
  }
  /**
   * Sets the active item depending on the key event passed in.
   * @param event Keyboard event to be used for determining which element should be active.
   */


  onKeydown(event) {
    const keyCode = event.keyCode;
    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
    const isModifierAllowed = modifiers.every(modifier => {
      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;
    });

    switch (keyCode) {
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.TAB:
        this.tabOut.next();
        return;

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.DOWN_ARROW:
        if (this._vertical && isModifierAllowed) {
          this.setNextItemActive();
          break;
        } else {
          return;
        }

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.UP_ARROW:
        if (this._vertical && isModifierAllowed) {
          this.setPreviousItemActive();
          break;
        } else {
          return;
        }

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.RIGHT_ARROW:
        if (this._horizontal && isModifierAllowed) {
          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
          break;
        } else {
          return;
        }

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.LEFT_ARROW:
        if (this._horizontal && isModifierAllowed) {
          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
          break;
        } else {
          return;
        }

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.HOME:
        if (this._homeAndEnd && isModifierAllowed) {
          this.setFirstItemActive();
          break;
        } else {
          return;
        }

      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.END:
        if (this._homeAndEnd && isModifierAllowed) {
          this.setLastItemActive();
          break;
        } else {
          return;
        }

      default:
        if (isModifierAllowed || (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.hasModifierKey)(event, 'shiftKey')) {
          // Attempt to use the `event.key` which also maps it to the user's keyboard language,
          // otherwise fall back to resolving alphanumeric characters via the keyCode.
          if (event.key && event.key.length === 1) {
            this._letterKeyStream.next(event.key.toLocaleUpperCase());
          } else if (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.A && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.Z || keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.ZERO && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.NINE) {
            this._letterKeyStream.next(String.fromCharCode(keyCode));
          }
        } // Note that we return here, in order to avoid preventing
        // the default action of non-navigational keys.


        return;
    }

    this._pressedLetters = [];
    event.preventDefault();
  }
  /** Index of the currently active item. */


  get activeItemIndex() {
    return this._activeItemIndex;
  }
  /** The active item. */


  get activeItem() {
    return this._activeItem;
  }
  /** Gets whether the user is currently typing into the manager using the typeahead feature. */


  isTyping() {
    return this._pressedLetters.length > 0;
  }
  /** Sets the active item to the first enabled item in the list. */


  setFirstItemActive() {
    this._setActiveItemByIndex(0, 1);
  }
  /** Sets the active item to the last enabled item in the list. */


  setLastItemActive() {
    this._setActiveItemByIndex(this._items.length - 1, -1);
  }
  /** Sets the active item to the next enabled item in the list. */


  setNextItemActive() {
    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
  }
  /** Sets the active item to a previous enabled item in the list. */


  setPreviousItemActive() {
    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
  }

  updateActiveItem(item) {
    const itemArray = this._getItemsArray();

    const index = typeof item === 'number' ? item : itemArray.indexOf(item);
    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.

    this._activeItem = activeItem == null ? null : activeItem;
    this._activeItemIndex = index;
  }
  /**
   * This method sets the active item, given a list of items and the delta between the
   * currently active item and the new active item. It will calculate differently
   * depending on whether wrap mode is turned on.
   */


  _setActiveItemByDelta(delta) {
    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
  }
  /**
   * Sets the active item properly given "wrap" mode. In other words, it will continue to move
   * down the list until it finds an item that is not disabled, and it will wrap if it
   * encounters either end of the list.
   */


  _setActiveInWrapMode(delta) {
    const items = this._getItemsArray();

    for (let i = 1; i <= items.length; i++) {
      const index = (this._activeItemIndex + delta * i + items.length) % items.length;
      const item = items[index];

      if (!this._skipPredicateFn(item)) {
        this.setActiveItem(index);
        return;
      }
    }
  }
  /**
   * Sets the active item properly given the default mode. In other words, it will
   * continue to move down the list until it finds an item that is not disabled. If
   * it encounters either end of the list, it will stop and not wrap.
   */


  _setActiveInDefaultMode(delta) {
    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
  }
  /**
   * Sets the active item to the first enabled item starting at the index specified. If the
   * item is disabled, it will move in the fallbackDelta direction until it either
   * finds an enabled item or encounters the end of the list.
   */


  _setActiveItemByIndex(index, fallbackDelta) {
    const items = this._getItemsArray();

    if (!items[index]) {
      return;
    }

    while (this._skipPredicateFn(items[index])) {
      index += fallbackDelta;

      if (!items[index]) {
        return;
      }
    }

    this.setActiveItem(index);
  }
  /** Returns the items as an array. */


  _getItemsArray() {
    return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList ? this._items.toArray() : this._items;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class ActiveDescendantKeyManager extends ListKeyManager {
  setActiveItem(index) {
    if (this.activeItem) {
      this.activeItem.setInactiveStyles();
    }

    super.setActiveItem(index);

    if (this.activeItem) {
      this.activeItem.setActiveStyles();
    }
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class FocusKeyManager extends ListKeyManager {
  constructor() {
    super(...arguments);
    this._origin = 'program';
  }
  /**
   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
   * @param origin Focus origin to be used when focusing items.
   */


  setFocusOrigin(origin) {
    this._origin = origin;
    return this;
  }

  setActiveItem(item) {
    super.setActiveItem(item);

    if (this.activeItem) {
      this.activeItem.focus(this._origin);
    }
  }

}
/**
 * Configuration for the isFocusable method.
 */


class IsFocusableConfig {
  constructor() {
    /**
     * Whether to count an element as focusable even if it is not currently visible.
     */
    this.ignoreVisibility = false;
  }

} // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
// supported.

/**
 * Utility for checking the interactivity of an element, such as whether is is focusable or
 * tabbable.
 */


let InteractivityChecker = /*#__PURE__*/(() => {
  class InteractivityChecker {
    constructor(_platform) {
      this._platform = _platform;
    }
    /**
     * Gets whether an element is disabled.
     *
     * @param element Element to be checked.
     * @returns Whether the element is disabled.
     */


    isDisabled(element) {
      // This does not capture some cases, such as a non-form control with a disabled attribute or
      // a form control inside of a disabled form, but should capture the most common cases.
      return element.hasAttribute('disabled');
    }
    /**
     * Gets whether an element is visible for the purposes of interactivity.
     *
     * This will capture states like `display: none` and `visibility: hidden`, but not things like
     * being clipped by an `overflow: hidden` parent or being outside the viewport.
     *
     * @returns Whether the element is visible.
     */


    isVisible(element) {
      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
    }
    /**
     * Gets whether an element can be reached via Tab key.
     * Assumes that the element has already been checked with isFocusable.
     *
     * @param element Element to be checked.
     * @returns Whether the element is tabbable.
     */


    isTabbable(element) {
      // Nothing is tabbable on the server 😎
      if (!this._platform.isBrowser) {
        return false;
      }

      const frameElement = getFrameElement(getWindow(element));

      if (frameElement) {
        // Frame elements inherit their tabindex onto all child elements.
        if (getTabIndexValue(frameElement) === -1) {
          return false;
        } // Browsers disable tabbing to an element inside of an invisible frame.


        if (!this.isVisible(frameElement)) {
          return false;
        }
      }

      let nodeName = element.nodeName.toLowerCase();
      let tabIndexValue = getTabIndexValue(element);

      if (element.hasAttribute('contenteditable')) {
        return tabIndexValue !== -1;
      }

      if (nodeName === 'iframe' || nodeName === 'object') {
        // The frame or object's content may be tabbable depending on the content, but it's
        // not possibly to reliably detect the content of the frames. We always consider such
        // elements as non-tabbable.
        return false;
      } // In iOS, the browser only considers some specific elements as tabbable.


      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
        return false;
      }

      if (nodeName === 'audio') {
        // Audio elements without controls enabled are never tabbable, regardless
        // of the tabindex attribute explicitly being set.
        if (!element.hasAttribute('controls')) {
          return false;
        } // Audio elements with controls are by default tabbable unless the
        // tabindex attribute is set to `-1` explicitly.


        return tabIndexValue !== -1;
      }

      if (nodeName === 'video') {
        // For all video elements, if the tabindex attribute is set to `-1`, the video
        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`
        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The
        // tabindex attribute is the source of truth here.
        if (tabIndexValue === -1) {
          return false;
        } // If the tabindex is explicitly set, and not `-1` (as per check before), the
        // video element is always tabbable (regardless of whether it has controls or not).


        if (tabIndexValue !== null) {
          return true;
        } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it
        // has controls enabled. Firefox is special as videos are always tabbable regardless
        // of whether there are controls or not.


        return this._platform.FIREFOX || element.hasAttribute('controls');
      }

      return element.tabIndex >= 0;
    }
    /**
     * Gets whether an element can be focused by the user.
     *
     * @param element Element to be checked.
     * @param config The config object with options to customize this method's behavior
     * @returns Whether the element is focusable.
     */


    isFocusable(element, config) {
      // Perform checks in order of left to most expensive.
      // Again, naive approach that does not capture many edge cases and browser quirks.
      return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));
    }

  }

  InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {
    return new (t || InteractivityChecker)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform));
  };

  InteractivityChecker.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: InteractivityChecker,
    factory: InteractivityChecker.ɵfac,
    providedIn: 'root'
  });
  return InteractivityChecker;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
 * the frameElement property is being accessed from a different host address, this property
 * should be accessed carefully.
 */


function getFrameElement(window) {
  try {
    return window.frameElement;
  } catch (_a) {
    return null;
  }
}
/** Checks whether the specified element has any geometry / rectangles. */


function hasGeometry(element) {
  // Use logic from jQuery to check for an invisible element.
  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);
}
/** Gets whether an element's  */


function isNativeFormElement(element) {
  let nodeName = element.nodeName.toLowerCase();
  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
}
/** Gets whether an element is an `<input type="hidden">`. */


function isHiddenInput(element) {
  return isInputElement(element) && element.type == 'hidden';
}
/** Gets whether an element is an anchor that has an href attribute. */


function isAnchorWithHref(element) {
  return isAnchorElement(element) && element.hasAttribute('href');
}
/** Gets whether an element is an input element. */


function isInputElement(element) {
  return element.nodeName.toLowerCase() == 'input';
}
/** Gets whether an element is an anchor element. */


function isAnchorElement(element) {
  return element.nodeName.toLowerCase() == 'a';
}
/** Gets whether an element has a valid tabindex. */


function hasValidTabIndex(element) {
  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
    return false;
  }

  let tabIndex = element.getAttribute('tabindex');
  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
}
/**
 * Returns the parsed tabindex from the element attributes instead of returning the
 * evaluated tabindex from the browsers defaults.
 */


function getTabIndexValue(element) {
  if (!hasValidTabIndex(element)) {
    return null;
  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054


  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
  return isNaN(tabIndex) ? -1 : tabIndex;
}
/** Checks whether the specified element is potentially tabbable on iOS */


function isPotentiallyTabbableIOS(element) {
  let nodeName = element.nodeName.toLowerCase();
  let inputType = nodeName === 'input' && element.type;
  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';
}
/**
 * Gets whether an element is potentially focusable without taking current visible/disabled state
 * into account.
 */


function isPotentiallyFocusable(element) {
  // Inputs are potentially focusable *unless* they're type="hidden".
  if (isHiddenInput(element)) {
    return false;
  }

  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
}
/** Gets the parent window of a DOM node with regards of being inside of an iframe. */


function getWindow(node) {
  // ownerDocument is null if `node` itself *is* a document.
  return node.ownerDocument && node.ownerDocument.defaultView || window;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Class that allows for trapping focus within a DOM element.
 *
 * This class currently uses a relatively simple approach to focus trapping.
 * It assumes that the tab order is the same as DOM order, which is not necessarily true.
 * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.
 *
 * @deprecated Use `ConfigurableFocusTrap` instead.
 * @breaking-change 11.0.0
 */


class FocusTrap {
  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {
    this._element = _element;
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document;
    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.

    this.startAnchorListener = () => this.focusLastTabbableElement();

    this.endAnchorListener = () => this.focusFirstTabbableElement();

    this._enabled = true;

    if (!deferAnchors) {
      this.attachAnchors();
    }
  }
  /** Whether the focus trap is active. */


  get enabled() {
    return this._enabled;
  }

  set enabled(value) {
    this._enabled = value;

    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(value, this._startAnchor);

      this._toggleAnchorTabIndex(value, this._endAnchor);
    }
  }
  /** Destroys the focus trap by cleaning up the anchors. */


  destroy() {
    const startAnchor = this._startAnchor;
    const endAnchor = this._endAnchor;

    if (startAnchor) {
      startAnchor.removeEventListener('focus', this.startAnchorListener);
      startAnchor.remove();
    }

    if (endAnchor) {
      endAnchor.removeEventListener('focus', this.endAnchorListener);
      endAnchor.remove();
    }

    this._startAnchor = this._endAnchor = null;
    this._hasAttached = false;
  }
  /**
   * Inserts the anchors into the DOM. This is usually done automatically
   * in the constructor, but can be deferred for cases like directives with `*ngIf`.
   * @returns Whether the focus trap managed to attach successfully. This may not be the case
   * if the target element isn't currently in the DOM.
   */


  attachAnchors() {
    // If we're not on the browser, there can be no focus to trap.
    if (this._hasAttached) {
      return true;
    }

    this._ngZone.runOutsideAngular(() => {
      if (!this._startAnchor) {
        this._startAnchor = this._createAnchor();

        this._startAnchor.addEventListener('focus', this.startAnchorListener);
      }

      if (!this._endAnchor) {
        this._endAnchor = this._createAnchor();

        this._endAnchor.addEventListener('focus', this.endAnchorListener);
      }
    });

    if (this._element.parentNode) {
      this._element.parentNode.insertBefore(this._startAnchor, this._element);

      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);

      this._hasAttached = true;
    }

    return this._hasAttached;
  }
  /**
   * Waits for the zone to stabilize, then focuses the first tabbable element.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */


  focusInitialElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusInitialElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the first tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */


  focusFirstTabbableElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the last tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */


  focusLastTabbableElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));
    });
  }
  /**
   * Get the specified boundary element of the trapped region.
   * @param bound The boundary to get (start or end of trapped region).
   * @returns The boundary element.
   */


  _getRegionBoundary(bound) {
    // Contains the deprecated version of selector, for temporary backwards comparability.
    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);

    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      for (let i = 0; i < markers.length; i++) {
        // @breaking-change 8.0.0
        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);
        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);
        }
      }
    }

    if (bound == 'start') {
      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
    }

    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
  }
  /**
   * Focuses the element that should be focused when the focus trap is initialized.
   * @returns Whether focus was moved successfully.
   */


  focusInitialElement(options) {
    // Contains the deprecated version of selector, for temporary backwards comparability.
    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);

    if (redirectToElement) {
      // @breaking-change 8.0.0
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {
        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);
      } // Warn the consumer if the element they've pointed to
      // isn't focusable, when not in production mode.


      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {
        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);
      }

      if (!this._checker.isFocusable(redirectToElement)) {
        const focusableChild = this._getFirstTabbableElement(redirectToElement);

        focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);
        return !!focusableChild;
      }

      redirectToElement.focus(options);
      return true;
    }

    return this.focusFirstTabbableElement(options);
  }
  /**
   * Focuses the first tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */


  focusFirstTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary('start');

    if (redirectToElement) {
      redirectToElement.focus(options);
    }

    return !!redirectToElement;
  }
  /**
   * Focuses the last tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */


  focusLastTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary('end');

    if (redirectToElement) {
      redirectToElement.focus(options);
    }

    return !!redirectToElement;
  }
  /**
   * Checks whether the focus trap has successfully been attached.
   */


  hasAttached() {
    return this._hasAttached;
  }
  /** Get the first tabbable element from a DOM subtree (inclusive). */


  _getFirstTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }

    const children = root.children;

    for (let i = 0; i < children.length; i++) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;

      if (tabbableChild) {
        return tabbableChild;
      }
    }

    return null;
  }
  /** Get the last tabbable element from a DOM subtree (inclusive). */


  _getLastTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    } // Iterate in reverse DOM order.


    const children = root.children;

    for (let i = children.length - 1; i >= 0; i--) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;

      if (tabbableChild) {
        return tabbableChild;
      }
    }

    return null;
  }
  /** Creates an anchor element. */


  _createAnchor() {
    const anchor = this._document.createElement('div');

    this._toggleAnchorTabIndex(this._enabled, anchor);

    anchor.classList.add('cdk-visually-hidden');
    anchor.classList.add('cdk-focus-trap-anchor');
    anchor.setAttribute('aria-hidden', 'true');
    return anchor;
  }
  /**
   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
   * @param isEnabled Whether the focus trap is enabled.
   * @param anchor Anchor on which to toggle the tabindex.
   */


  _toggleAnchorTabIndex(isEnabled, anchor) {
    // Remove the tabindex completely, rather than setting it to -1, because if the
    // element has a tabindex, the user might still hit it when navigating with the arrow keys.
    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
  }
  /**
   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
   * @param enabled: Whether the anchors should trap Tab.
   */


  toggleAnchors(enabled) {
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(enabled, this._startAnchor);

      this._toggleAnchorTabIndex(enabled, this._endAnchor);
    }
  }
  /** Executes a function when the zone is stable. */


  _executeOnStable(fn) {
    if (this._ngZone.isStable) {
      fn();
    } else {
      this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(1)).subscribe(fn);
    }
  }

}
/**
 * Factory that allows easy instantiation of focus traps.
 * @deprecated Use `ConfigurableFocusTrapFactory` instead.
 * @breaking-change 11.0.0
 */


let FocusTrapFactory = /*#__PURE__*/(() => {
  class FocusTrapFactory {
    constructor(_checker, _ngZone, _document) {
      this._checker = _checker;
      this._ngZone = _ngZone;
      this._document = _document;
    }
    /**
     * Creates a focus-trapped region around the given element.
     * @param element The element around which focus will be trapped.
     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
     *     manually by the user.
     * @returns The created focus trap instance.
     */


    create(element, deferCaptureElements = false) {
      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
    }

  }

  FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {
    return new (t || FocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
  };

  FocusTrapFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: FocusTrapFactory,
    factory: FocusTrapFactory.ɵfac,
    providedIn: 'root'
  });
  return FocusTrapFactory;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** Directive for trapping focus within a region. */


let CdkTrapFocus = /*#__PURE__*/(() => {
  class CdkTrapFocus {
    constructor(_elementRef, _focusTrapFactory,
    /**
     * @deprecated No longer being used. To be removed.
     * @breaking-change 13.0.0
     */
    _document) {
      this._elementRef = _elementRef;
      this._focusTrapFactory = _focusTrapFactory;
      /** Previously focused element to restore focus to upon destroy when using autoCapture. */

      this._previouslyFocusedElement = null;
      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
    }
    /** Whether the focus trap is active. */


    get enabled() {
      return this.focusTrap.enabled;
    }

    set enabled(value) {
      this.focusTrap.enabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
    }
    /**
     * Whether the directive should automatically move focus into the trapped region upon
     * initialization and return focus to the previous activeElement upon destruction.
     */


    get autoCapture() {
      return this._autoCapture;
    }

    set autoCapture(value) {
      this._autoCapture = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
    }

    ngOnDestroy() {
      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that
      // element now that the trapped region is being destroyed.

      if (this._previouslyFocusedElement) {
        this._previouslyFocusedElement.focus();

        this._previouslyFocusedElement = null;
      }
    }

    ngAfterContentInit() {
      this.focusTrap.attachAnchors();

      if (this.autoCapture) {
        this._captureFocus();
      }
    }

    ngDoCheck() {
      if (!this.focusTrap.hasAttached()) {
        this.focusTrap.attachAnchors();
      }
    }

    ngOnChanges(changes) {
      const autoCaptureChange = changes['autoCapture'];

      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {
        this._captureFocus();
      }
    }

    _captureFocus() {
      this._previouslyFocusedElement = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getFocusedElementPierceShadowDom)();
      this.focusTrap.focusInitialElementWhenReady();
    }

  }

  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {
    return new (t || CdkTrapFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](FocusTrapFactory), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
  };

  CdkTrapFocus.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: CdkTrapFocus,
    selectors: [["", "cdkTrapFocus", ""]],
    inputs: {
      enabled: ["cdkTrapFocus", "enabled"],
      autoCapture: ["cdkTrapFocusAutoCapture", "autoCapture"]
    },
    exportAs: ["cdkTrapFocus"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return CdkTrapFocus;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Class that allows for trapping focus within a DOM element.
 *
 * This class uses a strategy pattern that determines how it traps focus.
 * See FocusTrapInertStrategy.
 */


class ConfigurableFocusTrap extends FocusTrap {
  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
    super(_element, _checker, _ngZone, _document, config.defer);
    this._focusTrapManager = _focusTrapManager;
    this._inertStrategy = _inertStrategy;

    this._focusTrapManager.register(this);
  }
  /** Whether the FocusTrap is enabled. */


  get enabled() {
    return this._enabled;
  }

  set enabled(value) {
    this._enabled = value;

    if (this._enabled) {
      this._focusTrapManager.register(this);
    } else {
      this._focusTrapManager.deregister(this);
    }
  }
  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */


  destroy() {
    this._focusTrapManager.deregister(this);

    super.destroy();
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */


  _enable() {
    this._inertStrategy.preventFocus(this);

    this.toggleAnchors(true);
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */


  _disable() {
    this._inertStrategy.allowFocus(this);

    this.toggleAnchors(false);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** The injection token used to specify the inert strategy. */


const FOCUS_TRAP_INERT_STRATEGY = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('FOCUS_TRAP_INERT_STRATEGY');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Lightweight FocusTrapInertStrategy that adds a document focus event
 * listener to redirect focus back inside the FocusTrap.
 */

class EventListenerFocusTrapInertStrategy {
  constructor() {
    /** Focus event handler. */
    this._listener = null;
  }
  /** Adds a document event listener that keeps focus inside the FocusTrap. */


  preventFocus(focusTrap) {
    // Ensure there's only one listener per document
    if (this._listener) {
      focusTrap._document.removeEventListener('focus', this._listener, true);
    }

    this._listener = e => this._trapFocus(focusTrap, e);

    focusTrap._ngZone.runOutsideAngular(() => {
      focusTrap._document.addEventListener('focus', this._listener, true);
    });
  }
  /** Removes the event listener added in preventFocus. */


  allowFocus(focusTrap) {
    if (!this._listener) {
      return;
    }

    focusTrap._document.removeEventListener('focus', this._listener, true);

    this._listener = null;
  }
  /**
   * Refocuses the first element in the FocusTrap if the focus event target was outside
   * the FocusTrap.
   *
   * This is an event listener callback. The event listener is added in runOutsideAngular,
   * so all this code runs outside Angular as well.
   */


  _trapFocus(focusTrap, event) {
    var _a;

    const target = event.target;
    const focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated
    // with an element inside the FocusTrap, ex. mat-select.

    if (target && !focusTrapRoot.contains(target) && !((_a = target.closest) === null || _a === void 0 ? void 0 : _a.call(target, 'div.cdk-overlay-pane'))) {
      // Some legacy FocusTrap usages have logic that focuses some element on the page
      // just before FocusTrap is destroyed. For backwards compatibility, wait
      // to be sure FocusTrap is still enabled before refocusing.
      setTimeout(() => {
        // Check whether focus wasn't put back into the focus trap while the timeout was pending.
        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
          focusTrap.focusFirstTabbableElement();
        }
      });
    }
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Injectable that ensures only the most recently enabled FocusTrap is active. */


let FocusTrapManager = /*#__PURE__*/(() => {
  class FocusTrapManager {
    constructor() {
      // A stack of the FocusTraps on the page. Only the FocusTrap at the
      // top of the stack is active.
      this._focusTrapStack = [];
    }
    /**
     * Disables the FocusTrap at the top of the stack, and then pushes
     * the new FocusTrap onto the stack.
     */


    register(focusTrap) {
      // Dedupe focusTraps that register multiple times.
      this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);
      let stack = this._focusTrapStack;

      if (stack.length) {
        stack[stack.length - 1]._disable();
      }

      stack.push(focusTrap);

      focusTrap._enable();
    }
    /**
     * Removes the FocusTrap from the stack, and activates the
     * FocusTrap that is the new top of the stack.
     */


    deregister(focusTrap) {
      focusTrap._disable();

      const stack = this._focusTrapStack;
      const i = stack.indexOf(focusTrap);

      if (i !== -1) {
        stack.splice(i, 1);

        if (stack.length) {
          stack[stack.length - 1]._enable();
        }
      }
    }

  }

  FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {
    return new (t || FocusTrapManager)();
  };

  FocusTrapManager.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: FocusTrapManager,
    factory: FocusTrapManager.ɵfac,
    providedIn: 'root'
  });
  return FocusTrapManager;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Factory that allows easy instantiation of configurable focus traps. */


let ConfigurableFocusTrapFactory = /*#__PURE__*/(() => {
  class ConfigurableFocusTrapFactory {
    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
      this._checker = _checker;
      this._ngZone = _ngZone;
      this._focusTrapManager = _focusTrapManager;
      this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.

      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
    }

    create(element, config = {
      defer: false
    }) {
      let configObject;

      if (typeof config === 'boolean') {
        configObject = {
          defer: config
        };
      } else {
        configObject = config;
      }

      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
    }

  }

  ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {
    return new (t || ConfigurableFocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FocusTrapManager), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FOCUS_TRAP_INERT_STRATEGY, 8));
  };

  ConfigurableFocusTrapFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: ConfigurableFocusTrapFactory,
    factory: ConfigurableFocusTrapFactory.ɵfac,
    providedIn: 'root'
  });
  return ConfigurableFocusTrapFactory;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */


function isFakeMousedownFromScreenReader(event) {
  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on
  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are
  // zero or `event.buttons` is zero, depending on the browser:
  // - `event.buttons` works on Firefox, but fails on Chrome.
  // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.
  // Note that there's an edge case where the user could click the 0x0 spot of the
  // screen themselves, but that is unlikely to contain interactive elements.
  return event.buttons === 0 || event.offsetX === 0 && event.offsetY === 0;
}
/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */


function isFakeTouchstartFromScreenReader(event) {
  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`
  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,
  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10
  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.

  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injectable options for the InputModalityDetector. These are shallowly merged with the default
 * options.
 */


const INPUT_MODALITY_DETECTOR_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-input-modality-detector-options');
/**
 * Default options for the InputModalityDetector.
 *
 * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect
 * keyboard input modality) for two reasons:
 *
 * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open
 *    in new tab', and are thus less representative of actual keyboard interaction.
 * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but
 *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore
 *    these keys so as to not update the input modality.
 *
 * Note that we do not by default ignore the right Meta key on Safari because it has the same key
 * code as the ContextMenu key on other browsers. When we switch to using event.key, we can
 * distinguish between the two.
 */

const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {
  ignoreKeys: [_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.ALT, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.CONTROL, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.MAC_META, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.META, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.SHIFT]
};
/**
 * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown
 * event to be attributed as mouse and not touch.
 *
 * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
 * that a value of around 650ms seems appropriate.
 */

const TOUCH_BUFFER_MS = 650;
/**
 * Event listener options that enable capturing and also mark the listener as passive if the browser
 * supports it.
 */

const modalityEventListenerOptions = /*#__PURE__*/(0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.normalizePassiveListenerOptions)({
  passive: true,
  capture: true
});
/**
 * Service that detects the user's input modality.
 *
 * This service does not update the input modality when a user navigates with a screen reader
 * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC
 * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not
 * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a
 * screen reader is akin to visually scanning a page, and should not be interpreted as actual user
 * input interaction.
 *
 * When a user is not navigating but *interacting* with a screen reader, this service attempts to
 * update the input modality to keyboard, but in general this service's behavior is largely
 * undefined.
 */

let InputModalityDetector = /*#__PURE__*/(() => {
  class InputModalityDetector {
    constructor(_platform, ngZone, document, options) {
      this._platform = _platform;
      /**
       * The most recently detected input modality event target. Is null if no input modality has been
       * detected or if the associated event target is null for some unknown reason.
       */

      this._mostRecentTarget = null;
      /** The underlying BehaviorSubject that emits whenever an input modality is detected. */

      this._modality = new rxjs__WEBPACK_IMPORTED_MODULE_12__.BehaviorSubject(null);
      /**
       * The timestamp of the last touch input modality. Used to determine whether mousedown events
       * should be attributed to mouse or touch.
       */

      this._lastTouchMs = 0;
      /**
       * Handles keydown events. Must be an arrow function in order to preserve the context when it gets
       * bound.
       */

      this._onKeydown = event => {
        var _a, _b; // If this is one of the keys we should ignore, then ignore it and don't update the input
        // modality to keyboard.


        if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {
          return;
        }

        this._modality.next('keyboard');

        this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
      };
      /**
       * Handles mousedown events. Must be an arrow function in order to preserve the context when it
       * gets bound.
       */


      this._onMousedown = event => {
        // Touches trigger both touch and mouse events, so we need to distinguish between mouse events
        // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely
        // after the previous touch event.
        if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {
          return;
        } // Fake mousedown events are fired by some screen readers when controls are activated by the
        // screen reader. Attribute them to keyboard input modality.


        this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');

        this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
      };
      /**
       * Handles touchstart events. Must be an arrow function in order to preserve the context when it
       * gets bound.
       */


      this._onTouchstart = event => {
        // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart
        // events are fired. Again, attribute to keyboard input modality.
        if (isFakeTouchstartFromScreenReader(event)) {
          this._modality.next('keyboard');

          return;
        } // Store the timestamp of this touch event, as it's used to distinguish between mouse events
        // triggered via mouse vs touch.


        this._lastTouchMs = Date.now();

        this._modality.next('touch');

        this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
      };

      this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options); // Skip the first emission as it's null.

      this.modalityDetected = this._modality.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.skip)(1));
      this.modalityChanged = this.modalityDetected.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.distinctUntilChanged)()); // If we're not in a browser, this service should do nothing, as there's no relevant input
      // modality to detect.

      if (_platform.isBrowser) {
        ngZone.runOutsideAngular(() => {
          document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);
          document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);
          document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);
        });
      }
    }
    /** The most recently detected input modality. */


    get mostRecentModality() {
      return this._modality.value;
    }

    ngOnDestroy() {
      this._modality.complete();

      if (this._platform.isBrowser) {
        document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);
        document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);
        document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);
      }
    }

  }

  InputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {
    return new (t || InputModalityDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](INPUT_MODALITY_DETECTOR_OPTIONS, 8));
  };

  InputModalityDetector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: InputModalityDetector,
    factory: InputModalityDetector.ɵfac,
    providedIn: 'root'
  });
  return InputModalityDetector;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('liveAnnouncerElement', {
  providedIn: 'root',
  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
});
/** @docs-private */

function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
  return null;
}
/** Injection token that can be used to configure the default options for the LiveAnnouncer. */


const LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
let LiveAnnouncer = /*#__PURE__*/(() => {
  class LiveAnnouncer {
    constructor(elementToken, _ngZone, _document, _defaultOptions) {
      this._ngZone = _ngZone;
      this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot
      // reference browser globals (HTMLElement, Document) on non-browser environments, since having
      // a class decorator causes TypeScript to preserve the constructor signature types.

      this._document = _document;
      this._liveElement = elementToken || this._createLiveElement();
    }

    announce(message, ...args) {
      const defaultOptions = this._defaultOptions;
      let politeness;
      let duration;

      if (args.length === 1 && typeof args[0] === 'number') {
        duration = args[0];
      } else {
        [politeness, duration] = args;
      }

      this.clear();
      clearTimeout(this._previousTimeout);

      if (!politeness) {
        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';
      }

      if (duration == null && defaultOptions) {
        duration = defaultOptions.duration;
      } // TODO: ensure changing the politeness works on all environments we support.


      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:
      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
      //   second time without clearing and then using a non-zero delay.
      // (using JAWS 17 at time of this writing).


      return this._ngZone.runOutsideAngular(() => {
        if (!this._currentPromise) {
          this._currentPromise = new Promise(resolve => this._currentResolve = resolve);
        }

        clearTimeout(this._previousTimeout);
        this._previousTimeout = setTimeout(() => {
          this._liveElement.textContent = message;

          if (typeof duration === 'number') {
            this._previousTimeout = setTimeout(() => this.clear(), duration);
          }

          this._currentResolve();

          this._currentPromise = this._currentResolve = undefined;
        }, 100);
        return this._currentPromise;
      });
    }
    /**
     * Clears the current text from the announcer element. Can be used to prevent
     * screen readers from reading the text out again while the user is going
     * through the page landmarks.
     */


    clear() {
      if (this._liveElement) {
        this._liveElement.textContent = '';
      }
    }

    ngOnDestroy() {
      var _a, _b;

      clearTimeout(this._previousTimeout);
      (_a = this._liveElement) === null || _a === void 0 ? void 0 : _a.remove();
      this._liveElement = null;
      (_b = this._currentResolve) === null || _b === void 0 ? void 0 : _b.call(this);
      this._currentPromise = this._currentResolve = undefined;
    }

    _createLiveElement() {
      const elementClass = 'cdk-live-announcer-element';

      const previousElements = this._document.getElementsByClassName(elementClass);

      const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.


      for (let i = 0; i < previousElements.length; i++) {
        previousElements[i].remove();
      }

      liveEl.classList.add(elementClass);
      liveEl.classList.add('cdk-visually-hidden');
      liveEl.setAttribute('aria-atomic', 'true');
      liveEl.setAttribute('aria-live', 'polite');

      this._document.body.appendChild(liveEl);

      return liveEl;
    }

  }

  LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {
    return new (t || LiveAnnouncer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
  };

  LiveAnnouncer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: LiveAnnouncer,
    factory: LiveAnnouncer.ɵfac,
    providedIn: 'root'
  });
  return LiveAnnouncer;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
 * with a wider range of browsers and screen readers.
 */


let CdkAriaLive = /*#__PURE__*/(() => {
  class CdkAriaLive {
    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
      this._elementRef = _elementRef;
      this._liveAnnouncer = _liveAnnouncer;
      this._contentObserver = _contentObserver;
      this._ngZone = _ngZone;
      this._politeness = 'polite';
    }
    /** The aria-live politeness level to use when announcing messages. */


    get politeness() {
      return this._politeness;
    }

    set politeness(value) {
      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';

      if (this._politeness === 'off') {
        if (this._subscription) {
          this._subscription.unsubscribe();

          this._subscription = null;
        }
      } else if (!this._subscription) {
        this._subscription = this._ngZone.runOutsideAngular(() => {
          return this._contentObserver.observe(this._elementRef).subscribe(() => {
            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
            const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute
            // changes which we don't want to announce.

            if (elementText !== this._previousAnnouncedText) {
              this._liveAnnouncer.announce(elementText, this._politeness);

              this._previousAnnouncedText = elementText;
            }
          });
        });
      }
    }

    ngOnDestroy() {
      if (this._subscription) {
        this._subscription.unsubscribe();
      }
    }

  }

  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {
    return new (t || CdkAriaLive)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
  };

  CdkAriaLive.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: CdkAriaLive,
    selectors: [["", "cdkAriaLive", ""]],
    inputs: {
      politeness: ["cdkAriaLive", "politeness"]
    },
    exportAs: ["cdkAriaLive"]
  });
  return CdkAriaLive;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** InjectionToken for FocusMonitorOptions. */


const FOCUS_MONITOR_DEFAULT_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-focus-monitor-default-options');
/**
 * Event listener options that enable capturing and also
 * mark the listener as passive if the browser supports it.
 */

const captureEventListenerOptions = /*#__PURE__*/(0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.normalizePassiveListenerOptions)({
  passive: true,
  capture: true
});
/** Monitors mouse and keyboard events to determine the cause of focus events. */

let FocusMonitor = /*#__PURE__*/(() => {
  class FocusMonitor {
    constructor(_ngZone, _platform, _inputModalityDetector,
    /** @breaking-change 11.0.0 make document required */
    document, options) {
      this._ngZone = _ngZone;
      this._platform = _platform;
      this._inputModalityDetector = _inputModalityDetector;
      /** The focus origin that the next focus event is a result of. */

      this._origin = null;
      /** Whether the window has just been focused. */

      this._windowFocused = false;
      /**
       * Whether the origin was determined via a touch interaction. Necessary as properly attributing
       * focus events to touch interactions requires special logic.
       */

      this._originFromTouchInteraction = false;
      /** Map of elements being monitored to their info. */

      this._elementInfo = new Map();
      /** The number of elements currently being monitored. */

      this._monitoredElementCount = 0;
      /**
       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,
       * as well as the number of monitored elements that they contain. We have to treat focus/blur
       * handlers differently from the rest of the events, because the browser won't emit events
       * to the document when focus moves inside of a shadow root.
       */

      this._rootNodeFocusListenerCount = new Map();
      /**
       * Event listener for `focus` events on the window.
       * Needs to be an arrow function in order to preserve the context when it gets bound.
       */

      this._windowFocusListener = () => {
        // Make a note of when the window regains focus, so we can
        // restore the origin info for the focused element.
        this._windowFocused = true;
        this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);
      };
      /** Subject for stopping our InputModalityDetector subscription. */


      this._stopInputModalityDetector = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
      /**
       * Event listener for `focus` and 'blur' events on the document.
       * Needs to be an arrow function in order to preserve the context when it gets bound.
       */

      this._rootNodeFocusAndBlurListener = event => {
        const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);

        const handler = event.type === 'focus' ? this._onFocus : this._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.

        for (let element = target; element; element = element.parentElement) {
          handler.call(this, event, element);
        }
      };

      this._document = document;
      this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0
      /* IMMEDIATE */
      ;
    }

    monitor(element, checkChildren = false) {
      const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.

      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(null);
      } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to
      // the shadow root, rather than the `document`, because the browser won't emit focus events
      // to the `document`, if focus is moving within the same shadow root.


      const rootNode = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getShadowRoot)(nativeElement) || this._getDocument();

      const cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.


      if (cachedInfo) {
        if (checkChildren) {
          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren
          // observers into ones that behave as if `checkChildren` was turned on. We need a more
          // robust solution.
          cachedInfo.checkChildren = true;
        }

        return cachedInfo.subject;
      } // Create monitored element info.


      const info = {
        checkChildren: checkChildren,
        subject: new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject(),
        rootNode
      };

      this._elementInfo.set(nativeElement, info);

      this._registerGlobalListeners(info);

      return info.subject;
    }

    stopMonitoring(element) {
      const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);

      const elementInfo = this._elementInfo.get(nativeElement);

      if (elementInfo) {
        elementInfo.subject.complete();

        this._setClasses(nativeElement);

        this._elementInfo.delete(nativeElement);

        this._removeGlobalListeners(elementInfo);
      }
    }

    focusVia(element, origin, options) {
      const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);

      const focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener
      // which means that the focus classes won't be updated. If that's the case, update the classes
      // directly without waiting for an event.


      if (nativeElement === focusedElement) {
        this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));
      } else {
        this._setOrigin(origin); // `focus` isn't available on the server


        if (typeof nativeElement.focus === 'function') {
          nativeElement.focus(options);
        }
      }
    }

    ngOnDestroy() {
      this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));
    }
    /** Access injected document if available or fallback to global document reference */


    _getDocument() {
      return this._document || document;
    }
    /** Use defaultView of injected document if available or fallback to global window reference */


    _getWindow() {
      const doc = this._getDocument();

      return doc.defaultView || window;
    }

    _getFocusOrigin(focusEventTarget) {
      if (this._origin) {
        // If the origin was realized via a touch interaction, we need to perform additional checks
        // to determine whether the focus origin should be attributed to touch or program.
        if (this._originFromTouchInteraction) {
          return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';
        } else {
          return this._origin;
        }
      } // If the window has just regained focus, we can restore the most recent origin from before the
      // window blurred. Otherwise, we've reached the point where we can't identify the source of the
      // focus. This typically means one of two things happened:
      //
      // 1) The element was programmatically focused, or
      // 2) The element was focused via screen reader navigation (which generally doesn't fire
      //    events).
      //
      // Because we can't distinguish between these two cases, we default to setting `program`.


      return this._windowFocused && this._lastFocusOrigin ? this._lastFocusOrigin : 'program';
    }
    /**
     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a
     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we
     * handle a focus event following a touch interaction, we need to determine whether (1) the focus
     * event was directly caused by the touch interaction or (2) the focus event was caused by a
     * subsequent programmatic focus call triggered by the touch interaction.
     * @param focusEventTarget The target of the focus event under examination.
     */


    _shouldBeAttributedToTouch(focusEventTarget) {
      // Please note that this check is not perfect. Consider the following edge case:
      //
      // <div #parent tabindex="0">
      //   <div #child tabindex="0" (click)="#parent.focus()"></div>
      // </div>
      //
      // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches
      // #child, #parent is programmatically focused. This code will attribute the focus to touch
      // instead of program. This is a relatively minor edge-case that can be worked around by using
      // focusVia(parent, 'program') to focus #parent.
      return this._detectionMode === 1
      /* EVENTUAL */
      || !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));
    }
    /**
     * Sets the focus classes on the element based on the given focus origin.
     * @param element The element to update the classes on.
     * @param origin The focus origin.
     */


    _setClasses(element, origin) {
      element.classList.toggle('cdk-focused', !!origin);
      element.classList.toggle('cdk-touch-focused', origin === 'touch');
      element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');
      element.classList.toggle('cdk-mouse-focused', origin === 'mouse');
      element.classList.toggle('cdk-program-focused', origin === 'program');
    }
    /**
     * Updates the focus origin. If we're using immediate detection mode, we schedule an async
     * function to clear the origin at the end of a timeout. The duration of the timeout depends on
     * the origin being set.
     * @param origin The origin to set.
     * @param isFromInteraction Whether we are setting the origin from an interaction event.
     */


    _setOrigin(origin, isFromInteraction = false) {
      this._ngZone.runOutsideAngular(() => {
        this._origin = origin;
        this._originFromTouchInteraction = origin === 'touch' && isFromInteraction; // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms
        // for a touch event). We reset the origin at the next tick because Firefox focuses one tick
        // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for
        // a touch event because when a touch event is fired, the associated focus event isn't yet in
        // the event queue. Before doing so, clear any pending timeouts.

        if (this._detectionMode === 0
        /* IMMEDIATE */
        ) {
          clearTimeout(this._originTimeoutId);
          const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;
          this._originTimeoutId = setTimeout(() => this._origin = null, ms);
        }
      });
    }
    /**
     * Handles focus events on a registered element.
     * @param event The focus event.
     * @param element The monitored element.
     */


    _onFocus(event, element) {
      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
      // focus event affecting the monitored element. If we want to use the origin of the first event
      // instead we should check for the cdk-focused class here and return if the element already has
      // it. (This only matters for elements that have includesChildren = true).
      // If we are not counting child-element-focus as focused, make sure that the event target is the
      // monitored element itself.
      const elementInfo = this._elementInfo.get(element);

      const focusEventTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);

      if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {
        return;
      }

      this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);
    }
    /**
     * Handles blur events on a registered element.
     * @param event The blur event.
     * @param element The monitored element.
     */


    _onBlur(event, element) {
      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
      // order to focus another child of the monitored element.
      const elementInfo = this._elementInfo.get(element);

      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
        return;
      }

      this._setClasses(element);

      this._emitOrigin(elementInfo.subject, null);
    }

    _emitOrigin(subject, origin) {
      this._ngZone.run(() => subject.next(origin));
    }

    _registerGlobalListeners(elementInfo) {
      if (!this._platform.isBrowser) {
        return;
      }

      const rootNode = elementInfo.rootNode;
      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;

      if (!rootNodeFocusListeners) {
        this._ngZone.runOutsideAngular(() => {
          rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
          rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        });
      }

      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.


      if (++this._monitoredElementCount === 1) {
        // Note: we listen to events in the capture phase so we
        // can detect them even if the user stops propagation.
        this._ngZone.runOutsideAngular(() => {
          const window = this._getWindow();

          window.addEventListener('focus', this._windowFocusListener);
        }); // The InputModalityDetector is also just a collection of global listeners.


        this._inputModalityDetector.modalityDetected.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.takeUntil)(this._stopInputModalityDetector)).subscribe(modality => {
          this._setOrigin(modality, true
          /* isFromInteraction */
          );
        });
      }
    }

    _removeGlobalListeners(elementInfo) {
      const rootNode = elementInfo.rootNode;

      if (this._rootNodeFocusListenerCount.has(rootNode)) {
        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);

        if (rootNodeFocusListeners > 1) {
          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
        } else {
          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);

          this._rootNodeFocusListenerCount.delete(rootNode);
        }
      } // Unregister global listeners when last element is unmonitored.


      if (! --this._monitoredElementCount) {
        const window = this._getWindow();

        window.removeEventListener('focus', this._windowFocusListener); // Equivalently, stop our InputModalityDetector subscription.

        this._stopInputModalityDetector.next(); // Clear timeouts for all potentially pending timeouts to prevent the leaks.


        clearTimeout(this._windowFocusTimeoutId);
        clearTimeout(this._originTimeoutId);
      }
    }
    /** Updates all the state on an element once its focus origin has changed. */


    _originChanged(element, origin, elementInfo) {
      this._setClasses(element, origin);

      this._emitOrigin(elementInfo.subject, origin);

      this._lastFocusOrigin = origin;
    }
    /**
     * Collects the `MonitoredElementInfo` of a particular element and
     * all of its ancestors that have enabled `checkChildren`.
     * @param element Element from which to start the search.
     */


    _getClosestElementsInfo(element) {
      const results = [];

      this._elementInfo.forEach((info, currentElement) => {
        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {
          results.push([currentElement, info]);
        }
      });

      return results;
    }

  }

  FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {
    return new (t || FocusMonitor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InputModalityDetector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
  };

  FocusMonitor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: FocusMonitor,
    factory: FocusMonitor.ɵfac,
    providedIn: 'root'
  });
  return FocusMonitor;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
 * programmatically) and adds corresponding classes to the element.
 *
 * There are two variants of this directive:
 * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
 *    focused.
 * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
 */


let CdkMonitorFocus = /*#__PURE__*/(() => {
  class CdkMonitorFocus {
    constructor(_elementRef, _focusMonitor) {
      this._elementRef = _elementRef;
      this._focusMonitor = _focusMonitor;
      this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }

    ngAfterViewInit() {
      const element = this._elementRef.nativeElement;
      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));
    }

    ngOnDestroy() {
      this._focusMonitor.stopMonitoring(this._elementRef);

      if (this._monitorSubscription) {
        this._monitorSubscription.unsubscribe();
      }
    }

  }

  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {
    return new (t || CdkMonitorFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](FocusMonitor));
  };

  CdkMonitorFocus.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: CdkMonitorFocus,
    selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
    outputs: {
      cdkFocusChange: "cdkFocusChange"
    }
  });
  return CdkMonitorFocus;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** CSS class applied to the document body when in black-on-white high-contrast mode. */


const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';
/** CSS class applied to the document body when in white-on-black high-contrast mode. */

const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';
/** CSS class applied to the document body when in high-contrast mode. */

const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';
/**
 * Service to determine whether the browser is currently in a high-contrast-mode environment.
 *
 * Microsoft Windows supports an accessibility feature called "High Contrast Mode". This mode
 * changes the appearance of all applications, including web applications, to dramatically increase
 * contrast.
 *
 * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast
 * Mode. This service does not detect high-contrast mode as added by the Chrome "High Contrast"
 * browser extension.
 */

let HighContrastModeDetector = /*#__PURE__*/(() => {
  class HighContrastModeDetector {
    constructor(_platform, document) {
      this._platform = _platform;
      this._document = document;
    }
    /** Gets the current high-contrast-mode for the page. */


    getHighContrastMode() {
      if (!this._platform.isBrowser) {
        return 0
        /* NONE */
        ;
      } // Create a test element with an arbitrary background-color that is neither black nor
      // white; high-contrast mode will coerce the color to either black or white. Also ensure that
      // appending the test element to the DOM does not affect layout by absolutely positioning it


      const testElement = this._document.createElement('div');

      testElement.style.backgroundColor = 'rgb(1,2,3)';
      testElement.style.position = 'absolute';

      this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between
      // browsers. Once we get this color, we no longer need the test element. Access the `window`
      // via the document so we can fake it in tests. Note that we have extra null checks, because
      // this logic will likely run during app bootstrap and throwing can break the entire app.


      const documentWindow = this._document.defaultView || window;
      const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
      const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');
      testElement.remove();

      switch (computedColor) {
        case 'rgb(0,0,0)':
          return 2
          /* WHITE_ON_BLACK */
          ;

        case 'rgb(255,255,255)':
          return 1
          /* BLACK_ON_WHITE */
          ;
      }

      return 0
      /* NONE */
      ;
    }
    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */


    _applyBodyHighContrastModeCssClasses() {
      if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {
        const bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments

        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
        bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);
        bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);
        this._hasCheckedHighContrastMode = true;
        const mode = this.getHighContrastMode();

        if (mode === 1
        /* BLACK_ON_WHITE */
        ) {
          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
          bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);
        } else if (mode === 2
        /* WHITE_ON_BLACK */
        ) {
          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
          bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);
        }
      }
    }

  }

  HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {
    return new (t || HighContrastModeDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
  };

  HighContrastModeDetector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: HighContrastModeDetector,
    factory: HighContrastModeDetector.ɵfac,
    providedIn: 'root'
  });
  return HighContrastModeDetector;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let A11yModule = /*#__PURE__*/(() => {
  class A11yModule {
    constructor(highContrastModeDetector) {
      highContrastModeDetector._applyBodyHighContrastModeCssClasses();
    }

  }

  A11yModule.ɵfac = function A11yModule_Factory(t) {
    return new (t || A11yModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HighContrastModeDetector));
  };

  A11yModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: A11yModule
  });
  A11yModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ObserversModule]]
  });
  return A11yModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=a11y.mjs.map

/***/ }),

/***/ 226:
/*!*****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/bidi.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BidiModule": () => (/* binding */ BidiModule),
/* harmony export */   "DIR_DOCUMENT": () => (/* binding */ DIR_DOCUMENT),
/* harmony export */   "Dir": () => (/* binding */ Dir),
/* harmony export */   "Directionality": () => (/* binding */ Directionality)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 9808);



/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection token used to inject the document into Directionality.
 * This is used so that the value can be faked in tests.
 *
 * We can't use the real document in tests because changing the real `dir` causes geometry-based
 * tests in Safari to fail.
 *
 * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
 * themselves use things like `querySelector` in test code.
 *
 * This token is defined in a separate file from Directionality as a workaround for
 * https://github.com/angular/angular/issues/22559
 *
 * @docs-private
 */

const DIR_DOCUMENT = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-dir-doc', {
  providedIn: 'root',
  factory: DIR_DOCUMENT_FACTORY
});
/** @docs-private */

function DIR_DOCUMENT_FACTORY() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */


const RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
/** Resolves a string value to a specific direction. */

function _resolveDirectionality(rawValue) {
  const value = (rawValue === null || rawValue === void 0 ? void 0 : rawValue.toLowerCase()) || '';

  if (value === 'auto' && typeof navigator !== 'undefined' && (navigator === null || navigator === void 0 ? void 0 : navigator.language)) {
    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';
  }

  return value === 'rtl' ? 'rtl' : 'ltr';
}
/**
 * The directionality (LTR / RTL) context for the application (or a subtree of it).
 * Exposes the current direction and a stream of direction changes.
 */


let Directionality = /*#__PURE__*/(() => {
  class Directionality {
    constructor(_document) {
      /** The current 'ltr' or 'rtl' value. */
      this.value = 'ltr';
      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */

      this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();

      if (_document) {
        const bodyDir = _document.body ? _document.body.dir : null;
        const htmlDir = _document.documentElement ? _document.documentElement.dir : null;
        this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');
      }
    }

    ngOnDestroy() {
      this.change.complete();
    }

  }

  Directionality.ɵfac = function Directionality_Factory(t) {
    return new (t || Directionality)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DIR_DOCUMENT, 8));
  };

  Directionality.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: Directionality,
    factory: Directionality.ɵfac,
    providedIn: 'root'
  });
  return Directionality;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Directive to listen for changes of direction of part of the DOM.
 *
 * Provides itself as Directionality such that descendant directives only need to ever inject
 * Directionality to get the closest direction.
 */


let Dir = /*#__PURE__*/(() => {
  class Dir {
    constructor() {
      /** Normalized direction that accounts for invalid/unsupported values. */
      this._dir = 'ltr';
      /** Whether the `value` has been set to its initial value. */

      this._isInitialized = false;
      /** Event emitted when the direction changes. */

      this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }
    /** @docs-private */


    get dir() {
      return this._dir;
    }

    set dir(value) {
      const previousValue = this._dir; // Note: `_resolveDirectionality` resolves the language based on the browser's language,
      // whereas the browser does it based on the content of the element. Since doing so based
      // on the content can be expensive, for now we're doing the simpler matching.

      this._dir = _resolveDirectionality(value);
      this._rawDir = value;

      if (previousValue !== this._dir && this._isInitialized) {
        this.change.emit(this._dir);
      }
    }
    /** Current layout direction of the element. */


    get value() {
      return this.dir;
    }
    /** Initialize once default value has been set. */


    ngAfterContentInit() {
      this._isInitialized = true;
    }

    ngOnDestroy() {
      this.change.complete();
    }

  }

  Dir.ɵfac = function Dir_Factory(t) {
    return new (t || Dir)();
  };

  Dir.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: Dir,
    selectors: [["", "dir", ""]],
    hostVars: 1,
    hostBindings: function Dir_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("dir", ctx._rawDir);
      }
    },
    inputs: {
      dir: "dir"
    },
    outputs: {
      change: "dirChange"
    },
    exportAs: ["dir"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
      provide: Directionality,
      useExisting: Dir
    }])]
  });
  return Dir;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let BidiModule = /*#__PURE__*/(() => {
  class BidiModule {}

  BidiModule.ɵfac = function BidiModule_Factory(t) {
    return new (t || BidiModule)();
  };

  BidiModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: BidiModule
  });
  BidiModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return BidiModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=bidi.mjs.map

/***/ }),

/***/ 9277:
/*!****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/cdk.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VERSION": () => (/* binding */ VERSION)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Current version of the Angular Component Development Kit. */

const VERSION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

 //# sourceMappingURL=cdk.mjs.map

/***/ }),

/***/ 3191:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/coercion.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_isNumberValue": () => (/* binding */ _isNumberValue),
/* harmony export */   "coerceArray": () => (/* binding */ coerceArray),
/* harmony export */   "coerceBooleanProperty": () => (/* binding */ coerceBooleanProperty),
/* harmony export */   "coerceCssPixelValue": () => (/* binding */ coerceCssPixelValue),
/* harmony export */   "coerceElement": () => (/* binding */ coerceElement),
/* harmony export */   "coerceNumberProperty": () => (/* binding */ coerceNumberProperty),
/* harmony export */   "coerceStringArray": () => (/* binding */ coerceStringArray)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Coerces a data-bound value (typically a string) to a boolean. */

function coerceBooleanProperty(value) {
  return value != null && `${value}` !== 'false';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function coerceNumberProperty(value, fallbackValue = 0) {
  return _isNumberValue(value) ? Number(value) : fallbackValue;
}
/**
 * Whether the provided value is considered a number.
 * @docs-private
 */


function _isNumberValue(value) {
  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
  // and other non-number values as NaN, where Number just uses 0) but it considers the string
  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
  return !isNaN(parseFloat(value)) && !isNaN(Number(value));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function coerceArray(value) {
  return Array.isArray(value) ? value : [value];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Coerces a value to a CSS pixel value. */


function coerceCssPixelValue(value) {
  if (value == null) {
    return '';
  }

  return typeof value === 'string' ? value : `${value}px`;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Coerces an ElementRef or an Element into an element.
 * Useful for APIs that can accept either a ref or the native element itself.
 */


function coerceElement(elementOrRef) {
  return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? elementOrRef.nativeElement : elementOrRef;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Coerces a value to an array of trimmed non-empty strings.
 * Any input that is not an array, `null` or `undefined` will be turned into a string
 * via `toString()` and subsequently split with the given separator.
 * `null` and `undefined` will result in an empty array.
 * This results in the following outcomes:
 * - `null` -&gt; `[]`
 * - `[null]` -&gt; `["null"]`
 * - `["a", "b ", " "]` -&gt; `["a", "b"]`
 * - `[1, [2, 3]]` -&gt; `["1", "2,3"]`
 * - `[{ a: 0 }]` -&gt; `["[object Object]"]`
 * - `{ a: 0 }` -&gt; `["[object", "Object]"]`
 *
 * Useful for defining CSS classes or table columns.
 * @param value the value to coerce into an array of strings
 * @param separator split-separator if value isn't an array
 */


function coerceStringArray(value, separator = /\s+/) {
  const result = [];

  if (value != null) {
    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);

    for (const sourceValue of sourceValues) {
      const trimmedString = `${sourceValue}`.trim();

      if (trimmedString) {
        result.push(trimmedString);
      }
    }
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


 //# sourceMappingURL=coercion.mjs.map

/***/ }),

/***/ 1159:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/keycodes.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ A),
/* harmony export */   "ALT": () => (/* binding */ ALT),
/* harmony export */   "APOSTROPHE": () => (/* binding */ APOSTROPHE),
/* harmony export */   "AT_SIGN": () => (/* binding */ AT_SIGN),
/* harmony export */   "B": () => (/* binding */ B),
/* harmony export */   "BACKSLASH": () => (/* binding */ BACKSLASH),
/* harmony export */   "BACKSPACE": () => (/* binding */ BACKSPACE),
/* harmony export */   "C": () => (/* binding */ C),
/* harmony export */   "CAPS_LOCK": () => (/* binding */ CAPS_LOCK),
/* harmony export */   "CLOSE_SQUARE_BRACKET": () => (/* binding */ CLOSE_SQUARE_BRACKET),
/* harmony export */   "COMMA": () => (/* binding */ COMMA),
/* harmony export */   "CONTEXT_MENU": () => (/* binding */ CONTEXT_MENU),
/* harmony export */   "CONTROL": () => (/* binding */ CONTROL),
/* harmony export */   "D": () => (/* binding */ D),
/* harmony export */   "DASH": () => (/* binding */ DASH),
/* harmony export */   "DELETE": () => (/* binding */ DELETE),
/* harmony export */   "DOWN_ARROW": () => (/* binding */ DOWN_ARROW),
/* harmony export */   "E": () => (/* binding */ E),
/* harmony export */   "EIGHT": () => (/* binding */ EIGHT),
/* harmony export */   "END": () => (/* binding */ END),
/* harmony export */   "ENTER": () => (/* binding */ ENTER),
/* harmony export */   "EQUALS": () => (/* binding */ EQUALS),
/* harmony export */   "ESCAPE": () => (/* binding */ ESCAPE),
/* harmony export */   "F": () => (/* binding */ F),
/* harmony export */   "F1": () => (/* binding */ F1),
/* harmony export */   "F10": () => (/* binding */ F10),
/* harmony export */   "F11": () => (/* binding */ F11),
/* harmony export */   "F12": () => (/* binding */ F12),
/* harmony export */   "F2": () => (/* binding */ F2),
/* harmony export */   "F3": () => (/* binding */ F3),
/* harmony export */   "F4": () => (/* binding */ F4),
/* harmony export */   "F5": () => (/* binding */ F5),
/* harmony export */   "F6": () => (/* binding */ F6),
/* harmony export */   "F7": () => (/* binding */ F7),
/* harmony export */   "F8": () => (/* binding */ F8),
/* harmony export */   "F9": () => (/* binding */ F9),
/* harmony export */   "FF_EQUALS": () => (/* binding */ FF_EQUALS),
/* harmony export */   "FF_MINUS": () => (/* binding */ FF_MINUS),
/* harmony export */   "FF_MUTE": () => (/* binding */ FF_MUTE),
/* harmony export */   "FF_SEMICOLON": () => (/* binding */ FF_SEMICOLON),
/* harmony export */   "FF_VOLUME_DOWN": () => (/* binding */ FF_VOLUME_DOWN),
/* harmony export */   "FF_VOLUME_UP": () => (/* binding */ FF_VOLUME_UP),
/* harmony export */   "FIRST_MEDIA": () => (/* binding */ FIRST_MEDIA),
/* harmony export */   "FIVE": () => (/* binding */ FIVE),
/* harmony export */   "FOUR": () => (/* binding */ FOUR),
/* harmony export */   "G": () => (/* binding */ G),
/* harmony export */   "H": () => (/* binding */ H),
/* harmony export */   "HOME": () => (/* binding */ HOME),
/* harmony export */   "I": () => (/* binding */ I),
/* harmony export */   "INSERT": () => (/* binding */ INSERT),
/* harmony export */   "J": () => (/* binding */ J),
/* harmony export */   "K": () => (/* binding */ K),
/* harmony export */   "L": () => (/* binding */ L),
/* harmony export */   "LAST_MEDIA": () => (/* binding */ LAST_MEDIA),
/* harmony export */   "LEFT_ARROW": () => (/* binding */ LEFT_ARROW),
/* harmony export */   "M": () => (/* binding */ M),
/* harmony export */   "MAC_ENTER": () => (/* binding */ MAC_ENTER),
/* harmony export */   "MAC_META": () => (/* binding */ MAC_META),
/* harmony export */   "MAC_WK_CMD_LEFT": () => (/* binding */ MAC_WK_CMD_LEFT),
/* harmony export */   "MAC_WK_CMD_RIGHT": () => (/* binding */ MAC_WK_CMD_RIGHT),
/* harmony export */   "META": () => (/* binding */ META),
/* harmony export */   "MUTE": () => (/* binding */ MUTE),
/* harmony export */   "N": () => (/* binding */ N),
/* harmony export */   "NINE": () => (/* binding */ NINE),
/* harmony export */   "NUMPAD_DIVIDE": () => (/* binding */ NUMPAD_DIVIDE),
/* harmony export */   "NUMPAD_EIGHT": () => (/* binding */ NUMPAD_EIGHT),
/* harmony export */   "NUMPAD_FIVE": () => (/* binding */ NUMPAD_FIVE),
/* harmony export */   "NUMPAD_FOUR": () => (/* binding */ NUMPAD_FOUR),
/* harmony export */   "NUMPAD_MINUS": () => (/* binding */ NUMPAD_MINUS),
/* harmony export */   "NUMPAD_MULTIPLY": () => (/* binding */ NUMPAD_MULTIPLY),
/* harmony export */   "NUMPAD_NINE": () => (/* binding */ NUMPAD_NINE),
/* harmony export */   "NUMPAD_ONE": () => (/* binding */ NUMPAD_ONE),
/* harmony export */   "NUMPAD_PERIOD": () => (/* binding */ NUMPAD_PERIOD),
/* harmony export */   "NUMPAD_PLUS": () => (/* binding */ NUMPAD_PLUS),
/* harmony export */   "NUMPAD_SEVEN": () => (/* binding */ NUMPAD_SEVEN),
/* harmony export */   "NUMPAD_SIX": () => (/* binding */ NUMPAD_SIX),
/* harmony export */   "NUMPAD_THREE": () => (/* binding */ NUMPAD_THREE),
/* harmony export */   "NUMPAD_TWO": () => (/* binding */ NUMPAD_TWO),
/* harmony export */   "NUMPAD_ZERO": () => (/* binding */ NUMPAD_ZERO),
/* harmony export */   "NUM_CENTER": () => (/* binding */ NUM_CENTER),
/* harmony export */   "NUM_LOCK": () => (/* binding */ NUM_LOCK),
/* harmony export */   "O": () => (/* binding */ O),
/* harmony export */   "ONE": () => (/* binding */ ONE),
/* harmony export */   "OPEN_SQUARE_BRACKET": () => (/* binding */ OPEN_SQUARE_BRACKET),
/* harmony export */   "P": () => (/* binding */ P),
/* harmony export */   "PAGE_DOWN": () => (/* binding */ PAGE_DOWN),
/* harmony export */   "PAGE_UP": () => (/* binding */ PAGE_UP),
/* harmony export */   "PAUSE": () => (/* binding */ PAUSE),
/* harmony export */   "PERIOD": () => (/* binding */ PERIOD),
/* harmony export */   "PLUS_SIGN": () => (/* binding */ PLUS_SIGN),
/* harmony export */   "PRINT_SCREEN": () => (/* binding */ PRINT_SCREEN),
/* harmony export */   "Q": () => (/* binding */ Q),
/* harmony export */   "QUESTION_MARK": () => (/* binding */ QUESTION_MARK),
/* harmony export */   "R": () => (/* binding */ R),
/* harmony export */   "RIGHT_ARROW": () => (/* binding */ RIGHT_ARROW),
/* harmony export */   "S": () => (/* binding */ S),
/* harmony export */   "SCROLL_LOCK": () => (/* binding */ SCROLL_LOCK),
/* harmony export */   "SEMICOLON": () => (/* binding */ SEMICOLON),
/* harmony export */   "SEVEN": () => (/* binding */ SEVEN),
/* harmony export */   "SHIFT": () => (/* binding */ SHIFT),
/* harmony export */   "SINGLE_QUOTE": () => (/* binding */ SINGLE_QUOTE),
/* harmony export */   "SIX": () => (/* binding */ SIX),
/* harmony export */   "SLASH": () => (/* binding */ SLASH),
/* harmony export */   "SPACE": () => (/* binding */ SPACE),
/* harmony export */   "T": () => (/* binding */ T),
/* harmony export */   "TAB": () => (/* binding */ TAB),
/* harmony export */   "THREE": () => (/* binding */ THREE),
/* harmony export */   "TILDE": () => (/* binding */ TILDE),
/* harmony export */   "TWO": () => (/* binding */ TWO),
/* harmony export */   "U": () => (/* binding */ U),
/* harmony export */   "UP_ARROW": () => (/* binding */ UP_ARROW),
/* harmony export */   "V": () => (/* binding */ V),
/* harmony export */   "VOLUME_DOWN": () => (/* binding */ VOLUME_DOWN),
/* harmony export */   "VOLUME_UP": () => (/* binding */ VOLUME_UP),
/* harmony export */   "W": () => (/* binding */ W),
/* harmony export */   "X": () => (/* binding */ X),
/* harmony export */   "Y": () => (/* binding */ Y),
/* harmony export */   "Z": () => (/* binding */ Z),
/* harmony export */   "ZERO": () => (/* binding */ ZERO),
/* harmony export */   "hasModifierKey": () => (/* binding */ hasModifierKey)
/* harmony export */ });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const MAC_ENTER = 3;
const BACKSPACE = 8;
const TAB = 9;
const NUM_CENTER = 12;
const ENTER = 13;
const SHIFT = 16;
const CONTROL = 17;
const ALT = 18;
const PAUSE = 19;
const CAPS_LOCK = 20;
const ESCAPE = 27;
const SPACE = 32;
const PAGE_UP = 33;
const PAGE_DOWN = 34;
const END = 35;
const HOME = 36;
const LEFT_ARROW = 37;
const UP_ARROW = 38;
const RIGHT_ARROW = 39;
const DOWN_ARROW = 40;
const PLUS_SIGN = 43;
const PRINT_SCREEN = 44;
const INSERT = 45;
const DELETE = 46;
const ZERO = 48;
const ONE = 49;
const TWO = 50;
const THREE = 51;
const FOUR = 52;
const FIVE = 53;
const SIX = 54;
const SEVEN = 55;
const EIGHT = 56;
const NINE = 57;
const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

const QUESTION_MARK = 63;
const AT_SIGN = 64;
const A = 65;
const B = 66;
const C = 67;
const D = 68;
const E = 69;
const F = 70;
const G = 71;
const H = 72;
const I = 73;
const J = 74;
const K = 75;
const L = 76;
const M = 77;
const N = 78;
const O = 79;
const P = 80;
const Q = 81;
const R = 82;
const S = 83;
const T = 84;
const U = 85;
const V = 86;
const W = 87;
const X = 88;
const Y = 89;
const Z = 90;
const META = 91; // WIN_KEY_LEFT

const MAC_WK_CMD_LEFT = 91;
const MAC_WK_CMD_RIGHT = 93;
const CONTEXT_MENU = 93;
const NUMPAD_ZERO = 96;
const NUMPAD_ONE = 97;
const NUMPAD_TWO = 98;
const NUMPAD_THREE = 99;
const NUMPAD_FOUR = 100;
const NUMPAD_FIVE = 101;
const NUMPAD_SIX = 102;
const NUMPAD_SEVEN = 103;
const NUMPAD_EIGHT = 104;
const NUMPAD_NINE = 105;
const NUMPAD_MULTIPLY = 106;
const NUMPAD_PLUS = 107;
const NUMPAD_MINUS = 109;
const NUMPAD_PERIOD = 110;
const NUMPAD_DIVIDE = 111;
const F1 = 112;
const F2 = 113;
const F3 = 114;
const F4 = 115;
const F5 = 116;
const F6 = 117;
const F7 = 118;
const F8 = 119;
const F9 = 120;
const F10 = 121;
const F11 = 122;
const F12 = 123;
const NUM_LOCK = 144;
const SCROLL_LOCK = 145;
const FIRST_MEDIA = 166;
const FF_MINUS = 173;
const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

const FF_MUTE = 181;
const FF_VOLUME_DOWN = 182;
const LAST_MEDIA = 183;
const FF_VOLUME_UP = 183;
const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

const COMMA = 188;
const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

const PERIOD = 190;
const SLASH = 191;
const APOSTROPHE = 192;
const TILDE = 192;
const OPEN_SQUARE_BRACKET = 219;
const BACKSLASH = 220;
const CLOSE_SQUARE_BRACKET = 221;
const SINGLE_QUOTE = 222;
const MAC_META = 224;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Checks whether a modifier key is pressed.
 * @param event Event to be checked.
 */

function hasModifierKey(event, ...modifiers) {
  if (modifiers.length) {
    return modifiers.some(modifier => event[modifier]);
  }

  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=keycodes.mjs.map

/***/ }),

/***/ 7144:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/observers.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkObserveContent": () => (/* binding */ CdkObserveContent),
/* harmony export */   "ContentObserver": () => (/* binding */ ContentObserver),
/* harmony export */   "MutationObserverFactory": () => (/* binding */ MutationObserverFactory),
/* harmony export */   "ObserversModule": () => (/* binding */ ObserversModule)
/* harmony export */ });
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ 3191);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 9751);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 8372);





/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
 * @docs-private
 */

let MutationObserverFactory = /*#__PURE__*/(() => {
  class MutationObserverFactory {
    create(callback) {
      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
    }

  }

  MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {
    return new (t || MutationObserverFactory)();
  };

  MutationObserverFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: MutationObserverFactory,
    factory: MutationObserverFactory.ɵfac,
    providedIn: 'root'
  });
  return MutationObserverFactory;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** An injectable service that allows watching elements for changes to their content. */


let ContentObserver = /*#__PURE__*/(() => {
  class ContentObserver {
    constructor(_mutationObserverFactory) {
      this._mutationObserverFactory = _mutationObserverFactory;
      /** Keeps track of the existing MutationObservers so they can be reused. */

      this._observedElements = new Map();
    }

    ngOnDestroy() {
      this._observedElements.forEach((_, element) => this._cleanupObserver(element));
    }

    observe(elementOrRef) {
      const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(elementOrRef);
      return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
        const stream = this._observeElement(element);

        const subscription = stream.subscribe(observer);
        return () => {
          subscription.unsubscribe();

          this._unobserveElement(element);
        };
      });
    }
    /**
     * Observes the given element by using the existing MutationObserver if available, or creating a
     * new one if not.
     */


    _observeElement(element) {
      if (!this._observedElements.has(element)) {
        const stream = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();

        const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));

        if (observer) {
          observer.observe(element, {
            characterData: true,
            childList: true,
            subtree: true
          });
        }

        this._observedElements.set(element, {
          observer,
          stream,
          count: 1
        });
      } else {
        this._observedElements.get(element).count++;
      }

      return this._observedElements.get(element).stream;
    }
    /**
     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
     * observing this element.
     */


    _unobserveElement(element) {
      if (this._observedElements.has(element)) {
        this._observedElements.get(element).count--;

        if (!this._observedElements.get(element).count) {
          this._cleanupObserver(element);
        }
      }
    }
    /** Clean up the underlying MutationObserver for the specified element. */


    _cleanupObserver(element) {
      if (this._observedElements.has(element)) {
        const {
          observer,
          stream
        } = this._observedElements.get(element);

        if (observer) {
          observer.disconnect();
        }

        stream.complete();

        this._observedElements.delete(element);
      }
    }

  }

  ContentObserver.ɵfac = function ContentObserver_Factory(t) {
    return new (t || ContentObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MutationObserverFactory));
  };

  ContentObserver.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: ContentObserver,
    factory: ContentObserver.ɵfac,
    providedIn: 'root'
  });
  return ContentObserver;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Directive that triggers a callback whenever the content of
 * its associated element has changed.
 */


let CdkObserveContent = /*#__PURE__*/(() => {
  class CdkObserveContent {
    constructor(_contentObserver, _elementRef, _ngZone) {
      this._contentObserver = _contentObserver;
      this._elementRef = _elementRef;
      this._ngZone = _ngZone;
      /** Event emitted for each change in the element's content. */

      this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this._disabled = false;
      this._currentSubscription = null;
    }
    /**
     * Whether observing content is disabled. This option can be used
     * to disconnect the underlying MutationObserver until it is needed.
     */


    get disabled() {
      return this._disabled;
    }

    set disabled(value) {
      this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
      this._disabled ? this._unsubscribe() : this._subscribe();
    }
    /** Debounce interval for emitting the changes. */


    get debounce() {
      return this._debounce;
    }

    set debounce(value) {
      this._debounce = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceNumberProperty)(value);

      this._subscribe();
    }

    ngAfterContentInit() {
      if (!this._currentSubscription && !this.disabled) {
        this._subscribe();
      }
    }

    ngOnDestroy() {
      this._unsubscribe();
    }

    _subscribe() {
      this._unsubscribe();

      const stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
      // Consider brining it back inside the zone next time we're making breaking changes.
      // Bringing it back inside can cause things like infinite change detection loops and changed
      // after checked errors if people's code isn't handling it properly.


      this._ngZone.runOutsideAngular(() => {
        this._currentSubscription = (this.debounce ? stream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.debounceTime)(this.debounce)) : stream).subscribe(this.event);
      });
    }

    _unsubscribe() {
      var _a;

      (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }

  }

  CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {
    return new (t || CdkObserveContent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
  };

  CdkObserveContent.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: CdkObserveContent,
    selectors: [["", "cdkObserveContent", ""]],
    inputs: {
      disabled: ["cdkObserveContentDisabled", "disabled"],
      debounce: "debounce"
    },
    outputs: {
      event: "cdkObserveContent"
    },
    exportAs: ["cdkObserveContent"]
  });
  return CdkObserveContent;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let ObserversModule = /*#__PURE__*/(() => {
  class ObserversModule {}

  ObserversModule.ɵfac = function ObserversModule_Factory(t) {
    return new (t || ObserversModule)();
  };

  ObserversModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: ObserversModule
  });
  ObserversModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    providers: [MutationObserverFactory]
  });
  return ObserversModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=observers.mjs.map

/***/ }),

/***/ 925:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2015/platform.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": () => (/* binding */ Platform),
/* harmony export */   "PlatformModule": () => (/* binding */ PlatformModule),
/* harmony export */   "_getEventTarget": () => (/* binding */ _getEventTarget),
/* harmony export */   "_getFocusedElementPierceShadowDom": () => (/* binding */ _getFocusedElementPierceShadowDom),
/* harmony export */   "_getShadowRoot": () => (/* binding */ _getShadowRoot),
/* harmony export */   "_isTestEnvironment": () => (/* binding */ _isTestEnvironment),
/* harmony export */   "_supportsShadowDom": () => (/* binding */ _supportsShadowDom),
/* harmony export */   "getRtlScrollAxisType": () => (/* binding */ getRtlScrollAxisType),
/* harmony export */   "getSupportedInputTypes": () => (/* binding */ getSupportedInputTypes),
/* harmony export */   "normalizePassiveListenerOptions": () => (/* binding */ normalizePassiveListenerOptions),
/* harmony export */   "supportsPassiveEventListeners": () => (/* binding */ supportsPassiveEventListeners),
/* harmony export */   "supportsScrollBehavior": () => (/* binding */ supportsScrollBehavior)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ 9808);



/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Whether the current platform supports the V8 Break Iterator. The V8 check
// is necessary to detect all Blink based browsers.

let hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
// cause IE to throw. These cases are tied to particular versions of Windows and can happen if
// the consumer is providing a polyfilled `Map`. See:
// https://github.com/Microsoft/ChakraCore/issues/3189
// https://github.com/angular/components/issues/15687

try {
  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;
} catch (_a) {
  hasV8BreakIterator = false;
}
/**
 * Service to detect the current platform by comparing the userAgent strings and
 * checking browser-specific global properties.
 */


let Platform = /*#__PURE__*/(() => {
  class Platform {
    constructor(_platformId) {
      this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed
      // without the navigator, the following checks will fail. This is preferred because
      // sometimes the Document may be shimmed without the user's knowledge or intention

      /** Whether the Angular application is being rendered in the browser. */

      this.isBrowser = this._platformId ? (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__.isPlatformBrowser)(this._platformId) : typeof document === 'object' && !!document;
      /** Whether the current browser is Microsoft Edge. */

      this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
      /** Whether the current rendering engine is Microsoft Trident. */

      this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.

      /** Whether the current rendering engine is Blink. */

      this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
      // ensure that Webkit runs standalone and is not used as another engine's base.

      /** Whether the current rendering engine is WebKit. */

      this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
      /** Whether the current platform is Apple iOS. */

      this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify
      // them self as Gecko-like browsers and modify the userAgent's according to that.
      // Since we only cover one explicit Firefox case, we can simply check for Firefox
      // instead of having an unstable check for Gecko.

      /** Whether the current browser is Firefox. */

      this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
      /** Whether the current platform is Android. */
      // Trident on mobile adds the android platform to the userAgent to trick detections.

      this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
      // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
      // Safari browser should also use Webkit as its layout engine.

      /** Whether the current browser is Safari. */

      this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
    }

  }

  Platform.ɵfac = function Platform_Factory(t) {
    return new (t || Platform)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID));
  };

  Platform.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: Platform,
    factory: Platform.ɵfac,
    providedIn: 'root'
  });
  return Platform;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let PlatformModule = /*#__PURE__*/(() => {
  class PlatformModule {}

  PlatformModule.ɵfac = function PlatformModule_Factory(t) {
    return new (t || PlatformModule)();
  };

  PlatformModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: PlatformModule
  });
  PlatformModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
  return PlatformModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result Set of input types support by the current browser. */


let supportedInputTypes;
/** Types of `<input>` that *might* be supported. */

const candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
// first changing it to something else:
// The specified value "" does not conform to the required format.
// The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
/** @returns The input types supported by this browser. */

function getSupportedInputTypes() {
  // Result is cached.
  if (supportedInputTypes) {
    return supportedInputTypes;
  } // We can't check if an input type is not supported until we're on the browser, so say that
  // everything is supported when not on the browser. We don't use `Platform` here since it's
  // just a helper function and can't inject it.


  if (typeof document !== 'object' || !document) {
    supportedInputTypes = new Set(candidateInputTypes);
    return supportedInputTypes;
  }

  let featureTestInput = document.createElement('input');
  supportedInputTypes = new Set(candidateInputTypes.filter(value => {
    featureTestInput.setAttribute('type', value);
    return featureTestInput.type === value;
  }));
  return supportedInputTypes;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result of whether the user's browser supports passive event listeners. */


let supportsPassiveEvents;
/**
 * Checks whether the user's browser supports passive event listeners.
 * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
 */

function supportsPassiveEventListeners() {
  if (supportsPassiveEvents == null && typeof window !== 'undefined') {
    try {
      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
        get: () => supportsPassiveEvents = true
      }));
    } finally {
      supportsPassiveEvents = supportsPassiveEvents || false;
    }
  }

  return supportsPassiveEvents;
}
/**
 * Normalizes an `AddEventListener` object to something that can be passed
 * to `addEventListener` on any browser, no matter whether it supports the
 * `options` parameter.
 * @param options Object to be normalized.
 */


function normalizePassiveListenerOptions(options) {
  return supportsPassiveEventListeners() ? options : !!options.capture;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */


let rtlScrollAxisType;
/** Cached result of the check that indicates whether the browser supports scroll behaviors. */

let scrollBehaviorSupported;
/** Check whether the browser supports scroll behaviors. */

function supportsScrollBehavior() {
  if (scrollBehaviorSupported == null) {
    // If we're not in the browser, it can't be supported. Also check for `Element`, because
    // some projects stub out the global `document` during SSR which can throw us off.
    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {
      scrollBehaviorSupported = false;
      return scrollBehaviorSupported;
    } // If the element can have a `scrollBehavior` style, we can be sure that it's supported.


    if ('scrollBehavior' in document.documentElement.style) {
      scrollBehaviorSupported = true;
    } else {
      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's
      // supported but it doesn't handle scroll behavior, or it has been polyfilled.
      const scrollToFunction = Element.prototype.scrollTo;

      if (scrollToFunction) {
        // We can detect if the function has been polyfilled by calling `toString` on it. Native
        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get
        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider
        // polyfilled functions as supporting scroll behavior.
        scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
      } else {
        scrollBehaviorSupported = false;
      }
    }
  }

  return scrollBehaviorSupported;
}
/**
 * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
 * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
 */


function getRtlScrollAxisType() {
  // We can't check unless we're on the browser. Just assume 'normal' if we're not.
  if (typeof document !== 'object' || !document) {
    return 0
    /* NORMAL */
    ;
  }

  if (rtlScrollAxisType == null) {
    // Create a 1px wide scrolling container and a 2px wide content element.
    const scrollContainer = document.createElement('div');
    const containerStyle = scrollContainer.style;
    scrollContainer.dir = 'rtl';
    containerStyle.width = '1px';
    containerStyle.overflow = 'auto';
    containerStyle.visibility = 'hidden';
    containerStyle.pointerEvents = 'none';
    containerStyle.position = 'absolute';
    const content = document.createElement('div');
    const contentStyle = content.style;
    contentStyle.width = '2px';
    contentStyle.height = '1px';
    scrollContainer.appendChild(content);
    document.body.appendChild(scrollContainer);
    rtlScrollAxisType = 0
    /* NORMAL */
    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
    // dealing with one of the other two types of browsers.

    if (scrollContainer.scrollLeft === 0) {
      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
      // return 0 when we read it again.
      scrollContainer.scrollLeft = 1;
      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1
      /* NEGATED */
      : 2
      /* INVERTED */
      ;
    }

    scrollContainer.remove();
  }

  return rtlScrollAxisType;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let shadowDomIsSupported;
/** Checks whether the user's browser support Shadow DOM. */

function _supportsShadowDom() {
  if (shadowDomIsSupported == null) {
    const head = typeof document !== 'undefined' ? document.head : null;
    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
  }

  return shadowDomIsSupported;
}
/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */


function _getShadowRoot(element) {
  if (_supportsShadowDom()) {
    const rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some
    // teams have been able to hit this code path on unsupported browsers.

    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
      return rootNode;
    }
  }

  return null;
}
/**
 * Gets the currently-focused element on the page while
 * also piercing through Shadow DOM boundaries.
 */


function _getFocusedElementPierceShadowDom() {
  let activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;

  while (activeElement && activeElement.shadowRoot) {
    const newActiveElement = activeElement.shadowRoot.activeElement;

    if (newActiveElement === activeElement) {
      break;
    } else {
      activeElement = newActiveElement;
    }
  }

  return activeElement;
}
/** Gets the target of an event while accounting for Shadow DOM. */


function _getEventTarget(event) {
  // If an event is bound outside the Shadow DOM, the `event.target` will
  // point to the shadow root so we have to use `composedPath` instead.
  return event.composedPath ? event.composedPath()[0] : event.target;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Gets whether the code is currently running in a test environment. */


function _isTestEnvironment() {
  // We can't use `declare const` because it causes conflicts inside Google with the real typings
  // for these symbols and we can't read them off the global object, because they don't appear to
  // be attached there for some runners like Jest.
  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)
  return (// @ts-ignore
    typeof __karma__ !== 'undefined' && !!__karma__ || // @ts-ignore
    typeof jasmine !== 'undefined' && !!jasmine || // @ts-ignore
    typeof jest !== 'undefined' && !!jest || // @ts-ignore
    typeof Mocha !== 'undefined' && !!Mocha
  );
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=platform.mjs.map

/***/ }),

/***/ 9808:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/common/fesm2015/common.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "APP_BASE_HREF": () => (/* binding */ APP_BASE_HREF),
/* harmony export */   "AsyncPipe": () => (/* binding */ AsyncPipe),
/* harmony export */   "CommonModule": () => (/* binding */ CommonModule),
/* harmony export */   "CurrencyPipe": () => (/* binding */ CurrencyPipe),
/* harmony export */   "DATE_PIPE_DEFAULT_TIMEZONE": () => (/* binding */ DATE_PIPE_DEFAULT_TIMEZONE),
/* harmony export */   "DOCUMENT": () => (/* binding */ DOCUMENT),
/* harmony export */   "DatePipe": () => (/* binding */ DatePipe),
/* harmony export */   "DecimalPipe": () => (/* binding */ DecimalPipe),
/* harmony export */   "FormStyle": () => (/* binding */ FormStyle),
/* harmony export */   "FormatWidth": () => (/* binding */ FormatWidth),
/* harmony export */   "HashLocationStrategy": () => (/* binding */ HashLocationStrategy),
/* harmony export */   "I18nPluralPipe": () => (/* binding */ I18nPluralPipe),
/* harmony export */   "I18nSelectPipe": () => (/* binding */ I18nSelectPipe),
/* harmony export */   "JsonPipe": () => (/* binding */ JsonPipe),
/* harmony export */   "KeyValuePipe": () => (/* binding */ KeyValuePipe),
/* harmony export */   "LOCATION_INITIALIZED": () => (/* binding */ LOCATION_INITIALIZED),
/* harmony export */   "Location": () => (/* binding */ Location),
/* harmony export */   "LocationStrategy": () => (/* binding */ LocationStrategy),
/* harmony export */   "LowerCasePipe": () => (/* binding */ LowerCasePipe),
/* harmony export */   "NgClass": () => (/* binding */ NgClass),
/* harmony export */   "NgComponentOutlet": () => (/* binding */ NgComponentOutlet),
/* harmony export */   "NgForOf": () => (/* binding */ NgForOf),
/* harmony export */   "NgForOfContext": () => (/* binding */ NgForOfContext),
/* harmony export */   "NgIf": () => (/* binding */ NgIf),
/* harmony export */   "NgIfContext": () => (/* binding */ NgIfContext),
/* harmony export */   "NgLocaleLocalization": () => (/* binding */ NgLocaleLocalization),
/* harmony export */   "NgLocalization": () => (/* binding */ NgLocalization),
/* harmony export */   "NgPlural": () => (/* binding */ NgPlural),
/* harmony export */   "NgPluralCase": () => (/* binding */ NgPluralCase),
/* harmony export */   "NgStyle": () => (/* binding */ NgStyle),
/* harmony export */   "NgSwitch": () => (/* binding */ NgSwitch),
/* harmony export */   "NgSwitchCase": () => (/* binding */ NgSwitchCase),
/* harmony export */   "NgSwitchDefault": () => (/* binding */ NgSwitchDefault),
/* harmony export */   "NgTemplateOutlet": () => (/* binding */ NgTemplateOutlet),
/* harmony export */   "NumberFormatStyle": () => (/* binding */ NumberFormatStyle),
/* harmony export */   "NumberSymbol": () => (/* binding */ NumberSymbol),
/* harmony export */   "PathLocationStrategy": () => (/* binding */ PathLocationStrategy),
/* harmony export */   "PercentPipe": () => (/* binding */ PercentPipe),
/* harmony export */   "PlatformLocation": () => (/* binding */ PlatformLocation),
/* harmony export */   "Plural": () => (/* binding */ Plural),
/* harmony export */   "SlicePipe": () => (/* binding */ SlicePipe),
/* harmony export */   "TitleCasePipe": () => (/* binding */ TitleCasePipe),
/* harmony export */   "TranslationWidth": () => (/* binding */ TranslationWidth),
/* harmony export */   "UpperCasePipe": () => (/* binding */ UpperCasePipe),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "ViewportScroller": () => (/* binding */ ViewportScroller),
/* harmony export */   "WeekDay": () => (/* binding */ WeekDay),
/* harmony export */   "XhrFactory": () => (/* binding */ XhrFactory),
/* harmony export */   "formatCurrency": () => (/* binding */ formatCurrency),
/* harmony export */   "formatDate": () => (/* binding */ formatDate),
/* harmony export */   "formatNumber": () => (/* binding */ formatNumber),
/* harmony export */   "formatPercent": () => (/* binding */ formatPercent),
/* harmony export */   "getCurrencySymbol": () => (/* binding */ getCurrencySymbol),
/* harmony export */   "getLocaleCurrencyCode": () => (/* binding */ getLocaleCurrencyCode),
/* harmony export */   "getLocaleCurrencyName": () => (/* binding */ getLocaleCurrencyName),
/* harmony export */   "getLocaleCurrencySymbol": () => (/* binding */ getLocaleCurrencySymbol),
/* harmony export */   "getLocaleDateFormat": () => (/* binding */ getLocaleDateFormat),
/* harmony export */   "getLocaleDateTimeFormat": () => (/* binding */ getLocaleDateTimeFormat),
/* harmony export */   "getLocaleDayNames": () => (/* binding */ getLocaleDayNames),
/* harmony export */   "getLocaleDayPeriods": () => (/* binding */ getLocaleDayPeriods),
/* harmony export */   "getLocaleDirection": () => (/* binding */ getLocaleDirection),
/* harmony export */   "getLocaleEraNames": () => (/* binding */ getLocaleEraNames),
/* harmony export */   "getLocaleExtraDayPeriodRules": () => (/* binding */ getLocaleExtraDayPeriodRules),
/* harmony export */   "getLocaleExtraDayPeriods": () => (/* binding */ getLocaleExtraDayPeriods),
/* harmony export */   "getLocaleFirstDayOfWeek": () => (/* binding */ getLocaleFirstDayOfWeek),
/* harmony export */   "getLocaleId": () => (/* binding */ getLocaleId),
/* harmony export */   "getLocaleMonthNames": () => (/* binding */ getLocaleMonthNames),
/* harmony export */   "getLocaleNumberFormat": () => (/* binding */ getLocaleNumberFormat),
/* harmony export */   "getLocaleNumberSymbol": () => (/* binding */ getLocaleNumberSymbol),
/* harmony export */   "getLocalePluralCase": () => (/* binding */ getLocalePluralCase),
/* harmony export */   "getLocaleTimeFormat": () => (/* binding */ getLocaleTimeFormat),
/* harmony export */   "getLocaleWeekEndRange": () => (/* binding */ getLocaleWeekEndRange),
/* harmony export */   "getNumberOfCurrencyDigits": () => (/* binding */ getNumberOfCurrencyDigits),
/* harmony export */   "isPlatformBrowser": () => (/* binding */ isPlatformBrowser),
/* harmony export */   "isPlatformServer": () => (/* binding */ isPlatformServer),
/* harmony export */   "isPlatformWorkerApp": () => (/* binding */ isPlatformWorkerApp),
/* harmony export */   "isPlatformWorkerUi": () => (/* binding */ isPlatformWorkerUi),
/* harmony export */   "registerLocaleData": () => (/* binding */ registerLocaleData),
/* harmony export */   "ɵBrowserPlatformLocation": () => (/* binding */ BrowserPlatformLocation),
/* harmony export */   "ɵDomAdapter": () => (/* binding */ DomAdapter),
/* harmony export */   "ɵNullViewportScroller": () => (/* binding */ NullViewportScroller),
/* harmony export */   "ɵPLATFORM_BROWSER_ID": () => (/* binding */ PLATFORM_BROWSER_ID),
/* harmony export */   "ɵPLATFORM_SERVER_ID": () => (/* binding */ PLATFORM_SERVER_ID),
/* harmony export */   "ɵPLATFORM_WORKER_APP_ID": () => (/* binding */ PLATFORM_WORKER_APP_ID),
/* harmony export */   "ɵPLATFORM_WORKER_UI_ID": () => (/* binding */ PLATFORM_WORKER_UI_ID),
/* harmony export */   "ɵgetDOM": () => (/* binding */ getDOM),
/* harmony export */   "ɵparseCookieValue": () => (/* binding */ parseCookieValue),
/* harmony export */   "ɵsetRootDomAdapter": () => (/* binding */ setRootDomAdapter)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let _DOM = null;

function getDOM() {
  return _DOM;
}

function setDOM(adapter) {
  _DOM = adapter;
}

function setRootDomAdapter(adapter) {
  if (!_DOM) {
    _DOM = adapter;
  }
}
/* tslint:disable:requireParameterType */

/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */


class DomAdapter {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application in a Web Worker).
 *
 * @publicApi
 */


const DOCUMENT = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('DocumentToken');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This class should not be used directly by an application developer. Instead, use
 * {@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be
 * platform-agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms that Angular supports. For example, `@angular/platform-browser` provides an
 * implementation specific to the browser environment, while `@angular/platform-server` provides
 * one suitable for use with server-side rendering.
 *
 * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
 * when they need to interact with the DOM APIs like pushState, popState, etc.
 *
 * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
 * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
 * Router} /
 * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`
 * class, they are all platform-agnostic.
 *
 * @publicApi
 */

let PlatformLocation = /*#__PURE__*/(() => {
  class PlatformLocation {
    historyGo(relativePosition) {
      throw new Error('Not implemented');
    }

  }

  PlatformLocation.ɵfac = function PlatformLocation_Factory(t) {
    return new (t || PlatformLocation)();
  };

  PlatformLocation.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: PlatformLocation,
    factory: function () {
      return useBrowserPlatformLocation();
    },
    providedIn: 'platform'
  });
  return PlatformLocation;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function useBrowserPlatformLocation() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BrowserPlatformLocation);
}
/**
 * @description
 * Indicates when a location is initialized.
 *
 * @publicApi
 */


const LOCATION_INITIALIZED = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Location Initialized');
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {@link Location}.
 */

let BrowserPlatformLocation = /*#__PURE__*/(() => {
  class BrowserPlatformLocation extends PlatformLocation {
    constructor(_doc) {
      super();
      this._doc = _doc;

      this._init();
    } // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it

    /** @internal */


    _init() {
      this.location = window.location;
      this._history = window.history;
    }

    getBaseHrefFromDOM() {
      return getDOM().getBaseHref(this._doc);
    }

    onPopState(fn) {
      const window = getDOM().getGlobalEventTarget(this._doc, 'window');
      window.addEventListener('popstate', fn, false);
      return () => window.removeEventListener('popstate', fn);
    }

    onHashChange(fn) {
      const window = getDOM().getGlobalEventTarget(this._doc, 'window');
      window.addEventListener('hashchange', fn, false);
      return () => window.removeEventListener('hashchange', fn);
    }

    get href() {
      return this.location.href;
    }

    get protocol() {
      return this.location.protocol;
    }

    get hostname() {
      return this.location.hostname;
    }

    get port() {
      return this.location.port;
    }

    get pathname() {
      return this.location.pathname;
    }

    get search() {
      return this.location.search;
    }

    get hash() {
      return this.location.hash;
    }

    set pathname(newPath) {
      this.location.pathname = newPath;
    }

    pushState(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this.location.hash = url;
      }
    }

    replaceState(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this.location.hash = url;
      }
    }

    forward() {
      this._history.forward();
    }

    back() {
      this._history.back();
    }

    historyGo(relativePosition = 0) {
      this._history.go(relativePosition);
    }

    getState() {
      return this._history.state;
    }

  }

  BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) {
    return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DOCUMENT));
  };

  BrowserPlatformLocation.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: BrowserPlatformLocation,
    factory: function () {
      return createBrowserPlatformLocation();
    },
    providedIn: 'platform'
  });
  return BrowserPlatformLocation;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function supportsState() {
  return !!window.history.pushState;
}

function createBrowserPlatformLocation() {
  return new BrowserPlatformLocation((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Joins two parts of a URL with a slash if needed.
 *
 * @param start  URL string
 * @param end    URL string
 *
 *
 * @returns The joined URL string.
 */


function joinWithSlash(start, end) {
  if (start.length == 0) {
    return end;
  }

  if (end.length == 0) {
    return start;
  }

  let slashes = 0;

  if (start.endsWith('/')) {
    slashes++;
  }

  if (end.startsWith('/')) {
    slashes++;
  }

  if (slashes == 2) {
    return start + end.substring(1);
  }

  if (slashes == 1) {
    return start + end;
  }

  return start + '/' + end;
}
/**
 * Removes a trailing slash from a URL string if needed.
 * Looks for the first occurrence of either `#`, `?`, or the end of the
 * line as `/` characters and removes the trailing slash if one exists.
 *
 * @param url URL string.
 *
 * @returns The URL string, modified if needed.
 */


function stripTrailingSlash(url) {
  const match = url.match(/#|\?|$/);
  const pathEndIdx = match && match.index || url.length;
  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
}
/**
 * Normalizes URL parameters by prepending with `?` if needed.
 *
 * @param  params String of URL parameters.
 *
 * @returns The normalized URL parameters string.
 */


function normalizeQueryParams(params) {
  return params && params[0] !== '?' ? '?' + params : params;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Enables the `Location` service to read route state from the browser's URL.
 * Angular provides two strategies:
 * `HashLocationStrategy` and `PathLocationStrategy`.
 *
 * Applications should use the `Router` or `Location` services to
 * interact with application route state.
 *
 * For instance, `HashLocationStrategy` produces URLs like
 * <code class="no-auto-link">http://example.com#/foo</code>,
 * and `PathLocationStrategy` produces
 * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
 *
 * See these two classes for more.
 *
 * @publicApi
 */


let LocationStrategy = /*#__PURE__*/(() => {
  class LocationStrategy {
    historyGo(relativePosition) {
      throw new Error('Not implemented');
    }

  }

  LocationStrategy.ɵfac = function LocationStrategy_Factory(t) {
    return new (t || LocationStrategy)();
  };

  LocationStrategy.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: LocationStrategy,
    factory: function () {
      return provideLocationStrategy();
    },
    providedIn: 'root'
  });
  return LocationStrategy;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function provideLocationStrategy(platformLocation) {
  // See #23917
  const location = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT).location;
  return new PathLocationStrategy((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation), location && location.origin || '');
}
/**
 * A predefined [DI token](guide/glossary#di-token) for the base href
 * to be used with the `PathLocationStrategy`.
 * The base href is the URL prefix that should be preserved when generating
 * and recognizing URLs.
 *
 * @usageNotes
 *
 * The following example shows how to use this token to configure the root app injector
 * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @publicApi
 */


const APP_BASE_HREF = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('appBaseHref');
/**
 * @description
 * A {@link LocationStrategy} used to configure the {@link Location} service to
 * represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
 * or add a `<base href>` element to the document.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,
 * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.
 *
 * Similarly, if you add `<base href='/my/app/'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Note that when using `PathLocationStrategy`, neither the query nor
 * the fragment in the `<base href>` will be preserved, as outlined
 * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * @publicApi
 */

let PathLocationStrategy = /*#__PURE__*/(() => {
  class PathLocationStrategy extends LocationStrategy {
    constructor(_platformLocation, href) {
      super();
      this._platformLocation = _platformLocation;
      this._removeListenerFns = [];

      if (href == null) {
        href = this._platformLocation.getBaseHrefFromDOM();
      }

      if (href == null) {
        throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);
      }

      this._baseHref = href;
    }
    /** @nodoc */


    ngOnDestroy() {
      while (this._removeListenerFns.length) {
        this._removeListenerFns.pop()();
      }
    }

    onPopState(fn) {
      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
    }

    getBaseHref() {
      return this._baseHref;
    }

    prepareExternalUrl(internal) {
      return joinWithSlash(this._baseHref, internal);
    }

    path(includeHash = false) {
      const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
      const hash = this._platformLocation.hash;
      return hash && includeHash ? `${pathname}${hash}` : pathname;
    }

    pushState(state, title, url, queryParams) {
      const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

      this._platformLocation.pushState(state, title, externalUrl);
    }

    replaceState(state, title, url, queryParams) {
      const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

      this._platformLocation.replaceState(state, title, externalUrl);
    }

    forward() {
      this._platformLocation.forward();
    }

    back() {
      this._platformLocation.back();
    }

    historyGo(relativePosition = 0) {
      var _a, _b;

      (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }

  }

  PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) {
    return new (t || PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
  };

  PathLocationStrategy.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: PathLocationStrategy,
    factory: PathLocationStrategy.ɵfac
  });
  return PathLocationStrategy;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 * A {@link LocationStrategy} used to configure the {@link Location} service to
 * represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * @publicApi
 */


let HashLocationStrategy = /*#__PURE__*/(() => {
  class HashLocationStrategy extends LocationStrategy {
    constructor(_platformLocation, _baseHref) {
      super();
      this._platformLocation = _platformLocation;
      this._baseHref = '';
      this._removeListenerFns = [];

      if (_baseHref != null) {
        this._baseHref = _baseHref;
      }
    }
    /** @nodoc */


    ngOnDestroy() {
      while (this._removeListenerFns.length) {
        this._removeListenerFns.pop()();
      }
    }

    onPopState(fn) {
      this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
    }

    getBaseHref() {
      return this._baseHref;
    }

    path(includeHash = false) {
      // the hash value is always prefixed with a `#`
      // and if it is empty then it will stay empty
      let path = this._platformLocation.hash;
      if (path == null) path = '#';
      return path.length > 0 ? path.substring(1) : path;
    }

    prepareExternalUrl(internal) {
      const url = joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? '#' + url : url;
    }

    pushState(state, title, path, queryParams) {
      let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }

      this._platformLocation.pushState(state, title, url);
    }

    replaceState(state, title, path, queryParams) {
      let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }

      this._platformLocation.replaceState(state, title, url);
    }

    forward() {
      this._platformLocation.forward();
    }

    back() {
      this._platformLocation.back();
    }

    historyGo(relativePosition = 0) {
      var _a, _b;

      (_b = (_a = this._platformLocation).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }

  }

  HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) {
    return new (t || HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
  };

  HashLocationStrategy.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: HashLocationStrategy,
    factory: HashLocationStrategy.ɵfac
  });
  return HashLocationStrategy;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * A service that applications can use to interact with a browser's URL.
 *
 * Depending on the `LocationStrategy` used, `Location` persists
 * to the URL's path or the URL's hash segment.
 *
 * @usageNotes
 *
 * It's better to use the `Router.navigate()` service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 *
 * <code-example path='common/location/ts/path_location_component.ts'
 * region='LocationComponent'></code-example>
 *
 * @publicApi
 */


let Location = /*#__PURE__*/(() => {
  class Location {
    constructor(platformStrategy, platformLocation) {
      /** @internal */
      this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      /** @internal */

      this._urlChangeListeners = [];
      this._platformStrategy = platformStrategy;

      const browserBaseHref = this._platformStrategy.getBaseHref();

      this._platformLocation = platformLocation;
      this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));

      this._platformStrategy.onPopState(ev => {
        this._subject.emit({
          'url': this.path(true),
          'pop': true,
          'state': ev.state,
          'type': ev.type
        });
      });
    }
    /**
     * Normalizes the URL path for this location.
     *
     * @param includeHash True to include an anchor fragment in the path.
     *
     * @returns The normalized URL path.
     */
    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
    // removed.


    path(includeHash = false) {
      return this.normalize(this._platformStrategy.path(includeHash));
    }
    /**
     * Reports the current state of the location history.
     * @returns The current value of the `history.state` object.
     */


    getState() {
      return this._platformLocation.getState();
    }
    /**
     * Normalizes the given path and compares to the current normalized path.
     *
     * @param path The given URL path.
     * @param query Query parameters.
     *
     * @returns True if the given URL path is equal to the current normalized path, false
     * otherwise.
     */


    isCurrentPathEqualTo(path, query = '') {
      return this.path() == this.normalize(path + normalizeQueryParams(query));
    }
    /**
     * Normalizes a URL path by stripping any trailing slashes.
     *
     * @param url String representing a URL.
     *
     * @returns The normalized URL string.
     */


    normalize(url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    }
    /**
     * Normalizes an external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), adds one
     * before normalizing. Adds a hash if `HashLocationStrategy` is
     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     *
     * @param url String representing a URL.
     *
     * @returns  A normalized platform-specific URL.
     */


    prepareExternalUrl(url) {
      if (url && url[0] !== '/') {
        url = '/' + url;
      }

      return this._platformStrategy.prepareExternalUrl(url);
    } // TODO: rename this method to pushState

    /**
     * Changes the browser's URL to a normalized version of a given URL, and pushes a
     * new item onto the platform's history.
     *
     * @param path  URL path to normalize.
     * @param query Query parameters.
     * @param state Location history state.
     *
     */


    go(path, query = '', state = null) {
      this._platformStrategy.pushState(state, '', path, query);

      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Changes the browser's URL to a normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     *
     * @param path  URL path to normalize.
     * @param query Query parameters.
     * @param state Location history state.
     */


    replaceState(path, query = '', state = null) {
      this._platformStrategy.replaceState(state, '', path, query);

      this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Navigates forward in the platform's history.
     */


    forward() {
      this._platformStrategy.forward();
    }
    /**
     * Navigates back in the platform's history.
     */


    back() {
      this._platformStrategy.back();
    }
    /**
     * Navigate to a specific page from session history, identified by its relative position to the
     * current page.
     *
     * @param relativePosition  Position of the target page in the history relative to the current
     *     page.
     * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
     * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
     * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
     * when `relativePosition` equals 0.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
     */


    historyGo(relativePosition = 0) {
      var _a, _b;

      (_b = (_a = this._platformStrategy).historyGo) === null || _b === void 0 ? void 0 : _b.call(_a, relativePosition);
    }
    /**
     * Registers a URL change listener. Use to catch updates performed by the Angular
     * framework that are not detectible through "popstate" or "hashchange" events.
     *
     * @param fn The change handler function, which take a URL and a location history state.
     */


    onUrlChange(fn) {
      this._urlChangeListeners.push(fn);

      if (!this._urlChangeSubscription) {
        this._urlChangeSubscription = this.subscribe(v => {
          this._notifyUrlChangeListeners(v.url, v.state);
        });
      }
    }
    /** @internal */


    _notifyUrlChangeListeners(url = '', state) {
      this._urlChangeListeners.forEach(fn => fn(url, state));
    }
    /**
     * Subscribes to the platform's `popState` events.
     *
     * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
     * `Location.onUrlChange()` to subscribe to URL changes instead.
     *
     * @param value Event that is triggered when the state history changes.
     * @param exception The exception to throw.
     *
     * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
     *
     * @returns Subscribed events.
     */


    subscribe(onNext, onThrow, onReturn) {
      return this._subject.subscribe({
        next: onNext,
        error: onThrow,
        complete: onReturn
      });
    }

  }

  /**
   * Normalizes URL parameters by prepending with `?` if needed.
   *
   * @param  params String of URL parameters.
   *
   * @returns The normalized URL parameters string.
   */
  Location.normalizeQueryParams = normalizeQueryParams;
  /**
   * Joins two parts of a URL with a slash if needed.
   *
   * @param start  URL string
   * @param end    URL string
   *
   *
   * @returns The joined URL string.
   */

  Location.joinWithSlash = joinWithSlash;
  /**
   * Removes a trailing slash from a URL string if needed.
   * Looks for the first occurrence of either `#`, `?`, or the end of the
   * line as `/` characters and removes the trailing slash if one exists.
   *
   * @param url URL string.
   *
   * @returns The URL string, modified if needed.
   */

  Location.stripTrailingSlash = stripTrailingSlash;

  Location.ɵfac = function Location_Factory(t) {
    return new (t || Location)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation));
  };

  Location.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: Location,
    factory: function () {
      return createLocation();
    },
    providedIn: 'root'
  });
  return Location;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function createLocation() {
  return new Location((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LocationStrategy), (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation));
}

function _stripBaseHref(baseHref, url) {
  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}

function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, '');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** @internal */


const CURRENCIES_EN = {
  "ADP": [undefined, undefined, 0],
  "AFN": [undefined, "؋", 0],
  "ALL": [undefined, undefined, 0],
  "AMD": [undefined, "֏", 2],
  "AOA": [undefined, "Kz"],
  "ARS": [undefined, "$"],
  "AUD": ["A$", "$"],
  "AZN": [undefined, "₼"],
  "BAM": [undefined, "KM"],
  "BBD": [undefined, "$"],
  "BDT": [undefined, "৳"],
  "BHD": [undefined, undefined, 3],
  "BIF": [undefined, undefined, 0],
  "BMD": [undefined, "$"],
  "BND": [undefined, "$"],
  "BOB": [undefined, "Bs"],
  "BRL": ["R$"],
  "BSD": [undefined, "$"],
  "BWP": [undefined, "P"],
  "BYN": [undefined, "р.", 2],
  "BYR": [undefined, undefined, 0],
  "BZD": [undefined, "$"],
  "CAD": ["CA$", "$", 2],
  "CHF": [undefined, undefined, 2],
  "CLF": [undefined, undefined, 4],
  "CLP": [undefined, "$", 0],
  "CNY": ["CN¥", "¥"],
  "COP": [undefined, "$", 2],
  "CRC": [undefined, "₡", 2],
  "CUC": [undefined, "$"],
  "CUP": [undefined, "$"],
  "CZK": [undefined, "Kč", 2],
  "DJF": [undefined, undefined, 0],
  "DKK": [undefined, "kr", 2],
  "DOP": [undefined, "$"],
  "EGP": [undefined, "E£"],
  "ESP": [undefined, "₧", 0],
  "EUR": ["€"],
  "FJD": [undefined, "$"],
  "FKP": [undefined, "£"],
  "GBP": ["£"],
  "GEL": [undefined, "₾"],
  "GHS": [undefined, "GH₵"],
  "GIP": [undefined, "£"],
  "GNF": [undefined, "FG", 0],
  "GTQ": [undefined, "Q"],
  "GYD": [undefined, "$", 2],
  "HKD": ["HK$", "$"],
  "HNL": [undefined, "L"],
  "HRK": [undefined, "kn"],
  "HUF": [undefined, "Ft", 2],
  "IDR": [undefined, "Rp", 2],
  "ILS": ["₪"],
  "INR": ["₹"],
  "IQD": [undefined, undefined, 0],
  "IRR": [undefined, undefined, 0],
  "ISK": [undefined, "kr", 0],
  "ITL": [undefined, undefined, 0],
  "JMD": [undefined, "$"],
  "JOD": [undefined, undefined, 3],
  "JPY": ["¥", undefined, 0],
  "KHR": [undefined, "៛"],
  "KMF": [undefined, "CF", 0],
  "KPW": [undefined, "₩", 0],
  "KRW": ["₩", undefined, 0],
  "KWD": [undefined, undefined, 3],
  "KYD": [undefined, "$"],
  "KZT": [undefined, "₸"],
  "LAK": [undefined, "₭", 0],
  "LBP": [undefined, "L£", 0],
  "LKR": [undefined, "Rs"],
  "LRD": [undefined, "$"],
  "LTL": [undefined, "Lt"],
  "LUF": [undefined, undefined, 0],
  "LVL": [undefined, "Ls"],
  "LYD": [undefined, undefined, 3],
  "MGA": [undefined, "Ar", 0],
  "MGF": [undefined, undefined, 0],
  "MMK": [undefined, "K", 0],
  "MNT": [undefined, "₮", 2],
  "MRO": [undefined, undefined, 0],
  "MUR": [undefined, "Rs", 2],
  "MXN": ["MX$", "$"],
  "MYR": [undefined, "RM"],
  "NAD": [undefined, "$"],
  "NGN": [undefined, "₦"],
  "NIO": [undefined, "C$"],
  "NOK": [undefined, "kr", 2],
  "NPR": [undefined, "Rs"],
  "NZD": ["NZ$", "$"],
  "OMR": [undefined, undefined, 3],
  "PHP": ["₱"],
  "PKR": [undefined, "Rs", 2],
  "PLN": [undefined, "zł"],
  "PYG": [undefined, "₲", 0],
  "RON": [undefined, "lei"],
  "RSD": [undefined, undefined, 0],
  "RUB": [undefined, "₽"],
  "RUR": [undefined, "р."],
  "RWF": [undefined, "RF", 0],
  "SBD": [undefined, "$"],
  "SEK": [undefined, "kr", 2],
  "SGD": [undefined, "$"],
  "SHP": [undefined, "£"],
  "SLL": [undefined, undefined, 0],
  "SOS": [undefined, undefined, 0],
  "SRD": [undefined, "$"],
  "SSP": [undefined, "£"],
  "STD": [undefined, undefined, 0],
  "STN": [undefined, "Db"],
  "SYP": [undefined, "£", 0],
  "THB": [undefined, "฿"],
  "TMM": [undefined, undefined, 0],
  "TND": [undefined, undefined, 3],
  "TOP": [undefined, "T$"],
  "TRL": [undefined, undefined, 0],
  "TRY": [undefined, "₺"],
  "TTD": [undefined, "$"],
  "TWD": ["NT$", "$", 2],
  "TZS": [undefined, undefined, 2],
  "UAH": [undefined, "₴"],
  "UGX": [undefined, undefined, 0],
  "USD": ["$"],
  "UYI": [undefined, undefined, 0],
  "UYU": [undefined, "$"],
  "UYW": [undefined, undefined, 4],
  "UZS": [undefined, undefined, 2],
  "VEF": [undefined, "Bs", 2],
  "VND": ["₫", undefined, 0],
  "VUV": [undefined, undefined, 0],
  "XAF": ["FCFA", undefined, 0],
  "XCD": ["EC$", "$"],
  "XOF": ["F CFA", undefined, 0],
  "XPF": ["CFPF", undefined, 0],
  "XXX": ["¤"],
  "YER": [undefined, undefined, 0],
  "ZAR": [undefined, "R"],
  "ZMK": [undefined, undefined, 0],
  "ZMW": [undefined, "ZK"],
  "ZWD": [undefined, undefined, 0]
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Format styles that can be used to represent numbers.
 * @see `getLocaleNumberFormat()`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */

var NumberFormatStyle = /*#__PURE__*/(() => {
  NumberFormatStyle = NumberFormatStyle || {};
  NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
  NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
  NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
  NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
  return NumberFormatStyle;
})();

/**
 * Plurality cases used for translating plurals to different languages.
 *
 * @see `NgPlural`
 * @see `NgPluralCase`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */
var Plural = /*#__PURE__*/(() => {
  Plural = Plural || {};
  Plural[Plural["Zero"] = 0] = "Zero";
  Plural[Plural["One"] = 1] = "One";
  Plural[Plural["Two"] = 2] = "Two";
  Plural[Plural["Few"] = 3] = "Few";
  Plural[Plural["Many"] = 4] = "Many";
  Plural[Plural["Other"] = 5] = "Other";
  return Plural;
})();

/**
 * Context-dependant translation forms for strings.
 * Typically the standalone version is for the nominative form of the word,
 * and the format version is used for the genitive case.
 * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */
var FormStyle = /*#__PURE__*/(() => {
  FormStyle = FormStyle || {};
  FormStyle[FormStyle["Format"] = 0] = "Format";
  FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
  return FormStyle;
})();

/**
 * String widths available for translations.
 * The specific character widths are locale-specific.
 * Examples are given for the word "Sunday" in English.
 *
 * @publicApi
 */
var TranslationWidth = /*#__PURE__*/(() => {
  TranslationWidth = TranslationWidth || {};

  /** 1 character for `en-US`. For example: 'S' */
  TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
  /** 3 characters for `en-US`. For example: 'Sun' */

  TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
  /** Full length for `en-US`. For example: "Sunday" */

  TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
  /** 2 characters for `en-US`, For example: "Su" */

  TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
  return TranslationWidth;
})();

/**
 * String widths available for date-time formats.
 * The specific character widths are locale-specific.
 * Examples are given for `en-US`.
 *
 * @see `getLocaleDateFormat()`
 * @see `getLocaleTimeFormat()`
 * @see `getLocaleDateTimeFormat()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 * @publicApi
 */
var FormatWidth = /*#__PURE__*/(() => {
  FormatWidth = FormatWidth || {};

  /**
   * For `en-US`, 'M/d/yy, h:mm a'`
   * (Example: `6/15/15, 9:03 AM`)
   */
  FormatWidth[FormatWidth["Short"] = 0] = "Short";
  /**
   * For `en-US`, `'MMM d, y, h:mm:ss a'`
   * (Example: `Jun 15, 2015, 9:03:01 AM`)
   */

  FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
  /**
   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
   */

  FormatWidth[FormatWidth["Long"] = 2] = "Long";
  /**
   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
   */

  FormatWidth[FormatWidth["Full"] = 3] = "Full";
  return FormatWidth;
})();

/**
 * Symbols that can be used to replace placeholders in number patterns.
 * Examples are based on `en-US` values.
 *
 * @see `getLocaleNumberSymbol()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */
var NumberSymbol = /*#__PURE__*/(() => {
  NumberSymbol = NumberSymbol || {};

  /**
   * Decimal separator.
   * For `en-US`, the dot character.
   * Example: 2,345`.`67
   */
  NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
  /**
   * Grouping separator, typically for thousands.
   * For `en-US`, the comma character.
   * Example: 2`,`345.67
   */

  NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
  /**
   * List-item separator.
   * Example: "one, two, and three"
   */

  NumberSymbol[NumberSymbol["List"] = 2] = "List";
  /**
   * Sign for percentage (out of 100).
   * Example: 23.4%
   */

  NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
  /**
   * Sign for positive numbers.
   * Example: +23
   */

  NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
  /**
   * Sign for negative numbers.
   * Example: -23
   */

  NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
  /**
   * Computer notation for exponential value (n times a power of 10).
   * Example: 1.2E3
   */

  NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
  /**
   * Human-readable format of exponential.
   * Example: 1.2x103
   */

  NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
  /**
   * Sign for permille (out of 1000).
   * Example: 23.4‰
   */

  NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
  /**
   * Infinity, can be used with plus and minus.
   * Example: ∞, +∞, -∞
   */

  NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
  /**
   * Not a number.
   * Example: NaN
   */

  NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
  /**
   * Symbol used between time units.
   * Example: 10:52
   */

  NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
  /**
   * Decimal separator for currency values (fallback to `Decimal`).
   * Example: $2,345.67
   */

  NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
  /**
   * Group separator for currency values (fallback to `Group`).
   * Example: $2,345.67
   */

  NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
  return NumberSymbol;
})();

/**
 * The value for each day of the week, based on the `en-US` locale
 *
 * @publicApi
 */
var WeekDay = /*#__PURE__*/(() => {
  WeekDay = WeekDay || {};
  WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
  WeekDay[WeekDay["Monday"] = 1] = "Monday";
  WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
  WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
  WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
  WeekDay[WeekDay["Friday"] = 5] = "Friday";
  WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
  return WeekDay;
})();

/**
 * Retrieves the locale ID from the currently loaded locale.
 * The loaded locale could be, for example, a global one rather than a regional one.
 * @param locale A locale code, such as `fr-FR`.
 * @returns The locale code. For example, `fr`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */
function getLocaleId(locale) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId];
}
/**
 * Retrieves day period strings for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleDayPeriods(locale, formStyle, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const amPmData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsStandalone]];
  const amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
/**
 * Retrieves days of the week for the given locale, using the Gregorian calendar.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized name strings.
 * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleDayNames(locale, formStyle, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const daysData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysStandalone]];
  const days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
/**
 * Retrieves months of the year for the given locale, using the Gregorian calendar.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns An array of localized name strings.
 * For example,  `[January, February, ...]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleMonthNames(locale, formStyle, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const monthsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsStandalone]];
  const months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
/**
 * Retrieves Gregorian-calendar eras for the given locale.
 * @param locale A locale code for the locale format rules to use.
 * @param width The required character width.

 * @returns An array of localized era strings.
 * For example, `[AD, BC]` for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleEraNames(locale, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const erasData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Eras];
  return getLastDefinedValue(erasData, width);
}
/**
 * Retrieves the first day of the week for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns A day index number, using the 0-based week-day index for `en-US`
 * (Sunday = 0, Monday = 1, ...).
 * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleFirstDayOfWeek(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].FirstDayOfWeek];
}
/**
 * Range of week days that are considered the week-end for the given locale.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The range of day values, `[startDay, endDay]`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleWeekEndRange(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].WeekendRange];
}
/**
 * Retrieves a localized date-value formating string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formating string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleDateFormat(locale, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateFormat], width);
}
/**
 * Retrieves a localized time-value formatting string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formatting string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)

 * @publicApi
 */


function getLocaleTimeFormat(locale, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].TimeFormat], width);
}
/**
 * Retrieves a localized date-time formatting string.
 *
 * @param locale A locale code for the locale format rules to use.
 * @param width The format type.
 * @returns The localized formatting string.
 * @see `FormatWidth`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleDateTimeFormat(locale, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const dateTimeFormatData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
/**
 * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
 * @param locale The locale code.
 * @param symbol The symbol to localize.
 * @returns The character for the localized symbol.
 * @see `NumberSymbol`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleNumberSymbol(locale, symbol) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  const res = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][symbol];

  if (typeof res === 'undefined') {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Group];
    }
  }

  return res;
}
/**
 * Retrieves a number format for a given locale.
 *
 * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
 * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
 * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
 *
 * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
 * that stand for the decimal separator, and so on, and are NOT real characters.
 * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
 * your language the decimal point is written with a comma. The symbols should be replaced by the
 * local equivalents, using the appropriate `NumberSymbol` for your language.
 *
 * Here are the special characters used in number patterns:
 *
 * | Symbol | Meaning |
 * |--------|---------|
 * | . | Replaced automatically by the character used for the decimal point. |
 * | , | Replaced by the "grouping" (thousands) separator. |
 * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
 * | # | Replaced by a digit (or nothing if there aren't enough). |
 * | ¤ | Replaced by a currency symbol, such as $ or USD. |
 * | % | Marks a percent format. The % symbol may change position, but must be retained. |
 * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
 * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
 *
 * @param locale A locale code for the locale format rules to use.
 * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
 * @returns The localized format string.
 * @see `NumberFormatStyle`
 * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleNumberFormat(locale, type) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberFormats][type];
}
/**
 * Retrieves the symbol used to represent the currency for the main country
 * corresponding to a given locale. For example, '$' for `en-US`.
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The localized symbol character,
 * or `null` if the main country cannot be determined.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleCurrencySymbol(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencySymbol] || null;
}
/**
 * Retrieves the name of the currency for the main country corresponding
 * to a given locale. For example, 'US Dollar' for `en-US`.
 * @param locale A locale code for the locale format rules to use.
 * @returns The currency name,
 * or `null` if the main country cannot be determined.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleCurrencyName(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencyName] || null;
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * @param locale The code of the locale whose currency code we want.
 * @returns The code of the default currency for the given locale.
 *
 * @publicApi
 */


function getLocaleCurrencyCode(locale) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocaleCurrencyCode"])(locale);
}
/**
 * Retrieves the currency values for a given locale.
 * @param locale A locale code for the locale format rules to use.
 * @returns The currency values.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 */


function getLocaleCurrencies(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Currencies];
}
/**
 * @alias core/ɵgetLocalePluralCase
 * @publicApi
 */


const getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocalePluralCase"];

function checkFullData(data) {
  if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData]) {
    throw new Error(`Missing extra locale data for the locale "${data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
  }
}
/**
 * Retrieves locale-specific rules used to determine which day period to use
 * when more than one period is defined for a locale.
 *
 * There is a rule for each defined day period. The
 * first rule is applied to the first day period and so on.
 * Fall back to AM/PM when no rules are available.
 *
 * A rule can specify a period as time range, or as a single time value.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n-common-format-data-locale).
 *
 * @param locale A locale code for the locale format rules to use.
 * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
 * or null if no periods are available.
 *
 * @see `getLocaleExtraDayPeriods()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleExtraDayPeriodRules(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  checkFullData(data);
  const rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][2
  /* ExtraDayPeriodsRules */
  ] || [];
  return rules.map(rule => {
    if (typeof rule === 'string') {
      return extractTime(rule);
    }

    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
/**
 * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
 * in different languages.
 * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n-common-format-data-locale).
 *
 * @param locale A locale code for the locale format rules to use.
 * @param formStyle The required grammatical form.
 * @param width The required character width.
 * @returns The translated day-period strings.
 * @see `getLocaleExtraDayPeriodRules()`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLocaleExtraDayPeriods(locale, formStyle, width) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  checkFullData(data);
  const dayPeriodsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][0
  /* ExtraDayPeriodFormats */
  ], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][1
  /* ExtraDayPeriodStandalone */
  ]];
  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
/**
 * Retrieves the writing direction of a specified locale
 * @param locale A locale code for the locale format rules to use.
 * @publicApi
 * @returns 'rtl' or 'ltr'
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 */


function getLocaleDirection(locale) {
  const data = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
  return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Directionality];
}
/**
 * Retrieves the first value that is defined in an array, going backwards from an index position.
 *
 * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
 * add the first value to the locale data arrays, and add other values only if they are different.
 *
 * @param data The data array to retrieve from.
 * @param index A 0-based index into the array to start from.
 * @returns The value immediately before the given index position.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getLastDefinedValue(data, index) {
  for (let i = index; i > -1; i--) {
    if (typeof data[i] !== 'undefined') {
      return data[i];
    }
  }

  throw new Error('Locale data API: locale data undefined');
}
/**
 * Extracts the hours and minutes from a string like "15:45"
 */


function extractTime(time) {
  const [h, m] = time.split(':');
  return {
    hours: +h,
    minutes: +m
  };
}
/**
 * Retrieves the currency symbol for a given currency code.
 *
 * For example, for the default `en-US` locale, the code `USD` can
 * be represented by the narrow symbol `$` or the wide symbol `US$`.
 *
 * @param code The currency code.
 * @param format The format, `wide` or `narrow`.
 * @param locale A locale code for the locale format rules to use.
 *
 * @returns The symbol, or the currency code if no symbol is available.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function getCurrencySymbol(code, format, locale = 'en') {
  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  const symbolNarrow = currency[1
  /* SymbolNarrow */
  ];

  if (format === 'narrow' && typeof symbolNarrow === 'string') {
    return symbolNarrow;
  }

  return currency[0
  /* Symbol */
  ] || code;
} // Most currencies have cents, that's why the default is 2


const DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
/**
 * Reports the number of decimal digits for a given currency.
 * The value depends upon the presence of cents in that particular currency.
 *
 * @param code The currency code.
 * @returns The number of decimal digits, typically 0 or 2.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */

function getNumberOfCurrencyDigits(code) {
  let digits;
  const currency = CURRENCIES_EN[code];

  if (currency) {
    digits = currency[2
    /* NbOfDigits */
    ];
  }

  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/; //    1        2       3         4          5          6          7          8  9     10      11

const NAMED_FORMATS = {};
const DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
var ZoneWidth = /*#__PURE__*/(() => {
  ZoneWidth = ZoneWidth || {};
  ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
  ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
  ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
  ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
  return ZoneWidth;
})();
var DateType = /*#__PURE__*/(() => {
  DateType = DateType || {};
  DateType[DateType["FullYear"] = 0] = "FullYear";
  DateType[DateType["Month"] = 1] = "Month";
  DateType[DateType["Date"] = 2] = "Date";
  DateType[DateType["Hours"] = 3] = "Hours";
  DateType[DateType["Minutes"] = 4] = "Minutes";
  DateType[DateType["Seconds"] = 5] = "Seconds";
  DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
  DateType[DateType["Day"] = 7] = "Day";
  return DateType;
})();
var TranslationType = /*#__PURE__*/(() => {
  TranslationType = TranslationType || {};
  TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
  TranslationType[TranslationType["Days"] = 1] = "Days";
  TranslationType[TranslationType["Months"] = 2] = "Months";
  TranslationType[TranslationType["Eras"] = 3] = "Eras";
  return TranslationType;
})();

/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a date according to locale rules.
 *
 * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
 * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
 * @param format The date-time components to include. See `DatePipe` for details.
 * @param locale A locale code for the locale format rules to use.
 * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
 * or a standard UTC/GMT or continental US time zone abbreviation.
 * If not specified, uses host system settings.
 *
 * @returns The formatted date string.
 *
 * @see `DatePipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */
function formatDate(value, format, locale, timezone) {
  let date = toDate(value);
  const namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  let parts = [];
  let match;

  while (format) {
    match = DATE_FORMATS_SPLIT.exec(format);

    if (match) {
      parts = parts.concat(match.slice(1));
      const part = parts.pop();

      if (!part) {
        break;
      }

      format = part;
    } else {
      parts.push(format);
      break;
    }
  }

  let dateTimezoneOffset = date.getTimezoneOffset();

  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone, true);
  }

  let text = '';
  parts.forEach(value => {
    const dateFormatter = getDateFormatter(value);
    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
  });
  return text;
}
/**
 * Create a new Date object with the given date value, and the time set to midnight.
 *
 * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.
 * See: https://github.com/angular/angular/issues/40377
 *
 * Note that this function returns a Date object whose time is midnight in the current locale's
 * timezone. In the future we might want to change this to be midnight in UTC, but this would be a
 * considerable breaking change.
 */


function createDate(year, month, date) {
  // The `newDate` is set to midnight (UTC) on January 1st 1970.
  // - In PST this will be December 31st 1969 at 4pm.
  // - In GMT this will be January 1st 1970 at 1am.
  // Note that they even have different years, dates and months!
  const newDate = new Date(0); // `setFullYear()` allows years like 0001 to be set correctly. This function does not
  // change the internal time of the date.
  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).
  // - In PST this will now be September 20, 2019 at 4pm
  // - In GMT this will now be September 20, 2019 at 1am

  newDate.setFullYear(year, month, date); // We want the final date to be at local midnight, so we reset the time.
  // - In PST this will now be September 20, 2019 at 12am
  // - In GMT this will now be September 20, 2019 at 12am

  newDate.setHours(0, 0, 0);
  return newDate;
}

function getNamedFormat(locale, format) {
  const localeId = getLocaleId(locale);
  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};

  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }

  let formatValue = '';

  switch (format) {
    case 'shortDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
      break;

    case 'mediumDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;

    case 'longDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
      break;

    case 'fullDate':
      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
      break;

    case 'shortTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;

    case 'mediumTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;

    case 'longTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;

    case 'fullTime':
      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;

    case 'short':
      const shortTime = getNamedFormat(locale, 'shortTime');
      const shortDate = getNamedFormat(locale, 'shortDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
      break;

    case 'medium':
      const mediumTime = getNamedFormat(locale, 'mediumTime');
      const mediumDate = getNamedFormat(locale, 'mediumDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
      break;

    case 'long':
      const longTime = getNamedFormat(locale, 'longTime');
      const longDate = getNamedFormat(locale, 'longDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
      break;

    case 'full':
      const fullTime = getNamedFormat(locale, 'fullTime');
      const fullDate = getNamedFormat(locale, 'fullDate');
      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
      break;
  }

  if (formatValue) {
    NAMED_FORMATS[localeId][format] = formatValue;
  }

  return formatValue;
}

function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function (match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }

  return str;
}

function padNumber(num, digits, minusSign = '-', trim, negWrap) {
  let neg = '';

  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }

  let strNum = String(num);

  while (strNum.length < digits) {
    strNum = '0' + strNum;
  }

  if (trim) {
    strNum = strNum.substr(strNum.length - digits);
  }

  return neg + strNum;
}

function formatFractionalSeconds(milliseconds, digits) {
  const strMs = padNumber(milliseconds, 3);
  return strMs.substr(0, digits);
}
/**
 * Returns a date formatter that transforms a date into its locale digit representation
 */


function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
  return function (date, locale) {
    let part = getDatePart(name, date);

    if (offset > 0 || part > -offset) {
      part += offset;
    }

    if (name === DateType.Hours) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === DateType.FractionalSeconds) {
      return formatFractionalSeconds(part, size);
    }

    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}

function getDatePart(part, date) {
  switch (part) {
    case DateType.FullYear:
      return date.getFullYear();

    case DateType.Month:
      return date.getMonth();

    case DateType.Date:
      return date.getDate();

    case DateType.Hours:
      return date.getHours();

    case DateType.Minutes:
      return date.getMinutes();

    case DateType.Seconds:
      return date.getSeconds();

    case DateType.FractionalSeconds:
      return date.getMilliseconds();

    case DateType.Day:
      return date.getDay();

    default:
      throw new Error(`Unknown DateType value "${part}".`);
  }
}
/**
 * Returns a date formatter that transforms a date into its locale string representation
 */


function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
  return function (date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
/**
 * Returns the locale translation of a date for a given form, type and width
 */


function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case TranslationType.Months:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];

    case TranslationType.Days:
      return getLocaleDayNames(locale, form, width)[date.getDay()];

    case TranslationType.DayPeriods:
      const currentHours = date.getHours();
      const currentMinutes = date.getMinutes();

      if (extended) {
        const rules = getLocaleExtraDayPeriodRules(locale);
        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        const index = rules.findIndex(rule => {
          if (Array.isArray(rule)) {
            // morning, afternoon, evening, night
            const [from, to] = rule;
            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;
            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes; // We must account for normal rules that span a period during the day (e.g. 6am-9am)
            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.
            // 10pm - 5am) where `from` is greater (later!) than `to`.
            //
            // In the first case the current time must be BOTH after `from` AND before `to`
            // (e.g. 8am is after 6am AND before 10am).
            //
            // In the second case the current time must be EITHER after `from` OR before `to`
            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is
            // after 10pm).

            if (from.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            // noon or midnight
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }

          return false;
        });

        if (index !== -1) {
          return dayPeriods[index];
        }
      } // if no rules for the day periods, we use am/pm by default


      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];

    case TranslationType.Eras:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];

    default:
      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
      // However Closure Compiler does not understand that and reports an error in typed mode.
      // The `throw new Error` below works around the problem, and the unexpected: never variable
      // makes sure tsc still checks this code is unreachable.
      const unexpected = name;
      throw new Error(`unexpected translation type ${unexpected}`);
  }
}
/**
 * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
 * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
 * extended = +04:30)
 */


function timeZoneGetter(width) {
  return function (date, locale, offset) {
    const zone = -1 * offset;
    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);

    switch (width) {
      case ZoneWidth.Short:
        return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);

      case ZoneWidth.ShortGMT:
        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);

      case ZoneWidth.Long:
        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);

      case ZoneWidth.Extended:
        if (offset === 0) {
          return 'Z';
        } else {
          return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);
        }

      default:
        throw new Error(`Unknown zone width "${width}"`);
    }
  };
}

const JANUARY = 0;
const THURSDAY = 4;

function getFirstThursdayOfYear(year) {
  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}

function getThursdayThisWeek(datetime) {
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
}

function weekGetter(size, monthBased = false) {
  return function (date, locale) {
    let result;

    if (monthBased) {
      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      const today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      const thisThurs = getThursdayThisWeek(date); // Some days of a year are part of next year according to ISO 8601.
      // Compute the firstThurs from the year of this week's Thursday

      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      const diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
    }

    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
/**
 * Returns a date formatter that provides the week-numbering year for the input date.
 */


function weekNumberingYearGetter(size, trim = false) {
  return function (date, locale) {
    const thisThurs = getThursdayThisWeek(date);
    const weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}

const DATE_FORMATS = {}; // Based on CLDR formats:
// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
// See also explanations: http://cldr.unicode.org/translation/date-time
// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x

function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }

  let formatter;

  switch (format) {
    // Era name (AD/BC)
    case 'G':
    case 'GG':
    case 'GGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
      break;

    case 'GGGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
      break;

    case 'GGGGG':
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
      break;
    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)

    case 'y':
      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
      break;
    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)

    case 'yy':
      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
      break;
    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)

    case 'yyy':
      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
      break;
    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)

    case 'yyyy':
      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
      break;
    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)

    case 'Y':
      formatter = weekNumberingYearGetter(1);
      break;
    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD
    // 2010 => 10)

    case 'YY':
      formatter = weekNumberingYearGetter(2, true);
      break;
    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD
    // 2010 => 2010)

    case 'YYY':
      formatter = weekNumberingYearGetter(3);
      break;
    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)

    case 'YYYY':
      formatter = weekNumberingYearGetter(4);
      break;
    // Month of the year (1-12), numeric

    case 'M':
    case 'L':
      formatter = dateGetter(DateType.Month, 1, 1);
      break;

    case 'MM':
    case 'LL':
      formatter = dateGetter(DateType.Month, 2, 1);
      break;
    // Month of the year (January, ...), string, format

    case 'MMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
      break;

    case 'MMMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
      break;

    case 'MMMMM':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
      break;
    // Month of the year (January, ...), string, standalone

    case 'LLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;

    case 'LLLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
      break;

    case 'LLLLL':
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    // Week of the year (1, ... 52)

    case 'w':
      formatter = weekGetter(1);
      break;

    case 'ww':
      formatter = weekGetter(2);
      break;
    // Week of the month (1, ...)

    case 'W':
      formatter = weekGetter(1, true);
      break;
    // Day of the month (1-31)

    case 'd':
      formatter = dateGetter(DateType.Date, 1);
      break;

    case 'dd':
      formatter = dateGetter(DateType.Date, 2);
      break;
    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)

    case 'c':
    case 'cc':
      formatter = dateGetter(DateType.Day, 1);
      break;

    case 'ccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;

    case 'cccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);
      break;

    case 'ccccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);
      break;

    case 'cccccc':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);
      break;
    // Day of the Week

    case 'E':
    case 'EE':
    case 'EEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
      break;

    case 'EEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
      break;

    case 'EEEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
      break;

    case 'EEEEEE':
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
      break;
    // Generic period of the day (am-pm)

    case 'a':
    case 'aa':
    case 'aaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
      break;

    case 'aaaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
      break;

    case 'aaaaa':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
      break;
    // Extended period of the day (midnight, at night, ...), standalone

    case 'b':
    case 'bb':
    case 'bbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;

    case 'bbbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;

    case 'bbbbb':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    // Extended period of the day (midnight, night, ...), standalone

    case 'B':
    case 'BB':
    case 'BBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;

    case 'BBBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
      break;

    case 'BBBBB':
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    // Hour in AM/PM, (1-12)

    case 'h':
      formatter = dateGetter(DateType.Hours, 1, -12);
      break;

    case 'hh':
      formatter = dateGetter(DateType.Hours, 2, -12);
      break;
    // Hour of the day (0-23)

    case 'H':
      formatter = dateGetter(DateType.Hours, 1);
      break;
    // Hour in day, padded (00-23)

    case 'HH':
      formatter = dateGetter(DateType.Hours, 2);
      break;
    // Minute of the hour (0-59)

    case 'm':
      formatter = dateGetter(DateType.Minutes, 1);
      break;

    case 'mm':
      formatter = dateGetter(DateType.Minutes, 2);
      break;
    // Second of the minute (0-59)

    case 's':
      formatter = dateGetter(DateType.Seconds, 1);
      break;

    case 'ss':
      formatter = dateGetter(DateType.Seconds, 2);
      break;
    // Fractional second

    case 'S':
      formatter = dateGetter(DateType.FractionalSeconds, 1);
      break;

    case 'SS':
      formatter = dateGetter(DateType.FractionalSeconds, 2);
      break;

    case 'SSS':
      formatter = dateGetter(DateType.FractionalSeconds, 3);
      break;
    // Timezone ISO8601 short format (-0430)

    case 'Z':
    case 'ZZ':
    case 'ZZZ':
      formatter = timeZoneGetter(ZoneWidth.Short);
      break;
    // Timezone ISO8601 extended format (-04:30)

    case 'ZZZZZ':
      formatter = timeZoneGetter(ZoneWidth.Extended);
      break;
    // Timezone GMT short format (GMT+4)

    case 'O':
    case 'OO':
    case 'OOO': // Should be location, but fallback to format O instead because we don't have the data yet

    case 'z':
    case 'zz':
    case 'zzz':
      formatter = timeZoneGetter(ZoneWidth.ShortGMT);
      break;
    // Timezone GMT long format (GMT+0430)

    case 'OOOO':
    case 'ZZZZ': // Should be location, but fallback to format O instead because we don't have the data yet

    case 'zzzz':
      formatter = timeZoneGetter(ZoneWidth.Long);
      break;

    default:
      return null;
  }

  DATE_FORMATS[format] = formatter;
  return formatter;
}

function timezoneToOffset(timezone, fallback) {
  // Support: IE 11 only, Edge 13-15+
  // IE/Edge do not "understand" colon (`:`) in timezone
  timezone = timezone.replace(/:/g, '');
  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}

function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}

function convertTimezoneToLocal(date, timezone, reverse) {
  const reverseValue = reverse ? -1 : 1;
  const dateTimezoneOffset = date.getTimezoneOffset();
  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
/**
 * Converts a value to date.
 *
 * Supported input formats:
 * - `Date`
 * - number: timestamp
 * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
 *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
 *   Note: ISO strings without time return a date without timeoffset.
 *
 * Throws if unable to convert to a date.
 */


function toDate(value) {
  if (isDate(value)) {
    return value;
  }

  if (typeof value === 'number' && !isNaN(value)) {
    return new Date(value);
  }

  if (typeof value === 'string') {
    value = value.trim();

    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      /* For ISO Strings without time the day, month and year must be extracted from the ISO String
      before Date creation to avoid time offset and errors in the new Date.
      If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
      date, some browsers (e.g. IE 9) will throw an invalid Date error.
      If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
      is applied.
      Note: ISO months are 0 for January, 1 for February, ... */
      const [y, m = 1, d = 1] = value.split('-').map(val => +val);
      return createDate(y, m - 1, d);
    }

    const parsedNb = parseFloat(value); // any string that only contains numbers, like "1234" but not like "1234hello"

    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }

    let match;

    if (match = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match);
    }
  }

  const date = new Date(value);

  if (!isDate(date)) {
    throw new Error(`Unable to convert "${value}" into a date`);
  }

  return date;
}
/**
 * Converts a date in ISO8601 to a Date.
 * Used instead of `Date.parse` because of browser discrepancies.
 */


function isoStringToDate(match) {
  const date = new Date(0);
  let tzHour = 0;
  let tzMin = 0; // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"

  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
  const timeSetter = match[8] ? date.setUTCHours : date.setHours; // if there is a timezone defined like "+01:00" or "+0100"

  if (match[9]) {
    tzHour = Number(match[9] + match[10]);
    tzMin = Number(match[9] + match[11]);
  }

  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
  const h = Number(match[4] || 0) - tzHour;
  const m = Number(match[5] || 0) - tzMin;
  const s = Number(match[6] || 0); // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)
  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`
  // becomes `999ms`.

  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);
  timeSetter.call(date, h, m, s, ms);
  return date;
}

function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
const MAX_DIGITS = 22;
const DECIMAL_SEP = '.';
const ZERO_CHAR = '0';
const PATTERN_SEP = ';';
const GROUP_SEP = ',';
const DIGIT_CHAR = '#';
const CURRENCY_CHAR = '¤';
const PERCENT_CHAR = '%';
/**
 * Transforms a number to a locale string based on a style and a format.
 */

function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
  let formattedText = '';
  let isZero = false;

  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    let parsedNumber = parseNumber(value);

    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }

    let minInt = pattern.minInt;
    let minFraction = pattern.minFrac;
    let maxFraction = pattern.maxFrac;

    if (digitsInfo) {
      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

      if (parts === null) {
        throw new Error(`${digitsInfo} is not a valid digit info`);
      }

      const minIntPart = parts[1];
      const minFractionPart = parts[3];
      const maxFractionPart = parts[5];

      if (minIntPart != null) {
        minInt = parseIntAutoRadix(minIntPart);
      }

      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix(minFractionPart);
      }

      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }

    roundNumber(parsedNumber, minFraction, maxFraction);
    let digits = parsedNumber.digits;
    let integerLen = parsedNumber.integerLen;
    const exponent = parsedNumber.exponent;
    let decimals = [];
    isZero = digits.every(d => !d); // pad zeros for small numbers

    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    } // pad zeros for small numbers


    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    } // extract decimals digits


    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    } // format the integer digits with grouping separators


    const groups = [];

    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
    }

    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
    }

    if (digits.length) {
      groups.unshift(digits.join(''));
    }

    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol)); // append the decimal digits

    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
    }

    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
    }
  }

  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }

  return formattedText;
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as currency using locale rules.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param currency A string containing the currency symbol or its name,
 * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
 * of the function.
 * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
 * currency code, such as `USD` for the US dollar and `EUR` for the euro.
 * Used to determine the number of digits in the decimal part.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted currency value.
 *
 * @see `formatNumber()`
 * @see `DecimalPipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency) // if we have 2 time the currency character, the second one is ignored
  .replace(CURRENCY_CHAR, '') // If there is a spacing between currency character and the value and
  // the currency character is supressed by passing an empty string, the
  // spacing character would remain as part of the string. Then we
  // should remove it.
  .trim();
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as a percentage according to locale rules.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted percentage value.
 *
 * @see `formatNumber()`
 * @see `DecimalPipe`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 * @publicApi
 *
 */


function formatPercent(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a number as text, with group sizing, separator, and other
 * parameters based on the locale.
 *
 * @param value The number to format.
 * @param locale A locale code for the locale format rules to use.
 * @param digitsInfo Decimal representation options, specified by a string in the following format:
 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
 *
 * @returns The formatted text string.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 *
 * @publicApi
 */


function formatNumber(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}

function parseNumberFormat(format, minusSign = '-') {
  const p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: '',
    posSuf: '',
    negPre: '',
    negSuf: '',
    gSize: 0,
    lgSize: 0
  };
  const patternParts = format.split(PATTERN_SEP);
  const positive = patternParts[0];
  const negative = patternParts[1];
  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],
        integer = positiveParts[0],
        fraction = positiveParts[1] || '';
  p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));

  for (let i = 0; i < fraction.length; i++) {
    const ch = fraction.charAt(i);

    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }

  const groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;

  if (negative) {
    const trunkLen = positive.length - p.posPre.length - p.posSuf.length,
          pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substr(0, pos).replace(/'/g, '');
    p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }

  return p;
} // Transforms a parsed number into a percentage by multiplying it by 100


function toPercent(parsedNumber) {
  // if the number is 0, don't do anything
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  } // Getting the current number of decimals


  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;

  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }

    parsedNumber.integerLen += 2;
  }

  return parsedNumber;
}
/**
 * Parses a number.
 * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
 */


function parseNumber(num) {
  let numStr = Math.abs(num) + '';
  let exponent = 0,
      digits,
      integerLen;
  let i, j, zeros; // Decimal point?

  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, '');
  } // Exponential form?


  if ((i = numStr.search(/e/i)) > 0) {
    // Work out the exponent.
    if (integerLen < 0) integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    // There was no decimal point or exponent so it is an integer.
    integerLen = numStr.length;
  } // Count the number of leading zeros.


  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
    /* empty */
  }

  if (i === (zeros = numStr.length)) {
    // The digits are all zero.
    digits = [0];
    integerLen = 1;
  } else {
    // Count the number of trailing zeros
    zeros--;

    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--; // Trailing zeros are insignificant so ignore them


    integerLen -= i;
    digits = []; // Convert string to array of digits without leading/trailing zeros.

    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  } // If the number overflows the maximum allowed digits then use an exponent.


  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }

  return {
    digits,
    exponent,
    integerLen
  };
}
/**
 * Round the parsed number to the specified number of decimal places
 * This function changes the parsedNumber in-place
 */


function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
  }

  let digits = parsedNumber.digits;
  let fractionLen = digits.length - parsedNumber.integerLen;
  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac); // The index of the digit to where rounding is to occur

  let roundAt = fractionSize + parsedNumber.integerLen;
  let digit = digits[roundAt];

  if (roundAt > 0) {
    // Drop fractional digits beyond `roundAt`
    digits.splice(Math.max(parsedNumber.integerLen, roundAt)); // Set non-fractional digits beyond `roundAt` to 0

    for (let j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    // We rounded to zero so reset the parsedNumber
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;

    for (let i = 1; i < roundAt; i++) digits[i] = 0;
  }

  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (let k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }

      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  } // Pad out with zeros to get the required fraction length


  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);

  let dropTrailingZeros = fractionSize !== 0; // Minimal length = nb of decimals required + current nb of integers
  // Any number besides that is optional and can be removed if it's a trailing 0

  const minLen = minFrac + parsedNumber.integerLen; // Do any carrying, e.g. a digit was rounded up to 10

  const carry = digits.reduceRight(function (carry, d, i, digits) {
    d = d + carry;
    digits[i] = d < 10 ? d : d - 10; // d % 10

    if (dropTrailingZeros) {
      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
      if (digits[i] === 0 && i >= minLen) {
        digits.pop();
      } else {
        dropTrailingZeros = false;
      }
    }

    return d >= 10 ? 1 : 0; // Math.floor(d / 10);
  }, 0);

  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}

function parseIntAutoRadix(text) {
  const result = parseInt(text);

  if (isNaN(result)) {
    throw new Error('Invalid integer literal when parsing ' + text);
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


let NgLocalization = /*#__PURE__*/(() => {
  class NgLocalization {}

  NgLocalization.ɵfac = function NgLocalization_Factory(t) {
    return new (t || NgLocalization)();
  };

  NgLocalization.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: NgLocalization,
    factory: function NgLocalization_Factory(t) {
      let r = null;

      if (t) {
        r = new t();
      } else {
        r = (locale => new NgLocaleLocalization(locale))(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID));
      }

      return r;
    },
    providedIn: 'root'
  });
  return NgLocalization;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 */


function getPluralCategory(value, cases, ngLocalization, locale) {
  let key = `=${value}`;

  if (cases.indexOf(key) > -1) {
    return key;
  }

  key = ngLocalization.getPluralCategory(value, locale);

  if (cases.indexOf(key) > -1) {
    return key;
  }

  if (cases.indexOf('other') > -1) {
    return 'other';
  }

  throw new Error(`No plural message found for value "${value}"`);
}
/**
 * Returns the plural case based on the locale
 *
 * @publicApi
 */


let NgLocaleLocalization = /*#__PURE__*/(() => {
  class NgLocaleLocalization extends NgLocalization {
    constructor(locale) {
      super();
      this.locale = locale;
    }

    getPluralCategory(value, locale) {
      const plural = getLocalePluralCase(locale || this.locale)(value);

      switch (plural) {
        case Plural.Zero:
          return 'zero';

        case Plural.One:
          return 'one';

        case Plural.Two:
          return 'two';

        case Plural.Few:
          return 'few';

        case Plural.Many:
          return 'many';

        default:
          return 'other';
      }
    }

  }

  NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) {
    return new (t || NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID));
  };

  NgLocaleLocalization.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: NgLocaleLocalization,
    factory: NgLocaleLocalization.ɵfac
  });
  return NgLocaleLocalization;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Register global data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n-common-format-data-locale) to know how to import additional locale
 * data.
 *
 * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
 *
 * @publicApi
 */


function registerLocaleData(data, localeId, extraData) {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵregisterLocaleData"])(data, localeId, extraData);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);

  for (const cookie of cookieStr.split(';')) {
    const eqIndex = cookie.indexOf('=');
    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];

    if (cookieName.trim() === name) {
      return decodeURIComponent(cookieValue);
    }
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * @description
 *
 * Adds and removes CSS classes on an HTML element.
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * @publicApi
 */


let NgClass = /*#__PURE__*/(() => {
  class NgClass {
    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers;
      this._keyValueDiffers = _keyValueDiffers;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
      this._iterableDiffer = null;
      this._keyValueDiffer = null;
      this._initialClasses = [];
      this._rawClass = null;
    }

    set klass(value) {
      this._removeClasses(this._initialClasses);

      this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];

      this._applyClasses(this._initialClasses);

      this._applyClasses(this._rawClass);
    }

    set ngClass(value) {
      this._removeClasses(this._rawClass);

      this._applyClasses(this._initialClasses);

      this._iterableDiffer = null;
      this._keyValueDiffer = null;
      this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;

      if (this._rawClass) {
        if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisListLikeIterable"])(this._rawClass)) {
          this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
        } else {
          this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
        }
      }
    }

    ngDoCheck() {
      if (this._iterableDiffer) {
        const iterableChanges = this._iterableDiffer.diff(this._rawClass);

        if (iterableChanges) {
          this._applyIterableChanges(iterableChanges);
        }
      } else if (this._keyValueDiffer) {
        const keyValueChanges = this._keyValueDiffer.diff(this._rawClass);

        if (keyValueChanges) {
          this._applyKeyValueChanges(keyValueChanges);
        }
      }
    }

    _applyKeyValueChanges(changes) {
      changes.forEachAddedItem(record => this._toggleClass(record.key, record.currentValue));
      changes.forEachChangedItem(record => this._toggleClass(record.key, record.currentValue));
      changes.forEachRemovedItem(record => {
        if (record.previousValue) {
          this._toggleClass(record.key, false);
        }
      });
    }

    _applyIterableChanges(changes) {
      changes.forEachAddedItem(record => {
        if (typeof record.item === 'string') {
          this._toggleClass(record.item, true);
        } else {
          throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(record.item)}`);
        }
      });
      changes.forEachRemovedItem(record => this._toggleClass(record.item, false));
    }
    /**
     * Applies a collection of CSS classes to the DOM element.
     *
     * For argument of type Set and Array CSS class names contained in those collections are always
     * added.
     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
     * for truthy and removed for falsy).
     */


    _applyClasses(rawClassVal) {
      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          rawClassVal.forEach(klass => this._toggleClass(klass, true));
        } else {
          Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, !!rawClassVal[klass]));
        }
      }
    }
    /**
     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
     * purposes.
     */


    _removeClasses(rawClassVal) {
      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          rawClassVal.forEach(klass => this._toggleClass(klass, false));
        } else {
          Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, false));
        }
      }
    }

    _toggleClass(klass, enabled) {
      klass = klass.trim();

      if (klass) {
        klass.split(/\s+/g).forEach(klass => {
          if (enabled) {
            this._renderer.addClass(this._ngEl.nativeElement, klass);
          } else {
            this._renderer.removeClass(this._ngEl.nativeElement, klass);
          }
        });
      }
    }

  }

  NgClass.ɵfac = function NgClass_Factory(t) {
    return new (t || NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
  };

  NgClass.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgClass,
    selectors: [["", "ngClass", ""]],
    inputs: {
      klass: ["class", "klass"],
      ngClass: "ngClass"
    }
  });
  return NgClass;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Instantiates a {@link Component} type and inserts its Host View into the current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will be destroyed.
 *
 * @usageNotes
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if it exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow loading another
 * module dynamically, then loading a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 *
 * ### A simple example
 *
 * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 *
 * @publicApi
 * @ngModule CommonModule
 */


let NgComponentOutlet = /*#__PURE__*/(() => {
  class NgComponentOutlet {
    constructor(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
      this._componentRef = null;
      this._moduleRef = null;
    }
    /** @nodoc */


    ngOnChanges(changes) {
      this._viewContainerRef.clear();

      this._componentRef = null;

      if (this.ngComponentOutlet) {
        const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;

        if (changes['ngComponentOutletNgModuleFactory']) {
          if (this._moduleRef) this._moduleRef.destroy();

          if (this.ngComponentOutletNgModuleFactory) {
            const parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
          } else {
            this._moduleRef = null;
          }
        }

        const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver);
        const componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
        this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
      }
    }
    /** @nodoc */


    ngOnDestroy() {
      if (this._moduleRef) this._moduleRef.destroy();
    }

  }

  NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) {
    return new (t || NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
  };

  NgComponentOutlet.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgComponentOutlet,
    selectors: [["", "ngComponentOutlet", ""]],
    inputs: {
      ngComponentOutlet: "ngComponentOutlet",
      ngComponentOutletInjector: "ngComponentOutletInjector",
      ngComponentOutletContent: "ngComponentOutletContent",
      ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return NgComponentOutlet;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


class NgForOfContext {
  constructor($implicit, ngForOf, index, count) {
    this.$implicit = $implicit;
    this.ngForOf = ngForOf;
    this.index = index;
    this.count = count;
  }

  get first() {
    return this.index === 0;
  }

  get last() {
    return this.index === this.count - 1;
  }

  get even() {
    return this.index % 2 === 0;
  }

  get odd() {
    return !this.even;
  }

}
/**
 * A [structural directive](guide/structural-directives) that renders
 * a template for each item in a collection.
 * The directive is placed on an element, which becomes the parent
 * of the cloned templates.
 *
 * The `ngForOf` directive is generally used in the
 * [shorthand form](guide/structural-directives#asterisk) `*ngFor`.
 * In this form, the template to be rendered for each iteration is the content
 * of an anchor element containing the directive.
 *
 * The following example shows the shorthand syntax with some options,
 * contained in an `<li>` element.
 *
 * ```
 * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
 * ```
 *
 * The shorthand form expands into a long form that uses the `ngForOf` selector
 * on an `<ng-template>` element.
 * The content of the `<ng-template>` element is the `<li>` element that held the
 * short-form directive.
 *
 * Here is the expanded version of the short-form example.
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * Angular automatically expands the shorthand syntax as it compiles the template.
 * The context for each embedded view is logically merged to the current component
 * context according to its lexical position.
 *
 * When using the shorthand syntax, Angular allows only [one structural directive
 * on an element](guide/built-in-directives#one-per-element).
 * If you want to iterate conditionally, for example,
 * put the `*ngIf` on a container element that wraps the `*ngFor` element.
 * For futher discussion, see
 * [Structural Directives](guide/built-in-directives#one-per-element).
 *
 * @usageNotes
 *
 * ### Local variables
 *
 * `NgForOf` provides exported values that can be aliased to local variables.
 * For example:
 *
 *  ```
 * <li *ngFor="let user of users; index as i; first as isFirst">
 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
 * </li>
 * ```
 *
 * The following exported values can be aliased to local variables:
 *
 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
 * more complex then a property access, for example when using the async pipe (`userStreams |
 * async`).
 * - `index: number`: The index of the current item in the iterable.
 * - `count: number`: The length of the iterable.
 * - `first: boolean`: True when the item is the first item in the iterable.
 * - `last: boolean`: True when the item is the last item in the iterable.
 * - `even: boolean`: True when the item has an even index in the iterable.
 * - `odd: boolean`: True when the item has an odd index in the iterable.
 *
 * ### Change propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
 *
 * The identities of elements in the iterator can change while the data does not.
 * This can happen, for example, if the iterator is produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
 * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted).
 *
 * To avoid this expensive operation, you can customize the default tracking algorithm.
 * by supplying the `trackBy` option to `NgForOf`.
 * `trackBy` takes a function that has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * @see [Structural Directives](guide/structural-directives)
 * @ngModule CommonModule
 * @publicApi
 */


let NgForOf = /*#__PURE__*/(() => {
  class NgForOf {
    constructor(_viewContainer, _template, _differs) {
      this._viewContainer = _viewContainer;
      this._template = _template;
      this._differs = _differs;
      this._ngForOf = null;
      this._ngForOfDirty = true;
      this._differ = null;
    }
    /**
     * The value of the iterable expression, which can be used as a
     * [template input variable](guide/structural-directives#shorthand).
     */


    set ngForOf(ngForOf) {
      this._ngForOf = ngForOf;
      this._ngForOfDirty = true;
    }
    /**
     * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
     *
     * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
     * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
     * as the key.
     *
     * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
     * it produces for these items.
     *
     * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
     * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
     * primary key), and this iterable could be updated with new object instances that still
     * represent the same underlying entity (for example, when data is re-fetched from the server,
     * and the iterable is recreated and re-rendered, but most of the data is still the same).
     *
     * @see `TrackByFunction`
     */


    set ngForTrackBy(fn) {
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
        // TODO(vicb): use a log service once there is a public one available
        if (console && console.warn) {
          console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` + `See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
        }
      }

      this._trackByFn = fn;
    }

    get ngForTrackBy() {
      return this._trackByFn;
    }
    /**
     * A reference to the template that is stamped out for each item in the iterable.
     * @see [template reference variable](guide/template-reference-variables)
     */


    set ngForTemplate(value) {
      // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
      // The current type is too restrictive; a template that just uses index, for example,
      // should be acceptable.
      if (value) {
        this._template = value;
      }
    }
    /**
     * Applies the changes when needed.
     * @nodoc
     */


    ngDoCheck() {
      if (this._ngForOfDirty) {
        this._ngForOfDirty = false; // React on ngForOf changes only once all inputs have been initialized

        const value = this._ngForOf;

        if (!this._differ && value) {
          if (typeof ngDevMode === 'undefined' || ngDevMode) {
            try {
              // CAUTION: this logic is duplicated for production mode below, as the try-catch
              // is only present in development builds.
              this._differ = this._differs.find(value).create(this.ngForTrackBy);
            } catch (_a) {
              throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);
            }
          } else {
            // CAUTION: this logic is duplicated for development mode above, as the try-catch
            // is only present in development builds.
            this._differ = this._differs.find(value).create(this.ngForTrackBy);
          }
        }
      }

      if (this._differ) {
        const changes = this._differ.diff(this._ngForOf);

        if (changes) this._applyChanges(changes);
      }
    }

    _applyChanges(changes) {
      const viewContainer = this._viewContainer;
      changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
        if (item.previousIndex == null) {
          // NgForOf is never "null" or "undefined" here because the differ detected
          // that a new item needs to be inserted from the iterable. This implies that
          // there is an iterable value for "_ngForOf".
          viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);
        } else if (currentIndex == null) {
          viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
        } else if (adjustedPreviousIndex !== null) {
          const view = viewContainer.get(adjustedPreviousIndex);
          viewContainer.move(view, currentIndex);
          applyViewChange(view, item);
        }
      });

      for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
        const viewRef = viewContainer.get(i);
        const context = viewRef.context;
        context.index = i;
        context.count = ilen;
        context.ngForOf = this._ngForOf;
      }

      changes.forEachIdentityChange(record => {
        const viewRef = viewContainer.get(record.currentIndex);
        applyViewChange(viewRef, record);
      });
    }
    /**
     * Asserts the correct type of the context for the template that `NgForOf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgForOf` structural directive renders its template with a specific context type.
     */


    static ngTemplateContextGuard(dir, ctx) {
      return true;
    }

  }

  NgForOf.ɵfac = function NgForOf_Factory(t) {
    return new (t || NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers));
  };

  NgForOf.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgForOf,
    selectors: [["", "ngFor", "", "ngForOf", ""]],
    inputs: {
      ngForOf: "ngForOf",
      ngForTrackBy: "ngForTrackBy",
      ngForTemplate: "ngForTemplate"
    }
  });
  return NgForOf;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function applyViewChange(view, record) {
  view.context.$implicit = record.item;
}

function getTypeName(type) {
  return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A structural directive that conditionally includes a template based on the value of
 * an expression coerced to Boolean.
 * When the expression evaluates to true, Angular renders the template
 * provided in a `then` clause, and when  false or null,
 * Angular renders the template provided in an optional `else` clause. The default
 * template for the `else` clause is blank.
 *
 * A [shorthand form](guide/structural-directives#asterisk) of the directive,
 * `*ngIf="condition"`, is generally used, provided
 * as an attribute of the anchor element for the inserted template.
 * Angular expands this into a more explicit version, in which the anchor element
 * is contained in an `<ng-template>` element.
 *
 * Simple form with shorthand syntax:
 *
 * ```
 * <div *ngIf="condition">Content to render when condition is true.</div>
 * ```
 *
 * Simple form with expanded syntax:
 *
 * ```
 * <ng-template [ngIf]="condition"><div>Content to render when condition is
 * true.</div></ng-template>
 * ```
 *
 * Form with an "else" block:
 *
 * ```
 * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Shorthand form with "then" and "else" blocks:
 *
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Form with storing the value locally:
 *
 * ```
 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
 * <ng-template #elseBlock>Content to render when value is null.</ng-template>
 * ```
 *
 * @usageNotes
 *
 * The `*ngIf` directive is most commonly used to conditionally show an inline template,
 * as seen in the following  example.
 * The default `else` template is blank.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * ### Showing an alternative template using `else`
 *
 * To display a template when `expression` evaluates to false, use an `else` template
 * binding as shown in the following example.
 * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
 * The template can be defined anywhere in the component view, but is typically placed right after
 * `ngIf` for readability.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * ### Using an external `then` template
 *
 * In the previous example, the then-clause template is specified inline, as the content of the
 * tag that contains the `ngIf` directive. You can also specify a template that is defined
 * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
 * change which template to use at runtime, as shown in the following example.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * ### Storing a conditional result in a variable
 *
 * You might want to show a set of properties from the same object. If you are waiting
 * for asynchronous data, the object can be undefined.
 * In this case, you can use `ngIf` and store the result of the condition in a local
 * variable as shown in the following example.
 *
 * {@example common/ngIf/ts/module.ts region='NgIfAs'}
 *
 * This code uses only one `AsyncPipe`, so only one subscription is created.
 * The conditional statement stores the result of `userStream|async` in the local variable `user`.
 * You can then bind the local `user` repeatedly.
 *
 * The conditional displays the data only if `userStream` returns a value,
 * so you don't need to use the
 * safe-navigation-operator (`?.`)
 * to guard against null values when accessing properties.
 * You can display an alternative template while waiting for the data.
 *
 * ### Shorthand syntax
 *
 * The shorthand syntax `*ngIf` expands into two separate template specifications
 * for the "then" and "else" clauses. For example, consider the following shorthand statement,
 * that is meant to show a loading page while waiting for data to be loaded.
 *
 * ```
 * <div class="hero-list" *ngIf="heroes else loading">
 *  ...
 * </div>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * You can see that the "else" clause references the `<ng-template>`
 * with the `#loading` label, and the template for the "then" clause
 * is provided as the content of the anchor element.
 *
 * However, when Angular expands the shorthand syntax, it creates
 * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
 * The anchor element containing the template for the "then" clause becomes
 * the content of this unlabeled `<ng-template>` tag.
 *
 * ```
 * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
 *  <div class="hero-list">
 *   ...
 *  </div>
 * </ng-template>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * The presence of the implicit template object has implications for the nesting of
 * structural directives. For more on this subject, see
 * [Structural Directives](https://angular.io/guide/built-in-directives#one-per-element).
 *
 * @ngModule CommonModule
 * @publicApi
 */


let NgIf = /*#__PURE__*/(() => {
  class NgIf {
    constructor(_viewContainer, templateRef) {
      this._viewContainer = _viewContainer;
      this._context = new NgIfContext();
      this._thenTemplateRef = null;
      this._elseTemplateRef = null;
      this._thenViewRef = null;
      this._elseViewRef = null;
      this._thenTemplateRef = templateRef;
    }
    /**
     * The Boolean expression to evaluate as the condition for showing a template.
     */


    set ngIf(condition) {
      this._context.$implicit = this._context.ngIf = condition;

      this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to true.
     */


    set ngIfThen(templateRef) {
      assertTemplate('ngIfThen', templateRef);
      this._thenTemplateRef = templateRef;
      this._thenViewRef = null; // clear previous view if any.

      this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to false.
     */


    set ngIfElse(templateRef) {
      assertTemplate('ngIfElse', templateRef);
      this._elseTemplateRef = templateRef;
      this._elseViewRef = null; // clear previous view if any.

      this._updateView();
    }

    _updateView() {
      if (this._context.$implicit) {
        if (!this._thenViewRef) {
          this._viewContainer.clear();

          this._elseViewRef = null;

          if (this._thenTemplateRef) {
            this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
          }
        }
      } else {
        if (!this._elseViewRef) {
          this._viewContainer.clear();

          this._thenViewRef = null;

          if (this._elseTemplateRef) {
            this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
          }
        }
      }
    }
    /**
     * Asserts the correct type of the context for the template that `NgIf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgIf` structural directive renders its template with a specific context type.
     */


    static ngTemplateContextGuard(dir, ctx) {
      return true;
    }

  }

  NgIf.ɵfac = function NgIf_Factory(t) {
    return new (t || NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
  };

  NgIf.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgIf,
    selectors: [["", "ngIf", ""]],
    inputs: {
      ngIf: "ngIf",
      ngIfThen: "ngIfThen",
      ngIfElse: "ngIfElse"
    }
  });
  return NgIf;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @publicApi
 */


class NgIfContext {
  constructor() {
    this.$implicit = null;
    this.ngIf = null;
  }

}

function assertTemplate(property, templateRef) {
  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);

  if (!isTemplateRefOrNull) {
    throw new Error(`${property} must be a TemplateRef, but received '${(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(templateRef)}'.`);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class SwitchView {
  constructor(_viewContainerRef, _templateRef) {
    this._viewContainerRef = _viewContainerRef;
    this._templateRef = _templateRef;
    this._created = false;
  }

  create() {
    this._created = true;

    this._viewContainerRef.createEmbeddedView(this._templateRef);
  }

  destroy() {
    this._created = false;

    this._viewContainerRef.clear();
  }

  enforceState(created) {
    if (created && !this._created) {
      this.create();
    } else if (!created && this._created) {
      this.destroy();
    }
  }

}
/**
 * @ngModule CommonModule
 *
 * @description
 * The `[ngSwitch]` directive on a container specifies an expression to match against.
 * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
 * - Every view that matches is rendered.
 * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
 * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
 * or `ngSwitchDefault` directive are preserved at the location.
 *
 * @usageNotes
 * Define a container element for the directive, and specify the switch expression
 * to match against as an attribute:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 * ```
 *
 * Within the container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * ...
 *    <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * ### Usage Examples
 *
 * The following example shows how to use more than one case to display the same view:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <!-- the same view can be shown in more than one case -->
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *   <!--default case when there are no matches -->
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * The following example shows how cases can be nested:
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 *
 * @publicApi
 * @see `NgSwitchCase`
 * @see `NgSwitchDefault`
 * @see [Structural Directives](guide/structural-directives)
 *
 */


let NgSwitch = /*#__PURE__*/(() => {
  class NgSwitch {
    constructor() {
      this._defaultUsed = false;
      this._caseCount = 0;
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }

    set ngSwitch(newValue) {
      this._ngSwitch = newValue;

      if (this._caseCount === 0) {
        this._updateDefaultCases(true);
      }
    }
    /** @internal */


    _addCase() {
      return this._caseCount++;
    }
    /** @internal */


    _addDefault(view) {
      if (!this._defaultViews) {
        this._defaultViews = [];
      }

      this._defaultViews.push(view);
    }
    /** @internal */


    _matchCase(value) {
      const matched = value == this._ngSwitch;
      this._lastCasesMatched = this._lastCasesMatched || matched;
      this._lastCaseCheckIndex++;

      if (this._lastCaseCheckIndex === this._caseCount) {
        this._updateDefaultCases(!this._lastCasesMatched);

        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
      }

      return matched;
    }

    _updateDefaultCases(useDefault) {
      if (this._defaultViews && useDefault !== this._defaultUsed) {
        this._defaultUsed = useDefault;

        for (let i = 0; i < this._defaultViews.length; i++) {
          const defaultView = this._defaultViews[i];
          defaultView.enforceState(useDefault);
        }
      }
    }

  }

  NgSwitch.ɵfac = function NgSwitch_Factory(t) {
    return new (t || NgSwitch)();
  };

  NgSwitch.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgSwitch,
    selectors: [["", "ngSwitch", ""]],
    inputs: {
      ngSwitch: "ngSwitch"
    }
  });
  return NgSwitch;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @ngModule CommonModule
 *
 * @description
 * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
 * When the expressions match, the given `NgSwitchCase` template is rendered.
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * @usageNotes
 *
 * Within a switch container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   ...
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * Each switch-case statement contains an in-line HTML template or template reference
 * that defines the subtree to be selected if the value of the match expression
 * matches the value of the switch expression.
 *
 * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
 * This means that the empty string, `""` matches 0.
 *
 * @publicApi
 * @see `NgSwitch`
 * @see `NgSwitchDefault`
 *
 */


let NgSwitchCase = /*#__PURE__*/(() => {
  class NgSwitchCase {
    constructor(viewContainer, templateRef, ngSwitch) {
      this.ngSwitch = ngSwitch;

      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
        throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');
      }

      ngSwitch._addCase();

      this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * Performs case matching. For internal use only.
     * @nodoc
     */


    ngDoCheck() {
      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
    }

  }

  NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) {
    return new (t || NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 9));
  };

  NgSwitchCase.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgSwitchCase,
    selectors: [["", "ngSwitchCase", ""]],
    inputs: {
      ngSwitchCase: "ngSwitchCase"
    }
  });
  return NgSwitchCase;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Creates a view that is rendered when no `NgSwitchCase` expressions
 * match the `NgSwitch` expression.
 * This statement should be the final case in an `NgSwitch`.
 *
 * @publicApi
 * @see `NgSwitch`
 * @see `NgSwitchCase`
 *
 */


let NgSwitchDefault = /*#__PURE__*/(() => {
  class NgSwitchDefault {
    constructor(viewContainer, templateRef, ngSwitch) {
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {
        throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');
      }

      ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }

  }

  NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) {
    return new (t || NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 9));
  };

  NgSwitchDefault.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgSwitchDefault,
    selectors: [["", "ngSwitchDefault", ""]]
  });
  return NgSwitchDefault;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](2000
  /* PARENT_NG_SWITCH_NOT_FOUND */
  , `An element with the "${attrName}" attribute ` + `(matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute ` + `(matching "NgSwitch" directive)`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * @description
 *
 * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * @publicApi
 */


let NgPlural = /*#__PURE__*/(() => {
  class NgPlural {
    constructor(_localization) {
      this._localization = _localization;
      this._caseViews = {};
    }

    set ngPlural(value) {
      this._switchValue = value;

      this._updateView();
    }

    addCase(value, switchView) {
      this._caseViews[value] = switchView;
    }

    _updateView() {
      this._clearViews();

      const cases = Object.keys(this._caseViews);
      const key = getPluralCategory(this._switchValue, cases, this._localization);

      this._activateView(this._caseViews[key]);
    }

    _clearViews() {
      if (this._activeView) this._activeView.destroy();
    }

    _activateView(view) {
      if (view) {
        this._activeView = view;

        this._activeView.create();
      }
    }

  }

  NgPlural.ɵfac = function NgPlural_Factory(t) {
    return new (t || NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization));
  };

  NgPlural.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgPlural,
    selectors: [["", "ngPlural", ""]],
    inputs: {
      ngPlural: "ngPlural"
    }
  });
  return NgPlural;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Creates a view that will be added/removed from the parent {@link NgPlural} when the
 * given expression matches the plural expression according to CLDR rules.
 *
 * @usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 *```
 *
 * See {@link NgPlural} for more details and example.
 *
 * @publicApi
 */


let NgPluralCase = /*#__PURE__*/(() => {
  class NgPluralCase {
    constructor(value, template, viewContainer, ngPlural) {
      this.value = value;
      const isANumber = !isNaN(Number(value));
      ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));
    }

  }

  NgPluralCase.ɵfac = function NgPluralCase_Factory(t) {
    return new (t || NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgPlural, 1));
  };

  NgPluralCase.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgPluralCase,
    selectors: [["", "ngPluralCase", ""]]
  });
  return NgPluralCase;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @usageNotes
 *
 * Set the font of the containing element to the result of an expression.
 *
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 * ```
 *
 * Set the width of the containing element to a pixel value returned by an expression.
 *
 * ```
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 * ```
 *
 * Set a collection of style values using an expression that returns key-value pairs.
 *
 * ```
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * @description
 *
 * An attribute directive that updates styles for the containing HTML element.
 * Sets one or more style properties, specified as colon-separated key-value pairs.
 * The key is a style name, with an optional `.<unit>` suffix
 * (such as 'top.px', 'font-style.em').
 * The value is an expression to be evaluated.
 * The resulting non-null value, expressed in the given unit,
 * is assigned to the given style property.
 * If the result of evaluation is null, the corresponding style is removed.
 *
 * @publicApi
 */


let NgStyle = /*#__PURE__*/(() => {
  class NgStyle {
    constructor(_ngEl, _differs, _renderer) {
      this._ngEl = _ngEl;
      this._differs = _differs;
      this._renderer = _renderer;
      this._ngStyle = null;
      this._differ = null;
    }

    set ngStyle(values) {
      this._ngStyle = values;

      if (!this._differ && values) {
        this._differ = this._differs.find(values).create();
      }
    }

    ngDoCheck() {
      if (this._differ) {
        const changes = this._differ.diff(this._ngStyle);

        if (changes) {
          this._applyChanges(changes);
        }
      }
    }

    _setStyle(nameAndUnit, value) {
      const [name, unit] = nameAndUnit.split('.');
      value = value != null && unit ? `${value}${unit}` : value;

      if (value != null) {
        this._renderer.setStyle(this._ngEl.nativeElement, name, value);
      } else {
        this._renderer.removeStyle(this._ngEl.nativeElement, name);
      }
    }

    _applyChanges(changes) {
      changes.forEachRemovedItem(record => this._setStyle(record.key, null));
      changes.forEachAddedItem(record => this._setStyle(record.key, record.currentValue));
      changes.forEachChangedItem(record => this._setStyle(record.key, record.currentValue));
    }

  }

  NgStyle.ɵfac = function NgStyle_Factory(t) {
    return new (t || NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
  };

  NgStyle.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgStyle,
    selectors: [["", "ngStyle", ""]],
    inputs: {
      ngStyle: "ngStyle"
    }
  });
  return NgStyle;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 *
 * @description
 *
 * Inserts an embedded view from a prepared `TemplateRef`.
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * @usageNotes
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * Using the key `$implicit` in the context object will set its value as default.
 *
 * ### Example
 *
 * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * @publicApi
 */


let NgTemplateOutlet = /*#__PURE__*/(() => {
  class NgTemplateOutlet {
    constructor(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
      this._viewRef = null;
      /**
       * A context object to attach to the {@link EmbeddedViewRef}. This should be an
       * object, the object's keys will be available for binding by the local template `let`
       * declarations.
       * Using the key `$implicit` in the context object will set its value as default.
       */

      this.ngTemplateOutletContext = null;
      /**
       * A string defining the template reference and optionally the context object for the template.
       */

      this.ngTemplateOutlet = null;
    }
    /** @nodoc */


    ngOnChanges(changes) {
      if (changes['ngTemplateOutlet']) {
        const viewContainerRef = this._viewContainerRef;

        if (this._viewRef) {
          viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
        }

        this._viewRef = this.ngTemplateOutlet ? viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) : null;
      } else if (this._viewRef && changes['ngTemplateOutletContext'] && this.ngTemplateOutletContext) {
        this._viewRef.context = this.ngTemplateOutletContext;
      }
    }

  }

  NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) {
    return new (t || NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
  };

  NgTemplateOutlet.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: NgTemplateOutlet,
    selectors: [["", "ngTemplateOutlet", ""]],
    inputs: {
      ngTemplateOutletContext: "ngTemplateOutletContext",
      ngTemplateOutlet: "ngTemplateOutlet"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return NgTemplateOutlet;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */


const COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function invalidPipeArgumentError(type, value) {
  const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `InvalidPipeArgument: '${value}' for pipe '${(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(type)}'` : '';
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](2100
  /* INVALID_PIPE_ARGUMENT */
  , errorMessage);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class SubscribableStrategy {
  createSubscription(async, updateLatestValue) {
    return async.subscribe({
      next: updateLatestValue,
      error: e => {
        throw e;
      }
    });
  }

  dispose(subscription) {
    subscription.unsubscribe();
  }

  onDestroy(subscription) {
    subscription.unsubscribe();
  }

}

class PromiseStrategy {
  createSubscription(async, updateLatestValue) {
    return async.then(updateLatestValue, e => {
      throw e;
    });
  }

  dispose(subscription) {}

  onDestroy(subscription) {}

}

const _promiseStrategy = /*#__PURE__*/new PromiseStrategy();

const _subscribableStrategy = /*#__PURE__*/new SubscribableStrategy();
/**
 * @ngModule CommonModule
 * @description
 *
 * Unwraps a value from an asynchronous primitive.
 *
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks. When the reference of the expression changes, the `async` pipe
 * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.
 *
 * @usageNotes
 *
 * ### Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * @publicApi
 */


let AsyncPipe = /*#__PURE__*/(() => {
  class AsyncPipe {
    constructor(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._subscription = null;
      this._obj = null;
      this._strategy = null;
    }

    ngOnDestroy() {
      if (this._subscription) {
        this._dispose();
      }
    }

    transform(obj) {
      if (!this._obj) {
        if (obj) {
          this._subscribe(obj);
        }

        return this._latestValue;
      }

      if (obj !== this._obj) {
        this._dispose();

        return this.transform(obj);
      }

      return this._latestValue;
    }

    _subscribe(obj) {
      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, value => this._updateLatestValue(obj, value));
    }

    _selectStrategy(obj) {
      if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(obj)) {
        return _promiseStrategy;
      }

      if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisSubscribable"])(obj)) {
        return _subscribableStrategy;
      }

      throw invalidPipeArgumentError(AsyncPipe, obj);
    }

    _dispose() {
      this._strategy.dispose(this._subscription);

      this._latestValue = null;
      this._subscription = null;
      this._obj = null;
    }

    _updateLatestValue(async, value) {
      if (async === this._obj) {
        this._latestValue = value;

        this._ref.markForCheck();
      }
    }

  }

  AsyncPipe.ɵfac = function AsyncPipe_Factory(t) {
    return new (t || AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef, 16));
  };

  AsyncPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "async",
    type: AsyncPipe,
    pure: false
  });
  return AsyncPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Transforms text to all lower case.
 *
 * @see `UpperCasePipe`
 * @see `TitleCasePipe`
 * @usageNotes
 *
 * The following example defines a view that allows the user to enter
 * text, and then uses the pipe to convert the input text to all lower case.
 *
 * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
 *
 * @ngModule CommonModule
 * @publicApi
 */


let LowerCasePipe = /*#__PURE__*/(() => {
  class LowerCasePipe {
    transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(LowerCasePipe, value);
      }

      return value.toLowerCase();
    }

  }

  LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) {
    return new (t || LowerCasePipe)();
  };

  LowerCasePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "lowercase",
    type: LowerCasePipe,
    pure: true
  });
  return LowerCasePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})(); //
// Regex below matches any Unicode word and number compatible with ES5. In ES2018 the same result
// can be achieved by using /[0-9\p{L}]\S*/gu and also known as Unicode Property Escapes
// (https://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
// transpilation of this functionality down to ES5 without external tool, the only solution is
// to use already transpiled form. Example can be found here -
// https://mothereff.in/regexpu#input=var+regex+%3D+%2F%5B0-9%5Cp%7BL%7D%5D%5CS*%2Fgu%3B%0A%0A&unicodePropertyEscape=1
//


const unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
/**
 * Transforms text to title case.
 * Capitalizes the first letter of each word and transforms the
 * rest of the word to lower case.
 * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
 *
 * @see `LowerCasePipe`
 * @see `UpperCasePipe`
 *
 * @usageNotes
 * The following example shows the result of transforming various strings into title case.
 *
 * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
 *
 * @ngModule CommonModule
 * @publicApi
 */

let TitleCasePipe = /*#__PURE__*/(() => {
  class TitleCasePipe {
    transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(TitleCasePipe, value);
      }

      return value.replace(unicodeWordMatch, txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase());
    }

  }

  TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) {
    return new (t || TitleCasePipe)();
  };

  TitleCasePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "titlecase",
    type: TitleCasePipe,
    pure: true
  });
  return TitleCasePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Transforms text to all upper case.
 * @see `LowerCasePipe`
 * @see `TitleCasePipe`
 *
 * @ngModule CommonModule
 * @publicApi
 */


let UpperCasePipe = /*#__PURE__*/(() => {
  class UpperCasePipe {
    transform(value) {
      if (value == null) return null;

      if (typeof value !== 'string') {
        throw invalidPipeArgumentError(UpperCasePipe, value);
      }

      return value.toUpperCase();
    }

  }

  UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) {
    return new (t || UpperCasePipe)();
  };

  UpperCasePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "uppercase",
    type: UpperCasePipe,
    pure: true
  });
  return UpperCasePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Optionally-provided default timezone to use for all instances of `DatePipe` (such as `'+0430'`).
 * If the value isn't provided, the `DatePipe` will use the end-user's local system timezone.
 */


const DATE_PIPE_DEFAULT_TIMEZONE = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('DATE_PIPE_DEFAULT_TIMEZONE'); // clang-format off

/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a date value according to locale rules.
 *
 * `DatePipe` is executed only when it detects a pure change to the input value.
 * A pure change is either a change to a primitive input value
 * (such as `String`, `Number`, `Boolean`, or `Symbol`),
 * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).
 *
 * Note that mutating a `Date` object does not cause the pipe to be rendered again.
 * To ensure that the pipe is executed, you must create a new `Date` object.
 *
 * Only the `en-US` locale data comes with Angular. To localize dates
 * in another language, you must import the corresponding locale data.
 * See the [I18n guide](guide/i18n-common-format-data-locale) for more information.
 *
 * The time zone of the formatted value can be specified either by passing it in as the second
 * parameter of the pipe, or by setting the default through the `DATE_PIPE_DEFAULT_TIMEZONE`
 * injection token. The value that is passed in as the second parameter takes precedence over
 * the one defined using the injection token.
 *
 * @see `formatDate()`
 *
 *
 * @usageNotes
 *
 * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
 * reformat the date on every change-detection cycle, treat the date as an immutable object
 * and change the reference when the pipe needs to run again.
 *
 * ### Pre-defined format options
 *
 * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |
 * |---------------|-------------------------------------|-------------------------------------------------|
 * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |
 * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |
 * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |
 * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |
 * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |
 * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |
 * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |
 * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |
 * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |
 * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |
 * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |
 * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |
 *
 * ### Custom format options
 *
 * You can construct a format string using symbols to specify the components
 * of a date-time value, as described in the following table.
 * Format details depend on the locale.
 * Fields marked with (*) are only available in the extra data set for the given locale.
 *
 *  | Field type          | Format      | Description                                                   | Example Value                                              |
 *  |-------------------- |-------------|---------------------------------------------------------------|------------------------------------------------------------|
 *  | Era                 | G, GG & GGG | Abbreviated                                                   | AD                                                         |
 *  |                     | GGGG        | Wide                                                          | Anno Domini                                                |
 *  |                     | GGGGG       | Narrow                                                        | A                                                          |
 *  | Year                | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                     | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                     | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                     | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                     | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                     | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                     | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Month               | M           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                     | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                     | MMM         | Abbreviated                                                   | Sep                                                        |
 *  |                     | MMMM        | Wide                                                          | September                                                  |
 *  |                     | MMMMM       | Narrow                                                        | S                                                          |
 *  | Month standalone    | L           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                     | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                     | LLL         | Abbreviated                                                   | Sep                                                        |
 *  |                     | LLLL        | Wide                                                          | September                                                  |
 *  |                     | LLLLL       | Narrow                                                        | S                                                          |
 *  | Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |
 *  |                     | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
 *  | Week of month       | W           | Numeric: 1 digit                                              | 1... 5                                                     |
 *  | Day of month        | d           | Numeric: minimum digits                                       | 1                                                          |
 *  |                     | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |
 *  | Week day            | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
 *  |                     | EEEE        | Wide                                                          | Tuesday                                                    |
 *  |                     | EEEEE       | Narrow                                                        | T                                                          |
 *  |                     | EEEEEE      | Short                                                         | Tu                                                         |
 *  | Week day standalone | c, cc       | Numeric: 1 digit                                              | 2                                                          |
 *  |                     | ccc         | Abbreviated                                                   | Tue                                                        |
 *  |                     | cccc        | Wide                                                          | Tuesday                                                    |
 *  |                     | ccccc       | Narrow                                                        | T                                                          |
 *  |                     | cccccc      | Short                                                         | Tu                                                         |
 *  | Period              | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
 *  |                     | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
 *  |                     | aaaaa       | Narrow                                                        | a/p                                                        |
 *  | Period*             | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
 *  |                     | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                     | BBBBB       | Narrow                                                        | md                                                         |
 *  | Period standalone*  | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
 *  |                     | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                     | bbbbb       | Narrow                                                        | md                                                         |
 *  | Hour 1-12           | h           | Numeric: minimum digits                                       | 1, 12                                                      |
 *  |                     | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
 *  | Hour 0-23           | H           | Numeric: minimum digits                                       | 0, 23                                                      |
 *  |                     | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
 *  | Minute              | m           | Numeric: minimum digits                                       | 8, 59                                                      |
 *  |                     | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
 *  | Second              | s           | Numeric: minimum digits                                       | 0... 59                                                    |
 *  |                     | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
 *  | Fractional seconds  | S           | Numeric: 1 digit                                              | 0... 9                                                     |
 *  |                     | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
 *  |                     | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
 *  | Zone                | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
 *  |                     | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
 *  |                     | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
 *  |                     | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
 *  |                     | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
 *  |                     | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
 *  |                     | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
 *
 *
 * ### Format examples
 *
 * These examples transform a date into various formats,
 * assuming that `dateObj` is a JavaScript `Date` object for
 * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
 * given in the local time for the `en-US` locale.
 *
 * ```
 * {{ dateObj | date }}               // output is 'Jun 15, 2015'
 * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
 * ```
 *
 * ### Usage example
 *
 * The following component uses a date pipe to display the current date in different formats.
 *
 * ```
 * @Component({
 *  selector: 'date-pipe',
 *  template: `<div>
 *    <p>Today is {{today | date}}</p>
 *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
 *    <p>The time is {{today | date:'h:mm a z'}}</p>
 *  </div>`
 * })
 * // Get the current date and time as a date-time value.
 * export class DatePipeComponent {
 *   today: number = Date.now();
 * }
 * ```
 *
 * @publicApi
 */
// clang-format on

let DatePipe = /*#__PURE__*/(() => {
  class DatePipe {
    constructor(locale, defaultTimezone) {
      this.locale = locale;
      this.defaultTimezone = defaultTimezone;
    }

    transform(value, format = 'mediumDate', timezone, locale) {
      var _a;

      if (value == null || value === '' || value !== value) return null;

      try {
        return formatDate(value, format, locale || this.locale, (_a = timezone !== null && timezone !== void 0 ? timezone : this.defaultTimezone) !== null && _a !== void 0 ? _a : undefined);
      } catch (error) {
        throw invalidPipeArgumentError(DatePipe, error.message);
      }
    }

  }

  DatePipe.ɵfac = function DatePipe_Factory(t) {
    return new (t || DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DATE_PIPE_DEFAULT_TIMEZONE, 24));
  };

  DatePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "date",
    type: DatePipe,
    pure: true
  });
  return DatePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const _INTERPOLATION_REGEXP = /#/g;
/**
 * @ngModule CommonModule
 * @description
 *
 * Maps a value to a string that pluralizes the value according to locale rules.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * @publicApi
 */

let I18nPluralPipe = /*#__PURE__*/(() => {
  class I18nPluralPipe {
    constructor(_localization) {
      this._localization = _localization;
    }
    /**
     * @param value the number to be formatted
     * @param pluralMap an object that mimics the ICU format, see
     * http://userguide.icu-project.org/formatparse/messages.
     * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
     * default).
     */


    transform(value, pluralMap, locale) {
      if (value == null) return '';

      if (typeof pluralMap !== 'object' || pluralMap === null) {
        throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
      }

      const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
      return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    }

  }

  I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) {
    return new (t || I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization, 16));
  };

  I18nPluralPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "i18nPlural",
    type: I18nPluralPipe,
    pure: true
  });
  return I18nPluralPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Generic selector that displays the string that matches the current value.
 *
 * If none of the keys of the `mapping` match the `value`, then the content
 * of the `other` key is returned when present, otherwise an empty string is returned.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 * @publicApi
 */


let I18nSelectPipe = /*#__PURE__*/(() => {
  class I18nSelectPipe {
    /**
     * @param value a string to be internationalized.
     * @param mapping an object that indicates the text that should be displayed
     * for different values of the provided `value`.
     */
    transform(value, mapping) {
      if (value == null) return '';

      if (typeof mapping !== 'object' || typeof value !== 'string') {
        throw invalidPipeArgumentError(I18nSelectPipe, mapping);
      }

      if (mapping.hasOwnProperty(value)) {
        return mapping[value];
      }

      if (mapping.hasOwnProperty('other')) {
        return mapping['other'];
      }

      return '';
    }

  }

  I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) {
    return new (t || I18nSelectPipe)();
  };

  I18nSelectPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "i18nSelect",
    type: I18nSelectPipe,
    pure: true
  });
  return I18nSelectPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Converts a value into its JSON-format representation.  Useful for debugging.
 *
 * @usageNotes
 *
 * The following component uses a JSON pipe to convert an object
 * to JSON format, and displays the string in both formats for comparison.
 *
 * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * @publicApi
 */


let JsonPipe = /*#__PURE__*/(() => {
  class JsonPipe {
    /**
     * @param value A value of any type to convert into a JSON-format string.
     */
    transform(value) {
      return JSON.stringify(value, null, 2);
    }

  }

  JsonPipe.ɵfac = function JsonPipe_Factory(t) {
    return new (t || JsonPipe)();
  };

  JsonPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "json",
    type: JsonPipe,
    pure: false
  });
  return JsonPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function makeKeyValuePair(key, value) {
  return {
    key: key,
    value: value
  };
}
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms Object or Map into an array of key value pairs.
 *
 * The output array will be ordered by keys.
 * By default the comparator will be by Unicode point value.
 * You can optionally pass a compareFn if your keys are complex types.
 *
 * @usageNotes
 * ### Examples
 *
 * This examples show how an Object or a Map can be iterated by ngFor with the use of this
 * keyvalue pipe.
 *
 * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
 *
 * @publicApi
 */


let KeyValuePipe = /*#__PURE__*/(() => {
  class KeyValuePipe {
    constructor(differs) {
      this.differs = differs;
      this.keyValues = [];
      this.compareFn = defaultComparator;
    }

    transform(input, compareFn = defaultComparator) {
      if (!input || !(input instanceof Map) && typeof input !== 'object') {
        return null;
      }

      if (!this.differ) {
        // make a differ for whatever type we've been passed in
        this.differ = this.differs.find(input).create();
      }

      const differChanges = this.differ.diff(input);
      const compareFnChanged = compareFn !== this.compareFn;

      if (differChanges) {
        this.keyValues = [];
        differChanges.forEachItem(r => {
          this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
        });
      }

      if (differChanges || compareFnChanged) {
        this.keyValues.sort(compareFn);
        this.compareFn = compareFn;
      }

      return this.keyValues;
    }

  }

  KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {
    return new (t || KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.KeyValueDiffers, 16));
  };

  KeyValuePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "keyvalue",
    type: KeyValuePipe,
    pure: false
  });
  return KeyValuePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function defaultComparator(keyValueA, keyValueB) {
  const a = keyValueA.key;
  const b = keyValueB.key; // if same exit with 0;

  if (a === b) return 0; // make sure that undefined are at the end of the sort.

  if (a === undefined) return 1;
  if (b === undefined) return -1; // make sure that nulls are at the end of the sort.

  if (a === null) return 1;
  if (b === null) return -1;

  if (typeof a == 'string' && typeof b == 'string') {
    return a < b ? -1 : 1;
  }

  if (typeof a == 'number' && typeof b == 'number') {
    return a - b;
  }

  if (typeof a == 'boolean' && typeof b == 'boolean') {
    return a < b ? -1 : 1;
  } // `a` and `b` are of different types. Compare their string values.


  const aString = String(a);
  const bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Formats a value according to digit options and locale rules.
 * Locale determines group sizing and separator,
 * decimal point character, and other locale-specific configurations.
 *
 * @see `formatNumber()`
 *
 * @usageNotes
 *
 * ### digitsInfo
 *
 * The value's decimal representation is specified by the `digitsInfo`
 * parameter, written in the following format:<br>
 *
 * ```
 * {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
 * ```
 *
 *  - `minIntegerDigits`:
 * The minimum number of integer digits before the decimal point.
 * Default is 1.
 *
 * - `minFractionDigits`:
 * The minimum number of digits after the decimal point.
 * Default is 0.
 *
 *  - `maxFractionDigits`:
 * The maximum number of digits after the decimal point.
 * Default is 3.
 *
 * If the formatted value is truncated it will be rounded using the "to-nearest" method:
 *
 * ```
 * {{3.6 | number: '1.0-0'}}
 * <!--will output '4'-->
 *
 * {{-3.6 | number:'1.0-0'}}
 * <!--will output '-4'-->
 * ```
 *
 * ### locale
 *
 * `locale` will format a value according to locale rules.
 * Locale determines group sizing and separator,
 * decimal point character, and other locale-specific configurations.
 *
 * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
 *
 * See [Setting your app locale](guide/i18n-common-locale-id).
 *
 * ### Example
 *
 * The following code shows how the pipe transforms values
 * according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
 *
 * @publicApi
 */


let DecimalPipe = /*#__PURE__*/(() => {
  class DecimalPipe {
    constructor(_locale) {
      this._locale = _locale;
    }
    /**
     * @param value The value to be formatted.
     * @param digitsInfo Sets digit and decimal representation.
     * [See more](#digitsinfo).
     * @param locale Specifies what locale format rules to use.
     * [See more](#locale).
     */


    transform(value, digitsInfo, locale) {
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      try {
        const num = strToNumber(value);
        return formatNumber(num, locale, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(DecimalPipe, error.message);
      }
    }

  }

  DecimalPipe.ɵfac = function DecimalPipe_Factory(t) {
    return new (t || DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16));
  };

  DecimalPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "number",
    type: DecimalPipe,
    pure: true
  });
  return DecimalPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms a number to a percentage
 * string, formatted according to locale rules that determine group sizing and
 * separator, decimal-point character, and other locale-specific
 * configurations.
 *
 * @see `formatPercent()`
 *
 * @usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
 *
 * @publicApi
 */


let PercentPipe = /*#__PURE__*/(() => {
  class PercentPipe {
    constructor(_locale) {
      this._locale = _locale;
    }
    /**
     *
     * @param value The number to be formatted as a percentage.
     * @param digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `0`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `0`.
     * @param locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n-common-locale-id).
     */


    transform(value, digitsInfo, locale) {
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      try {
        const num = strToNumber(value);
        return formatPercent(num, locale, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(PercentPipe, error.message);
      }
    }

  }

  PercentPipe.ɵfac = function PercentPipe_Factory(t) {
    return new (t || PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16));
  };

  PercentPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "percent",
    type: PercentPipe,
    pure: true
  });
  return PercentPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms a number to a currency string, formatted according to locale rules
 * that determine group sizing and separator, decimal-point character,
 * and other locale-specific configurations.
 *
 * {@a currency-code-deprecation}
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v11 the default currency code will be taken from the current locale identified by
 * the `LOCALE_ID` token. See the [i18n guide](guide/i18n-common-locale-id) for
 * more information.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * @see `getCurrencySymbol()`
 * @see `formatCurrency()`
 *
 * @usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
 *
 * @publicApi
 */


let CurrencyPipe = /*#__PURE__*/(() => {
  class CurrencyPipe {
    constructor(_locale, _defaultCurrencyCode = 'USD') {
      this._locale = _locale;
      this._defaultCurrencyCode = _defaultCurrencyCode;
    }
    /**
     *
     * @param value The number to be formatted as currency.
     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
     * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
     * configured using the `DEFAULT_CURRENCY_CODE` injection token.
     * @param display The format for the currency indicator. One of the following:
     *   - `code`: Show the code (such as `USD`).
     *   - `symbol`(default): Show the symbol (such as `$`).
     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
     * currency.
     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
     * locale has no narrow symbol, uses the standard symbol for the locale.
     *   - String: Use the given string value instead of a code or a symbol.
     * For example, an empty string will suppress the currency & symbol.
     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
     *
     * @param digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `2`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `2`.
     * If not provided, the number will be formatted with the proper amount of digits,
     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
     * @param locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n-common-locale-id).
     */


    transform(value, currencyCode = this._defaultCurrencyCode, display = 'symbol', digitsInfo, locale) {
      if (!isValue(value)) return null;
      locale = locale || this._locale;

      if (typeof display === 'boolean') {
        if ((typeof ngDevMode === 'undefined' || ngDevMode) && console && console.warn) {
          console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
        }

        display = display ? 'symbol' : 'code';
      }

      let currency = currencyCode || this._defaultCurrencyCode;

      if (display !== 'code') {
        if (display === 'symbol' || display === 'symbol-narrow') {
          currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
        } else {
          currency = display;
        }
      }

      try {
        const num = strToNumber(value);
        return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
      } catch (error) {
        throw invalidPipeArgumentError(CurrencyPipe, error.message);
      }
    }

  }

  CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) {
    return new (t || CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID, 16), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CURRENCY_CODE, 16));
  };

  CurrencyPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "currency",
    type: CurrencyPipe,
    pure: true
  });
  return CurrencyPipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function isValue(value) {
  return !(value == null || value === '' || value !== value);
}
/**
 * Transforms a string into a number (if needed).
 */


function strToNumber(value) {
  // Convert strings to numbers
  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }

  if (typeof value !== 'number') {
    throw new Error(`${value} is not a number`);
  }

  return value;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @ngModule CommonModule
 * @description
 *
 * Creates a new `Array` or `String` containing a subset (slice) of the elements.
 *
 * @usageNotes
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on an `Array`, the returned `Array` is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ### List Example
 *
 * This `ngFor` example:
 *
 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 * ```html
 * <li>b</li>
 * <li>c</li>
 * ```
 *
 * ### String Examples
 *
 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * @publicApi
 */


let SlicePipe = /*#__PURE__*/(() => {
  class SlicePipe {
    transform(value, start, end) {
      if (value == null) return null;

      if (!this.supports(value)) {
        throw invalidPipeArgumentError(SlicePipe, value);
      }

      return value.slice(start, end);
    }

    supports(obj) {
      return typeof obj === 'string' || Array.isArray(obj);
    }

  }

  SlicePipe.ɵfac = function SlicePipe_Factory(t) {
    return new (t || SlicePipe)();
  };

  SlicePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
    name: "slice",
    type: SlicePipe,
    pure: false
  });
  return SlicePipe;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */


const COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This does not contain the location providers,
// as they need some platform specific implementations to work.

/**
 * Exports all the basic Angular directives and pipes,
 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * * The `providers` options configure the NgModule's injector to provide
 * localization dependencies to members.
 * * The `exports` options make the declared directives and pipes available for import
 * by other NgModules.
 *
 * @publicApi
 */

let CommonModule = /*#__PURE__*/(() => {
  class CommonModule {}

  CommonModule.ɵfac = function CommonModule_Factory(t) {
    return new (t || CommonModule)();
  };

  CommonModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: CommonModule
  });
  CommonModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return CommonModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const PLATFORM_BROWSER_ID = 'browser';
const PLATFORM_SERVER_ID = 'server';
const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * @publicApi
 */

function isPlatformBrowser(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * @publicApi
 */


function isPlatformServer(platformId) {
  return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * @publicApi
 */


function isPlatformWorkerApp(platformId) {
  return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * @publicApi
 */


function isPlatformWorkerUi(platformId) {
  return platformId === PLATFORM_WORKER_UI_ID;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


const VERSION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
 *
 * @publicApi
 */

let ViewportScroller = /*#__PURE__*/(() => {
  class ViewportScroller {}

  // De-sugared tree-shakable injection
  // See #23917

  /** @nocollapse */
  ViewportScroller.ɵprov = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
    token: ViewportScroller,
    providedIn: 'root',
    factory: () => new BrowserViewportScroller((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT), window)
  });
  /**
   * Manages the scroll position for a browser window.
   */

  return ViewportScroller;
})();

class BrowserViewportScroller {
  constructor(document, window) {
    this.document = document;
    this.window = window;

    this.offset = () => [0, 0];
  }
  /**
   * Configures the top offset used when scrolling to an anchor.
   * @param offset A position in screen coordinates (a tuple with x and y values)
   * or a function that returns the top offset position.
   *
   */


  setOffset(offset) {
    if (Array.isArray(offset)) {
      this.offset = () => offset;
    } else {
      this.offset = offset;
    }
  }
  /**
   * Retrieves the current scroll position.
   * @returns The position in screen coordinates.
   */


  getScrollPosition() {
    if (this.supportsScrolling()) {
      return [this.window.pageXOffset, this.window.pageYOffset];
    } else {
      return [0, 0];
    }
  }
  /**
   * Sets the scroll position.
   * @param position The new position in screen coordinates.
   */


  scrollToPosition(position) {
    if (this.supportsScrolling()) {
      this.window.scrollTo(position[0], position[1]);
    }
  }
  /**
   * Scrolls to an element and attempts to focus the element.
   *
   * Note that the function name here is misleading in that the target string may be an ID for a
   * non-anchor element.
   *
   * @param target The ID of an element or name of the anchor.
   *
   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
   * @see https://html.spec.whatwg.org/#scroll-to-fragid
   */


  scrollToAnchor(target) {
    if (!this.supportsScrolling()) {
      return;
    }

    const elSelected = findAnchorFromDocument(this.document, target);

    if (elSelected) {
      this.scrollToElement(elSelected); // After scrolling to the element, the spec dictates that we follow the focus steps for the
      // target. Rather than following the robust steps, simply attempt focus.
      //
      // @see https://html.spec.whatwg.org/#get-the-focusable-area
      // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus
      // @see https://html.spec.whatwg.org/#focusable-area

      elSelected.focus();
    }
  }
  /**
   * Disables automatic scroll restoration provided by the browser.
   */


  setHistoryScrollRestoration(scrollRestoration) {
    if (this.supportScrollRestoration()) {
      const history = this.window.history;

      if (history && history.scrollRestoration) {
        history.scrollRestoration = scrollRestoration;
      }
    }
  }
  /**
   * Scrolls to an element using the native offset and the specified offset set on this scroller.
   *
   * The offset can be used when we know that there is a floating header and scrolling naively to an
   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
   */


  scrollToElement(el) {
    const rect = el.getBoundingClientRect();
    const left = rect.left + this.window.pageXOffset;
    const top = rect.top + this.window.pageYOffset;
    const offset = this.offset();
    this.window.scrollTo(left - offset[0], top - offset[1]);
  }
  /**
   * We only support scroll restoration when we can get a hold of window.
   * This means that we do not support this behavior when running in a web worker.
   *
   * Lifting this restriction right now would require more changes in the dom adapter.
   * Since webworkers aren't widely used, we will lift it once RouterScroller is
   * battle-tested.
   */


  supportScrollRestoration() {
    try {
      if (!this.supportsScrolling()) {
        return false;
      } // The `scrollRestoration` property could be on the `history` instance or its prototype.


      const scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) || getScrollRestorationProperty(Object.getPrototypeOf(this.window.history)); // We can write to the `scrollRestoration` property if it is a writable data field or it has a
      // setter function.

      return !!scrollRestorationDescriptor && !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);
    } catch (_a) {
      return false;
    }
  }

  supportsScrolling() {
    try {
      return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;
    } catch (_a) {
      return false;
    }
  }

}

function getScrollRestorationProperty(obj) {
  return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');
}

function findAnchorFromDocument(document, target) {
  const documentResult = document.getElementById(target) || document.getElementsByName(target)[0];

  if (documentResult) {
    return documentResult;
  } // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we
  // have to traverse the DOM manually and do the lookup through the shadow roots.


  if (typeof document.createTreeWalker === 'function' && document.body && (document.body.createShadowRoot || document.body.attachShadow)) {
    const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);
    let currentNode = treeWalker.currentNode;

    while (currentNode) {
      const shadowRoot = currentNode.shadowRoot;

      if (shadowRoot) {
        // Note that `ShadowRoot` doesn't support `getElementsByName`
        // so we have to fall back to `querySelector`.
        const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name="${target}"]`);

        if (result) {
          return result;
        }
      }

      currentNode = treeWalker.nextNode();
    }
  }

  return null;
}
/**
 * Provides an empty implementation of the viewport scroller.
 */


class NullViewportScroller {
  /**
   * Empty implementation
   */
  setOffset(offset) {}
  /**
   * Empty implementation
   */


  getScrollPosition() {
    return [0, 0];
  }
  /**
   * Empty implementation
   */


  scrollToPosition(position) {}
  /**
   * Empty implementation
   */


  scrollToAnchor(anchor) {}
  /**
   * Empty implementation
   */


  setHistoryScrollRestoration(scrollRestoration) {}

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * @publicApi
 */


class XhrFactory {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=common.mjs.map

/***/ }),

/***/ 520:
/*!********************************************************!*\
  !*** ./node_modules/@angular/common/fesm2015/http.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTTP_INTERCEPTORS": () => (/* binding */ HTTP_INTERCEPTORS),
/* harmony export */   "HttpBackend": () => (/* binding */ HttpBackend),
/* harmony export */   "HttpClient": () => (/* binding */ HttpClient),
/* harmony export */   "HttpClientJsonpModule": () => (/* binding */ HttpClientJsonpModule),
/* harmony export */   "HttpClientModule": () => (/* binding */ HttpClientModule),
/* harmony export */   "HttpClientXsrfModule": () => (/* binding */ HttpClientXsrfModule),
/* harmony export */   "HttpContext": () => (/* binding */ HttpContext),
/* harmony export */   "HttpContextToken": () => (/* binding */ HttpContextToken),
/* harmony export */   "HttpErrorResponse": () => (/* binding */ HttpErrorResponse),
/* harmony export */   "HttpEventType": () => (/* binding */ HttpEventType),
/* harmony export */   "HttpHandler": () => (/* binding */ HttpHandler),
/* harmony export */   "HttpHeaderResponse": () => (/* binding */ HttpHeaderResponse),
/* harmony export */   "HttpHeaders": () => (/* binding */ HttpHeaders),
/* harmony export */   "HttpParams": () => (/* binding */ HttpParams),
/* harmony export */   "HttpRequest": () => (/* binding */ HttpRequest),
/* harmony export */   "HttpResponse": () => (/* binding */ HttpResponse),
/* harmony export */   "HttpResponseBase": () => (/* binding */ HttpResponseBase),
/* harmony export */   "HttpUrlEncodingCodec": () => (/* binding */ HttpUrlEncodingCodec),
/* harmony export */   "HttpXhrBackend": () => (/* binding */ HttpXhrBackend),
/* harmony export */   "HttpXsrfTokenExtractor": () => (/* binding */ HttpXsrfTokenExtractor),
/* harmony export */   "JsonpClientBackend": () => (/* binding */ JsonpClientBackend),
/* harmony export */   "JsonpInterceptor": () => (/* binding */ JsonpInterceptor),
/* harmony export */   "XhrFactory": () => (/* binding */ XhrFactory),
/* harmony export */   "ɵHttpInterceptingHandler": () => (/* binding */ HttpInterceptingHandler)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 9646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 9751);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 4351);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 9300);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 4004);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 * @publicApi
 */

class HttpHandler {}
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 * @publicApi
 */


class HttpBackend {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents the header configuration options for an HTTP request.
 * Instances are immutable. Modifying methods return a cloned
 * instance with the change. The original object is never changed.
 *
 * @publicApi
 */


class HttpHeaders {
  /**  Constructs a new HTTP header object with the given values.*/
  constructor(headers) {
    /**
     * Internal map of lowercased header names to the normalized
     * form of the name (the form seen first).
     */
    this.normalizedNames = new Map();
    /**
     * Queued updates to be materialized the next initialization.
     */

    this.lazyUpdate = null;

    if (!headers) {
      this.headers = new Map();
    } else if (typeof headers === 'string') {
      this.lazyInit = () => {
        this.headers = new Map();
        headers.split('\n').forEach(line => {
          const index = line.indexOf(':');

          if (index > 0) {
            const name = line.slice(0, index);
            const key = name.toLowerCase();
            const value = line.slice(index + 1).trim();
            this.maybeSetNormalizedName(name, key);

            if (this.headers.has(key)) {
              this.headers.get(key).push(value);
            } else {
              this.headers.set(key, [value]);
            }
          }
        });
      };
    } else {
      this.lazyInit = () => {
        this.headers = new Map();
        Object.keys(headers).forEach(name => {
          let values = headers[name];
          const key = name.toLowerCase();

          if (typeof values === 'string') {
            values = [values];
          }

          if (values.length > 0) {
            this.headers.set(key, values);
            this.maybeSetNormalizedName(name, key);
          }
        });
      };
    }
  }
  /**
   * Checks for existence of a given header.
   *
   * @param name The header name to check for existence.
   *
   * @returns True if the header exists, false otherwise.
   */


  has(name) {
    this.init();
    return this.headers.has(name.toLowerCase());
  }
  /**
   * Retrieves the first value of a given header.
   *
   * @param name The header name.
   *
   * @returns The value string if the header exists, null otherwise
   */


  get(name) {
    this.init();
    const values = this.headers.get(name.toLowerCase());
    return values && values.length > 0 ? values[0] : null;
  }
  /**
   * Retrieves the names of the headers.
   *
   * @returns A list of header names.
   */


  keys() {
    this.init();
    return Array.from(this.normalizedNames.values());
  }
  /**
   * Retrieves a list of values for a given header.
   *
   * @param name The header name from which to retrieve values.
   *
   * @returns A string of values if the header exists, null otherwise.
   */


  getAll(name) {
    this.init();
    return this.headers.get(name.toLowerCase()) || null;
  }
  /**
   * Appends a new value to the existing set of values for a header
   * and returns them in a clone of the original instance.
   *
   * @param name The header name for which to append the values.
   * @param value The value to append.
   *
   * @returns A clone of the HTTP headers object with the value appended to the given header.
   */


  append(name, value) {
    return this.clone({
      name,
      value,
      op: 'a'
    });
  }
  /**
   * Sets or modifies a value for a given header in a clone of the original instance.
   * If the header already exists, its value is replaced with the given value
   * in the returned object.
   *
   * @param name The header name.
   * @param value The value or values to set or overide for the given header.
   *
   * @returns A clone of the HTTP headers object with the newly set header value.
   */


  set(name, value) {
    return this.clone({
      name,
      value,
      op: 's'
    });
  }
  /**
   * Deletes values for a given header in a clone of the original instance.
   *
   * @param name The header name.
   * @param value The value or values to delete for the given header.
   *
   * @returns A clone of the HTTP headers object with the given value deleted.
   */


  delete(name, value) {
    return this.clone({
      name,
      value,
      op: 'd'
    });
  }

  maybeSetNormalizedName(name, lcName) {
    if (!this.normalizedNames.has(lcName)) {
      this.normalizedNames.set(lcName, name);
    }
  }

  init() {
    if (!!this.lazyInit) {
      if (this.lazyInit instanceof HttpHeaders) {
        this.copyFrom(this.lazyInit);
      } else {
        this.lazyInit();
      }

      this.lazyInit = null;

      if (!!this.lazyUpdate) {
        this.lazyUpdate.forEach(update => this.applyUpdate(update));
        this.lazyUpdate = null;
      }
    }
  }

  copyFrom(other) {
    other.init();
    Array.from(other.headers.keys()).forEach(key => {
      this.headers.set(key, other.headers.get(key));
      this.normalizedNames.set(key, other.normalizedNames.get(key));
    });
  }

  clone(update) {
    const clone = new HttpHeaders();
    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;
    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
    return clone;
  }

  applyUpdate(update) {
    const key = update.name.toLowerCase();

    switch (update.op) {
      case 'a':
      case 's':
        let value = update.value;

        if (typeof value === 'string') {
          value = [value];
        }

        if (value.length === 0) {
          return;
        }

        this.maybeSetNormalizedName(update.name, key);
        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
        base.push(...value);
        this.headers.set(key, base);
        break;

      case 'd':
        const toDelete = update.value;

        if (!toDelete) {
          this.headers.delete(key);
          this.normalizedNames.delete(key);
        } else {
          let existing = this.headers.get(key);

          if (!existing) {
            return;
          }

          existing = existing.filter(value => toDelete.indexOf(value) === -1);

          if (existing.length === 0) {
            this.headers.delete(key);
            this.normalizedNames.delete(key);
          } else {
            this.headers.set(key, existing);
          }
        }

        break;
    }
  }
  /**
   * @internal
   */


  forEach(fn) {
    this.init();
    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides encoding and decoding of URL parameter and query-string values.
 *
 * Serializes and parses URL parameter keys and values to encode and decode them.
 * If you pass URL query parameters without encoding,
 * the query parameters can be misinterpreted at the receiving end.
 *
 *
 * @publicApi
 */


class HttpUrlEncodingCodec {
  /**
   * Encodes a key name for a URL parameter or query-string.
   * @param key The key name.
   * @returns The encoded key name.
   */
  encodeKey(key) {
    return standardEncoding(key);
  }
  /**
   * Encodes the value of a URL parameter or query-string.
   * @param value The value.
   * @returns The encoded value.
   */


  encodeValue(value) {
    return standardEncoding(value);
  }
  /**
   * Decodes an encoded URL parameter or query-string key.
   * @param key The encoded key name.
   * @returns The decoded key name.
   */


  decodeKey(key) {
    return decodeURIComponent(key);
  }
  /**
   * Decodes an encoded URL parameter or query-string value.
   * @param value The encoded value.
   * @returns The decoded value.
   */


  decodeValue(value) {
    return decodeURIComponent(value);
  }

}

function paramParser(rawParams, codec) {
  const map = new Map();

  if (rawParams.length > 0) {
    // The `window.location.search` can be used while creating an instance of the `HttpParams` class
    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`
    // may start with the `?` char, so we strip it if it's present.
    const params = rawParams.replace(/^\?/, '').split('&');
    params.forEach(param => {
      const eqIdx = param.indexOf('=');
      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];
      const list = map.get(key) || [];
      list.push(val);
      map.set(key, list);
    });
  }

  return map;
}
/**
 * Encode input string with standard encodeURIComponent and then un-encode specific characters.
 */


const STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
const STANDARD_ENCODING_REPLACEMENTS = {
  '40': '@',
  '3A': ':',
  '24': '$',
  '2C': ',',
  '3B': ';',
  '2B': '+',
  '3D': '=',
  '3F': '?',
  '2F': '/'
};

function standardEncoding(v) {
  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => {
    var _a;

    return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s;
  });
}

function valueToString(value) {
  return `${value}`;
}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable; all mutation operations return a new instance.
 *
 * @publicApi
 */


class HttpParams {
  constructor(options = {}) {
    this.updates = null;
    this.cloneFrom = null;
    this.encoder = options.encoder || new HttpUrlEncodingCodec();

    if (!!options.fromString) {
      if (!!options.fromObject) {
        throw new Error(`Cannot specify both fromString and fromObject.`);
      }

      this.map = paramParser(options.fromString, this.encoder);
    } else if (!!options.fromObject) {
      this.map = new Map();
      Object.keys(options.fromObject).forEach(key => {
        const value = options.fromObject[key];
        this.map.set(key, Array.isArray(value) ? value : [value]);
      });
    } else {
      this.map = null;
    }
  }
  /**
   * Reports whether the body includes one or more values for a given parameter.
   * @param param The parameter name.
   * @returns True if the parameter has one or more values,
   * false if it has no value or is not present.
   */


  has(param) {
    this.init();
    return this.map.has(param);
  }
  /**
   * Retrieves the first value for a parameter.
   * @param param The parameter name.
   * @returns The first value of the given parameter,
   * or `null` if the parameter is not present.
   */


  get(param) {
    this.init();
    const res = this.map.get(param);
    return !!res ? res[0] : null;
  }
  /**
   * Retrieves all values for a  parameter.
   * @param param The parameter name.
   * @returns All values in a string array,
   * or `null` if the parameter not present.
   */


  getAll(param) {
    this.init();
    return this.map.get(param) || null;
  }
  /**
   * Retrieves all the parameters for this body.
   * @returns The parameter names in a string array.
   */


  keys() {
    this.init();
    return Array.from(this.map.keys());
  }
  /**
   * Appends a new value to existing values for a parameter.
   * @param param The parameter name.
   * @param value The new value to add.
   * @return A new body with the appended value.
   */


  append(param, value) {
    return this.clone({
      param,
      value,
      op: 'a'
    });
  }
  /**
   * Constructs a new body with appended values for the given parameter name.
   * @param params parameters and values
   * @return A new body with the new value.
   */


  appendAll(params) {
    const updates = [];
    Object.keys(params).forEach(param => {
      const value = params[param];

      if (Array.isArray(value)) {
        value.forEach(_value => {
          updates.push({
            param,
            value: _value,
            op: 'a'
          });
        });
      } else {
        updates.push({
          param,
          value: value,
          op: 'a'
        });
      }
    });
    return this.clone(updates);
  }
  /**
   * Replaces the value for a parameter.
   * @param param The parameter name.
   * @param value The new value.
   * @return A new body with the new value.
   */


  set(param, value) {
    return this.clone({
      param,
      value,
      op: 's'
    });
  }
  /**
   * Removes a given value or all values from a parameter.
   * @param param The parameter name.
   * @param value The value to remove, if provided.
   * @return A new body with the given value removed, or with all values
   * removed if no value is specified.
   */


  delete(param, value) {
    return this.clone({
      param,
      value,
      op: 'd'
    });
  }
  /**
   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
   * separated by `&`s.
   */


  toString() {
    this.init();
    return this.keys().map(key => {
      const eKey = this.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`
      // `b: []` produces `''`
      // `c: ['1', '2']` produces `'c=1&c=2'`

      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');
    }) // filter out empty values because `b: []` produces `''`
    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
    .filter(param => param !== '').join('&');
  }

  clone(update) {
    const clone = new HttpParams({
      encoder: this.encoder
    });
    clone.cloneFrom = this.cloneFrom || this;
    clone.updates = (this.updates || []).concat(update);
    return clone;
  }

  init() {
    if (this.map === null) {
      this.map = new Map();
    }

    if (this.cloneFrom !== null) {
      this.cloneFrom.init();
      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));
      this.updates.forEach(update => {
        switch (update.op) {
          case 'a':
          case 's':
            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];
            base.push(valueToString(update.value));
            this.map.set(update.param, base);
            break;

          case 'd':
            if (update.value !== undefined) {
              let base = this.map.get(update.param) || [];
              const idx = base.indexOf(valueToString(update.value));

              if (idx !== -1) {
                base.splice(idx, 1);
              }

              if (base.length > 0) {
                this.map.set(update.param, base);
              } else {
                this.map.delete(update.param);
              }
            } else {
              this.map.delete(update.param);
              break;
            }

        }
      });
      this.cloneFrom = this.updates = null;
    }
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A token used to manipulate and access values stored in `HttpContext`.
 *
 * @publicApi
 */


class HttpContextToken {
  constructor(defaultValue) {
    this.defaultValue = defaultValue;
  }

}
/**
 * Http context stores arbitrary user defined values and ensures type safety without
 * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.
 *
 * This context is mutable and is shared between cloned requests unless explicitly specified.
 *
 * @usageNotes
 *
 * ### Usage Example
 *
 * ```typescript
 * // inside cache.interceptors.ts
 * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);
 *
 * export class CacheInterceptor implements HttpInterceptor {
 *
 *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {
 *     if (req.context.get(IS_CACHE_ENABLED) === true) {
 *       return ...;
 *     }
 *     return delegate.handle(req);
 *   }
 * }
 *
 * // inside a service
 *
 * this.httpClient.get('/api/weather', {
 *   context: new HttpContext().set(IS_CACHE_ENABLED, true)
 * }).subscribe(...);
 * ```
 *
 * @publicApi
 */


class HttpContext {
  constructor() {
    this.map = new Map();
  }
  /**
   * Store a value in the context. If a value is already present it will be overwritten.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   * @param value The value to store.
   *
   * @returns A reference to itself for easy chaining.
   */


  set(token, value) {
    this.map.set(token, value);
    return this;
  }
  /**
   * Retrieve the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns The stored value or default if one is defined.
   */


  get(token) {
    if (!this.map.has(token)) {
      this.map.set(token, token.defaultValue());
    }

    return this.map.get(token);
  }
  /**
   * Delete the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns A reference to itself for easy chaining.
   */


  delete(token) {
    this.map.delete(token);
    return this;
  }
  /**
   * Checks for existence of a given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns True if the token exists, false otherwise.
   */


  has(token) {
    return this.map.has(token);
  }
  /**
   * @returns a list of tokens currently stored in the context.
   */


  keys() {
    return this.map.keys();
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Determine whether the given HTTP method may include a body.
 */


function mightHaveBody(method) {
  switch (method) {
    case 'DELETE':
    case 'GET':
    case 'HEAD':
    case 'OPTIONS':
    case 'JSONP':
      return false;

    default:
      return true;
  }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 */


function isArrayBuffer(value) {
  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 */


function isBlob(value) {
  return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 */


function isFormData(value) {
  return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * Safely assert whether the given value is a URLSearchParams instance.
 *
 * In some execution environments URLSearchParams is not defined.
 */


function isUrlSearchParams(value) {
  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 * @publicApi
 */


class HttpRequest {
  constructor(method, url, third, fourth) {
    this.url = url;
    /**
     * The request body, or `null` if one isn't set.
     *
     * Bodies are not enforced to be immutable, as they can include a reference to any
     * user-defined data type. However, interceptors should take care to preserve
     * idempotence by treating them as such.
     */

    this.body = null;
    /**
     * Whether this request should be made in a way that exposes progress events.
     *
     * Progress events are expensive (change detection runs on each event) and so
     * they should only be requested if the consumer intends to monitor them.
     */

    this.reportProgress = false;
    /**
     * Whether this request should be sent with outgoing credentials (cookies).
     */

    this.withCredentials = false;
    /**
     * The expected response type of the server.
     *
     * This is used to parse the response appropriately before returning it to
     * the requestee.
     */

    this.responseType = 'json';
    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit
    // options, if any.

    let options; // Check whether a body argument is expected. The only valid way to omit
    // the body argument is to use a known no-body method like GET.

    if (mightHaveBody(this.method) || !!fourth) {
      // Body is the third argument, options are the fourth.
      this.body = third !== undefined ? third : null;
      options = fourth;
    } else {
      // No body required, options are the third argument. The body stays null.
      options = third;
    } // If options have been passed, interpret them.


    if (options) {
      // Normalize reportProgress and withCredentials.
      this.reportProgress = !!options.reportProgress;
      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.

      if (!!options.responseType) {
        this.responseType = options.responseType;
      } // Override headers if they're provided.


      if (!!options.headers) {
        this.headers = options.headers;
      }

      if (!!options.context) {
        this.context = options.context;
      }

      if (!!options.params) {
        this.params = options.params;
      }
    } // If no headers have been passed in, construct a new HttpHeaders instance.


    if (!this.headers) {
      this.headers = new HttpHeaders();
    } // If no context have been passed in, construct a new HttpContext instance.


    if (!this.context) {
      this.context = new HttpContext();
    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.


    if (!this.params) {
      this.params = new HttpParams();
      this.urlWithParams = url;
    } else {
      // Encode the parameters to a string in preparation for inclusion in the URL.
      const params = this.params.toString();

      if (params.length === 0) {
        // No parameters, the visible URL is just the URL given at creation time.
        this.urlWithParams = url;
      } else {
        // Does the URL already have query parameters? Look for '?'.
        const qIdx = url.indexOf('?'); // There are 3 cases to handle:
        // 1) No existing parameters -> append '?' followed by params.
        // 2) '?' exists and is followed by existing query string ->
        //    append '&' followed by params.
        // 3) '?' exists at the end of the url -> append params directly.
        // This basically amounts to determining the character, if any, with
        // which to join the URL and parameters.

        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';
        this.urlWithParams = url + sep + params;
      }
    }
  }
  /**
   * Transform the free-form body into a serialized format suitable for
   * transmission to the server.
   */


  serializeBody() {
    // If no body is present, no need to serialize it.
    if (this.body === null) {
      return null;
    } // Check whether the body is already in a serialized form. If so,
    // it can just be returned directly.


    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {
      return this.body;
    } // Check whether the body is an instance of HttpUrlEncodedParams.


    if (this.body instanceof HttpParams) {
      return this.body.toString();
    } // Check whether the body is an object or array, and serialize with JSON if so.


    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {
      return JSON.stringify(this.body);
    } // Fall back on toString() for everything else.


    return this.body.toString();
  }
  /**
   * Examine the body and attempt to infer an appropriate MIME type
   * for it.
   *
   * If no such type can be inferred, this method will return `null`.
   */


  detectContentTypeHeader() {
    // An empty body has no content type.
    if (this.body === null) {
      return null;
    } // FormData bodies rely on the browser's content type assignment.


    if (isFormData(this.body)) {
      return null;
    } // Blobs usually have their own content type. If it doesn't, then
    // no type can be inferred.


    if (isBlob(this.body)) {
      return this.body.type || null;
    } // Array buffers have unknown contents and thus no type can be inferred.


    if (isArrayBuffer(this.body)) {
      return null;
    } // Technically, strings could be a form of JSON data, but it's safe enough
    // to assume they're plain strings.


    if (typeof this.body === 'string') {
      return 'text/plain';
    } // `HttpUrlEncodedParams` has its own content-type.


    if (this.body instanceof HttpParams) {
      return 'application/x-www-form-urlencoded;charset=UTF-8';
    } // Arrays, objects, boolean and numbers will be encoded as JSON.


    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {
      return 'application/json';
    } // No type could be inferred.


    return null;
  }

  clone(update = {}) {
    var _a; // For method, url, and responseType, take the current value unless
    // it is overridden in the update hash.


    const method = update.method || this.method;
    const url = update.url || this.url;
    const responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means
    // whatever current body is present is being overridden with an empty
    // body, whereas an `undefined` value in update.body implies no
    // override.

    const body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between
    // `false` and `undefined` in the update args.

    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;
    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or
    // `setParams` are used.

    let headers = update.headers || this.headers;
    let params = update.params || this.params; // Pass on context if needed

    const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.

    if (update.setHeaders !== undefined) {
      // Set every requested header.
      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);
    } // Check whether the caller has asked to set params.


    if (update.setParams) {
      // Set every requested param.
      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);
    } // Finally, construct the new HttpRequest using the pieces from above.


    return new HttpRequest(method, url, body, {
      params,
      headers,
      context,
      reportProgress,
      responseType,
      withCredentials
    });
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Type enumeration for the different kinds of `HttpEvent`.
 *
 * @publicApi
 */


var HttpEventType = /*#__PURE__*/(() => {
  HttpEventType = HttpEventType || {};

  /**
   * The request was sent out over the wire.
   */
  HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
  /**
   * An upload progress event was received.
   */

  HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
  /**
   * The response status code and headers were received.
   */

  HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
  /**
   * A download progress event was received.
   */

  HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
  /**
   * The full response including the body was received.
   */

  HttpEventType[HttpEventType["Response"] = 4] = "Response";
  /**
   * A custom event from an interceptor or a backend.
   */

  HttpEventType[HttpEventType["User"] = 5] = "User";
  return HttpEventType;
})();

/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 * @publicApi
 */
class HttpResponseBase {
  /**
   * Super-constructor for all responses.
   *
   * The single parameter accepted is an initialization hash. Any properties
   * of the response passed there will override the default values.
   */
  constructor(init, defaultStatus = 200
  /* Ok */
  , defaultStatusText = 'OK') {
    // If the hash has values passed, use them to initialize the response.
    // Otherwise use the default values.
    this.headers = init.headers || new HttpHeaders();
    this.status = init.status !== undefined ? init.status : defaultStatus;
    this.statusText = init.statusText || defaultStatusText;
    this.url = init.url || null; // Cache the ok value to avoid defining a getter.

    this.ok = this.status >= 200 && this.status < 300;
  }

}
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 * @publicApi
 */


class HttpHeaderResponse extends HttpResponseBase {
  /**
   * Create a new `HttpHeaderResponse` with the given parameters.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.ResponseHeader;
  }
  /**
   * Copy this `HttpHeaderResponse`, overriding its contents with the
   * given parameter hash.
   */


  clone(update = {}) {
    // Perform a straightforward initialization of the new HttpHeaderResponse,
    // overriding the current parameters with new ones if given.
    return new HttpHeaderResponse({
      headers: update.headers || this.headers,
      status: update.status !== undefined ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || undefined
    });
  }

}
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 * @publicApi
 */


class HttpResponse extends HttpResponseBase {
  /**
   * Construct a new `HttpResponse`.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.Response;
    this.body = init.body !== undefined ? init.body : null;
  }

  clone(update = {}) {
    return new HttpResponse({
      body: update.body !== undefined ? update.body : this.body,
      headers: update.headers || this.headers,
      status: update.status !== undefined ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || undefined
    });
  }

}
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 * @publicApi
 */


class HttpErrorResponse extends HttpResponseBase {
  constructor(init) {
    // Initialize with a default status of 0 / Unknown Error.
    super(init, 0, 'Unknown Error');
    this.name = 'HttpErrorResponse';
    /**
     * Errors are never okay, even when the status code is in the 2xx success range.
     */

    this.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was
    // a protocol-level failure of some sort. Either the request failed in transit
    // or the server returned an unsuccessful status code.

    if (this.status >= 200 && this.status < 300) {
      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;
    } else {
      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;
    }

    this.error = init.error || null;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. This function clones the object and adds the body.
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.
 *
 */


function addBody(options, body) {
  return {
    body,
    headers: options.headers,
    context: options.context,
    observe: options.observe,
    params: options.params,
    reportProgress: options.reportProgress,
    responseType: options.responseType,
    withCredentials: options.withCredentials
  };
}
/**
 * Performs HTTP requests.
 * This service is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies based on
 * the signature that is called (mainly the values of `observe` and `responseType`).
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.

 *
 * @usageNotes
 * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
 *
 * ### HTTP Request Example
 *
 * ```
 *  // GET heroes whose name contains search term
 * searchHeroes(term: string): observable<Hero[]>{
 *
 *  const params = new HttpParams({fromString: 'name=term'});
 *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
 * }
 * ```
 *
 * Alternatively, the parameter string can be used without invoking HttpParams
 * by directly joining to the URL.
 * ```
 * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});
 * ```
 *
 *
 * ### JSONP Example
 * ```
 * requestJsonp(url, callback = 'callback') {
 *  return this.httpClient.jsonp(this.heroesURL, callback);
 * }
 * ```
 *
 * ### PATCH Example
 * ```
 * // PATCH one of the heroes' name
 * patchHero (id: number, heroName: string): Observable<{}> {
 * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
 *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
 *    .pipe(catchError(this.handleError('patchHero')));
 * }
 * ```
 *
 * @see [HTTP Guide](guide/http)
 * @see [HTTP Request](api/common/http/HttpRequest)
 *
 * @publicApi
 */


let HttpClient = /*#__PURE__*/(() => {
  class HttpClient {
    constructor(handler) {
      this.handler = handler;
    }
    /**
     * Constructs an observable for a generic HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * You can pass an `HttpRequest` directly as the only parameter. In this case,
     * the call returns an observable of the raw `HttpEvent` stream.
     *
     * Alternatively you can pass an HTTP method as the first parameter,
     * a URL string as the second, and an options hash containing the request body as the third.
     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
     * type of returned observable.
     *   * The `responseType` value determines how a successful response body is parsed.
     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
     * object as a type parameter to the call.
     *
     * The `observe` value determines the return type, according to what you are interested in
     * observing.
     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
     * progress events by default.
     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
     * where the `T` parameter depends on the `responseType` and any optionally provided type
     * parameter.
     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
     *
     */


    request(first, url, options = {}) {
      let req; // First, check whether the primary argument is an instance of `HttpRequest`.

      if (first instanceof HttpRequest) {
        // It is. The other arguments must be undefined (per the signatures) and can be
        // ignored.
        req = first;
      } else {
        // It's a string, so it represents a URL. Construct a request based on it,
        // and incorporate the remaining arguments (assuming `GET` unless a method is
        // provided.
        // Figure out the headers.
        let headers = undefined;

        if (options.headers instanceof HttpHeaders) {
          headers = options.headers;
        } else {
          headers = new HttpHeaders(options.headers);
        } // Sort out parameters.


        let params = undefined;

        if (!!options.params) {
          if (options.params instanceof HttpParams) {
            params = options.params;
          } else {
            params = new HttpParams({
              fromObject: options.params
            });
          }
        } // Construct the request.


        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {
          headers,
          context: options.context,
          params,
          reportProgress: options.reportProgress,
          // By default, JSON is assumed to be returned for all calls.
          responseType: options.responseType || 'json',
          withCredentials: options.withCredentials
        });
      } // Start with an Observable.of() the initial request, and run the handler (which
      // includes all interceptors) inside a concatMap(). This way, the handler runs
      // inside an Observable chain, which causes interceptors to be re-run on every
      // subscription (this also makes retries re-run the handler, including interceptors).


      const events$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(req).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.concatMap)(req => this.handler.handle(req))); // If coming via the API signature which accepts a previously constructed HttpRequest,
      // the only option is to get the event stream. Otherwise, return the event stream if
      // that is what was requested.

      if (first instanceof HttpRequest || options.observe === 'events') {
        return events$;
      } // The requested stream contains either the full response or the body. In either
      // case, the first step is to filter the event stream to extract a stream of
      // responses(s).


      const res$ = events$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.filter)(event => event instanceof HttpResponse)); // Decide which stream to return.

      switch (options.observe || 'body') {
        case 'body':
          // The requested stream is the body. Map the response stream to the response
          // body. This could be done more simply, but a misbehaving interceptor might
          // transform the response body into a different format and ignore the requested
          // responseType. Guard against this by validating that the response is of the
          // requested type.
          switch (req.responseType) {
            case 'arraybuffer':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
                // Validate that the body is an ArrayBuffer.
                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                  throw new Error('Response is not an ArrayBuffer.');
                }

                return res.body;
              }));

            case 'blob':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
                // Validate that the body is a Blob.
                if (res.body !== null && !(res.body instanceof Blob)) {
                  throw new Error('Response is not a Blob.');
                }

                return res.body;
              }));

            case 'text':
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
                // Validate that the body is a string.
                if (res.body !== null && typeof res.body !== 'string') {
                  throw new Error('Response is not a string.');
                }

                return res.body;
              }));

            case 'json':
            default:
              // No validation needed for JSON responses, as they can be of any type.
              return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => res.body));
          }

        case 'response':
          // The response stream was requested directly, so return it.
          return res$;

        default:
          // Guard against new future observe types being added.
          throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);
      }
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `DELETE` request to execute on the server. See the individual overloads for
     * details on the return type.
     *
     * @param url     The endpoint URL.
     * @param options The HTTP options to send with the request.
     *
     */


    delete(url, options = {}) {
      return this.request('DELETE', url, options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `GET` request to execute on the server. See the individual overloads for
     * details on the return type.
     */


    get(url, options = {}) {
      return this.request('GET', url, options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `HEAD` request to execute on the server. The `HEAD` method returns
     * meta information about the resource without transferring the
     * resource itself. See the individual overloads for
     * details on the return type.
     */


    head(url, options = {}) {
      return this.request('HEAD', url, options);
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes a request with the special method
     * `JSONP` to be dispatched via the interceptor pipeline.
     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
     * API endpoints that don't support newer,
     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
     * requests even if the API endpoint is not located on the same domain (origin) as the client-side
     * application making the request.
     * The endpoint API must support JSONP callback for JSONP requests to work.
     * The resource API returns the JSON response wrapped in a callback function.
     * You can pass the callback function name as one of the query parameters.
     * Note that JSONP requests can only be used with `GET` requests.
     *
     * @param url The resource URL.
     * @param callbackParam The callback function name.
     *
     */


    jsonp(url, callbackParam) {
      return this.request('JSONP', url, {
        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
        observe: 'body',
        responseType: 'json'
      });
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes the configured
     * `OPTIONS` request to execute on the server. This method allows the client
     * to determine the supported HTTP methods and other capabilities of an endpoint,
     * without implying a resource action. See the individual overloads for
     * details on the return type.
     */


    options(url, options = {}) {
      return this.request('OPTIONS', url, options);
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PATCH` request to execute on the server. See the individual overloads for
     * details on the return type.
     */


    patch(url, body, options = {}) {
      return this.request('PATCH', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `POST` request to execute on the server. The server responds with the location of
     * the replaced resource. See the individual overloads for
     * details on the return type.
     */


    post(url, body, options = {}) {
      return this.request('POST', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
     * with a new set of values.
     * See the individual overloads for details on the return type.
     */


    put(url, body, options = {}) {
      return this.request('PUT', url, addBody(options, body));
    }

  }

  HttpClient.ɵfac = function HttpClient_Factory(t) {
    return new (t || HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](HttpHandler));
  };

  HttpClient.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HttpClient,
    factory: HttpClient.ɵfac
  });
  return HttpClient;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 *
 */


class HttpInterceptorHandler {
  constructor(next, interceptor) {
    this.next = next;
    this.interceptor = interceptor;
  }

  handle(req) {
    return this.interceptor.intercept(req, this.next);
  }

}
/**
 * A multi-provider token that represents the array of registered
 * `HttpInterceptor` objects.
 *
 * @publicApi
 */


const HTTP_INTERCEPTORS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('HTTP_INTERCEPTORS');
let NoopInterceptor = /*#__PURE__*/(() => {
  class NoopInterceptor {
    intercept(req, next) {
      return next.handle(req);
    }

  }

  NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {
    return new (t || NoopInterceptor)();
  };

  NoopInterceptor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: NoopInterceptor,
    factory: NoopInterceptor.ɵfac
  });
  return NoopInterceptor;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.


let nextRequestId = 0;
/**
 * When a pending <script> is unsubscribed we'll move it to this document, so it won't be
 * executed.
 */

let foreignDocument; // Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.

const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.

const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 */

class JsonpCallbackContext {}
/**
 * Processes an `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 * @see `HttpHandler`
 * @see `HttpXhrBackend`
 *
 * @publicApi
 */


let JsonpClientBackend = /*#__PURE__*/(() => {
  class JsonpClientBackend {
    constructor(callbackMap, document) {
      this.callbackMap = callbackMap;
      this.document = document;
      /**
       * A resolved promise that can be used to schedule microtasks in the event handlers.
       */

      this.resolvedPromise = Promise.resolve();
    }
    /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     */


    nextCallback() {
      return `ng_jsonp_callback_${nextRequestId++}`;
    }
    /**
     * Processes a JSONP request and returns an event stream of the results.
     * @param req The request object.
     * @returns An observable of the response events.
     *
     */


    handle(req) {
      // Firstly, check both the method and response type. If either doesn't match
      // then the request was improperly routed here and cannot be handled.
      if (req.method !== 'JSONP') {
        throw new Error(JSONP_ERR_WRONG_METHOD);
      } else if (req.responseType !== 'json') {
        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
      } // Everything else happens inside the Observable boundary.


      return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => {
        // The first step to make a request is to generate the callback name, and replace the
        // callback placeholder in the URL with the name. Care has to be taken here to ensure
        // a trailing &, if matched, gets inserted back into the URL in the correct place.
        const callback = this.nextCallback();
        const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`); // Construct the <script> tag and point it at the URL.

        const node = this.document.createElement('script');
        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables
        // are closed over and track state across those callbacks.
        // The response object, if one has been received, or null otherwise.

        let body = null; // Whether the response callback has been called.

        let finished = false; // Set the response callback in this.callbackMap (which will be the window
        // object in the browser. The script being loaded via the <script> tag will
        // eventually call this callback.

        this.callbackMap[callback] = data => {
          // Data has been received from the JSONP script. Firstly, delete this callback.
          delete this.callbackMap[callback]; // Set state to indicate data was received.

          body = data;
          finished = true;
        }; // cleanup() is a utility closure that removes the <script> from the page and
        // the response callback from the window. This logic is used in both the
        // success, error, and cancellation paths, so it's extracted out for convenience.


        const cleanup = () => {
          // Remove the <script> tag if it's still on the page.
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          } // Remove the response callback from the callbackMap (window object in the
          // browser).


          delete this.callbackMap[callback];
        }; // onLoad() is the success callback which runs after the response callback
        // if the JSONP script loads successfully. The event itself is unimportant.
        // If something went wrong, onLoad() may run without the response callback
        // having been invoked.


        const onLoad = event => {
          // We wrap it in an extra Promise, to ensure the microtask
          // is scheduled after the loaded endpoint has executed any potential microtask itself,
          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496
          this.resolvedPromise.then(() => {
            // Cleanup the page.
            cleanup(); // Check whether the response callback has run.

            if (!finished) {
              // It hasn't, something went wrong with the request. Return an error via
              // the Observable error path. All JSONP errors have status 0.
              observer.error(new HttpErrorResponse({
                url,
                status: 0,
                statusText: 'JSONP Error',
                error: new Error(JSONP_ERR_NO_CALLBACK)
              }));
              return;
            } // Success. body either contains the response body or null if none was
            // returned.


            observer.next(new HttpResponse({
              body,
              status: 200
              /* Ok */
              ,
              statusText: 'OK',
              url
            })); // Complete the stream, the response is over.

            observer.complete();
          });
        }; // onError() is the error callback, which runs if the script returned generates
        // a Javascript error. It emits the error via the Observable error channel as
        // a HttpErrorResponse.


        const onError = error => {
          cleanup(); // Wrap the error in a HttpErrorResponse.

          observer.error(new HttpErrorResponse({
            error,
            status: 0,
            statusText: 'JSONP Error',
            url
          }));
        }; // Subscribe to both the success (load) and error events on the <script> tag,
        // and add it to the page.


        node.addEventListener('load', onLoad);
        node.addEventListener('error', onError);
        this.document.body.appendChild(node); // The request has now been successfully sent.

        observer.next({
          type: HttpEventType.Sent
        }); // Cancellation handler.

        return () => {
          if (!finished) {
            this.removeListeners(node);
          } // And finally, clean up the page.


          cleanup();
        };
      });
    }

    removeListeners(script) {
      // Issue #34818
      // Changing <script>'s ownerDocument will prevent it from execution.
      // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block
      if (!foreignDocument) {
        foreignDocument = this.document.implementation.createHTMLDocument();
      }

      foreignDocument.adoptNode(script);
    }

  }

  JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {
    return new (t || JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
  };

  JsonpClientBackend.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: JsonpClientBackend,
    factory: JsonpClientBackend.ɵfac
  });
  return JsonpClientBackend;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 * @see `HttpInterceptor`
 *
 * @publicApi
 */


let JsonpInterceptor = /*#__PURE__*/(() => {
  class JsonpInterceptor {
    constructor(jsonp) {
      this.jsonp = jsonp;
    }
    /**
     * Identifies and handles a given JSONP request.
     * @param req The outgoing request object to handle.
     * @param next The next interceptor in the chain, or the backend
     * if no interceptors remain in the chain.
     * @returns An observable of the event stream.
     */


    intercept(req, next) {
      if (req.method === 'JSONP') {
        return this.jsonp.handle(req);
      } // Fall through for normal HTTP requests.


      return next.handle(req);
    }

  }

  JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {
    return new (t || JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](JsonpClientBackend));
  };

  JsonpInterceptor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: JsonpInterceptor,
    factory: JsonpInterceptor.ɵfac
  });
  return JsonpInterceptor;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

const XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 */

function getResponseUrl(xhr) {
  if ('responseURL' in xhr && xhr.responseURL) {
    return xhr.responseURL;
  }

  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
    return xhr.getResponseHeader('X-Request-URL');
  }

  return null;
}
/**
 * Uses `XMLHttpRequest` to send requests to a backend server.
 * @see `HttpHandler`
 * @see `JsonpClientBackend`
 *
 * @publicApi
 */


let HttpXhrBackend = /*#__PURE__*/(() => {
  class HttpXhrBackend {
    constructor(xhrFactory) {
      this.xhrFactory = xhrFactory;
    }
    /**
     * Processes a request and returns a stream of response events.
     * @param req The request object.
     * @returns An observable of the response events.
     */


    handle(req) {
      // Quick check to give a better error message when a user attempts to use
      // HttpClient.jsonp() without installing the HttpClientJsonpModule
      if (req.method === 'JSONP') {
        throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);
      } // Everything happens on Observable subscription.


      return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => {
        // Start by setting up the XHR object with request method, URL, and withCredentials flag.
        const xhr = this.xhrFactory.build();
        xhr.open(req.method, req.urlWithParams);

        if (!!req.withCredentials) {
          xhr.withCredentials = true;
        } // Add all the requested headers.


        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(','))); // Add an Accept header if one isn't present already.

        if (!req.headers.has('Accept')) {
          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
        } // Auto-detect the Content-Type header if one isn't present already.


        if (!req.headers.has('Content-Type')) {
          const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.

          if (detectedType !== null) {
            xhr.setRequestHeader('Content-Type', detectedType);
          }
        } // Set the responseType if one was requested.


        if (req.responseType) {
          const responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server
          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
          // xhr.response will be null, and xhr.responseText cannot be accessed to
          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
          // is parsed by first requesting text and then applying JSON.parse.

          xhr.responseType = responseType !== 'json' ? responseType : 'text';
        } // Serialize the request body if one is present. If not, this will be set to null.


        const reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered
        // in two events - the HttpHeaderResponse event and the full HttpResponse
        // event. However, since response headers don't change in between these
        // two events, it doesn't make sense to parse them twice. So headerResponse
        // caches the data extracted from the response whenever it's first parsed,
        // to ensure parsing isn't duplicated.

        let headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
        // state, and memoizes it into headerResponse.

        const partialFromXhr = () => {
          if (headerResponse !== null) {
            return headerResponse;
          }

          const statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.

          const headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the
          // request URL.

          const url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.

          headerResponse = new HttpHeaderResponse({
            headers,
            status: xhr.status,
            statusText,
            url
          });
          return headerResponse;
        }; // Next, a few closures are defined for the various events which XMLHttpRequest can
        // emit. This allows them to be unregistered as event listeners later.
        // First up is the load event, which represents a response being fully available.


        const onLoad = () => {
          // Read response state from the memoized partial data.
          let {
            headers,
            status,
            statusText,
            url
          } = partialFromXhr(); // The body will be read out if present.

          let body = null;

          if (status !== 204
          /* NoContent */
          ) {
            // Use XMLHttpRequest.response if set, responseText otherwise.
            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
          } // Normalize another potential bug (this one comes from CORS).


          if (status === 0) {
            status = !!body ? 200
            /* Ok */
            : 0;
          } // ok determines whether the response will be transmitted on the event or
          // error channel. Unsuccessful status codes (not 2xx) will always be errors,
          // but a successful status code can still result in an error if the user
          // asked for JSON data and the body cannot be parsed as such.


          let ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser
          // will have done that already).

          if (req.responseType === 'json' && typeof body === 'string') {
            // Save the original body, before attempting XSSI prefix stripping.
            const originalBody = body;
            body = body.replace(XSSI_PREFIX, '');

            try {
              // Attempt the parse. If it fails, a parse error should be delivered to the user.
              body = body !== '' ? JSON.parse(body) : null;
            } catch (error) {
              // Since the JSON.parse failed, it's reasonable to assume this might not have been a
              // JSON response. Restore the original body (including any XSSI prefix) to deliver
              // a better error response.
              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably
              // just isn't JSON. Otherwise, deliver the parsing error to the user.

              if (ok) {
                // Even though the response status was 2xx, this is still an error.
                ok = false; // The parse error contains the text of the body that failed to parse.

                body = {
                  error,
                  text: body
                };
              }
            }
          }

          if (ok) {
            // A successful response is delivered on the event stream.
            observer.next(new HttpResponse({
              body,
              headers,
              status,
              statusText,
              url: url || undefined
            })); // The full body has been received and delivered, no further events
            // are possible. This request is complete.

            observer.complete();
          } else {
            // An unsuccessful request is delivered on the error channel.
            observer.error(new HttpErrorResponse({
              // The error in this case is the response body (error from the server).
              error: body,
              headers,
              status,
              statusText,
              url: url || undefined
            }));
          }
        }; // The onError callback is called when something goes wrong at the network level.
        // Connection timeout, DNS error, offline, etc. These are actual errors, and are
        // transmitted on the error channel.


        const onError = error => {
          const {
            url
          } = partialFromXhr();
          const res = new HttpErrorResponse({
            error,
            status: xhr.status || 0,
            statusText: xhr.statusText || 'Unknown Error',
            url: url || undefined
          });
          observer.error(res);
        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event
        // has been sent on the stream. This is necessary to track if progress
        // is enabled since the event will be sent on only the first download
        // progerss event.


        let sentHeaders = false; // The download progress event handler, which is only registered if
        // progress events are enabled.

        const onDownProgress = event => {
          // Send the HttpResponseHeaders event if it hasn't been sent already.
          if (!sentHeaders) {
            observer.next(partialFromXhr());
            sentHeaders = true;
          } // Start building the download progress event to deliver on the response
          // event stream.


          let progressEvent = {
            type: HttpEventType.DownloadProgress,
            loaded: event.loaded
          }; // Set the total number of bytes in the event if it's available.

          if (event.lengthComputable) {
            progressEvent.total = event.total;
          } // If the request was for text content and a partial response is
          // available on XMLHttpRequest, include it in the progress event
          // to allow for streaming reads.


          if (req.responseType === 'text' && !!xhr.responseText) {
            progressEvent.partialText = xhr.responseText;
          } // Finally, fire the event.


          observer.next(progressEvent);
        }; // The upload progress event handler, which is only registered if
        // progress events are enabled.


        const onUpProgress = event => {
          // Upload progress events are simpler. Begin building the progress
          // event.
          let progress = {
            type: HttpEventType.UploadProgress,
            loaded: event.loaded
          }; // If the total number of bytes being uploaded is available, include
          // it.

          if (event.lengthComputable) {
            progress.total = event.total;
          } // Send the event.


          observer.next(progress);
        }; // By default, register for load and error events.


        xhr.addEventListener('load', onLoad);
        xhr.addEventListener('error', onError);
        xhr.addEventListener('timeout', onError);
        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.

        if (req.reportProgress) {
          // Download progress is always enabled if requested.
          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.

          if (reqBody !== null && xhr.upload) {
            xhr.upload.addEventListener('progress', onUpProgress);
          }
        } // Fire the request, and notify the event stream that it was fired.


        xhr.send(reqBody);
        observer.next({
          type: HttpEventType.Sent
        }); // This is the return from the Observable function, which is the
        // request cancellation handler.

        return () => {
          // On a cancellation, remove all registered event listeners.
          xhr.removeEventListener('error', onError);
          xhr.removeEventListener('abort', onError);
          xhr.removeEventListener('load', onLoad);
          xhr.removeEventListener('timeout', onError);

          if (req.reportProgress) {
            xhr.removeEventListener('progress', onDownProgress);

            if (reqBody !== null && xhr.upload) {
              xhr.upload.removeEventListener('progress', onUpProgress);
            }
          } // Finally, abort the in-flight request.


          if (xhr.readyState !== xhr.DONE) {
            xhr.abort();
          }
        };
      });
    }

  }

  HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {
    return new (t || HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory));
  };

  HttpXhrBackend.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HttpXhrBackend,
    factory: HttpXhrBackend.ɵfac
  });
  return HttpXhrBackend;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const XSRF_COOKIE_NAME = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_COOKIE_NAME');
const XSRF_HEADER_NAME = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 * @publicApi
 */

class HttpXsrfTokenExtractor {}
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */


let HttpXsrfCookieExtractor = /*#__PURE__*/(() => {
  class HttpXsrfCookieExtractor {
    constructor(doc, platform, cookieName) {
      this.doc = doc;
      this.platform = platform;
      this.cookieName = cookieName;
      this.lastCookieString = '';
      this.lastToken = null;
      /**
       * @internal for testing
       */

      this.parseCount = 0;
    }

    getToken() {
      if (this.platform === 'server') {
        return null;
      }

      const cookieString = this.doc.cookie || '';

      if (cookieString !== this.lastCookieString) {
        this.parseCount++;
        this.lastToken = (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵparseCookieValue"])(cookieString, this.cookieName);
        this.lastCookieString = cookieString;
      }

      return this.lastToken;
    }

  }

  HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {
    return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](XSRF_COOKIE_NAME));
  };

  HttpXsrfCookieExtractor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HttpXsrfCookieExtractor,
    factory: HttpXsrfCookieExtractor.ɵfac
  });
  return HttpXsrfCookieExtractor;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */


let HttpXsrfInterceptor = /*#__PURE__*/(() => {
  class HttpXsrfInterceptor {
    constructor(tokenService, headerName) {
      this.tokenService = tokenService;
      this.headerName = headerName;
    }

    intercept(req, next) {
      const lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.
      // Non-mutating requests don't require a token, and absolute URLs require special handling
      // anyway as the cookie set
      // on our origin is not the same as the token expected by another origin.

      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
        return next.handle(req);
      }

      const token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.

      if (token !== null && !req.headers.has(this.headerName)) {
        req = req.clone({
          headers: req.headers.set(this.headerName, token)
        });
      }

      return next.handle(req);
    }

  }

  HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {
    return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](HttpXsrfTokenExtractor), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](XSRF_HEADER_NAME));
  };

  HttpXsrfInterceptor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HttpXsrfInterceptor,
    factory: HttpXsrfInterceptor.ɵfac
  });
  return HttpXsrfInterceptor;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An injectable `HttpHandler` that applies multiple interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * The interceptors are loaded lazily from the injector, to allow
 * interceptors to themselves inject classes depending indirectly
 * on `HttpInterceptingHandler` itself.
 * @see `HttpInterceptor`
 */


let HttpInterceptingHandler = /*#__PURE__*/(() => {
  class HttpInterceptingHandler {
    constructor(backend, injector) {
      this.backend = backend;
      this.injector = injector;
      this.chain = null;
    }

    handle(req) {
      if (this.chain === null) {
        const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
        this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);
      }

      return this.chain.handle(req);
    }

  }

  HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {
    return new (t || HttpInterceptingHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injector));
  };

  HttpInterceptingHandler.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
    token: HttpInterceptingHandler,
    factory: HttpInterceptingHandler.ɵfac
  });
  return HttpInterceptingHandler;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Constructs an `HttpHandler` that applies interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * Use as a factory function within `HttpClientModule`.
 *
 *
 */


function interceptingHandler(backend, interceptors = []) {
  if (!interceptors) {
    return backend;
  }

  return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);
}
/**
 * Factory function that determines where to store JSONP callbacks.
 *
 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
 * in test environments. In that case, callbacks are stored on an anonymous object instead.
 *
 *
 */


function jsonpCallbackContext() {
  if (typeof window === 'object') {
    return window;
  }

  return {};
}
/**
 * Configures XSRF protection support for outgoing requests.
 *
 * For a server that supports a cookie-based XSRF protection system,
 * use directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no names are supplied, the default cookie name is `XSRF-TOKEN`
 * and the default header name is `X-XSRF-TOKEN`.
 *
 * @publicApi
 */


let HttpClientXsrfModule = /*#__PURE__*/(() => {
  class HttpClientXsrfModule {
    /**
     * Disable the default XSRF protection.
     */
    static disable() {
      return {
        ngModule: HttpClientXsrfModule,
        providers: [{
          provide: HttpXsrfInterceptor,
          useClass: NoopInterceptor
        }]
      };
    }
    /**
     * Configure XSRF protection.
     * @param options An object that can specify either or both
     * cookie name or header name.
     * - Cookie name default is `XSRF-TOKEN`.
     * - Header name default is `X-XSRF-TOKEN`.
     *
     */


    static withOptions(options = {}) {
      return {
        ngModule: HttpClientXsrfModule,
        providers: [options.cookieName ? {
          provide: XSRF_COOKIE_NAME,
          useValue: options.cookieName
        } : [], options.headerName ? {
          provide: XSRF_HEADER_NAME,
          useValue: options.headerName
        } : []]
      };
    }

  }

  HttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {
    return new (t || HttpClientXsrfModule)();
  };

  HttpClientXsrfModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
    type: HttpClientXsrfModule
  });
  HttpClientXsrfModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
    providers: [HttpXsrfInterceptor, {
      provide: HTTP_INTERCEPTORS,
      useExisting: HttpXsrfInterceptor,
      multi: true
    }, {
      provide: HttpXsrfTokenExtractor,
      useClass: HttpXsrfCookieExtractor
    }, {
      provide: XSRF_COOKIE_NAME,
      useValue: 'XSRF-TOKEN'
    }, {
      provide: XSRF_HEADER_NAME,
      useValue: 'X-XSRF-TOKEN'
    }]
  });
  return HttpClientXsrfModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * @publicApi
 */


let HttpClientModule = /*#__PURE__*/(() => {
  class HttpClientModule {}

  HttpClientModule.ɵfac = function HttpClientModule_Factory(t) {
    return new (t || HttpClientModule)();
  };

  HttpClientModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
    type: HttpClientModule
  });
  HttpClientModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
    providers: [HttpClient, {
      provide: HttpHandler,
      useClass: HttpInterceptingHandler
    }, HttpXhrBackend, {
      provide: HttpBackend,
      useExisting: HttpXhrBackend
    }],
    imports: [[HttpClientXsrfModule.withOptions({
      cookieName: 'XSRF-TOKEN',
      headerName: 'X-XSRF-TOKEN'
    })]]
  });
  return HttpClientModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for JSONP.
 * Without this module, Jsonp requests reach the backend
 * with method JSONP, where they are rejected.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * @publicApi
 */


let HttpClientJsonpModule = /*#__PURE__*/(() => {
  class HttpClientJsonpModule {}

  HttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {
    return new (t || HttpClientJsonpModule)();
  };

  HttpClientJsonpModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
    type: HttpClientJsonpModule
  });
  HttpClientJsonpModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
    providers: [JsonpClientBackend, {
      provide: JsonpCallbackContext,
      useFactory: jsonpCallbackContext
    }, {
      provide: HTTP_INTERCEPTORS,
      useClass: JsonpInterceptor,
      multi: true
    }]
  });
  return HttpClientJsonpModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * @publicApi
 * @see `XhrFactory`
 * @deprecated
 * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.
 */


const XhrFactory = _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */

 //# sourceMappingURL=http.mjs.map

/***/ }),

/***/ 5000:
/*!******************************************************!*\
  !*** ./node_modules/@angular/core/fesm2015/core.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANALYZE_FOR_ENTRY_COMPONENTS": () => (/* binding */ ANALYZE_FOR_ENTRY_COMPONENTS),
/* harmony export */   "APP_BOOTSTRAP_LISTENER": () => (/* binding */ APP_BOOTSTRAP_LISTENER),
/* harmony export */   "APP_ID": () => (/* binding */ APP_ID),
/* harmony export */   "APP_INITIALIZER": () => (/* binding */ APP_INITIALIZER),
/* harmony export */   "ApplicationInitStatus": () => (/* binding */ ApplicationInitStatus),
/* harmony export */   "ApplicationModule": () => (/* binding */ ApplicationModule),
/* harmony export */   "ApplicationRef": () => (/* binding */ ApplicationRef),
/* harmony export */   "Attribute": () => (/* binding */ Attribute),
/* harmony export */   "COMPILER_OPTIONS": () => (/* binding */ COMPILER_OPTIONS),
/* harmony export */   "CUSTOM_ELEMENTS_SCHEMA": () => (/* binding */ CUSTOM_ELEMENTS_SCHEMA),
/* harmony export */   "ChangeDetectionStrategy": () => (/* binding */ ChangeDetectionStrategy),
/* harmony export */   "ChangeDetectorRef": () => (/* binding */ ChangeDetectorRef),
/* harmony export */   "Compiler": () => (/* binding */ Compiler),
/* harmony export */   "CompilerFactory": () => (/* binding */ CompilerFactory),
/* harmony export */   "Component": () => (/* binding */ Component),
/* harmony export */   "ComponentFactory": () => (/* binding */ ComponentFactory$1),
/* harmony export */   "ComponentFactoryResolver": () => (/* binding */ ComponentFactoryResolver$1),
/* harmony export */   "ComponentRef": () => (/* binding */ ComponentRef$1),
/* harmony export */   "ContentChild": () => (/* binding */ ContentChild),
/* harmony export */   "ContentChildren": () => (/* binding */ ContentChildren),
/* harmony export */   "DEFAULT_CURRENCY_CODE": () => (/* binding */ DEFAULT_CURRENCY_CODE),
/* harmony export */   "DebugElement": () => (/* binding */ DebugElement),
/* harmony export */   "DebugEventListener": () => (/* binding */ DebugEventListener),
/* harmony export */   "DebugNode": () => (/* binding */ DebugNode),
/* harmony export */   "DefaultIterableDiffer": () => (/* binding */ DefaultIterableDiffer),
/* harmony export */   "Directive": () => (/* binding */ Directive),
/* harmony export */   "ElementRef": () => (/* binding */ ElementRef),
/* harmony export */   "EmbeddedViewRef": () => (/* binding */ EmbeddedViewRef),
/* harmony export */   "ErrorHandler": () => (/* binding */ ErrorHandler),
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter),
/* harmony export */   "Host": () => (/* binding */ Host),
/* harmony export */   "HostBinding": () => (/* binding */ HostBinding),
/* harmony export */   "HostListener": () => (/* binding */ HostListener),
/* harmony export */   "INJECTOR": () => (/* binding */ INJECTOR),
/* harmony export */   "Inject": () => (/* binding */ Inject),
/* harmony export */   "InjectFlags": () => (/* binding */ InjectFlags),
/* harmony export */   "Injectable": () => (/* binding */ Injectable),
/* harmony export */   "InjectionToken": () => (/* binding */ InjectionToken),
/* harmony export */   "Injector": () => (/* binding */ Injector),
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "IterableDiffers": () => (/* binding */ IterableDiffers),
/* harmony export */   "KeyValueDiffers": () => (/* binding */ KeyValueDiffers),
/* harmony export */   "LOCALE_ID": () => (/* binding */ LOCALE_ID),
/* harmony export */   "MissingTranslationStrategy": () => (/* binding */ MissingTranslationStrategy),
/* harmony export */   "ModuleWithComponentFactories": () => (/* binding */ ModuleWithComponentFactories),
/* harmony export */   "NO_ERRORS_SCHEMA": () => (/* binding */ NO_ERRORS_SCHEMA),
/* harmony export */   "NgModule": () => (/* binding */ NgModule),
/* harmony export */   "NgModuleFactory": () => (/* binding */ NgModuleFactory$1),
/* harmony export */   "NgModuleRef": () => (/* binding */ NgModuleRef$1),
/* harmony export */   "NgProbeToken": () => (/* binding */ NgProbeToken),
/* harmony export */   "NgZone": () => (/* binding */ NgZone),
/* harmony export */   "Optional": () => (/* binding */ Optional),
/* harmony export */   "Output": () => (/* binding */ Output),
/* harmony export */   "PACKAGE_ROOT_URL": () => (/* binding */ PACKAGE_ROOT_URL),
/* harmony export */   "PLATFORM_ID": () => (/* binding */ PLATFORM_ID),
/* harmony export */   "PLATFORM_INITIALIZER": () => (/* binding */ PLATFORM_INITIALIZER),
/* harmony export */   "Pipe": () => (/* binding */ Pipe),
/* harmony export */   "PlatformRef": () => (/* binding */ PlatformRef),
/* harmony export */   "Query": () => (/* binding */ Query),
/* harmony export */   "QueryList": () => (/* binding */ QueryList),
/* harmony export */   "ReflectiveInjector": () => (/* binding */ ReflectiveInjector),
/* harmony export */   "ReflectiveKey": () => (/* binding */ ReflectiveKey),
/* harmony export */   "Renderer2": () => (/* binding */ Renderer2),
/* harmony export */   "RendererFactory2": () => (/* binding */ RendererFactory2),
/* harmony export */   "RendererStyleFlags2": () => (/* binding */ RendererStyleFlags2),
/* harmony export */   "ResolvedReflectiveFactory": () => (/* binding */ ResolvedReflectiveFactory),
/* harmony export */   "Sanitizer": () => (/* binding */ Sanitizer),
/* harmony export */   "SecurityContext": () => (/* binding */ SecurityContext),
/* harmony export */   "Self": () => (/* binding */ Self),
/* harmony export */   "SimpleChange": () => (/* binding */ SimpleChange),
/* harmony export */   "SkipSelf": () => (/* binding */ SkipSelf),
/* harmony export */   "TRANSLATIONS": () => (/* binding */ TRANSLATIONS),
/* harmony export */   "TRANSLATIONS_FORMAT": () => (/* binding */ TRANSLATIONS_FORMAT),
/* harmony export */   "TemplateRef": () => (/* binding */ TemplateRef),
/* harmony export */   "Testability": () => (/* binding */ Testability),
/* harmony export */   "TestabilityRegistry": () => (/* binding */ TestabilityRegistry),
/* harmony export */   "Type": () => (/* binding */ Type),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "Version": () => (/* binding */ Version),
/* harmony export */   "ViewChild": () => (/* binding */ ViewChild),
/* harmony export */   "ViewChildren": () => (/* binding */ ViewChildren),
/* harmony export */   "ViewContainerRef": () => (/* binding */ ViewContainerRef),
/* harmony export */   "ViewEncapsulation": () => (/* binding */ ViewEncapsulation$1),
/* harmony export */   "ViewRef": () => (/* binding */ ViewRef),
/* harmony export */   "asNativeElements": () => (/* binding */ asNativeElements),
/* harmony export */   "assertPlatform": () => (/* binding */ assertPlatform),
/* harmony export */   "createNgModuleRef": () => (/* binding */ createNgModuleRef),
/* harmony export */   "createPlatform": () => (/* binding */ createPlatform),
/* harmony export */   "createPlatformFactory": () => (/* binding */ createPlatformFactory),
/* harmony export */   "defineInjectable": () => (/* binding */ defineInjectable),
/* harmony export */   "destroyPlatform": () => (/* binding */ destroyPlatform),
/* harmony export */   "enableProdMode": () => (/* binding */ enableProdMode),
/* harmony export */   "forwardRef": () => (/* binding */ forwardRef),
/* harmony export */   "getDebugNode": () => (/* binding */ getDebugNode),
/* harmony export */   "getModuleFactory": () => (/* binding */ getModuleFactory),
/* harmony export */   "getNgModuleById": () => (/* binding */ getNgModuleById),
/* harmony export */   "getPlatform": () => (/* binding */ getPlatform),
/* harmony export */   "inject": () => (/* binding */ inject),
/* harmony export */   "isDevMode": () => (/* binding */ isDevMode),
/* harmony export */   "platformCore": () => (/* binding */ platformCore),
/* harmony export */   "resolveForwardRef": () => (/* binding */ resolveForwardRef),
/* harmony export */   "setTestabilityGetter": () => (/* binding */ setTestabilityGetter),
/* harmony export */   "ɵALLOW_MULTIPLE_PLATFORMS": () => (/* binding */ ALLOW_MULTIPLE_PLATFORMS),
/* harmony export */   "ɵAPP_ID_RANDOM_PROVIDER": () => (/* binding */ APP_ID_RANDOM_PROVIDER),
/* harmony export */   "ɵChangeDetectorStatus": () => (/* binding */ ChangeDetectorStatus),
/* harmony export */   "ɵComponentFactory": () => (/* binding */ ComponentFactory$1),
/* harmony export */   "ɵConsole": () => (/* binding */ Console),
/* harmony export */   "ɵDEFAULT_LOCALE_ID": () => (/* binding */ DEFAULT_LOCALE_ID),
/* harmony export */   "ɵINJECTOR_SCOPE": () => (/* binding */ INJECTOR_SCOPE),
/* harmony export */   "ɵLifecycleHooksFeature": () => (/* binding */ LifecycleHooksFeature),
/* harmony export */   "ɵLocaleDataIndex": () => (/* binding */ LocaleDataIndex),
/* harmony export */   "ɵNG_COMP_DEF": () => (/* binding */ NG_COMP_DEF),
/* harmony export */   "ɵNG_DIR_DEF": () => (/* binding */ NG_DIR_DEF),
/* harmony export */   "ɵNG_ELEMENT_ID": () => (/* binding */ NG_ELEMENT_ID),
/* harmony export */   "ɵNG_INJ_DEF": () => (/* binding */ NG_INJ_DEF),
/* harmony export */   "ɵNG_MOD_DEF": () => (/* binding */ NG_MOD_DEF),
/* harmony export */   "ɵNG_PIPE_DEF": () => (/* binding */ NG_PIPE_DEF),
/* harmony export */   "ɵNG_PROV_DEF": () => (/* binding */ NG_PROV_DEF),
/* harmony export */   "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR": () => (/* binding */ NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR),
/* harmony export */   "ɵNO_CHANGE": () => (/* binding */ NO_CHANGE),
/* harmony export */   "ɵNgModuleFactory": () => (/* binding */ NgModuleFactory),
/* harmony export */   "ɵNoopNgZone": () => (/* binding */ NoopNgZone),
/* harmony export */   "ɵReflectionCapabilities": () => (/* binding */ ReflectionCapabilities),
/* harmony export */   "ɵRender3ComponentFactory": () => (/* binding */ ComponentFactory),
/* harmony export */   "ɵRender3ComponentRef": () => (/* binding */ ComponentRef),
/* harmony export */   "ɵRender3NgModuleRef": () => (/* binding */ NgModuleRef),
/* harmony export */   "ɵRuntimeError": () => (/* binding */ RuntimeError),
/* harmony export */   "ɵViewRef": () => (/* binding */ ViewRef$1),
/* harmony export */   "ɵ_sanitizeHtml": () => (/* binding */ _sanitizeHtml),
/* harmony export */   "ɵ_sanitizeUrl": () => (/* binding */ _sanitizeUrl),
/* harmony export */   "ɵallowSanitizationBypassAndThrow": () => (/* binding */ allowSanitizationBypassAndThrow),
/* harmony export */   "ɵbypassSanitizationTrustHtml": () => (/* binding */ bypassSanitizationTrustHtml),
/* harmony export */   "ɵbypassSanitizationTrustResourceUrl": () => (/* binding */ bypassSanitizationTrustResourceUrl),
/* harmony export */   "ɵbypassSanitizationTrustScript": () => (/* binding */ bypassSanitizationTrustScript),
/* harmony export */   "ɵbypassSanitizationTrustStyle": () => (/* binding */ bypassSanitizationTrustStyle),
/* harmony export */   "ɵbypassSanitizationTrustUrl": () => (/* binding */ bypassSanitizationTrustUrl),
/* harmony export */   "ɵclearResolutionOfComponentResourcesQueue": () => (/* binding */ clearResolutionOfComponentResourcesQueue),
/* harmony export */   "ɵcompileComponent": () => (/* binding */ compileComponent),
/* harmony export */   "ɵcompileDirective": () => (/* binding */ compileDirective),
/* harmony export */   "ɵcompileNgModule": () => (/* binding */ compileNgModule),
/* harmony export */   "ɵcompileNgModuleDefs": () => (/* binding */ compileNgModuleDefs),
/* harmony export */   "ɵcompileNgModuleFactory": () => (/* binding */ compileNgModuleFactory),
/* harmony export */   "ɵcompilePipe": () => (/* binding */ compilePipe),
/* harmony export */   "ɵcreateInjector": () => (/* binding */ createInjector),
/* harmony export */   "ɵdefaultIterableDiffers": () => (/* binding */ defaultIterableDiffers),
/* harmony export */   "ɵdefaultKeyValueDiffers": () => (/* binding */ defaultKeyValueDiffers),
/* harmony export */   "ɵdetectChanges": () => (/* binding */ detectChanges),
/* harmony export */   "ɵdevModeEqual": () => (/* binding */ devModeEqual),
/* harmony export */   "ɵfindLocaleData": () => (/* binding */ findLocaleData),
/* harmony export */   "ɵflushModuleScopingQueueAsMuchAsPossible": () => (/* binding */ flushModuleScopingQueueAsMuchAsPossible),
/* harmony export */   "ɵgetDebugNode": () => (/* binding */ getDebugNode),
/* harmony export */   "ɵgetDebugNodeR2": () => (/* binding */ getDebugNodeR2),
/* harmony export */   "ɵgetDirectives": () => (/* binding */ getDirectives),
/* harmony export */   "ɵgetHostElement": () => (/* binding */ getHostElement),
/* harmony export */   "ɵgetInjectableDef": () => (/* binding */ getInjectableDef),
/* harmony export */   "ɵgetLContext": () => (/* binding */ getLContext),
/* harmony export */   "ɵgetLocaleCurrencyCode": () => (/* binding */ getLocaleCurrencyCode),
/* harmony export */   "ɵgetLocalePluralCase": () => (/* binding */ getLocalePluralCase),
/* harmony export */   "ɵgetSanitizationBypassType": () => (/* binding */ getSanitizationBypassType),
/* harmony export */   "ɵglobal": () => (/* binding */ _global),
/* harmony export */   "ɵinjectChangeDetectorRef": () => (/* binding */ injectChangeDetectorRef),
/* harmony export */   "ɵisBoundToModule": () => (/* binding */ isBoundToModule),
/* harmony export */   "ɵisDefaultChangeDetectionStrategy": () => (/* binding */ isDefaultChangeDetectionStrategy),
/* harmony export */   "ɵisListLikeIterable": () => (/* binding */ isListLikeIterable),
/* harmony export */   "ɵisObservable": () => (/* binding */ isObservable),
/* harmony export */   "ɵisPromise": () => (/* binding */ isPromise),
/* harmony export */   "ɵisSubscribable": () => (/* binding */ isSubscribable),
/* harmony export */   "ɵivyEnabled": () => (/* binding */ ɵivyEnabled),
/* harmony export */   "ɵmakeDecorator": () => (/* binding */ makeDecorator),
/* harmony export */   "ɵmarkDirty": () => (/* binding */ markDirty),
/* harmony export */   "ɵnoSideEffects": () => (/* binding */ noSideEffects),
/* harmony export */   "ɵpatchComponentDefWithScope": () => (/* binding */ patchComponentDefWithScope),
/* harmony export */   "ɵpublishDefaultGlobalUtils": () => (/* binding */ publishDefaultGlobalUtils$1),
/* harmony export */   "ɵpublishGlobalUtil": () => (/* binding */ publishGlobalUtil),
/* harmony export */   "ɵregisterLocaleData": () => (/* binding */ registerLocaleData),
/* harmony export */   "ɵregisterNgModuleType": () => (/* binding */ registerNgModuleType),
/* harmony export */   "ɵrenderComponent": () => (/* binding */ renderComponent),
/* harmony export */   "ɵresetCompiledComponents": () => (/* binding */ resetCompiledComponents),
/* harmony export */   "ɵresetJitOptions": () => (/* binding */ resetJitOptions),
/* harmony export */   "ɵresolveComponentResources": () => (/* binding */ resolveComponentResources),
/* harmony export */   "ɵsetClassMetadata": () => (/* binding */ setClassMetadata),
/* harmony export */   "ɵsetCurrentInjector": () => (/* binding */ setCurrentInjector),
/* harmony export */   "ɵsetDocument": () => (/* binding */ setDocument),
/* harmony export */   "ɵsetLocaleId": () => (/* binding */ setLocaleId),
/* harmony export */   "ɵstore": () => (/* binding */ store),
/* harmony export */   "ɵstringify": () => (/* binding */ stringify),
/* harmony export */   "ɵtransitiveScopesFor": () => (/* binding */ transitiveScopesFor),
/* harmony export */   "ɵunregisterLocaleData": () => (/* binding */ unregisterAllLocaleData),
/* harmony export */   "ɵunwrapSafeValue": () => (/* binding */ unwrapSafeValue),
/* harmony export */   "ɵwhenRendered": () => (/* binding */ whenRendered),
/* harmony export */   "ɵɵCopyDefinitionFeature": () => (/* binding */ ɵɵCopyDefinitionFeature),
/* harmony export */   "ɵɵFactoryTarget": () => (/* binding */ FactoryTarget),
/* harmony export */   "ɵɵInheritDefinitionFeature": () => (/* binding */ ɵɵInheritDefinitionFeature),
/* harmony export */   "ɵɵNgOnChangesFeature": () => (/* binding */ ɵɵNgOnChangesFeature),
/* harmony export */   "ɵɵProvidersFeature": () => (/* binding */ ɵɵProvidersFeature),
/* harmony export */   "ɵɵadvance": () => (/* binding */ ɵɵadvance),
/* harmony export */   "ɵɵattribute": () => (/* binding */ ɵɵattribute),
/* harmony export */   "ɵɵattributeInterpolate1": () => (/* binding */ ɵɵattributeInterpolate1),
/* harmony export */   "ɵɵattributeInterpolate2": () => (/* binding */ ɵɵattributeInterpolate2),
/* harmony export */   "ɵɵattributeInterpolate3": () => (/* binding */ ɵɵattributeInterpolate3),
/* harmony export */   "ɵɵattributeInterpolate4": () => (/* binding */ ɵɵattributeInterpolate4),
/* harmony export */   "ɵɵattributeInterpolate5": () => (/* binding */ ɵɵattributeInterpolate5),
/* harmony export */   "ɵɵattributeInterpolate6": () => (/* binding */ ɵɵattributeInterpolate6),
/* harmony export */   "ɵɵattributeInterpolate7": () => (/* binding */ ɵɵattributeInterpolate7),
/* harmony export */   "ɵɵattributeInterpolate8": () => (/* binding */ ɵɵattributeInterpolate8),
/* harmony export */   "ɵɵattributeInterpolateV": () => (/* binding */ ɵɵattributeInterpolateV),
/* harmony export */   "ɵɵclassMap": () => (/* binding */ ɵɵclassMap),
/* harmony export */   "ɵɵclassMapInterpolate1": () => (/* binding */ ɵɵclassMapInterpolate1),
/* harmony export */   "ɵɵclassMapInterpolate2": () => (/* binding */ ɵɵclassMapInterpolate2),
/* harmony export */   "ɵɵclassMapInterpolate3": () => (/* binding */ ɵɵclassMapInterpolate3),
/* harmony export */   "ɵɵclassMapInterpolate4": () => (/* binding */ ɵɵclassMapInterpolate4),
/* harmony export */   "ɵɵclassMapInterpolate5": () => (/* binding */ ɵɵclassMapInterpolate5),
/* harmony export */   "ɵɵclassMapInterpolate6": () => (/* binding */ ɵɵclassMapInterpolate6),
/* harmony export */   "ɵɵclassMapInterpolate7": () => (/* binding */ ɵɵclassMapInterpolate7),
/* harmony export */   "ɵɵclassMapInterpolate8": () => (/* binding */ ɵɵclassMapInterpolate8),
/* harmony export */   "ɵɵclassMapInterpolateV": () => (/* binding */ ɵɵclassMapInterpolateV),
/* harmony export */   "ɵɵclassProp": () => (/* binding */ ɵɵclassProp),
/* harmony export */   "ɵɵcontentQuery": () => (/* binding */ ɵɵcontentQuery),
/* harmony export */   "ɵɵdefineComponent": () => (/* binding */ ɵɵdefineComponent),
/* harmony export */   "ɵɵdefineDirective": () => (/* binding */ ɵɵdefineDirective),
/* harmony export */   "ɵɵdefineInjectable": () => (/* binding */ ɵɵdefineInjectable),
/* harmony export */   "ɵɵdefineInjector": () => (/* binding */ ɵɵdefineInjector),
/* harmony export */   "ɵɵdefineNgModule": () => (/* binding */ ɵɵdefineNgModule),
/* harmony export */   "ɵɵdefinePipe": () => (/* binding */ ɵɵdefinePipe),
/* harmony export */   "ɵɵdirectiveInject": () => (/* binding */ ɵɵdirectiveInject),
/* harmony export */   "ɵɵdisableBindings": () => (/* binding */ ɵɵdisableBindings),
/* harmony export */   "ɵɵelement": () => (/* binding */ ɵɵelement),
/* harmony export */   "ɵɵelementContainer": () => (/* binding */ ɵɵelementContainer),
/* harmony export */   "ɵɵelementContainerEnd": () => (/* binding */ ɵɵelementContainerEnd),
/* harmony export */   "ɵɵelementContainerStart": () => (/* binding */ ɵɵelementContainerStart),
/* harmony export */   "ɵɵelementEnd": () => (/* binding */ ɵɵelementEnd),
/* harmony export */   "ɵɵelementStart": () => (/* binding */ ɵɵelementStart),
/* harmony export */   "ɵɵenableBindings": () => (/* binding */ ɵɵenableBindings),
/* harmony export */   "ɵɵgetCurrentView": () => (/* binding */ ɵɵgetCurrentView),
/* harmony export */   "ɵɵgetInheritedFactory": () => (/* binding */ ɵɵgetInheritedFactory),
/* harmony export */   "ɵɵhostProperty": () => (/* binding */ ɵɵhostProperty),
/* harmony export */   "ɵɵi18n": () => (/* binding */ ɵɵi18n),
/* harmony export */   "ɵɵi18nApply": () => (/* binding */ ɵɵi18nApply),
/* harmony export */   "ɵɵi18nAttributes": () => (/* binding */ ɵɵi18nAttributes),
/* harmony export */   "ɵɵi18nEnd": () => (/* binding */ ɵɵi18nEnd),
/* harmony export */   "ɵɵi18nExp": () => (/* binding */ ɵɵi18nExp),
/* harmony export */   "ɵɵi18nPostprocess": () => (/* binding */ ɵɵi18nPostprocess),
/* harmony export */   "ɵɵi18nStart": () => (/* binding */ ɵɵi18nStart),
/* harmony export */   "ɵɵinject": () => (/* binding */ ɵɵinject),
/* harmony export */   "ɵɵinjectAttribute": () => (/* binding */ ɵɵinjectAttribute),
/* harmony export */   "ɵɵinvalidFactory": () => (/* binding */ ɵɵinvalidFactory),
/* harmony export */   "ɵɵinvalidFactoryDep": () => (/* binding */ ɵɵinvalidFactoryDep),
/* harmony export */   "ɵɵlistener": () => (/* binding */ ɵɵlistener),
/* harmony export */   "ɵɵloadQuery": () => (/* binding */ ɵɵloadQuery),
/* harmony export */   "ɵɵnamespaceHTML": () => (/* binding */ ɵɵnamespaceHTML),
/* harmony export */   "ɵɵnamespaceMathML": () => (/* binding */ ɵɵnamespaceMathML),
/* harmony export */   "ɵɵnamespaceSVG": () => (/* binding */ ɵɵnamespaceSVG),
/* harmony export */   "ɵɵnextContext": () => (/* binding */ ɵɵnextContext),
/* harmony export */   "ɵɵngDeclareClassMetadata": () => (/* binding */ ɵɵngDeclareClassMetadata),
/* harmony export */   "ɵɵngDeclareComponent": () => (/* binding */ ɵɵngDeclareComponent),
/* harmony export */   "ɵɵngDeclareDirective": () => (/* binding */ ɵɵngDeclareDirective),
/* harmony export */   "ɵɵngDeclareFactory": () => (/* binding */ ɵɵngDeclareFactory),
/* harmony export */   "ɵɵngDeclareInjectable": () => (/* binding */ ɵɵngDeclareInjectable),
/* harmony export */   "ɵɵngDeclareInjector": () => (/* binding */ ɵɵngDeclareInjector),
/* harmony export */   "ɵɵngDeclareNgModule": () => (/* binding */ ɵɵngDeclareNgModule),
/* harmony export */   "ɵɵngDeclarePipe": () => (/* binding */ ɵɵngDeclarePipe),
/* harmony export */   "ɵɵpipe": () => (/* binding */ ɵɵpipe),
/* harmony export */   "ɵɵpipeBind1": () => (/* binding */ ɵɵpipeBind1),
/* harmony export */   "ɵɵpipeBind2": () => (/* binding */ ɵɵpipeBind2),
/* harmony export */   "ɵɵpipeBind3": () => (/* binding */ ɵɵpipeBind3),
/* harmony export */   "ɵɵpipeBind4": () => (/* binding */ ɵɵpipeBind4),
/* harmony export */   "ɵɵpipeBindV": () => (/* binding */ ɵɵpipeBindV),
/* harmony export */   "ɵɵprojection": () => (/* binding */ ɵɵprojection),
/* harmony export */   "ɵɵprojectionDef": () => (/* binding */ ɵɵprojectionDef),
/* harmony export */   "ɵɵproperty": () => (/* binding */ ɵɵproperty),
/* harmony export */   "ɵɵpropertyInterpolate": () => (/* binding */ ɵɵpropertyInterpolate),
/* harmony export */   "ɵɵpropertyInterpolate1": () => (/* binding */ ɵɵpropertyInterpolate1),
/* harmony export */   "ɵɵpropertyInterpolate2": () => (/* binding */ ɵɵpropertyInterpolate2),
/* harmony export */   "ɵɵpropertyInterpolate3": () => (/* binding */ ɵɵpropertyInterpolate3),
/* harmony export */   "ɵɵpropertyInterpolate4": () => (/* binding */ ɵɵpropertyInterpolate4),
/* harmony export */   "ɵɵpropertyInterpolate5": () => (/* binding */ ɵɵpropertyInterpolate5),
/* harmony export */   "ɵɵpropertyInterpolate6": () => (/* binding */ ɵɵpropertyInterpolate6),
/* harmony export */   "ɵɵpropertyInterpolate7": () => (/* binding */ ɵɵpropertyInterpolate7),
/* harmony export */   "ɵɵpropertyInterpolate8": () => (/* binding */ ɵɵpropertyInterpolate8),
/* harmony export */   "ɵɵpropertyInterpolateV": () => (/* binding */ ɵɵpropertyInterpolateV),
/* harmony export */   "ɵɵpureFunction0": () => (/* binding */ ɵɵpureFunction0),
/* harmony export */   "ɵɵpureFunction1": () => (/* binding */ ɵɵpureFunction1),
/* harmony export */   "ɵɵpureFunction2": () => (/* binding */ ɵɵpureFunction2),
/* harmony export */   "ɵɵpureFunction3": () => (/* binding */ ɵɵpureFunction3),
/* harmony export */   "ɵɵpureFunction4": () => (/* binding */ ɵɵpureFunction4),
/* harmony export */   "ɵɵpureFunction5": () => (/* binding */ ɵɵpureFunction5),
/* harmony export */   "ɵɵpureFunction6": () => (/* binding */ ɵɵpureFunction6),
/* harmony export */   "ɵɵpureFunction7": () => (/* binding */ ɵɵpureFunction7),
/* harmony export */   "ɵɵpureFunction8": () => (/* binding */ ɵɵpureFunction8),
/* harmony export */   "ɵɵpureFunctionV": () => (/* binding */ ɵɵpureFunctionV),
/* harmony export */   "ɵɵqueryRefresh": () => (/* binding */ ɵɵqueryRefresh),
/* harmony export */   "ɵɵreference": () => (/* binding */ ɵɵreference),
/* harmony export */   "ɵɵresolveBody": () => (/* binding */ ɵɵresolveBody),
/* harmony export */   "ɵɵresolveDocument": () => (/* binding */ ɵɵresolveDocument),
/* harmony export */   "ɵɵresolveWindow": () => (/* binding */ ɵɵresolveWindow),
/* harmony export */   "ɵɵrestoreView": () => (/* binding */ ɵɵrestoreView),
/* harmony export */   "ɵɵsanitizeHtml": () => (/* binding */ ɵɵsanitizeHtml),
/* harmony export */   "ɵɵsanitizeResourceUrl": () => (/* binding */ ɵɵsanitizeResourceUrl),
/* harmony export */   "ɵɵsanitizeScript": () => (/* binding */ ɵɵsanitizeScript),
/* harmony export */   "ɵɵsanitizeStyle": () => (/* binding */ ɵɵsanitizeStyle),
/* harmony export */   "ɵɵsanitizeUrl": () => (/* binding */ ɵɵsanitizeUrl),
/* harmony export */   "ɵɵsanitizeUrlOrResourceUrl": () => (/* binding */ ɵɵsanitizeUrlOrResourceUrl),
/* harmony export */   "ɵɵsetComponentScope": () => (/* binding */ ɵɵsetComponentScope),
/* harmony export */   "ɵɵsetNgModuleScope": () => (/* binding */ ɵɵsetNgModuleScope),
/* harmony export */   "ɵɵstyleMap": () => (/* binding */ ɵɵstyleMap),
/* harmony export */   "ɵɵstyleMapInterpolate1": () => (/* binding */ ɵɵstyleMapInterpolate1),
/* harmony export */   "ɵɵstyleMapInterpolate2": () => (/* binding */ ɵɵstyleMapInterpolate2),
/* harmony export */   "ɵɵstyleMapInterpolate3": () => (/* binding */ ɵɵstyleMapInterpolate3),
/* harmony export */   "ɵɵstyleMapInterpolate4": () => (/* binding */ ɵɵstyleMapInterpolate4),
/* harmony export */   "ɵɵstyleMapInterpolate5": () => (/* binding */ ɵɵstyleMapInterpolate5),
/* harmony export */   "ɵɵstyleMapInterpolate6": () => (/* binding */ ɵɵstyleMapInterpolate6),
/* harmony export */   "ɵɵstyleMapInterpolate7": () => (/* binding */ ɵɵstyleMapInterpolate7),
/* harmony export */   "ɵɵstyleMapInterpolate8": () => (/* binding */ ɵɵstyleMapInterpolate8),
/* harmony export */   "ɵɵstyleMapInterpolateV": () => (/* binding */ ɵɵstyleMapInterpolateV),
/* harmony export */   "ɵɵstyleProp": () => (/* binding */ ɵɵstyleProp),
/* harmony export */   "ɵɵstylePropInterpolate1": () => (/* binding */ ɵɵstylePropInterpolate1),
/* harmony export */   "ɵɵstylePropInterpolate2": () => (/* binding */ ɵɵstylePropInterpolate2),
/* harmony export */   "ɵɵstylePropInterpolate3": () => (/* binding */ ɵɵstylePropInterpolate3),
/* harmony export */   "ɵɵstylePropInterpolate4": () => (/* binding */ ɵɵstylePropInterpolate4),
/* harmony export */   "ɵɵstylePropInterpolate5": () => (/* binding */ ɵɵstylePropInterpolate5),
/* harmony export */   "ɵɵstylePropInterpolate6": () => (/* binding */ ɵɵstylePropInterpolate6),
/* harmony export */   "ɵɵstylePropInterpolate7": () => (/* binding */ ɵɵstylePropInterpolate7),
/* harmony export */   "ɵɵstylePropInterpolate8": () => (/* binding */ ɵɵstylePropInterpolate8),
/* harmony export */   "ɵɵstylePropInterpolateV": () => (/* binding */ ɵɵstylePropInterpolateV),
/* harmony export */   "ɵɵsyntheticHostListener": () => (/* binding */ ɵɵsyntheticHostListener),
/* harmony export */   "ɵɵsyntheticHostProperty": () => (/* binding */ ɵɵsyntheticHostProperty),
/* harmony export */   "ɵɵtemplate": () => (/* binding */ ɵɵtemplate),
/* harmony export */   "ɵɵtemplateRefExtractor": () => (/* binding */ ɵɵtemplateRefExtractor),
/* harmony export */   "ɵɵtext": () => (/* binding */ ɵɵtext),
/* harmony export */   "ɵɵtextInterpolate": () => (/* binding */ ɵɵtextInterpolate),
/* harmony export */   "ɵɵtextInterpolate1": () => (/* binding */ ɵɵtextInterpolate1),
/* harmony export */   "ɵɵtextInterpolate2": () => (/* binding */ ɵɵtextInterpolate2),
/* harmony export */   "ɵɵtextInterpolate3": () => (/* binding */ ɵɵtextInterpolate3),
/* harmony export */   "ɵɵtextInterpolate4": () => (/* binding */ ɵɵtextInterpolate4),
/* harmony export */   "ɵɵtextInterpolate5": () => (/* binding */ ɵɵtextInterpolate5),
/* harmony export */   "ɵɵtextInterpolate6": () => (/* binding */ ɵɵtextInterpolate6),
/* harmony export */   "ɵɵtextInterpolate7": () => (/* binding */ ɵɵtextInterpolate7),
/* harmony export */   "ɵɵtextInterpolate8": () => (/* binding */ ɵɵtextInterpolate8),
/* harmony export */   "ɵɵtextInterpolateV": () => (/* binding */ ɵɵtextInterpolateV),
/* harmony export */   "ɵɵtrustConstantHtml": () => (/* binding */ ɵɵtrustConstantHtml),
/* harmony export */   "ɵɵtrustConstantResourceUrl": () => (/* binding */ ɵɵtrustConstantResourceUrl),
/* harmony export */   "ɵɵviewQuery": () => (/* binding */ ɵɵviewQuery)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 6921);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 9751);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 6451);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 3099);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function getClosureSafeProperty(objWithPropertyToExtract) {
  for (let key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }

  throw Error('Could not find renamed property on target object.');
}
/**
 * Sets properties on a target object from a source object, but only if
 * the property doesn't already exist on the target object.
 * @param target The target to set properties on
 * @param source The source of the property keys and values to set
 */


function fillProperties(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function stringify(token) {
  if (typeof token === 'string') {
    return token;
  }

  if (Array.isArray(token)) {
    return '[' + token.map(stringify).join(', ') + ']';
  }

  if (token == null) {
    return '' + token;
  }

  if (token.overriddenName) {
    return `${token.overriddenName}`;
  }

  if (token.name) {
    return `${token.name}`;
  }

  const res = token.toString();

  if (res == null) {
    return '' + res;
  }

  const newLineIndex = res.indexOf('\n');
  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * Concatenates two strings with separator, allocating new strings only when necessary.
 *
 * @param before before string.
 * @param separator separator string.
 * @param after after string.
 * @returns concatenated string.
 */


function concatStringsWithSpace(before, after) {
  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const __forward_ref__ = /*#__PURE__*/getClosureSafeProperty({
  __forward_ref__: getClosureSafeProperty
});
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
 * a query is not yet defined.
 *
 * @usageNotes
 * ### Example
 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * @publicApi
 */


function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;

  forwardRefFn.toString = function () {
    return stringify(this());
  };

  return forwardRefFn;
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * @usageNotes
 * ### Example
 *
 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * @see `forwardRef`
 * @publicApi
 */


function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
/** Checks whether a function is wrapped by a `forwardRef`. */


function isForwardRef(fn) {
  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Base URL for the error details page.
 *
 * Keep the files below in full sync:
 *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts
 *  - packages/core/src/error_details_base_url.ts
 */


const ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Class that represents a runtime error.
 * Formats and outputs the error message in a consistent way.
 *
 * Example:
 * ```
 *  throw new RuntimeError(
 *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,
 *    ngDevMode && 'Injector has already been destroyed.');
 * ```
 *
 * Note: the `message` argument contains a descriptive error message as a string in development
 * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the
 * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.
 */

class RuntimeError extends Error {
  constructor(code, message) {
    super(formatRuntimeError(code, message));
    this.code = code;
  }

}
/**
 * Called to format a runtime error.
 * See additional info on the `message` argument type in the `RuntimeError` class description.
 */


function formatRuntimeError(code, message) {
  // Error code might be a negative number, which is a special marker that instructs the logic to
  // generate a link to the error details page on angular.io.
  const fullCode = `NG0${Math.abs(code)}`;
  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;

  if (ngDevMode && code < 0) {
    errorMessage = `${errorMessage}. Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
  }

  return errorMessage;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Used for stringify render output in Ivy.
 * Important! This function is very performance-sensitive and we should
 * be extra careful not to introduce megamorphic reads in it.
 * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.
 */


function renderStringify(value) {
  if (typeof value === 'string') return value;
  if (value == null) return ''; // Use `String` so that it invokes the `toString` method of the value. Note that this
  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).

  return String(value);
}
/**
 * Used to stringify a value so that it can be displayed in an error message.
 * Important! This function contains a megamorphic read and should only be
 * used for error messages.
 */


function stringifyForError(value) {
  if (typeof value === 'function') return value.name || value.toString();

  if (typeof value === 'object' && value != null && typeof value.type === 'function') {
    return value.type.name || value.type.toString();
  }

  return renderStringify(value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Called when directives inject each other (creating a circular dependency) */


function throwCyclicDependencyError(token, path) {
  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';
  throw new RuntimeError(-200
  /* CYCLIC_DI_DEPENDENCY */
  , `Circular dependency in DI detected for ${token}${depPath}`);
}

function throwMixedMultiProviderError() {
  throw new Error(`Cannot mix multi providers and regular providers`);
}

function throwInvalidProviderError(ngModuleType, providers, provider) {
  let ngModuleDetail = '';

  if (ngModuleType && providers) {
    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');
    ngModuleDetail = ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;
  }

  throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);
}
/** Throws an error when a token is not found in DI. */


function throwProviderNotFoundError(token, injectorName) {
  const injectorDetails = injectorName ? ` in ${injectorName}` : '';
  throw new RuntimeError(-201
  /* PROVIDER_NOT_FOUND */
  , `No provider for ${stringifyForError(token)} found${injectorDetails}`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function assertNumber(actual, msg) {
  if (!(typeof actual === 'number')) {
    throwError(msg, typeof actual, 'number', '===');
  }
}

function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, 'Expected a number');
  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
}

function assertString(actual, msg) {
  if (!(typeof actual === 'string')) {
    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
  }
}

function assertFunction(actual, msg) {
  if (!(typeof actual === 'function')) {
    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');
  }
}

function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError(msg, actual, expected, '==');
  }
}

function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError(msg, actual, expected, '!=');
  }
}

function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError(msg, actual, expected, '===');
  }
}

function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError(msg, actual, expected, '!==');
  }
}

function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError(msg, actual, expected, '<');
  }
}

function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError(msg, actual, expected, '<=');
  }
}

function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError(msg, actual, expected, '>');
  }
}

function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError(msg, actual, expected, '>=');
  }
}

function assertNotDefined(actual, msg) {
  if (actual != null) {
    throwError(msg, actual, null, '==');
  }
}

function assertDefined(actual, msg) {
  if (actual == null) {
    throwError(msg, actual, null, '!=');
  }
}

function throwError(msg, actual, expected, comparison) {
  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}

function assertDomNode(node) {
  // If we're in a worker, `Node` will not be defined.
  if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {
    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
  }
}

function assertIndexInRange(arr, index) {
  assertDefined(arr, 'Array must be defined.');
  const maxLen = arr.length;

  if (index < 0 || index >= maxLen) {
    throwError(`Index expected to be less than ${maxLen} but got ${index}`);
  }
}

function assertOneOf(value, ...validValues) {
  if (validValues.indexOf(value) !== -1) return true;
  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Construct an injectable definition which defines how a token will be constructed by the DI
 * system, and in which injectors (if any) it will be available.
 *
 * This should be assigned to a static `ɵprov` field on a type, which will then be an
 * `InjectableType`.
 *
 * Options:
 * * `providedIn` determines which injectors will include the injectable, by either associating it
 *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
 *   provided in the `'root'` injector, which will be the application-level injector in most apps.
 * * `factory` gives the zero argument function which will create an instance of the injectable.
 *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
 *
 * @codeGenApi
 * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
 */


function ɵɵdefineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: undefined
  };
}
/**
 * @deprecated in v8, delete after v10. This API should be used only by generated code, and that
 * code should now use ɵɵdefineInjectable instead.
 * @publicApi
 */


const defineInjectable = ɵɵdefineInjectable;
/**
 * Construct an `InjectorDef` which configures an injector.
 *
 * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
 * `InjectorType`.
 *
 * Options:
 *
 * * `providers`: an optional array of providers to add to the injector. Each provider must
 *   either have a factory or point to a type which has a `ɵprov` static property (the
 *   type must be an `InjectableType`).
 * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
 *   whose providers will also be added to the injector. Locally provided types will override
 *   providers from imports.
 *
 * @codeGenApi
 */

function ɵɵdefineInjector(options) {
  return {
    providers: options.providers || [],
    imports: options.imports || []
  };
}
/**
 * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
 * inherited value.
 *
 * @param type A type which may have its own (non-inherited) `ɵprov`.
 */


function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
}
/**
 * Return definition only if it is defined directly on `type` and is not inherited from a base
 * class of `type`.
 */


function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) ? type[field] : null;
}
/**
 * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
 *
 * @param type A type which may have `ɵprov`, via inheritance.
 *
 * @deprecated Will be removed in a future version of Angular, where an error will occur in the
 *     scenario if we find the `ɵprov` on an ancestor only.
 */


function getInheritedInjectableDef(type) {
  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);

  if (def) {
    const typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it
    // ngDevMode &&

    console.warn(`DEPRECATED: DI is instantiating a token "${typeName}" that inherits its @Injectable decorator but does not provide one itself.\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the "${typeName}" class.`);
    return def;
  } else {
    return null;
  }
}
/** Gets the name of a type, accounting for some cross-browser differences. */


function getTypeName(type) {
  // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
  // it'll always return the name of the function itself, no matter how many other functions it
  // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
  // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
  // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
  // the issue by converting the function to a string and parsing its name out that way via a regex.
  if (type.hasOwnProperty('name')) {
    return type.name;
  }

  const match = ('' + type).match(/^function\s*([^\s(]+)/);
  return match === null ? '' : match[1];
}
/**
 * Read the injector def type in a way which is immune to accidentally reading inherited value.
 *
 * @param type type which may have an injector def (`ɵinj`)
 */


function getInjectorDef(type) {
  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
}

const NG_PROV_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵprov: getClosureSafeProperty
});
const NG_INJ_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵinj: getClosureSafeProperty
}); // We need to keep these around so we can read off old defs if new defs are unavailable

const NG_INJECTABLE_DEF = /*#__PURE__*/getClosureSafeProperty({
  ngInjectableDef: getClosureSafeProperty
});
const NG_INJECTOR_DEF = /*#__PURE__*/getClosureSafeProperty({
  ngInjectorDef: getClosureSafeProperty
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection flags for DI.
 *
 * @publicApi
 */

var InjectFlags = /*#__PURE__*/(() => {
  InjectFlags = InjectFlags || {};
  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer
  // writes exports of it into ngfactory files.

  /** Check self and check parent injector if needed */
  InjectFlags[InjectFlags["Default"] = 0] = "Default";
  /**
   * Specifies that an injector should retrieve a dependency from any injector until reaching the
   * host element of the current component. (Only used with Element Injector)
   */

  InjectFlags[InjectFlags["Host"] = 1] = "Host";
  /** Don't ascend to ancestors of the node requesting injection. */

  InjectFlags[InjectFlags["Self"] = 2] = "Self";
  /** Skip the node that is requesting injection. */

  InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
  /** Inject `defaultValue` instead if token not found. */

  InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
  return InjectFlags;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Current implementation of inject.
 *
 * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
 * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
 * way for two reasons:
 *  1. `Injector` should not depend on ivy logic.
 *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
 */
let _injectImplementation;

function getInjectImplementation() {
  return _injectImplementation;
}
/**
 * Sets the current inject implementation.
 */


function setInjectImplementation(impl) {
  const previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
/**
 * Injects `root` tokens in limp mode.
 *
 * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
 * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
 * injectable definition.
 */


function injectRootLimpMode(token, notFoundValue, flags) {
  const injectableDef = getInjectableDef(token);

  if (injectableDef && injectableDef.providedIn == 'root') {
    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }

  if (flags & InjectFlags.Optional) return null;
  if (notFoundValue !== undefined) return notFoundValue;
  throwProviderNotFoundError(stringify(token), 'Injector');
}
/**
 * Assert that `_injectImplementation` is not `fn`.
 *
 * This is useful, to prevent infinite recursion.
 *
 * @param fn Function which it should not equal to
 */


function assertInjectImplementationNotEqual(fn) {
  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Convince closure compiler that the wrapped function has no side-effects.
 *
 * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
 * allow us to execute a function but have closure compiler mark the call as no-side-effects.
 * It is important that the return value for the `noSideEffects` function be assigned
 * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
 * compiler.
 */


function noSideEffects(fn) {
  return {
    toString: fn
  }.toString();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The strategy that the default change detector uses to detect changes.
 * When set, takes effect the next time change detection is triggered.
 *
 * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
 *
 * @publicApi
 */


var ChangeDetectionStrategy = /*#__PURE__*/(() => {
  ChangeDetectionStrategy = ChangeDetectionStrategy || {};

  /**
   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
   * until reactivated by setting the strategy to `Default` (`CheckAlways`).
   * Change detection can still be explicitly invoked.
   * This strategy applies to all child directives and cannot be overridden.
   */
  ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
  /**
   * Use the default `CheckAlways` strategy, in which change detection is automatic until
   * explicitly deactivated.
   */

  ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  return ChangeDetectionStrategy;
})();

/**
 * Defines the possible states of the default change detector.
 * @see `ChangeDetectorRef`
 */
var ChangeDetectorStatus = /*#__PURE__*/(() => {
  ChangeDetectorStatus = ChangeDetectorStatus || {};

  /**
   * A state in which, after calling `detectChanges()`, the change detector
   * state becomes `Checked`, and must be explicitly invoked or reactivated.
   */
  ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
  /**
   * A state in which change detection is skipped until the change detector mode
   * becomes `CheckOnce`.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
  /**
   * A state in which change detection continues automatically until explicitly
   * deactivated.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
  /**
   * A state in which a change detector sub tree is not a part of the main tree and
   * should be skipped.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
  /**
   * Indicates that the change detector encountered an error checking a binding
   * or calling a directive lifecycle method and is now in an inconsistent state. Change
   * detectors in this state do not detect changes.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
  /**
   * Indicates that the change detector has been destroyed.
   */

  ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  return ChangeDetectorStatus;
})();

/**
 * Reports whether a given strategy is currently the default for change detection.
 * @param changeDetectionStrategy The strategy to check.
 * @returns True if the given strategy is the current default, false otherwise.
 * @see `ChangeDetectorStatus`
 * @see `ChangeDetectorRef`
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
  return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines the CSS styles encapsulation policies for the {@link Component} decorator's
 * `encapsulation` option.
 *
 * See {@link Component#encapsulation encapsulation}.
 *
 * @usageNotes
 * ### Example
 *
 * {@example core/ts/metadata/encapsulation.ts region='longform'}
 *
 * @publicApi
 */


var ViewEncapsulation$1 = /*#__PURE__*/(() => {
  (function (ViewEncapsulation) {
    // TODO: consider making `ViewEncapsulation` a `const enum` instead. See
    // https://github.com/angular/angular/issues/44119 for additional information.

    /**
     * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the
     * component's host element and applying the same attribute to all the CSS selectors provided
     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.
     *
     * This is the default option.
     */
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

    /**
     * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided
     * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable
     * to any HTML element of the application regardless of their host Component.
     */

    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
    /**
     * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates
     * a ShadowRoot for the component's host element which is then used to encapsulate
     * all the Component's styling.
     */

    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
  })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));

  return ViewEncapsulation$1;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const __globalThis = typeof globalThis !== 'undefined' && globalThis;

const __window = typeof window !== 'undefined' && window;

const __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

const __global = typeof global !== 'undefined' && global; // Always use __globalThis if available, which is the spec-defined global variable across all
// environments, then fallback to __global first, because in Node tests both __global and
// __window may be defined and _global should be __global in that case.


const _global = __globalThis || __global || __window || __self;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function ngDevModeResetPerfCounters() {
  const locationString = typeof location !== 'undefined' ? location.toString() : '';
  const newCounters = {
    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
    firstCreatePass: 0,
    tNode: 0,
    tView: 0,
    rendererCreateTextNode: 0,
    rendererSetText: 0,
    rendererCreateElement: 0,
    rendererAddEventListener: 0,
    rendererSetAttribute: 0,
    rendererRemoveAttribute: 0,
    rendererSetProperty: 0,
    rendererSetClassName: 0,
    rendererAddClass: 0,
    rendererRemoveClass: 0,
    rendererSetStyle: 0,
    rendererRemoveStyle: 0,
    rendererDestroy: 0,
    rendererDestroyNode: 0,
    rendererMoveNode: 0,
    rendererRemoveNode: 0,
    rendererAppendChild: 0,
    rendererInsertBefore: 0,
    rendererCreateComment: 0
  }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.

  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
  _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
  return newCounters;
}
/**
 * This function checks to see if the `ngDevMode` has been set. If yes,
 * then we honor it, otherwise we default to dev mode with additional checks.
 *
 * The idea is that unless we are doing production build where we explicitly
 * set `ngDevMode == false` we should be helping the developer by providing
 * as much early warning and errors as possible.
 *
 * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
 * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
 * is defined for the entire instruction set.
 *
 * When checking `ngDevMode` on toplevel, always init it before referencing it
 * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
 *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
 *
 * Details on possible values for `ngDevMode` can be found on its docstring.
 *
 * NOTE:
 * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */


function initNgDevMode() {
  // The below checks are to ensure that calling `initNgDevMode` multiple times does not
  // reset the counters.
  // If the `ngDevMode` is not an object, then it means we have not created the perf counters
  // yet.
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (typeof ngDevMode !== 'object') {
      ngDevModeResetPerfCounters();
    }

    return typeof ngDevMode !== 'undefined' && !!ngDevMode;
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file contains reuseable "empty" symbols that can be used as default return values
 * in different parts of the rendering code. Because the same symbols are returned, this
 * allows for identity checks against these values to be consistently used by the framework
 * code.
 */


const EMPTY_OBJ = {};
const EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in

if ((typeof ngDevMode === 'undefined' || ngDevMode) && /*#__PURE__*/initNgDevMode()) {
  // These property accesses can be ignored because ngDevMode will be set to false
  // when optimizing code and the whole if statement will be dropped.
  // tslint:disable-next-line:no-toplevel-property-access

  /*#__PURE__*/
  Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access

  /*#__PURE__*/
  Object.freeze(EMPTY_ARRAY);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const NG_COMP_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵcmp: getClosureSafeProperty
});
const NG_DIR_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵdir: getClosureSafeProperty
});
const NG_PIPE_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵpipe: getClosureSafeProperty
});
const NG_MOD_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵmod: getClosureSafeProperty
});
const NG_FACTORY_DEF = /*#__PURE__*/getClosureSafeProperty({
  ɵfac: getClosureSafeProperty
});
/**
 * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
 * the key and the directive's unique ID as the value. This allows us to map directives to their
 * bloom filter bit for DI.
 */
// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.

const NG_ELEMENT_ID = /*#__PURE__*/getClosureSafeProperty({
  __NG_ELEMENT_ID__: getClosureSafeProperty
});
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let _renderCompCount = 0;
/**
 * Create a component definition object.
 *
 *
 * # Example
 * ```
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵcmp = defineComponent({
 *     ...
 *   });
 * }
 * ```
 * @codeGenApi
 */

function ɵɵdefineComponent(componentDefinition) {
  return noSideEffects(() => {
    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
    // See the `initNgDevMode` docstring for more information.
    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
    const type = componentDefinition.type;
    const declaredInputs = {};
    const def = {
      type: type,
      providersResolver: null,
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      factory: null,
      template: componentDefinition.template || null,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      hostBindings: componentDefinition.hostBindings || null,
      hostVars: componentDefinition.hostVars || 0,
      hostAttrs: componentDefinition.hostAttrs || null,
      contentQueries: componentDefinition.contentQueries || null,
      declaredInputs: declaredInputs,
      inputs: null,
      outputs: null,
      exportAs: componentDefinition.exportAs || null,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      pipeDefs: null,
      selectors: componentDefinition.selectors || EMPTY_ARRAY,
      viewQuery: componentDefinition.viewQuery || null,
      features: componentDefinition.features || null,
      data: componentDefinition.data || {},
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
      id: 'c',
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      setInput: null,
      schemas: componentDefinition.schemas || null,
      tView: null
    };
    const directiveTypes = componentDefinition.directives;
    const feature = componentDefinition.features;
    const pipeTypes = componentDefinition.pipes;
    def.id += _renderCompCount++;
    def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(fn => fn(def));
    def.directiveDefs = directiveTypes ? () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef) : null;
    def.pipeDefs = pipeTypes ? () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) : null;
    return def;
  });
}
/**
 * Generated next to NgModules to monkey-patch directive and pipe references onto a component's
 * definition, when generating a direct reference in the component file would otherwise create an
 * import cycle.
 *
 * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.
 *
 * @codeGenApi
 */


function ɵɵsetComponentScope(type, directives, pipes) {
  const def = type.ɵcmp;

  def.directiveDefs = () => directives.map(extractDirectiveDef);

  def.pipeDefs = () => pipes.map(extractPipeDef);
}

function extractDirectiveDef(type) {
  const def = getComponentDef(type) || getDirectiveDef(type);

  if (ngDevMode && !def) {
    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);
  }

  return def;
}

function extractPipeDef(type) {
  const def = getPipeDef$1(type);

  if (ngDevMode && !def) {
    throw new Error(`'${type.name}' is not a 'PipeType'.`);
  }

  return def;
}

const autoRegisterModuleById = {};
/**
 * @codeGenApi
 */

function ɵɵdefineNgModule(def) {
  return noSideEffects(() => {
    const res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };

    if (def.id != null) {
      autoRegisterModuleById[def.id] = def.type;
    }

    return res;
  });
}
/**
 * Adds the module metadata that is necessary to compute the module's transitive scope to an
 * existing module definition.
 *
 * Scope metadata of modules is not used in production builds, so calls to this function can be
 * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
 * to become eligible for tree-shaking as well.
 *
 * @codeGenApi
 */


function ɵɵsetNgModuleScope(type, scope) {
  return noSideEffects(() => {
    const ngModuleDef = getNgModuleDef(type, true);
    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
  });
}
/**
 * Inverts an inputs or outputs lookup such that the keys, which were the
 * minified keys, are part of the values, and the values are parsed so that
 * the publicName of the property is the new key
 *
 * e.g. for
 *
 * ```
 * class Comp {
 *   @Input()
 *   propName1: string;
 *
 *   @Input('publicName2')
 *   declaredPropName2: number;
 * }
 * ```
 *
 * will be serialized as
 *
 * ```
 * {
 *   propName1: 'propName1',
 *   declaredPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * which is than translated by the minifier as:
 *
 * ```
 * {
 *   minifiedPropName1: 'propName1',
 *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * becomes: (public name => minifiedName)
 *
 * ```
 * {
 *  'propName1': 'minifiedPropName1',
 *  'publicName2': 'minifiedPropName2',
 * }
 * ```
 *
 * Optionally the function can take `secondary` which will result in: (public name => declared name)
 *
 * ```
 * {
 *  'propName1': 'propName1',
 *  'publicName2': 'declaredPropName2',
 * }
 * ```
 *

 */


function invertObject(obj, secondary) {
  if (obj == null) return EMPTY_OBJ;
  const newLookup = {};

  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      let publicName = obj[minifiedKey];
      let declaredName = publicName;

      if (Array.isArray(publicName)) {
        declaredName = publicName[1];
        publicName = publicName[0];
      }

      newLookup[publicName] = minifiedKey;

      if (secondary) {
        secondary[publicName] = declaredName;
      }
    }
  }

  return newLookup;
}
/**
 * Create a directive definition object.
 *
 * # Example
 * ```ts
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵdir = ɵɵdefineDirective({
 *     ...
 *   });
 * }
 * ```
 *
 * @codeGenApi
 */


const ɵɵdefineDirective = ɵɵdefineComponent;
/**
 * Create a pipe definition object.
 *
 * # Example
 * ```
 * class MyPipe implements PipeTransform {
 *   // Generated by Angular Template Compiler
 *   static ɵpipe = definePipe({
 *     ...
 *   });
 * }
 * ```
 * @param pipeDef Pipe definition generated by the compiler
 *
 * @codeGenApi
 */

function ɵɵdefinePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
/**
 * The following getter methods retrieve the definition from the type. Currently the retrieval
 * honors inheritance, but in the future we may change the rule to require that definitions are
 * explicit. This would require some sort of migration strategy.
 */


function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}

function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}

function getPipeDef$1(type) {
  return type[NG_PIPE_DEF] || null;
}

function getNgModuleDef(type, throwNotFound) {
  const ngModuleDef = type[NG_MOD_DEF] || null;

  if (!ngModuleDef && throwNotFound === true) {
    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);
  }

  return ngModuleDef;
}
/**
 * Special location which allows easy identification of type. If we have an array which was
 * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
 * `LContainer`.
 */


const TYPE = 1;
/**
 * Below are constants for LContainer indices to help us look up LContainer members
 * without having to remember the specific indices.
 * Uglify will inline these when minifying so there shouldn't be a cost.
 */

/**
 * Flag to signify that this `LContainer` may have transplanted views which need to be change
 * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
 *
 * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
 * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
 * that the `MOVED_VIEWS` are transplanted and on-push.
 */

const HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
// As we already have these constants in LView, we don't need to re-create them.
// T_HOST is index 6
// We already have this constants in LView, we don't need to re-create it.

const NATIVE = 7;
const VIEW_REFS = 8;
const MOVED_VIEWS = 9;
/**
 * Size of LContainer's header. Represents the index after which all views in the
 * container will be inserted. We need to keep a record of current views so we know
 * which views are already in the DOM (and don't need to be re-added) and so we can
 * remove views from the DOM when they are no longer required.
 */

const CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

const unusedValueExportToPlacateAjd$8 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Below are constants for LView indices to help us look up LView members
// without having to remember the specific indices.
// Uglify will inline these when minifying so there shouldn't be a cost.

const HOST = 0;
const TVIEW = 1;
const FLAGS = 2;
const PARENT = 3;
const NEXT = 4;
const TRANSPLANTED_VIEWS_TO_REFRESH = 5;
const T_HOST = 6;
const CLEANUP = 7;
const CONTEXT = 8;
const INJECTOR$1 = 9;
const RENDERER_FACTORY = 10;
const RENDERER = 11;
const SANITIZER = 12;
const CHILD_HEAD = 13;
const CHILD_TAIL = 14; // FIXME(misko): Investigate if the three declarations aren't all same thing.

const DECLARATION_VIEW = 15;
const DECLARATION_COMPONENT_VIEW = 16;
const DECLARATION_LCONTAINER = 17;
const PREORDER_HOOK_FLAGS = 18;
const QUERIES = 19;
/**
 * Size of LView's header. Necessary to adjust for it when setting slots.
 *
 * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate
 * instruction index into `LView` index. All other indexes should be in the `LView` index space and
 * there should be no need to refer to `HEADER_OFFSET` anywhere else.
 */

const HEADER_OFFSET = 20;
/**
 * Converts `TViewType` into human readable text.
 * Make sure this matches with `TViewType`
 */

const TViewTypeAsString = ['Root', 'Component', 'Embedded' // 2
]; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

const unusedValueExportToPlacateAjd$7 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * True if `value` is `LView`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */

function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === 'object';
}
/**
 * True if `value` is `LContainer`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}

function isContentQueryHost(tNode) {
  return (tNode.flags & 8
  /* hasContentQuery */
  ) !== 0;
}

function isComponentHost(tNode) {
  return (tNode.flags & 2
  /* isComponentHost */
  ) === 2
  /* isComponentHost */
  ;
}

function isDirectiveHost(tNode) {
  return (tNode.flags & 1
  /* isDirectiveHost */
  ) === 1
  /* isDirectiveHost */
  ;
}

function isComponentDef(def) {
  return def.template !== null;
}

function isRootView(target) {
  return (target[FLAGS] & 512
  /* IsRoot */
  ) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// [Assert functions do not constraint type when they are guarded by a truthy
// expression.](https://github.com/microsoft/TypeScript/issues/37295)


function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}

function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');
}

function assertTNode(tNode) {
  assertDefined(tNode, 'TNode must be defined');

  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {
    throwError('Not of type TNode, got: ' + tNode);
  }
}

function assertTIcu(tIcu) {
  assertDefined(tIcu, 'Expected TIcu to be defined');

  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {
    throwError('Object is not of TIcu type.');
  }
}

function assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.') {
  if (!getComponentDef(actual)) {
    throwError(msg);
  }
}

function assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.') {
  if (!getNgModuleDef(actual)) {
    throwError(msg);
  }
}

function assertCurrentTNodeIsParent(isParent) {
  assertEqual(isParent, true, 'currentTNode should be a parent');
}

function assertHasParent(tNode) {
  assertDefined(tNode, 'currentTNode should exist!');
  assertDefined(tNode.parent, 'currentTNode should have a parent');
}

function assertDataNext(lView, index, arr) {
  if (arr == null) arr = lView;
  assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);
}

function assertLContainer(value) {
  assertDefined(value, 'LContainer must be defined');
  assertEqual(isLContainer(value), true, 'Expecting LContainer');
}

function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
}

function assertLView(value) {
  assertDefined(value, 'LView must be defined');
  assertEqual(isLView(value), true, 'Expecting LView');
}

function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
}

function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
}
/**
 * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
 * an interface, so we can't do a direct instanceof check.
 */


function assertDirectiveDef(obj) {
  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
  }
}

function assertIndexInDeclRange(lView, index) {
  const tView = lView[1];
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}

function assertIndexInVarsRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);
}

function assertIndexInExpandoRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}

function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
  }
}

function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');
}

function assertParentView(lView, errMessage) {
  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\'s host view)');
}
/**
 * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a
 * NodeInjector data structure.
 *
 * @param lView `LView` which should be checked.
 * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.
 */


function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(lView, injectorIndex + 8
  /* PARENT */
  );
  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');
  assertNumber(lView[injectorIndex + 8
  /* PARENT */
  ], 'injectorIndex should point to parent injector');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getFactoryDef(type, throwNotFound) {
  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);

  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);
  }

  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents a basic change from a previous to a new value for a single
 * property on a directive instance. Passed as a value in a
 * {@link SimpleChanges} object to the `ngOnChanges` hook.
 *
 * @see `OnChanges`
 *
 * @publicApi
 */


class SimpleChange {
  constructor(previousValue, currentValue, firstChange) {
    this.previousValue = previousValue;
    this.currentValue = currentValue;
    this.firstChange = firstChange;
  }
  /**
   * Check whether the new value is the first value assigned.
   */


  isFirstChange() {
    return this.firstChange;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The NgOnChangesFeature decorates a component with support for the ngOnChanges
 * lifecycle hook, so it should be included in any component that implements
 * that hook.
 *
 * If the component or directive uses inheritance, the NgOnChangesFeature MUST
 * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
 * inherited properties will not be propagated to the ngOnChanges lifecycle
 * hook.
 *
 * Example usage:
 *
 * ```
 * static ɵcmp = defineComponent({
 *   ...
 *   inputs: {name: 'publicName'},
 *   features: [NgOnChangesFeature]
 * });
 * ```
 *
 * @codeGenApi
 */


function ɵɵNgOnChangesFeature() {
  return NgOnChangesFeatureImpl;
}

function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }

  return rememberChangeHistoryAndInvokeOnChangesHook;
} // This option ensures that the ngOnChanges lifecycle hook will be inherited
// from superclasses (in InheritDefinitionFeature).

/** @nocollapse */
// tslint:disable-next-line:no-toplevel-property-access


ɵɵNgOnChangesFeature.ngInherit = true;
/**
 * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
 * `ngOnChanges`.
 *
 * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
 * found it invokes `ngOnChanges` on the component instance.
 *
 * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
 *     it is guaranteed to be called with component instance.
 */

function rememberChangeHistoryAndInvokeOnChangesHook() {
  const simpleChangesStore = getSimpleChangesStore(this);
  const current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;

  if (current) {
    const previous = simpleChangesStore.previous;

    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      // New changes are copied to the previous store, so that we don't lose history for inputs
      // which were not changed this time
      for (let key in current) {
        previous[key] = current[key];
      }
    }

    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}

function ngOnChangesSetInput(instance, value, publicName, privateName) {
  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
    previous: EMPTY_OBJ,
    current: null
  });
  const current = simpleChangesStore.current || (simpleChangesStore.current = {});
  const previous = simpleChangesStore.previous;
  const declaredName = this.declaredInputs[publicName];
  const previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  instance[privateName] = value;
}

const SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';

function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}

function setSimpleChangesStore(instance, store) {
  return instance[SIMPLE_CHANGES_STORE] = store;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let profilerCallback = null;
/**
 * Sets the callback function which will be invoked before and after performing certain actions at
 * runtime (for example, before and after running change detection).
 *
 * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
 * The contract of the function might be changed in any release and/or the function can be removed
 * completely.
 *
 * @param profiler function provided by the caller or null value to disable profiling.
 */

const setProfiler = profiler => {
  profilerCallback = profiler;
};
/**
 * Profiler function which wraps user code executed by the runtime.
 *
 * @param event ProfilerEvent corresponding to the execution context
 * @param instance component instance
 * @param hookOrListener lifecycle hook function or output listener. The value depends on the
 *  execution context
 * @returns
 */


const profiler = function (event, instance, hookOrListener) {
  if (profilerCallback != null
  /* both `null` and `undefined` */
  ) {
    profilerCallback(event, instance, hookOrListener);
  }
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const SVG_NAMESPACE = 'svg';
const SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';
const MATH_ML_NAMESPACE = 'math';
const MATH_ML_NAMESPACE_URI = 'http://www.w3.org/1998/MathML/';

function getNamespaceUri(namespace) {
  const name = namespace.toLowerCase();
  return name === SVG_NAMESPACE ? SVG_NAMESPACE_URI : name === MATH_ML_NAMESPACE ? MATH_ML_NAMESPACE_URI : null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
 * inject the `DOCUMENT` token and are done.
 *
 * Ivy is special because it does not rely upon the DI and must get hold of the document some other
 * way.
 *
 * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
 * Wherever ivy needs the global document, it calls `getDocument()` instead.
 *
 * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
 * tell ivy what the global `document` is.
 *
 * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
 * by calling `setDocument()` when providing the `DOCUMENT` token.
 */


let DOCUMENT = undefined;
/**
 * Tell ivy what the `document` is for this platform.
 *
 * It is only necessary to call this if the current platform is not a browser.
 *
 * @param document The object representing the global `document` in this environment.
 */

function setDocument(document) {
  DOCUMENT = document;
}
/**
 * Access the object that represents the `document` for this platform.
 *
 * Ivy calls this whenever it needs to access the `document` object.
 * For example to create the renderer or to do sanitization.
 */


function getDocument() {
  if (DOCUMENT !== undefined) {
    return DOCUMENT;
  } else if (typeof document !== 'undefined') {
    return document;
  } // No "document" can be found. This should only happen if we are running ivy outside Angular and
  // the current platform is not a browser. Since this is not a supported scenario at the moment
  // this should not happen in Angular apps.
  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
  // public API. Meanwhile we just return `undefined` and let the application fail.


  return undefined;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: cleanup once the code is merged in angular/angular


var RendererStyleFlags3 = /*#__PURE__*/(() => {
  RendererStyleFlags3 = RendererStyleFlags3 || {};
  RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
  RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
  return RendererStyleFlags3;
})();

/** Returns whether the `renderer` is a `ProceduralRenderer3` */
function isProceduralRenderer(renderer) {
  return !!renderer.listen;
}

const domRendererFactory3 = {
  createRenderer: (hostElement, rendererType) => {
    return getDocument();
  }
}; // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

const unusedValueExportToPlacateAjd$6 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
 * in same location in `LView`. This is because we don't want to pre-allocate space for it
 * because the storage is sparse. This file contains utilities for dealing with such data types.
 *
 * How do we know what is stored at a given location in `LView`.
 * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
 * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
 *   - `typeof value[TYPE] === 'object'` => `LView`
 *      - This happens when we have a component at a given location
 *   - `typeof value[TYPE] === true` => `LContainer`
 *      - This happens when we have `LContainer` binding at a given location.
 *
 *
 * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
 */

/**
 * Returns `RNode`.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */

function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }

  return value;
}
/**
 * Returns `LView` or `null` if not found.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function unwrapLView(value) {
  while (Array.isArray(value)) {
    // This check is same as `isLView()` but we don't call at as we don't want to call
    // `Array.isArray()` twice and give JITer more work for inlining.
    if (typeof value[TYPE] === 'object') return value;
    value = value[HOST];
  }

  return null;
}
/**
 * Returns `LContainer` or `null` if not found.
 * @param value wrapped value of `RNode`, `LView`, `LContainer`
 */


function unwrapLContainer(value) {
  while (Array.isArray(value)) {
    // This check is same as `isLContainer()` but we don't call at as we don't want to call
    // `Array.isArray()` twice and give JITer more work for inlining.
    if (value[TYPE] === true) return value;
    value = value[HOST];
  }

  return null;
}
/**
 * Retrieves an element value from the provided `viewData`, by unwrapping
 * from any containers, component views, or style contexts.
 */


function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');
  return unwrapRNode(lView[index]);
}
/**
 * Retrieve an `RNode` for a given `TNode` and `LView`.
 *
 * This function guarantees in dev mode to retrieve a non-null `RNode`.
 *
 * @param tNode
 * @param lView
 */


function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  const node = unwrapRNode(lView[tNode.index]);
  ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
  return node;
}
/**
 * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
 *
 * Some `TNode`s don't have associated `RNode`s. For example `Projection`
 *
 * @param tNode
 * @param lView
 */


function getNativeByTNodeOrNull(tNode, lView) {
  const index = tNode === null ? -1 : tNode.index;

  if (index !== -1) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    const node = unwrapRNode(lView[index]);
    ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
    return node;
  }

  return null;
} // fixme(misko): The return Type should be `TNode|null`


function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
  const tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
/** Retrieves a value from any `LView` or `TData`. */


function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}

function getComponentLViewByIndex(nodeIndex, hostView) {
  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  const slotValue = hostView[nodeIndex];
  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
/** Checks whether a given view is in creation mode */


function isCreationMode(view) {
  return (view[FLAGS] & 4
  /* CreationMode */
  ) === 4
  /* CreationMode */
  ;
}
/**
 * Returns a boolean for whether the view is attached to the change detection tree.
 *
 * Note: This determines whether a view should be checked, not whether it's inserted
 * into a container. For that, you'll want `viewAttachedToContainer` below.
 */


function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128
  /* Attached */
  ) === 128
  /* Attached */
  ;
}
/** Returns a boolean for whether the view is attached to a container. */


function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}

function getConstant(consts, index) {
  if (index === null || index === undefined) return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
/**
 * Resets the pre-order hook flags of the view.
 * @param lView the LView on which the flags are reset
 */


function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
/**
 * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
 * whose
 *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
 *  or
 *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
 */


function updateTransplantedViewCount(lContainer, amount) {
  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
  let viewOrContainer = lContainer;
  let parent = lContainer[PARENT];

  while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {
    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
    viewOrContainer = parent;
    parent = parent[PARENT];
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const instructionState = {
  lFrame: /*#__PURE__*/createLFrame(null),
  bindingsEnabled: true
};
/**
 * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.
 *
 * Necessary to support ChangeDetectorRef.checkNoChanges().
 *
 * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended
 * changes exist in the change detector or its children.
 */

let _isInCheckNoChangesMode = false;
/**
 * Returns true if the instruction state stack is empty.
 *
 * Intended to be called from tests only (tree shaken otherwise).
 */

function specOnlyIsInstructionStateEmpty() {
  return instructionState.lFrame.parent === null;
}

function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}

function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}

function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}

function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
/**
 * Enables directive matching on elements.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * @codeGenApi
 */


function ɵɵenableBindings() {
  instructionState.bindingsEnabled = true;
}
/**
 * Disables directive matching on element.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * @codeGenApi
 */


function ɵɵdisableBindings() {
  instructionState.bindingsEnabled = false;
}
/**
 * Return the current `LView`.
 */


function getLView() {
  return instructionState.lFrame.lView;
}
/**
 * Return the current `TView`.
 */


function getTView() {
  return instructionState.lFrame.tView;
}
/**
 * Restores `contextViewData` to the given OpaqueViewState instance.
 *
 * Used in conjunction with the getCurrentView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * @param viewToRestore The OpaqueViewState instance to restore.
 * @returns Context of the restored OpaqueViewState instance.
 *
 * @codeGenApi
 */


function ɵɵrestoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}

function getCurrentTNode() {
  let currentTNode = getCurrentTNodePlaceholderOk();

  while (currentTNode !== null && currentTNode.type === 64
  /* Placeholder */
  ) {
    currentTNode = currentTNode.parent;
  }

  return currentTNode;
}

function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}

function getCurrentParentTNode() {
  const lFrame = instructionState.lFrame;
  const currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}

function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  const lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}

function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}

function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}

function setCurrentTNodeAsParent() {
  instructionState.lFrame.isParent = true;
}

function getContextLView() {
  return instructionState.lFrame.contextLView;
}

function isInCheckNoChangesMode() {
  !ngDevMode && throwError('Must never be called in production mode');
  return _isInCheckNoChangesMode;
}

function setIsInCheckNoChangesMode(mode) {
  !ngDevMode && throwError('Must never be called in production mode');
  _isInCheckNoChangesMode = mode;
} // top level variables should not be exported for performance reasons (PERF_NOTES.md)


function getBindingRoot() {
  const lFrame = instructionState.lFrame;
  let index = lFrame.bindingRootIndex;

  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }

  return index;
}

function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}

function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}

function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}

function incrementBindingIndex(count) {
  const lFrame = instructionState.lFrame;
  const index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}

function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}

function setInI18nBlock(isInI18nBlock) {
  instructionState.lFrame.inI18n = isInI18nBlock;
}
/**
 * Set a new binding root index so that host template functions can execute.
 *
 * Bindings inside the host template are 0 index. But because we don't know ahead of time
 * how many host bindings we have we can't pre-compute them. For this reason they are all
 * 0 index and we just shift the root so that they match next available location in the LView.
 *
 * @param bindingRootIndex Root index for `hostBindings`
 * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
 *        whose `hostBindings` are being processed.
 */


function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  const lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
/**
 * When host binding is executing this points to the directive index.
 * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
 * `LView[getCurrentDirectiveIndex()]` is directive instance.
 */


function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
/**
 * Sets an index of a directive whose `hostBindings` are being processed.
 *
 * @param currentDirectiveIndex `TData` index where current directive instance can be found.
 */


function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
/**
 * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
 * executed.
 *
 * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
 */


function getCurrentDirectiveDef(tData) {
  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}

function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}

function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
/**
 * Returns a `TNode` of the location where the current `LView` is declared at.
 *
 * @param lView an `LView` that we want to find parent `TNode` for.
 */


function getDeclarationTNode(lView) {
  const tView = lView[TVIEW]; // Return the declaration parent for embedded views

  if (tView.type === 2
  /* Embedded */
  ) {
    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
    return tView.declTNode;
  } // Components don't have `TView.declTNode` because each instance of component could be
  // inserted in different location, hence `TView.declTNode` is meaningless.
  // Falling back to `T_HOST` in case we cross component boundary.


  if (tView.type === 1
  /* Component */
  ) {
    return lView[T_HOST];
  } // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.


  return null;
}
/**
 * This is a light weight version of the `enterView` which is needed by the DI system.
 *
 * @param lView `LView` location of the DI context.
 * @param tNode `TNode` for DI context
 * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration
 *     tree from `tNode`  until we find parent declared `TElementNode`.
 * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared
 *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated
 *     `NodeInjector` can be found and we should instead use `ModuleInjector`.
 *     - If `true` than this call must be fallowed by `leaveDI`
 *     - If `false` than this call failed and we should NOT call `leaveDI`
 */


function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);

  if (flags & InjectFlags.SkipSelf) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    let parentTNode = tNode;
    let parentLView = lView;

    while (true) {
      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');
      parentTNode = parentTNode.parent;

      if (parentTNode === null && !(flags & InjectFlags.Host)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null) break; // In this case, a parent exists and is definitely an element. So it will definitely
        // have an existing lView as the declaration view, which is why we can assume it's defined.

        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');
        parentLView = parentLView[DECLARATION_VIEW]; // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives
        // We want to skip those and look only at Elements and ElementContainers to ensure
        // we're looking at true parent nodes, and not content or other types.

        if (parentTNode.type & (2
        /* Element */
        | 8
        /* ElementContainer */
        )) {
          break;
        }
      } else {
        break;
      }
    }

    if (parentTNode === null) {
      // If we failed to find a parent TNode this means that we should use module injector.
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }

  ngDevMode && assertTNodeForLView(tNode, lView);
  const lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
/**
 * Swap the current lView with a new lView.
 *
 * For performance reasons we store the lView in the top level of the module.
 * This way we minimize the number of properties to read. Whenever a new view
 * is entered we have to store the lView for later, and when the view is
 * exited the state has to be restored
 *
 * @param newView New lView to become active
 * @returns the previously active lView;
 */


function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], '????');
  ngDevMode && assertLViewOrUndefined(newView);
  const newLFrame = allocLFrame();

  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
  }

  const tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
/**
 * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
 */


function allocLFrame() {
  const currentLFrame = instructionState.lFrame;
  const childLFrame = currentLFrame === null ? null : currentLFrame.child;
  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}

function createLFrame(parent) {
  const lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent: parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.

  return lFrame;
}
/**
 * A lightweight version of leave which is used with DI.
 *
 * This function only resets `currentTNode` and `LView` as those are the only properties
 * used with DI (`enterDI()`).
 *
 * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
 * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
 */


function leaveViewLight() {
  const oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
/**
 * This is a lightweight version of the `leaveView` which is needed by the DI system.
 *
 * NOTE: this function is an alias so that we can change the type of the function to have `void`
 * return type.
 */


const leaveDI = leaveViewLight;
/**
 * Leave the current `LView`
 *
 * This pops the `LFrame` with the associated `LView` from the stack.
 *
 * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
 * because for performance reasons we don't release `LFrame` but rather keep it for next use.
 */

function leaveView() {
  const oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}

function nextContextImpl(level) {
  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}

function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }

  return currentView;
}
/**
 * Gets the currently selected element index.
 *
 * Used with {@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 */


function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
/**
 * Sets the most recent index passed to {@link select}
 *
 * Used with {@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 *
 * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
 * run if and when the provided `index` value is different from the current selected index value.)
 */


function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\'t set index passed end of LView');
  instructionState.lFrame.selectedIndex = index;
}
/**
 * Gets the `tNode` that represents currently selected element.
 */


function getSelectedTNode() {
  const lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
 *
 * @codeGenApi
 */


function ɵɵnamespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
 *
 * @codeGenApi
 */


function ɵɵnamespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 *
 * @codeGenApi
 */


function ɵɵnamespaceHTML() {
  namespaceHTMLInternal();
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 */


function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}

function getNamespace$1() {
  return instructionState.lFrame.currentNamespace;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
 *
 * Must be run *only* on the first template pass.
 *
 * Sets up the pre-order hooks on the provided `tView`,
 * see {@link HookData} for details about the data structure.
 *
 * @param directiveIndex The index of the directive in LView
 * @param directiveDef The definition containing the hooks to setup in tView
 * @param tView The current TView
 */


function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  const {
    ngOnChanges,
    ngOnInit,
    ngDoCheck
  } = directiveDef.type.prototype;

  if (ngOnChanges) {
    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);
  }

  if (ngOnInit) {
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
  }

  if (ngDoCheck) {
    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
  }
}
/**
 *
 * Loops through the directives on the provided `tNode` and queues hooks to be
 * run that are not initialization hooks.
 *
 * Should be executed during `elementEnd()` and similar to
 * preserve hook execution order. Content, view, and destroy hooks for projected
 * components and directives must be called *before* their hosts.
 *
 * Sets up the content, view, and destroy hooks on the provided `tView`,
 * see {@link HookData} for details about the data structure.
 *
 * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
 * separately at `elementStart`.
 *
 * @param tView The current TView
 * @param tNode The TNode whose directives are to be searched for hooks to queue
 */


function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in
  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
  // hooks for projected components and directives must be called *before* their hosts.

  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    const directiveDef = tView.data[i];
    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');
    const lifecycleHooks = directiveDef.type.prototype;
    const {
      ngAfterContentInit,
      ngAfterContentChecked,
      ngAfterViewInit,
      ngAfterViewChecked,
      ngOnDestroy
    } = lifecycleHooks;

    if (ngAfterContentInit) {
      (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
    }

    if (ngAfterContentChecked) {
      (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
    }

    if (ngAfterViewInit) {
      (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
    }

    if (ngAfterViewChecked) {
      (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
    }

    if (ngOnDestroy != null) {
      (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
    }
  }
}
/**
 * Executing hooks requires complex logic as we need to deal with 2 constraints.
 *
 * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
 * once, across many change detection cycles. This must be true even if some hooks throw, or if
 * some recursively trigger a change detection cycle.
 * To solve that, it is required to track the state of the execution of these init hooks.
 * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
 * and the index within that phase. They can be seen as a cursor in the following structure:
 * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
 * They are are stored as flags in LView[FLAGS].
 *
 * 2. Pre-order hooks can be executed in batches, because of the select instruction.
 * To be able to pause and resume their execution, we also need some state about the hook's array
 * that is being processed:
 * - the index of the next hook to be executed
 * - the number of init hooks already found in the processed part of the  array
 * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
 */

/**
 * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
 * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
 * / write of the init-hooks related flags.
 * @param lView The LView where hooks are defined
 * @param hooks Hooks to be run
 * @param nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3
  /* InitPhaseCompleted */
  , nodeIndex);
}
/**
 * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
 * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
 * @param lView The LView where hooks are defined
 * @param hooks Hooks to be run
 * @param initPhase A phase for which hooks should be run
 * @param nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3
  /* InitPhaseCompleted */
  , 'Init pre-order hooks should not be called more than once');

  if ((lView[FLAGS] & 3
  /* InitPhaseStateMask */
  ) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}

function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3
  /* InitPhaseCompleted */
  , 'Init hooks phase should not be incremented after all init hooks have been run.');
  let flags = lView[FLAGS];

  if ((flags & 3
  /* InitPhaseStateMask */
  ) === initPhase) {
    flags &= 2047
    /* IndexWithinInitPhaseReset */
    ;
    flags += 1
    /* InitPhaseStateIncrementer */
    ;
    lView[FLAGS] = flags;
  }
}
/**
 * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
 * the first LView pass
 *
 * @param currentView The current view
 * @param arr The array in which the hooks are found
 * @param initPhaseState the current state of the init phase
 * @param currentNodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 */


function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');
  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535
  /* IndexOfTheNextPreOrderHookMaskMask */
  : 0;
  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1

  let lastNodeIndexFound = 0;

  for (let i = startIndex; i < max; i++) {
    const hook = arr[i + 1];

    if (typeof hook === 'number') {
      lastNodeIndexFound = arr[i];

      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      const isInitHook = arr[i] < 0;
      if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536
      /* NumberOfInitHooksCalledIncrementer */
      ;

      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760
        /* NumberOfInitHooksCalledMask */
        ) + i + 2;
      }

      i++;
    }
  }
}
/**
 * Execute one hook against the current `LView`.
 *
 * @param currentView The current view
 * @param initPhaseState the current state of the init phase
 * @param arr The array in which the hooks are found
 * @param i The current index within the hook data array
 */


function callHook(currentView, initPhase, arr, i) {
  const isInitHook = arr[i] < 0;
  const hook = arr[i + 1];
  const directiveIndex = isInitHook ? -arr[i] : arr[i];
  const directive = currentView[directiveIndex];

  if (isInitHook) {
    const indexWithintInitPhase = currentView[FLAGS] >> 11
    /* IndexWithinInitPhaseShift */
    ; // The init phase state must be always checked here as it may have been recursively updated.

    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16
    /* NumberOfInitHooksCalledShift */
    && (currentView[FLAGS] & 3
    /* InitPhaseStateMask */
    ) === initPhase) {
      currentView[FLAGS] += 2048
      /* IndexWithinInitPhaseIncrementer */
      ;
      profiler(4
      /* LifecycleHookStart */
      , directive, hook);

      try {
        hook.call(directive);
      } finally {
        profiler(5
        /* LifecycleHookEnd */
        , directive, hook);
      }
    }
  } else {
    profiler(4
    /* LifecycleHookStart */
    , directive, hook);

    try {
      hook.call(directive);
    } finally {
      profiler(5
      /* LifecycleHookEnd */
      , directive, hook);
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const NO_PARENT_INJECTOR = -1;
/**
 * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
 * `TView.data`. This allows us to store information about the current node's tokens (which
 * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
 * shared, so they live in `LView`).
 *
 * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
 * determines whether a directive is available on the associated node or not. This prevents us
 * from searching the directives array at this level unless it's probable the directive is in it.
 *
 * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
 *
 * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
 * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
 * will differ based on where it is flattened into the main array, so it's not possible to know
 * the indices ahead of time and save their types here. The interfaces are still included here
 * for documentation purposes.
 *
 * export interface LInjector extends Array<any> {
 *
 *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Cumulative bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Cumulative bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Cumulative bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Cumulative bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Cumulative bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Cumulative bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Cumulative bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // We need to store a reference to the injector's parent so DI can keep looking up
 *    // the injector tree until it finds the dependency it's looking for.
 *    [PARENT_INJECTOR]: number;
 * }
 *
 * export interface TInjector extends Array<any> {
 *
 *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Shared node bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Shared node bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Shared node bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Shared node bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Shared node bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Shared node bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Shared node bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // Necessary to find directive indices for a particular node.
 *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
 *  }
 */

/**
 * Factory for creating instances of injectors in the NodeInjector.
 *
 * This factory is complicated by the fact that it can resolve `multi` factories as well.
 *
 * NOTE: Some of the fields are optional which means that this class has two hidden classes.
 * - One without `multi` support (most common)
 * - One with `multi` values, (rare).
 *
 * Since VMs can cache up to 4 inline hidden classes this is OK.
 *
 * - Single factory: Only `resolving` and `factory` is defined.
 * - `providers` factory: `componentProviders` is a number and `index = -1`.
 * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
 */

class NodeInjectorFactory {
  constructor(
  /**
   * Factory to invoke in order to create a new instance.
   */
  factory,
  /**
   * Set to `true` if the token is declared in `viewProviders` (or if it is component).
   */
  isViewProvider, injectImplementation) {
    this.factory = factory;
    /**
     * Marker set to true during factory invocation to see if we get into recursive loop.
     * Recursive loop causes an error to be displayed.
     */

    this.resolving = false;
    ngDevMode && assertDefined(factory, 'Factory not specified');
    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');
    this.canSeeViewProviders = isViewProvider;
    this.injectImpl = injectImplementation;
  }

}

function isFactory(obj) {
  return obj instanceof NodeInjectorFactory;
} // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


const unusedValueExportToPlacateAjd$5 = 1;
/**
 * Converts `TNodeType` into human readable text.
 * Make sure this matches with `TNodeType`
 */

function toTNodeTypeAsString(tNodeType) {
  let text = '';
  tNodeType & 1
  /* Text */
  && (text += '|Text');
  tNodeType & 2
  /* Element */
  && (text += '|Element');
  tNodeType & 4
  /* Container */
  && (text += '|Container');
  tNodeType & 8
  /* ElementContainer */
  && (text += '|ElementContainer');
  tNodeType & 16
  /* Projection */
  && (text += '|Projection');
  tNodeType & 32
  /* Icu */
  && (text += '|IcuContainer');
  tNodeType & 64
  /* Placeholder */
  && (text += '|Placeholder');
  return text.length > 0 ? text.substring(1) : text;
} // Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


const unusedValueExportToPlacateAjd$4 = 1;
/**
 * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
 *
 * ```
 * <div my-dir [class]="exp"></div>
 * ```
 * and
 * ```
 * @Directive({
 * })
 * class MyDirective {
 *   @Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param tNode
 */

function hasClassInput(tNode) {
  return (tNode.flags & 16
  /* hasClassInput */
  ) !== 0;
}
/**
 * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
 *
 * ```
 * <div my-dir [style]="exp"></div>
 * ```
 * and
 * ```
 * @Directive({
 * })
 * class MyDirective {
 *   @Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param tNode
 */


function hasStyleInput(tNode) {
  return (tNode.flags & 32
  /* hasStyleInput */
  ) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, 'should be called with a TNode');

  if ((tNode.type & expectedTypes) === 0) {
    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
  }
}

function assertPureTNodeType(type) {
  if (!(type === 2
  /* Element */
  || //
  type === 1
  /* Text */
  || //
  type === 4
  /* Container */
  || //
  type === 8
  /* ElementContainer */
  || //
  type === 32
  /* Icu */
  || //
  type === 16
  /* Projection */
  || //
  type === 64
  /* Placeholder */
  )) {
    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
  }
}
/**
 * Assigns all attribute values to the provided element via the inferred renderer.
 *
 * This function accepts two forms of attribute entries:
 *
 * default: (key, value):
 *  attrs = [key1, value1, key2, value2]
 *
 * namespaced: (NAMESPACE_MARKER, uri, name, value)
 *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
 *
 * The `attrs` array can contain a mix of both the default and namespaced entries.
 * The "default" values are set without a marker, but if the function comes across
 * a marker value then it will attempt to set a namespaced value. If the marker is
 * not of a namespaced value then the function will quit and return the index value
 * where it stopped during the iteration of the attrs array.
 *
 * See [AttributeMarker] to understand what the namespace marker value is.
 *
 * Note that this instruction does not support assigning style and class values to
 * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
 * are applied to an element.
 * @param renderer The renderer to be used
 * @param native The element that the attributes will be assigned to
 * @param attrs The attribute array of values that will be assigned to the element
 * @returns the index value that was last accessed in the attributes array
 */


function setUpAttributes(renderer, native, attrs) {
  const isProc = isProceduralRenderer(renderer);
  let i = 0;

  while (i < attrs.length) {
    const value = attrs[i];

    if (typeof value === 'number') {
      // only namespaces are supported. Other value types (such as style/class
      // entries) are not supported in this function.
      if (value !== 0
      /* NamespaceURI */
      ) {
        break;
      } // we just landed on the marker value ... therefore
      // we should skip to the next entry


      i++;
      const namespaceURI = attrs[i++];
      const attrName = attrs[i++];
      const attrVal = attrs[i++];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      isProc ? renderer.setAttribute(native, attrName, attrVal, namespaceURI) : native.setAttributeNS(namespaceURI, attrName, attrVal);
    } else {
      // attrName is string;
      const attrName = value;
      const attrVal = attrs[++i]; // Standard attributes

      ngDevMode && ngDevMode.rendererSetAttribute++;

      if (isAnimationProp(attrName)) {
        if (isProc) {
          renderer.setProperty(native, attrName, attrVal);
        }
      } else {
        isProc ? renderer.setAttribute(native, attrName, attrVal) : native.setAttribute(attrName, attrVal);
      }

      i++;
    }
  } // another piece of code may iterate over the same attributes array. Therefore
  // it may be helpful to return the exact spot where the attributes array exited
  // whether by running into an unsupported marker or if all the static values were
  // iterated over.


  return i;
}
/**
 * Test whether the given value is a marker that indicates that the following
 * attribute values in a `TAttributes` array are only the names of attributes,
 * and not name-value pairs.
 * @param marker The attribute marker to test.
 * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
 */


function isNameOnlyAttributeMarker(marker) {
  return marker === 3
  /* Bindings */
  || marker === 4
  /* Template */
  || marker === 6
  /* I18n */
  ;
}

function isAnimationProp(name) {
  // Perf note: accessing charCodeAt to check for the first character of a string is faster as
  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
  // charCodeAt doesn't allocate memory to return a substring.
  return name.charCodeAt(0) === 64
  /* AT_SIGN */
  ;
}
/**
 * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
 *
 * This merge function keeps the order of attrs same.
 *
 * @param dst Location of where the merged `TAttributes` should end up.
 * @param src `TAttributes` which should be appended to `dst`
 */


function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) {// do nothing
  } else if (dst === null || dst.length === 0) {
    // We have source, but dst is empty, just make a copy.
    dst = src.slice();
  } else {
    let srcMarker = -1
    /* ImplicitAttributes */
    ;

    for (let i = 0; i < src.length; i++) {
      const item = src[i];

      if (typeof item === 'number') {
        srcMarker = item;
      } else {
        if (srcMarker === 0
        /* NamespaceURI */
        ) {// Case where we need to consume `key1`, `key2`, `value` items.
        } else if (srcMarker === -1
        /* ImplicitAttributes */
        || srcMarker === 2
        /* Styles */
        ) {
          // Case where we have to consume `key1` and `value` only.
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          // Case where we have to consume `key1` only.
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }

  return dst;
}
/**
 * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
 *
 * @param dst `TAttributes` to append to.
 * @param marker Region where the `key`/`value` should be added.
 * @param key1 Key to add to `TAttributes`
 * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
 * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
 */


function mergeHostAttribute(dst, marker, key1, key2, value) {
  let i = 0; // Assume that new markers will be inserted at the end.

  let markerInsertPosition = dst.length; // scan until correct type.

  if (marker === -1
  /* ImplicitAttributes */
  ) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      const dstValue = dst[i++];

      if (typeof dstValue === 'number') {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          // We need to save this as we want the markers to be inserted in specific order.
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  } // search until you find place of insertion


  while (i < dst.length) {
    const item = dst[i];

    if (typeof item === 'number') {
      // since `i` started as the index after the marker, we did not find it if we are at the next
      // marker
      break;
    } else if (item === key1) {
      // We already have same token
      if (key2 === null) {
        if (value !== null) {
          dst[i + 1] = value;
        }

        return;
      } else if (key2 === dst[i + 1]) {
        dst[i + 2] = value;
        return;
      }
    } // Increment counter.


    i++;
    if (key2 !== null) i++;
    if (value !== null) i++;
  } // insert at location.


  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }

  dst.splice(i++, 0, key1);

  if (key2 !== null) {
    dst.splice(i++, 0, key2);
  }

  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// Parent Injector Utils ///////////////////////////////////////////////////////////////


function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}

function getParentInjectorIndex(parentLocation) {
  ngDevMode && assertNumber(parentLocation, 'Number expected');
  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');
  const parentInjectorIndex = parentLocation & 32767
  /* InjectorIndexMask */
  ;
  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');
  return parentLocation & 32767
  /* InjectorIndexMask */
  ;
}

function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16
  /* ViewOffsetShift */
  ;
}
/**
 * Unwraps a parent injector location number to find the view offset from the current injector,
 * then walks up the declaration view tree until the view is found that contains the parent
 * injector.
 *
 * @param location The location of the parent injector, which contains the view offset
 * @param startView The LView instance from which to start walking up the view tree
 * @returns The LView instance that contains the parent injector
 */


function getParentInjectorView(location, startView) {
  let viewOffset = getParentInjectorViewOffset(location);
  let parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component
  // or container), but we must keep the loop here to support the rarer case of deeply nested
  // <ng-template> tags or inline views, where the parent injector might live many views
  // above the child injector.

  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }

  return parentView;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines if the call to `inject` should include `viewProviders` in its resolution.
 *
 * This is set to true when we try to instantiate a component. This value is reset in
 * `getNodeInjectable` to a value which matches the declaration location of the token about to be
 * instantiated. This is done so that if we are injecting a token which was declared outside of
 * `viewProviders` we don't accidentally pull `viewProviders` in.
 *
 * Example:
 *
 * ```
 * @Injectable()
 * class MyService {
 *   constructor(public value: String) {}
 * }
 *
 * @Component({
 *   providers: [
 *     MyService,
 *     {provide: String, value: 'providers' }
 *   ]
 *   viewProviders: [
 *     {provide: String, value: 'viewProviders'}
 *   ]
 * })
 * class MyComponent {
 *   constructor(myService: MyService, value: String) {
 *     // We expect that Component can see into `viewProviders`.
 *     expect(value).toEqual('viewProviders');
 *     // `MyService` was not declared in `viewProviders` hence it can't see it.
 *     expect(myService.value).toEqual('providers');
 *   }
 * }
 *
 * ```
 */


let includeViewProviders = true;

function setIncludeViewProviders(v) {
  const oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
/**
 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
 * directives that will share slots, and thus, the fewer false positives when checking for
 * the existence of a directive.
 */


const BLOOM_SIZE = 256;
const BLOOM_MASK = BLOOM_SIZE - 1;
/**
 * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,
 * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash
 * number.
 */

const BLOOM_BUCKET_BITS = 5;
/** Counter used to generate unique IDs for directives. */

let nextNgElementId = 0;
/**
 * Registers this directive as present in its node's injector by flipping the directive's
 * corresponding bit in the injector's bloom filter.
 *
 * @param injectorIndex The index of the node injector where this token should be registered
 * @param tView The TView for the injector's bloom filters
 * @param type The directive token to register
 */

function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
  let id;

  if (typeof type === 'string') {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  } // Set a unique ID on the directive type, so if something tries to inject the directive,
  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.


  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.


  const bloomHash = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.
  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
  // to bit positions 0 - 31 in a 32 bit integer.

  const mask = 1 << bloomHash; // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.
  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask
  // should be written to.

  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
/**
 * Creates (or gets an existing) injector for a given element or container.
 *
 * @param tNode for which an injector should be retrieved / created.
 * @param lView View where the node is stored
 * @returns Node injector
 */


function getOrCreateNodeInjectorForNode(tNode, lView) {
  const existingInjectorIndex = getInjectorIndex(tNode, lView);

  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }

  const tView = lView[TVIEW];

  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode); // foundation for node bloom

    insertBloom(lView, null); // foundation for cumulative bloom

    insertBloom(tView.blueprint, null);
  }

  const parentLoc = getParentInjectorLocation(tNode, lView);
  const injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.
  // In that case, we don't need to set up a cumulative bloom

  if (hasParentInjector(parentLoc)) {
    const parentIndex = getParentInjectorIndex(parentLoc);
    const parentLView = getParentInjectorView(parentLoc, lView);
    const parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter
    // and its own cumulative bloom (which contains tokens for all ancestors)

    for (let i = 0; i < 8
    /* BLOOM_SIZE */
    ; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }

  lView[injectorIndex + 8
  /* PARENT */
  ] = parentLoc;
  return injectorIndex;
}

function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}

function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
  // copied down from the parent node. No injector has been created yet on this node.
  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[tNode.injectorIndex + 8
  /* PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
/**
 * Finds the index of the parent injector, with a view offset if applicable. Used to set the
 * parent injector initially.
 *
 * @returns Returns a number that is the combination of the number of LViews that we have to go up
 * to find the LView containing the parent inject AND the index of the injector within that LView.
 */


function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    // If we have a parent `TNode` and there is an injector associated with it we are done, because
    // the parent injector is within the current `LView`.
    return tNode.parent.injectorIndex; // ViewOffset is 0
  } // When parent injector location is computed it may be outside of the current view. (ie it could
  // be pointing to a declared parent location). This variable stores number of declaration parents
  // we need to walk up in order to find the parent injector location.


  let declarationViewOffset = 0;
  let parentTNode = null;
  let lViewCursor = lView; // The parent injector is not in the current `LView`. We will have to walk the declared parent
  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent
  // `NodeInjector`.

  while (lViewCursor !== null) {
    // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.
    const tView = lViewCursor[TVIEW];
    const tViewType = tView.type;

    if (tViewType === 2
    /* Embedded */
    ) {
      ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
      parentTNode = tView.declTNode;
    } else if (tViewType === 1
    /* Component */
    ) {
      // Components don't have `TView.declTNode` because each instance of component could be
      // inserted in different location, hence `TView.declTNode` is meaningless.
      parentTNode = lViewCursor[T_HOST];
    } else {
      ngDevMode && assertEqual(tView.type, 0
      /* Root */
      , 'Root type expected');
      parentTNode = null;
    }

    if (parentTNode === null) {
      // If we have no parent, than we are done.
      return NO_PARENT_INJECTOR;
    }

    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]); // Every iteration of the loop requires that we go to the declared parent.

    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];

    if (parentTNode.injectorIndex !== -1) {
      // We found a NodeInjector which points to something.
      return parentTNode.injectorIndex | declarationViewOffset << 16
      /* ViewOffsetShift */
      ;
    }
  }

  return NO_PARENT_INJECTOR;
}
/**
 * Makes a type or an injection token public to the DI system by adding it to an
 * injector's bloom filter.
 *
 * @param di The node injector in which a directive will be added
 * @param token The type or the injection token to be made public
 */


function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
/**
 * Inject static attribute value into directive constructor.
 *
 * This method is used with `factory` functions which are generated as part of
 * `defineDirective` or `defineComponent`. The method retrieves the static value
 * of an attribute. (Dynamic attributes are not supported since they are not resolved
 *  at the time of injection and can change over time.)
 *
 * # Example
 * Given:
 * ```
 * @Component(...)
 * class MyComponent {
 *   constructor(@Attribute('title') title: string) { ... }
 * }
 * ```
 * When instantiated with
 * ```
 * <my-component title="Hello"></my-component>
 * ```
 *
 * Then factory method generated is:
 * ```
 * MyComponent.ɵcmp = defineComponent({
 *   factory: () => new MyComponent(injectAttribute('title'))
 *   ...
 * })
 * ```
 *
 * @publicApi
 */


function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(tNode, 12
  /* AnyContainer */
  | 3
  /* AnyRNode */
  );
  ngDevMode && assertDefined(tNode, 'expecting tNode');

  if (attrNameToInject === 'class') {
    return tNode.classes;
  }

  if (attrNameToInject === 'style') {
    return tNode.styles;
  }

  const attrs = tNode.attrs;

  if (attrs) {
    const attrsLength = attrs.length;
    let i = 0;

    while (i < attrsLength) {
      const value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.

      if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes

      if (value === 0
      /* NamespaceURI */
      ) {
        // we skip the next two values
        // as namespaced attributes looks like
        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
        // 'existValue', ...]
        i = i + 2;
      } else if (typeof value === 'number') {
        // Skip to the first value of the marked attribute.
        i++;

        while (i < attrsLength && typeof attrs[i] === 'string') {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }

  return null;
}

function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & InjectFlags.Optional) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, 'NodeInjector');
  }
}
/**
 * Returns the value associated to the given token from the ModuleInjector or throws exception
 *
 * @param lView The `LView` that contains the `tNode`
 * @param token The token to look for
 * @param flags Injection flags
 * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
 * @returns the value from the injector or throws an exception
 */


function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & InjectFlags.Optional && notFoundValue === undefined) {
    // This must be set or the NullInjector will throw for optional deps
    notFoundValue = null;
  }

  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
    const moduleInjector = lView[INJECTOR$1]; // switch to `injectInjectorOnly` implementation for module injector, since module injector
    // should not have access to Component/Directive DI scope (that may happen through
    // `directiveInject` implementation)

    const previousInjectImplementation = setInjectImplementation(undefined);

    try {
      if (moduleInjector) {
        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
      } else {
        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }

  return notFoundValueOrThrow(notFoundValue, token, flags);
}
/**
 * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
 *
 * Look for the injector providing the token by walking up the node injector tree and then
 * the module injector tree.
 *
 * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
 * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
 *
 * @param tNode The Node where the search for the injector should start
 * @param lView The `LView` that contains the `tNode`
 * @param token The token to look for
 * @param flags Injection flags
 * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
 * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
 */


function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
  if (tNode !== null) {
    const bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
    // so just call the factory function to create it.

    if (typeof bloomHash === 'function') {
      if (!enterDI(lView, tNode, flags)) {
        // Failed to enter DI, try module injector instead. If a token is injected with the @Host
        // flag, the module injector is not searched for that token in Ivy.
        return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
      }

      try {
        const value = bloomHash(flags);

        if (value == null && !(flags & InjectFlags.Optional)) {
          throwProviderNotFoundError(token);
        } else {
          return value;
        }
      } finally {
        leaveDI();
      }
    } else if (typeof bloomHash === 'number') {
      // A reference to the previous injector TView that was found while climbing the element
      // injector tree. This is used to know if viewProviders can be accessed on the current
      // injector.
      let previousTView = null;
      let injectorIndex = getInjectorIndex(tNode, lView);
      let parentLocation = NO_PARENT_INJECTOR;
      let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by
      // searching the parent injector.

      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8
        /* PARENT */
        ];

        if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
          injectorIndex = -1;
        } else {
          previousTView = lView[TVIEW];
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        }
      } // Traverse up the injector tree until we find a potential match or until we know there
      // *isn't* a match.


      while (injectorIndex !== -1) {
        ngDevMode && assertNodeInjector(lView, injectorIndex); // Check the current injector. If it matches, see if it contains token.

        const tView = lView[TVIEW];
        ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8
        /* TNODE */
        ], lView);

        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
          // At this point, we have an injector which *may* contain the token, so we step through
          // the providers and directives associated with the injector's corresponding node to get
          // the instance.
          const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);

          if (instance !== NOT_FOUND) {
            return instance;
          }
        }

        parentLocation = lView[injectorIndex + 8
        /* PARENT */
        ];

        if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8
        /* TNODE */
        ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
          // The def wasn't found anywhere on this node, so it was a false positive.
          // Traverse up the tree and continue searching.
          previousTView = tView;
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        } else {
          // If we should not search parent OR If the ancestor bloom filter value does not have the
          // bit corresponding to the directive we can give up on traversing up to find the specific
          // injector.
          injectorIndex = -1;
        }
      }
    }
  }

  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}

const NOT_FOUND = {};

function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}

function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  const currentTView = lView[TVIEW];
  const tNode = currentTView.data[injectorIndex + 8
  /* TNODE */
  ]; // First, we need to determine if view providers can be accessed by the starting element.
  // There are two possibilities

  const canAccessViewProviders = previousTView == null ? // 1) This is the first invocation `previousTView == null` which means that we are at the
  // `TNode` of where injector is starting to look. In such a case the only time we are allowed
  // to look into the ViewProviders is if:
  // - we are on a component
  // - AND the injector set `includeViewProviders` to true (implying that the token can see
  // ViewProviders because it is the Component or a Service which itself was declared in
  // ViewProviders)
  isComponentHost(tNode) && includeViewProviders : // 2) `previousTView != null` which means that we are now walking across the parent nodes.
  // In such a case we are only allowed to look into the ViewProviders if:
  // - We just crossed from child View to Parent View `previousTView != currentTView`
  // - AND the parent TNode is an Element.
  // This means that we just came from the Component's View and therefore are allowed to see
  // into the ViewProviders.
  previousTView != currentTView && (tNode.type & 3
  /* AnyRNode */
  ) !== 0; // This special case happens when there is a @host on the inject and when we are searching
  // on the host element node.

  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);

  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
  } else {
    return NOT_FOUND;
  }
}
/**
 * Searches for the given token among the node's directives and providers.
 *
 * @param tNode TNode on which directives are present.
 * @param tView The tView we are currently processing
 * @param token Provider token or type of a directive to look for.
 * @param canAccessViewProviders Whether view providers should be considered.
 * @param isHostSpecialCase Whether the host special case applies.
 * @returns Index of a found directive or provider, or null when none found.
 */


function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  const nodeProviderIndexes = tNode.providerIndexes;
  const tInjectables = tView.data;
  const injectablesStart = nodeProviderIndexes & 1048575
  /* ProvidersStartIndexMask */
  ;
  const directivesStart = tNode.directiveStart;
  const directiveEnd = tNode.directiveEnd;
  const cptViewProvidersCount = nodeProviderIndexes >> 20
  /* CptViewProvidersCountShift */
  ;
  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible

  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;

  for (let i = startingIndex; i < endIndex; i++) {
    const providerTokenOrDef = tInjectables[i];

    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }

  if (isHostSpecialCase) {
    const dirDef = tInjectables[directivesStart];

    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }

  return null;
}
/**
 * Retrieve or instantiate the injectable from the `LView` at particular `index`.
 *
 * This function checks to see if the value has already been instantiated and if so returns the
 * cached `injectable`. Otherwise if it detects that the value is still a factory it
 * instantiates the `injectable` and caches the value.
 */


function getNodeInjectable(lView, tView, index, tNode) {
  let value = lView[index];
  const tData = tView.data;

  if (isFactory(value)) {
    const factory = value;

    if (factory.resolving) {
      throwCyclicDependencyError(stringifyForError(tData[index]));
    }

    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    const success = enterDI(lView, tNode, InjectFlags.Default);
    ngDevMode && assertEqual(success, true, 'Because flags do not contain \`SkipSelf\' we expect this to always succeed.');

    try {
      value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.
      // For perf reasons, we want to avoid searching for hooks on providers.
      // It does no harm to try (the hooks just won't exist), but the extra
      // checks are unnecessary and this is a hot path. So we check to see
      // if the index of the dependency is in the directive range for this
      // tNode. If it's not, we know it's a provider and skip hook registration.

      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
    }
  }

  return value;
}
/**
 * Returns the bit in an injector's bloom filter that should be used to determine whether or not
 * the directive might be provided by the injector.
 *
 * When a directive is public, it is added to the bloom filter and given a unique ID that can be
 * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
 * is returned as the node injector can not possibly provide that token.
 *
 * @param token the injection token
 * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
 *   When the returned value is negative then it represents special values such as `Injector`.
 */


function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, 'token must be defined');

  if (typeof token === 'string') {
    return token.charCodeAt(0) || 0;
  }

  const tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.
  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`

  if (typeof tokenId === 'number') {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1
      /* Injector */
      , 'Expecting to get Special Injector Id');
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}

function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  // Create a mask that targets the specific bit associated with the directive we're looking for.
  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
  // to bit positions 0 - 31 in a 32 bit integer.
  const mask = 1 << bloomHash; // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of
  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset
  // that should be used.

  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)]; // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
  // this injector is a potential match.

  return !!(value & mask);
}
/** Returns true if flags prevent parent injector from being searched for tokens */


function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}

class NodeInjector {
  constructor(_tNode, _lView) {
    this._tNode = _tNode;
    this._lView = _lView;
  }

  get(token, notFoundValue, flags) {
    return getOrCreateInjectable(this._tNode, this._lView, token, flags, notFoundValue);
  }

}
/**
 * @codeGenApi
 */


function ɵɵgetInheritedFactory(type) {
  return noSideEffects(() => {
    const ownConstructor = type.prototype.constructor;
    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    const objectPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

    while (parent && parent !== objectPrototype) {
      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,
      // we've found the inherited factory. Note the check that the factory isn't the type's
      // own factory is redundant in most cases, but if the user has custom decorators on the
      // class, this lookup will start one level down in the prototype chain, causing us to
      // find the own factory first and potentially triggering an infinite loop downstream.

      if (factory && factory !== ownFactory) {
        return factory;
      }

      parent = Object.getPrototypeOf(parent);
    } // There is no factory defined. Either this was improper usage of inheritance
    // (no Angular decorator on the superclass) or there is no constructor at all
    // in the inheritance chain. Since the two cases cannot be distinguished, the
    // latter has to be assumed.


    return t => new t();
  });
}

function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return () => {
      const factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }

  return getFactoryDef(type);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Facade for the attribute injection from DI.
 *
 * @codeGenApi
 */


function ɵɵinjectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ANNOTATIONS = '__annotations__';
const PARAMETERS = '__parameters__';
const PROP_METADATA = '__prop__metadata__';
/**
 * @suppress {globalThis}
 */

function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);

    function DecoratorFactory(...args) {
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, ...args);
        return this;
      }

      const annotationInstance = new DecoratorFactory(...args);
      return function TypeDecorator(cls) {
        if (typeFn) typeFn(cls, ...args); // Use of Object.defineProperty is important since it creates non-enumerable property which
        // prevents the property is copied during subclassing.

        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
          value: []
        })[ANNOTATIONS];
        annotations.push(annotationInstance);
        if (additionalProcessing) additionalProcessing(cls);
        return cls;
      };
    }

    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}

function makeMetadataCtor(props) {
  return function ctor(...args) {
    if (props) {
      const values = props(...args);

      for (const propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}

function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);

    function ParamDecoratorFactory(...args) {
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }

      const annotationInstance = new ParamDecoratorFactory(...args);
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;

      function ParamDecorator(cls, unusedKey, index) {
        // Use of Object.defineProperty is important since it creates non-enumerable property which
        // prevents the property is copied during subclassing.
        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
          value: []
        })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.
        // we pad with nulls.

        while (parameters.length <= index) {
          parameters.push(null);
        }

        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }

    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}

function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);

    function PropDecoratorFactory(...args) {
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }

      const decoratorInstance = new PropDecoratorFactory(...args);

      function PropDecorator(target, name) {
        const constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property
        // which prevents the property from being copied during subclassing.

        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
          value: {}
        })[PROP_METADATA];
        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
        meta[name].unshift(decoratorInstance);
        if (additionalProcessing) additionalProcessing(target, name, ...args);
      }

      return PropDecorator;
    }

    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }

    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Attribute decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


const Attribute = /*#__PURE__*/makeParamDecorator('Attribute', attributeName => ({
  attributeName,
  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)
}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parameterized type.
 *
 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
 * the `Injector`. This provides an additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * When creating an `InjectionToken`, you can optionally specify a factory function which returns
 * (possibly by creating) a default value of the parameterized type `T`. This sets up the
 * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
 * application's root injector. If the factory function, which takes zero arguments, needs to inject
 * dependencies, it can do so using the `inject` function.
 * As you can see in the Tree-shakable InjectionToken example below.
 *
 * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
 * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
 * mentioned above, `'root'` is the default value for `providedIn`.
 *
 * @usageNotes
 * ### Basic Examples
 *
 * ### Plain InjectionToken
 *
 * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
 *
 * ### Tree-shakable InjectionToken
 *
 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 *
 * @publicApi
 */

class InjectionToken {
  /**
   * @param _desc   Description for the token,
   *                used only for debugging purposes,
   *                it should but does not need to be unique
   * @param options Options for the token's usage, as described above
   */
  constructor(_desc, options) {
    this._desc = _desc;
    /** @internal */

    this.ngMetadataName = 'InjectionToken';
    this.ɵprov = undefined;

    if (typeof options == 'number') {
      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here'); // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
      // See `InjectorMarkers`

      this.__NG_ELEMENT_ID__ = options;
    } else if (options !== undefined) {
      this.ɵprov = ɵɵdefineInjectable({
        token: this,
        providedIn: options.providedIn || 'root',
        factory: options.factory
      });
    }
  }

  toString() {
    return `InjectionToken ${this._desc}`;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
 * that will populate the `entryComponents` field of components and NgModules
 * based on its `useValue` property value.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) are added to the `entryComponents` property.
 *
 * @usageNotes
 *
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on a router configuration that refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * @NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * @publicApi
 * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
 */


const ANALYZE_FOR_ENTRY_COMPONENTS = /*#__PURE__*/new InjectionToken('AnalyzeForEntryComponents'); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
// explicitly set.

const emitDistinctChangesOnlyDefaultValue = true;
/**
 * Base class for query metadata.
 *
 * @see `ContentChildren`.
 * @see `ContentChild`.
 * @see `ViewChildren`.
 * @see `ViewChild`.
 *
 * @publicApi
 */

class Query {}
/**
 * ContentChildren decorator and metadata.
 *
 *
 * @Annotation
 * @publicApi
 */


const ContentChildren = /*#__PURE__*/makePropDecorator('ContentChildren', (selector, data = {}) => Object.assign({
  selector,
  first: false,
  isViewQuery: false,
  descendants: false,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, data), Query);
/**
 * ContentChild decorator and metadata.
 *
 *
 * @Annotation
 *
 * @publicApi
 */

const ContentChild = /*#__PURE__*/makePropDecorator('ContentChild', (selector, data = {}) => Object.assign({
  selector,
  first: true,
  isViewQuery: false,
  descendants: true
}, data), Query);
/**
 * ViewChildren decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const ViewChildren = /*#__PURE__*/makePropDecorator('ViewChildren', (selector, data = {}) => Object.assign({
  selector,
  first: false,
  isViewQuery: true,
  descendants: true,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, data), Query);
/**
 * ViewChild decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const ViewChild = /*#__PURE__*/makePropDecorator('ViewChild', (selector, data) => Object.assign({
  selector,
  first: true,
  isViewQuery: true,
  descendants: true
}, data), Query);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var FactoryTarget = /*#__PURE__*/(() => {
  FactoryTarget = FactoryTarget || {};
  FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
  FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
  FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
  FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
  FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
  return FactoryTarget;
})();
var ViewEncapsulation = /*#__PURE__*/(() => {
  ViewEncapsulation = ViewEncapsulation || {};
  ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.

  ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
  return ViewEncapsulation;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function getCompilerFacade(request) {
  const globalNg = _global['ng'];

  if (globalNg && globalNg.ɵcompilerFacade) {
    return globalNg.ɵcompilerFacade;
  }

  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    // Log the type as an error so that a developer can easily navigate to the type from the
    // console.
    console.error(`JIT compilation failed for ${request.kind}`, request.type);
    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;

    if (request.usage === 1
    /* PartialDeclaration */
    ) {
      message += `The ${request.kind} is part of a library that has been partially compiled.\n`;
      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n`;
      message += '\n';
      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n`;
    } else {
      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n`;
    }

    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n`;
    message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
    throw new Error(message);
  } else {
    throw new Error('JIT compiler unavailable');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Represents a type that a Component or other object is instances of.
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
 * the `MyCustomComponent` constructor function.
 *
 * @publicApi
 */


const Type = Function;

function isType(v) {
  return typeof v === 'function';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Equivalent to ES6 spread, add each item to an array.
 *
 * @param items The items to add
 * @param arr The array to which you want to add the items
 */


function addAllToArray(items, arr) {
  for (let i = 0; i < items.length; i++) {
    arr.push(items[i]);
  }
}
/**
 * Determines if the contents of two arrays is identical
 *
 * @param a first array
 * @param b second array
 * @param identityAccessor Optional function for extracting stable object identity from a value in
 *     the array.
 */


function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length) return false;

  for (let i = 0; i < a.length; i++) {
    let valueA = a[i];
    let valueB = b[i];

    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }

    if (valueB !== valueA) {
      return false;
    }
  }

  return true;
}
/**
 * Flattens an array.
 */


function flatten(list, dst) {
  if (dst === undefined) dst = list;

  for (let i = 0; i < list.length; i++) {
    let item = list[i];

    if (Array.isArray(item)) {
      // we need to inline it.
      if (dst === list) {
        // Our assumption that the list was already flat was wrong and
        // we need to clone flat since we need to write to it.
        dst = list.slice(0, i);
      }

      flatten(item, dst);
    } else if (dst !== list) {
      dst.push(item);
    }
  }

  return dst;
}

function deepForEach(input, fn) {
  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}

function addToArray(arr, index, value) {
  // perf: array.push is faster than array.splice!
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}

function removeFromArray(arr, index) {
  // perf: array.pop is faster than array.splice!
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}

function newArray(size, value) {
  const list = [];

  for (let i = 0; i < size; i++) {
    list.push(value);
  }

  return list;
}
/**
 * Remove item from array (Same as `Array.splice()` but faster.)
 *
 * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * https://jsperf.com/fast-array-splice (About 20x faster)
 *
 * @param array Array to splice
 * @param index Index of element in array to remove.
 * @param count Number of items to remove.
 */


function arraySplice(array, index, count) {
  const length = array.length - count;

  while (index < length) {
    array[index] = array[index + count];
    index++;
  }

  while (count--) {
    array.pop(); // shrink the array
  }
}
/**
 * Same as `Array.splice(index, 0, value)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value Value to add to array.
 */


function arrayInsert(array, index, value) {
  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
  let end = array.length;

  while (end > index) {
    const previousEnd = end - 1;
    array[end] = array[previousEnd];
    end = previousEnd;
  }

  array[index] = value;
}
/**
 * Same as `Array.splice2(index, 0, value1, value2)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value1 Value to add to array.
 * @param value2 Value to add to array.
 */


function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
  let end = array.length;

  if (end == index) {
    // inserting at the end.
    array.push(value1, value2);
  } else if (end === 1) {
    // corner case when we have less items in array than we have items to insert.
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);

    while (end > index) {
      const previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }

    array[index] = value1;
    array[index + 1] = value2;
  }
}
/**
 * Insert a `value` into an `array` so that the array remains sorted.
 *
 * NOTE:
 * - Duplicates are not allowed, and are ignored.
 * - This uses binary search algorithm for fast inserts.
 *
 * @param array A sorted array to insert into.
 * @param value The value to insert.
 * @returns index of the inserted value.
 */


function arrayInsertSorted(array, value) {
  let index = arrayIndexOfSorted(array, value);

  if (index < 0) {
    // if we did not find it insert it.
    index = ~index;
    arrayInsert(array, index, value);
  }

  return index;
}
/**
 * Remove `value` from a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to remove from.
 * @param value The value to remove.
 * @returns index of the removed value.
 *   - positive index if value found and removed.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     inserted)
 */


function arrayRemoveSorted(array, value) {
  const index = arrayIndexOfSorted(array, value);

  if (index >= 0) {
    arraySplice(array, index, 1);
  }

  return index;
}
/**
 * Get an index of an `value` in a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     located)
 */


function arrayIndexOfSorted(array, value) {
  return _arrayIndexOfSorted(array, value, 0);
}
/**
 * Set a `value` for a `key`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or create.
 * @param value The value to set for a `key`.
 * @returns index (always even) of where the value vas set.
 */


function keyValueArraySet(keyValueArray, key, value) {
  let index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it set it.
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }

  return index;
}
/**
 * Retrieve a `value` for a `key` (on `undefined` if not found.)
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @return The `value` stored at the `key` location or `undefined if not found.
 */


function keyValueArrayGet(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it retrieve it.
    return keyValueArray[index | 1];
  }

  return undefined;
}
/**
 * Retrieve a `key` index value in the array or `-1` if not found.
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @returns index of where the key is (or should have been.)
 *   - positive (even) index if key found.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been inserted.)
 */


function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
/**
 * Delete a `key` (and `value`) from the `KeyValueArray`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or delete (if exist).
 * @returns index of where the key was (or should have been.)
 *   - positive (even) index if key found and deleted.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been.)
 */


function keyValueArrayDelete(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);

  if (index >= 0) {
    // if we found it remove it.
    arraySplice(keyValueArray, index, 2);
  }

  return index;
}
/**
 * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @param shift grouping shift.
 *   - `0` means look at every location
 *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
 *         they are values.)
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 * inserted)
 */


function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
  let start = 0;
  let end = array.length >> shift;

  while (end !== start) {
    const middle = start + (end - start >> 1); // find the middle.

    const current = array[middle << shift];

    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
    }
  }

  return ~(end << shift);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/*
 * #########################
 * Attention: These Regular expressions have to hold even if the code is minified!
 * ##########################
 */

/**
 * Regular expression that detects pass-through constructors for ES5 output. This Regex
 * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also
 * it intends to capture the pattern where existing constructors have been downleveled from
 * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.
 *
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, arguments) || this;
 * ```
 *
 * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, __spread(arguments)) || this;
 * ```
 *
 * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:
 * ```
 *   function MyClass() {
 *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
 * ```
 *
 * More details can be found in: https://github.com/angular/angular/issues/38453.
 */


const ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
/** Regular expression that detects ES2015 classes which extend from other classes. */

const ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
/**
 * Regular expression that detects ES2015 classes which extend from other classes and
 * have an explicit constructor defined.
 */

const ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
/**
 * Regular expression that detects ES2015 classes which extend from other classes
 * and inherit a constructor.
 */

const ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
/**
 * Determine whether a stringified type is a class which delegates its constructor
 * to its parent.
 *
 * This is not trivial since compiled code can actually contain a constructor function
 * even if the original source code did not. For instance, when the child class contains
 * an initialized instance property.
 */

function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}

class ReflectionCapabilities {
  constructor(reflect) {
    this._reflect = reflect || _global['Reflect'];
  }

  isReflectionEnabled() {
    return true;
  }

  factory(t) {
    return (...args) => new t(...args);
  }
  /** @internal */


  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
    let result;

    if (typeof paramTypes === 'undefined') {
      result = newArray(paramAnnotations.length);
    } else {
      result = newArray(paramTypes.length);
    }

    for (let i = 0; i < result.length; i++) {
      // TS outputs Object for parameters without types, while Traceur omits
      // the annotations. For now we preserve the Traceur behavior to aid
      // migration, but this can be revisited.
      if (typeof paramTypes === 'undefined') {
        result[i] = [];
      } else if (paramTypes[i] && paramTypes[i] != Object) {
        result[i] = [paramTypes[i]];
      } else {
        result[i] = [];
      }

      if (paramAnnotations && paramAnnotations[i] != null) {
        result[i] = result[i].concat(paramAnnotations[i]);
      }
    }

    return result;
  }

  _ownParameters(type, parentCtor) {
    const typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.
    // In that case, to detect whether a child class declared an own constructor or not,
    // we need to look inside of that constructor to check whether it is
    // just calling the parent.
    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
    // that sets 'design:paramtypes' to []
    // if a class inherits from another class but has no ctor declared itself.

    if (isDelegateCtor(typeStr)) {
      return null;
    } // Prefer the direct API.


    if (type.parameters && type.parameters !== parentCtor.parameters) {
      return type.parameters;
    } // API of tsickle for lowering decorators to properties on the class.


    const tsickleCtorParams = type.ctorParameters;

    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
      // Newer tsickle uses a function closure
      // Retain the non-function case for compatibility with older tsickle
      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);
      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
    } // API for metadata created by invoking the decorators.


    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];

    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);

    if (paramTypes || paramAnnotations) {
      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
    } // If a class has no decorators, at least create metadata
    // based on function.length.
    // Note: We know that this is a real constructor as we checked
    // the content of the constructor above.


    return newArray(type.length);
  }

  parameters(type) {
    // Note: only report metadata if we have at least one class decorator
    // to stay in sync with the static reflector.
    if (!isType(type)) {
      return [];
    }

    const parentCtor = getParentCtor(type);

    let parameters = this._ownParameters(type, parentCtor);

    if (!parameters && parentCtor !== Object) {
      parameters = this.parameters(parentCtor);
    }

    return parameters || [];
  }

  _ownAnnotations(typeOrFunc, parentCtor) {
    // Prefer the direct API.
    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
      let annotations = typeOrFunc.annotations;

      if (typeof annotations === 'function' && annotations.annotations) {
        annotations = annotations.annotations;
      }

      return annotations;
    } // API of tsickle for lowering decorators to properties on the class.


    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
    } // API for metadata created by invoking the decorators.


    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
      return typeOrFunc[ANNOTATIONS];
    }

    return null;
  }

  annotations(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return [];
    }

    const parentCtor = getParentCtor(typeOrFunc);
    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
    return parentAnnotations.concat(ownAnnotations);
  }

  _ownPropMetadata(typeOrFunc, parentCtor) {
    // Prefer the direct API.
    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
      let propMetadata = typeOrFunc.propMetadata;

      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
        propMetadata = propMetadata.propMetadata;
      }

      return propMetadata;
    } // API of tsickle for lowering decorators to properties on the class.


    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
      const propDecorators = typeOrFunc.propDecorators;
      const propMetadata = {};
      Object.keys(propDecorators).forEach(prop => {
        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
      });
      return propMetadata;
    } // API for metadata created by invoking the decorators.


    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
      return typeOrFunc[PROP_METADATA];
    }

    return null;
  }

  propMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }

    const parentCtor = getParentCtor(typeOrFunc);
    const propMetadata = {};

    if (parentCtor !== Object) {
      const parentPropMetadata = this.propMetadata(parentCtor);
      Object.keys(parentPropMetadata).forEach(propName => {
        propMetadata[propName] = parentPropMetadata[propName];
      });
    }

    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);

    if (ownPropMetadata) {
      Object.keys(ownPropMetadata).forEach(propName => {
        const decorators = [];

        if (propMetadata.hasOwnProperty(propName)) {
          decorators.push(...propMetadata[propName]);
        }

        decorators.push(...ownPropMetadata[propName]);
        propMetadata[propName] = decorators;
      });
    }

    return propMetadata;
  }

  ownPropMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }

    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
  }

  hasLifecycleHook(type, lcProperty) {
    return type instanceof Type && lcProperty in type.prototype;
  }

  guards(type) {
    return {};
  }

  getter(name) {
    return new Function('o', 'return o.' + name + ';');
  }

  setter(name) {
    return new Function('o', 'v', 'return o.' + name + ' = v;');
  }

  method(name) {
    const functionBody = `if (!o.${name}) throw new Error('"${name}" is undefined');
        return o.${name}.apply(o, args);`;
    return new Function('o', 'args', functionBody);
  } // There is not a concept of import uri in Js, but this is useful in developing Dart applications.


  importUri(type) {
    // StaticSymbol
    if (typeof type === 'object' && type['filePath']) {
      return type['filePath'];
    } // Runtime type


    return `./${stringify(type)}`;
  }

  resourceUri(type) {
    return `./${stringify(type)}`;
  }

  resolveIdentifier(name, moduleUrl, members, runtime) {
    return runtime;
  }

  resolveEnum(enumIdentifier, name) {
    return enumIdentifier[name];
  }

}

function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }

  return decoratorInvocations.map(decoratorInvocation => {
    const decoratorType = decoratorInvocation.type;
    const annotationCls = decoratorType.annotationCls;
    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return new annotationCls(...annotationArgs);
  });
}

function getParentCtor(ctor) {
  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  const parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value
  // to simplify checking later on.

  return parentCtor || Object;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const _THROW_IF_NOT_FOUND = {};
const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
/*
 * Name of a property (that we patch onto DI decorator), which is used as an annotation of which
 * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators
 * in the code, thus making them tree-shakable.
 */

const DI_DECORATOR_FLAG = '__NG_DI_FLAG__';
const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
const NG_TOKEN_PATH = 'ngTokenPath';
const NEW_LINE = /\n/gm;
const NO_NEW_LINE = 'ɵ';
const SOURCE = '__source';
const USE_VALUE$1 = /*#__PURE__*/getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});
/**
 * Current injector value used by `inject`.
 * - `undefined`: it is an error to call `inject`
 * - `null`: `inject` can be called but there is no injector (limp-mode).
 * - Injector instance: Use the injector for resolution.
 */

let _currentInjector = undefined;

function setCurrentInjector(injector) {
  const former = _currentInjector;
  _currentInjector = injector;
  return former;
}

function injectInjectorOnly(token, flags = InjectFlags.Default) {
  if (_currentInjector === undefined) {
    const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `inject() must be called from an injection context` : '';
    throw new RuntimeError(203
    /* MISSING_INJECTION_CONTEXT */
    , errorMessage);
  } else if (_currentInjector === null) {
    return injectRootLimpMode(token, undefined, flags);
  } else {
    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
  }
}

function ɵɵinject(token, flags = InjectFlags.Default) {
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * @codeGenApi
 */


function ɵɵinvalidFactoryDep(index) {
  const msg = ngDevMode ? `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.` : 'invalid';
  throw new Error(msg);
}
/**
 * Injects a token from the currently active injector.
 *
 * Must be used in the context of a factory function such as one defined for an
 * `InjectionToken`. Throws an error if not called from such a context.
 *
 * Within such a factory function, using this function to request injection of a dependency
 * is faster and more type-safe than providing an additional array of dependencies
 * (as has been common with `useFactory` providers).
 *
 * @param token The injection token for the dependency to be injected.
 * @param flags Optional flags that control how injection is executed.
 * The flags correspond to injection strategies that can be specified with
 * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
 * @returns the injected value if injection is successful, `null` otherwise.
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 * @publicApi
 */


const inject = ɵɵinject;

function injectArgs(types) {
  const args = [];

  for (let i = 0; i < types.length; i++) {
    const arg = resolveForwardRef(types[i]);

    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'Arguments array must have arguments.' : '';
        throw new RuntimeError(900
        /* INVALID_DIFFER_INPUT */
        , errorMessage);
      }

      let type = undefined;
      let flags = InjectFlags.Default;

      for (let j = 0; j < arg.length; j++) {
        const meta = arg[j];
        const flag = getInjectFlag(meta);

        if (typeof flag === 'number') {
          // Special case when we handle @Inject decorator.
          if (flag === -1
          /* Inject */
          ) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }

      args.push(ɵɵinject(type, flags));
    } else {
      args.push(ɵɵinject(arg));
    }
  }

  return args;
}
/**
 * Attaches a given InjectFlag to a given decorator using monkey-patching.
 * Since DI decorators can be used in providers `deps` array (when provider is configured using
 * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we
 * attach the flag to make it available both as a static property and as a field on decorator
 * instance.
 *
 * @param decorator Provided DI decorator.
 * @param flag InjectFlag that should be applied.
 */


function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
/**
 * Reads monkey-patched property that contains InjectFlag attached to a decorator.
 *
 * @param token Token that may contain monkey-patched DI flags property.
 */


function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}

function catchInjectorError(e, token, injectorErrorName, source) {
  const tokenPath = e[NG_TEMP_TOKEN_PATH];

  if (token[SOURCE]) {
    tokenPath.unshift(token[SOURCE]);
  }

  e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
  e[NG_TOKEN_PATH] = tokenPath;
  e[NG_TEMP_TOKEN_PATH] = null;
  throw e;
}

function formatError(text, obj, injectorErrorName, source = null) {
  text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
  let context = stringify(obj);

  if (Array.isArray(obj)) {
    context = obj.map(stringify).join(' -> ');
  } else if (typeof obj === 'object') {
    let parts = [];

    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let value = obj[key];
        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
      }
    }

    context = `{${parts.join(', ')}}`;
  }

  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\n  ')}`;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Inject decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


const Inject = /*#__PURE__*/attachInjectFlag(
/*#__PURE__*/
// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
makeParamDecorator('Inject', token => ({
  token
})), -1
/* Inject */
);
/**
 * Optional decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const Optional =
/*#__PURE__*/
// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag( /*#__PURE__*/makeParamDecorator('Optional'), 8
/* Optional */
);
/**
 * Self decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const Self =
/*#__PURE__*/
// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag( /*#__PURE__*/makeParamDecorator('Self'), 2
/* Self */
);
/**
 * `SkipSelf` decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const SkipSelf =
/*#__PURE__*/
// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag( /*#__PURE__*/makeParamDecorator('SkipSelf'), 4
/* SkipSelf */
);
/**
 * Host decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const Host =
/*#__PURE__*/
// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
// tslint:disable-next-line: no-toplevel-property-access
attachInjectFlag( /*#__PURE__*/makeParamDecorator('Host'), 1
/* Host */
);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let _reflect = null;

function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}

function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}

function convertDependencies(deps) {
  return deps.map(dep => reflectDependency(dep));
}

function reflectDependency(dep) {
  const meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };

  if (Array.isArray(dep) && dep.length > 0) {
    for (let j = 0; j < dep.length; j++) {
      const param = dep[j];

      if (param === undefined) {
        // param may be undefined if type of dep is not set by ngtsc
        continue;
      }

      const proto = Object.getPrototypeOf(param);

      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute) {
        if (param.attributeName === undefined) {
          throw new Error(`Attribute name must be defined.`);
        }

        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }

  return meta;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Used to resolve resource URLs on `@Component` when used with JIT compilation.
 *
 * Example:
 * ```
 * @Component({
 *   selector: 'my-comp',
 *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
 * })
 * class MyComponent{
 * }
 *
 * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
 * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
 *
 * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
 * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
 *
 * // Use browser's `fetch()` function as the default resource resolution strategy.
 * resolveComponentResources(fetch).then(() => {
 *   // After resolution all URLs have been converted into `template` strings.
 *   renderComponent(MyComponent);
 * });
 *
 * ```
 *
 * NOTE: In AOT the resolution happens during compilation, and so there should be no need
 * to call this method outside JIT mode.
 *
 * @param resourceResolver a function which is responsible for returning a `Promise` to the
 * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
 */


function resolveComponentResources(resourceResolver) {
  // Store all promises which are fetching the resources.
  const componentResolved = []; // Cache so that we don't fetch the same resource more than once.

  const urlMap = new Map();

  function cachedResourceResolve(url) {
    let promise = urlMap.get(url);

    if (!promise) {
      const resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }

    return promise;
  }

  componentResourceResolutionQueue.forEach((component, type) => {
    const promises = [];

    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then(template => {
        component.template = template;
      }));
    }

    const styleUrls = component.styleUrls;
    const styles = component.styles || (component.styles = []);
    const styleOffset = component.styles.length;
    styleUrls && styleUrls.forEach((styleUrl, index) => {
      styles.push(''); // pre-allocate array.

      promises.push(cachedResourceResolve(styleUrl).then(style => {
        styles[styleOffset + index] = style;
        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);

        if (styleUrls.length == 0) {
          component.styleUrls = undefined;
        }
      }));
    });
    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(() => undefined);
}

let componentResourceResolutionQueue = /*#__PURE__*/new Map(); // Track when existing ɵcmp for a Type is waiting on resources.

const componentDefPendingResolution = /*#__PURE__*/new Set();

function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}

function isComponentDefPendingResolution(type) {
  return componentDefPendingResolution.has(type);
}

function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);
}

function clearResolutionOfComponentResourcesQueue() {
  const old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = new Map();
  return old;
}

function restoreComponentResolutionQueue(queue) {
  componentDefPendingResolution.clear();
  queue.forEach((_, type) => componentDefPendingResolution.add(type));
  componentResourceResolutionQueue = queue;
}

function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}

function unwrapResponse(response) {
  return typeof response == 'string' ? response : response.text();
}

function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */


let policy$1;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */

function getPolicy$1() {
  if (policy$1 === undefined) {
    policy$1 = null;

    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy('angular', {
          createHTML: s => s,
          createScript: s => s,
          createScriptURL: s => s
        });
      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
        // already registered, even in report-only mode. Until the API changes,
        // catch the error not to break the applications functionally. In such
        // cases, the code will fall back to using strings.
      }
    }
  }

  return policy$1;
}
/**
 * Unsafely promote a string to a TrustedHTML, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that the
 * provided string will never cause an XSS vulnerability if used in a context
 * that will be interpreted as HTML by a browser, e.g. when assigning to
 * element.innerHTML.
 */


function trustedHTMLFromString(html) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
}
/**
 * Unsafely promote a string to a TrustedScript, falling back to strings when
 * Trusted Types are not available.
 * @security In particular, it must be assured that the provided string will
 * never cause an XSS vulnerability if used in a context that will be
 * interpreted and executed as a script by a browser, e.g. when calling eval.
 */


function trustedScriptFromString(script) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
}
/**
 * Unsafely promote a string to a TrustedScriptURL, falling back to strings
 * when Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that the
 * provided string will never cause an XSS vulnerability if used in a context
 * that will cause a browser to load and execute a resource, e.g. when
 * assigning to script.src.
 */


function trustedScriptURLFromString(url) {
  var _a;

  return ((_a = getPolicy$1()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
}
/**
 * Unsafely call the Function constructor with the given string arguments. It
 * is only available in development mode, and should be stripped out of
 * production code.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only called from development code, as use in production code can lead to
 * XSS vulnerabilities.
 */


function newTrustedFunctionForDev(...args) {
  if (typeof ngDevMode === 'undefined') {
    throw new Error('newTrustedFunctionForDev should never be called in production');
  }

  if (!_global.trustedTypes) {
    // In environments that don't support Trusted Types, fall back to the most
    // straightforward implementation:
    return new Function(...args);
  } // Chrome currently does not support passing TrustedScript to the Function
  // constructor. The following implements the workaround proposed on the page
  // below, where the Chromium bug is also referenced:
  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor


  const fnArgs = args.slice(0, -1).join(',');
  const fnBody = args[args.length - 1];
  const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`; // Using eval directly confuses the compiler and prevents this module from
  // being stripped out of JS binaries even if not used. The global['eval']
  // indirection fixes that.

  const fn = _global['eval'](trustedScriptFromString(body));

  if (fn.bind === undefined) {
    // Workaround for a browser bug that only exists in Chrome 83, where passing
    // a TrustedScript to eval just returns the TrustedScript back without
    // evaluating it. In that case, fall back to the most straightforward
    // implementation:
    return new Function(...args);
  } // To completely mimic the behavior of calling "new Function", two more
  // things need to happen:
  // 1. Stringifying the resulting function should return its source code


  fn.toString = () => body; // 2. When calling the resulting function, `this` should refer to `global`


  return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,
  // the implementation of this function can be simplified to:
  // return new Function(...args.map(a => trustedScriptFromString(a)));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */


let policy;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */

function getPolicy() {
  if (policy === undefined) {
    policy = null;

    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {
          createHTML: s => s,
          createScript: s => s,
          createScriptURL: s => s
        });
      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is
        // already registered, even in report-only mode. Until the API changes,
        // catch the error not to break the applications functionally. In such
        // cases, the code will fall back to using strings.
      }
    }
  }

  return policy;
}
/**
 * Unsafely promote a string to a TrustedHTML, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedHTMLFromStringBypass(html) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
}
/**
 * Unsafely promote a string to a TrustedScript, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedScriptFromStringBypass(script) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
}
/**
 * Unsafely promote a string to a TrustedScriptURL, falling back to strings
 * when Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only passed strings that come directly from custom sanitizers or the
 * bypassSecurityTrust* functions.
 */


function trustedScriptURLFromStringBypass(url) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(url)) || url;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class SafeValueImpl {
  constructor(changingThisBreaksApplicationSecurity) {
    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
  }

  toString() {
    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see https://g.co/ng/security#xss)`;
  }

}

class SafeHtmlImpl extends SafeValueImpl {
  getTypeName() {
    return "HTML"
    /* Html */
    ;
  }

}

class SafeStyleImpl extends SafeValueImpl {
  getTypeName() {
    return "Style"
    /* Style */
    ;
  }

}

class SafeScriptImpl extends SafeValueImpl {
  getTypeName() {
    return "Script"
    /* Script */
    ;
  }

}

class SafeUrlImpl extends SafeValueImpl {
  getTypeName() {
    return "URL"
    /* Url */
    ;
  }

}

class SafeResourceUrlImpl extends SafeValueImpl {
  getTypeName() {
    return "ResourceURL"
    /* ResourceUrl */
    ;
  }

}

function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}

function allowSanitizationBypassAndThrow(value, type) {
  const actualType = getSanitizationBypassType(value);

  if (actualType != null && actualType !== type) {
    // Allow ResourceURLs in URL contexts, they are strictly more trusted.
    if (actualType === "ResourceURL"
    /* ResourceUrl */
    && type === "URL"
    /* Url */
    ) return true;
    throw new Error(`Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);
  }

  return actualType === type;
}

function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
/**
 * Mark `html` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link htmlSanitizer} to be trusted implicitly.
 *
 * @param trustedHtml `html` string which needs to be implicitly trusted.
 * @returns a `html` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
/**
 * Mark `style` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link styleSanitizer} to be trusted implicitly.
 *
 * @param trustedStyle `style` string which needs to be implicitly trusted.
 * @returns a `style` hich has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
/**
 * Mark `script` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link scriptSanitizer} to be trusted implicitly.
 *
 * @param trustedScript `script` string which needs to be implicitly trusted.
 * @returns a `script` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link urlSanitizer} to be trusted implicitly.
 *
 * @param trustedUrl `url` string which needs to be implicitly trusted.
 * @returns a `url`  which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
 *
 * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
 * @returns a `url` which has been branded to be implicitly trusted.
 */


function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
 * that needs sanitizing.
 * Depending upon browser support we use one of two strategies for doing this.
 * Default: DOMParser strategy
 * Fallback: InertDocument strategy
 */


function getInertBodyHelper(defaultDoc) {
  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
/**
 * Uses DOMParser to create and fill an inert body element.
 * This is the default strategy used in browsers that support it.
 */


class DOMParserHelper {
  constructor(inertDocumentHelper) {
    this.inertDocumentHelper = inertDocumentHelper;
  }

  getInertBodyElement(html) {
    // We add these extra elements to ensure that the rest of the content is parsed as expected
    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags
    // in `html` from consuming the otherwise explicit `</body>` tag.
    html = '<body><remove></remove>' + html;

    try {
      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;

      if (body === null) {
        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only
        // becomes available in the following tick of the JS engine. In that case we fall back to
        // the `inertDocumentHelper` instead.
        return this.inertDocumentHelper.getInertBodyElement(html);
      }

      body.removeChild(body.firstChild);
      return body;
    } catch (_a) {
      return null;
    }
  }

}
/**
 * Use an HTML5 `template` element, if supported, or an inert body element created via
 * `createHtmlDocument` to create and fill an inert DOM element.
 * This is the fallback strategy if the browser does not support DOMParser.
 */


class InertDocumentHelper {
  constructor(defaultDoc) {
    this.defaultDoc = defaultDoc;
    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');

    if (this.inertDocument.body == null) {
      // usually there should be only one body element in the document, but IE doesn't have any, so
      // we need to create one.
      const inertHtml = this.inertDocument.createElement('html');
      this.inertDocument.appendChild(inertHtml);
      const inertBodyElement = this.inertDocument.createElement('body');
      inertHtml.appendChild(inertBodyElement);
    }
  }

  getInertBodyElement(html) {
    // Prefer using <template> element if supported.
    const templateEl = this.inertDocument.createElement('template');

    if ('content' in templateEl) {
      templateEl.innerHTML = trustedHTMLFromString(html);
      return templateEl;
    } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
    // and we returned the inert `body` node. This was changed, because IE seems to treat setting
    // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
    // yet. In particular, IE appears to split some of the text into multiple text nodes rather
    // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
    // down the line. This has been worked around by creating a new inert `body` and using it as
    // the root node in which we insert the HTML.


    const inertBody = this.inertDocument.createElement('body');
    inertBody.innerHTML = trustedHTMLFromString(html); // Support: IE 11 only
    // strip custom-namespaced attributes on IE<=11

    if (this.defaultDoc.documentMode) {
      this.stripCustomNsAttrs(inertBody);
    }

    return inertBody;
  }
  /**
   * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
   * 'ns1:xlink:foo').
   *
   * This is undesirable since we don't want to allow any of these custom attributes. This method
   * strips them all.
   */


  stripCustomNsAttrs(el) {
    const elAttrs = el.attributes; // loop backwards so that we can support removals.

    for (let i = elAttrs.length - 1; 0 < i; i--) {
      const attrib = elAttrs.item(i);
      const attrName = attrib.name;

      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
        el.removeAttribute(attrName);
      }
    }

    let childNode = el.firstChild;

    while (childNode) {
      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);
      childNode = childNode.nextSibling;
    }
  }

}
/**
 * We need to determine whether the DOMParser exists in the global context and
 * supports parsing HTML; HTML parsing support is not as wide as other formats, see
 * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
 *
 * @suppress {uselessCode}
 */


function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');
  } catch (_a) {
    return false;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either an allowed protocol (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */


const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
/* A pattern that matches safe srcset values */

const SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/** A pattern that matches safe data URLs. Only matches image, video and audio types. */

const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;

function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;

  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);
  }

  return 'unsafe:' + url;
}

function sanitizeSrcset(srcset) {
  srcset = String(srcset);
  return srcset.split(',').map(srcset => _sanitizeUrl(srcset.trim())).join(', ');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function tagSet(tags) {
  const res = {};

  for (const t of tags.split(',')) res[t] = true;

  return res;
}

function merge(...sets) {
  const res = {};

  for (const s of sets) {
    for (const v in s) {
      if (s.hasOwnProperty(v)) res[v] = true;
    }
  }

  return res;
} // Good source of info about elements and attributes
// https://html.spec.whatwg.org/#semantics
// https://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// https://html.spec.whatwg.org/#void-elements


const VOID_ELEMENTS = /*#__PURE__*/tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
// https://html.spec.whatwg.org/#optional-tags

const OPTIONAL_END_TAG_BLOCK_ELEMENTS = /*#__PURE__*/tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
const OPTIONAL_END_TAG_INLINE_ELEMENTS = /*#__PURE__*/tagSet('rp,rt');
const OPTIONAL_END_TAG_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5

const BLOCK_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, /*#__PURE__*/tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5

const INLINE_ELEMENTS = /*#__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, /*#__PURE__*/tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
const VALID_ELEMENTS = /*#__PURE__*/merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized

const URI_ATTRS = /*#__PURE__*/tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href'); // Attributes that have special href set hence need to be sanitized

const SRCSET_ATTRS = /*#__PURE__*/tagSet('srcset');
const HTML_ATTRS = /*#__PURE__*/tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)

const ARIA_ATTRS = /*#__PURE__*/tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.

const VALID_ATTRS = /*#__PURE__*/merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
//
// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
// don't want to preserve the content, if the elements themselves are going to be removed.

const SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = /*#__PURE__*/tagSet('script,style,template');
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */

class SanitizingHtmlSerializer {
  constructor() {
    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
    // because characters were re-encoded.
    this.sanitizedSomething = false;
    this.buf = [];
  }

  sanitizeChildren(el) {
    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
    // However this code never accesses properties off of `document` before deleting its contents
    // again, so it shouldn't be vulnerable to DOM clobbering.
    let current = el.firstChild;
    let traverseContent = true;

    while (current) {
      if (current.nodeType === Node.ELEMENT_NODE) {
        traverseContent = this.startElement(current);
      } else if (current.nodeType === Node.TEXT_NODE) {
        this.chars(current.nodeValue);
      } else {
        // Strip non-element, non-text nodes.
        this.sanitizedSomething = true;
      }

      if (traverseContent && current.firstChild) {
        current = current.firstChild;
        continue;
      }

      while (current) {
        // Leaving the element. Walk up and to the right, closing tags as we go.
        if (current.nodeType === Node.ELEMENT_NODE) {
          this.endElement(current);
        }

        let next = this.checkClobberedElement(current, current.nextSibling);

        if (next) {
          current = next;
          break;
        }

        current = this.checkClobberedElement(current, current.parentNode);
      }
    }

    return this.buf.join('');
  }
  /**
   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
   * be traversed. Element content must always be traversed (even if the element itself is not
   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
   *
   * @param element The element to sanitize.
   * @return True if the element's contents should be traversed.
   */


  startElement(element) {
    const tagName = element.nodeName.toLowerCase();

    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
      this.sanitizedSomething = true;
      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
    }

    this.buf.push('<');
    this.buf.push(tagName);
    const elAttrs = element.attributes;

    for (let i = 0; i < elAttrs.length; i++) {
      const elAttr = elAttrs.item(i);
      const attrName = elAttr.name;
      const lower = attrName.toLowerCase();

      if (!VALID_ATTRS.hasOwnProperty(lower)) {
        this.sanitizedSomething = true;
        continue;
      }

      let value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...

      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
      this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
    }

    this.buf.push('>');
    return true;
  }

  endElement(current) {
    const tagName = current.nodeName.toLowerCase();

    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
      this.buf.push('</');
      this.buf.push(tagName);
      this.buf.push('>');
    }
  }

  chars(chars) {
    this.buf.push(encodeEntities(chars));
  }

  checkClobberedElement(node, nextNode) {
    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
    }

    return nextNode;
  }

} // Regular Expressions for parsing tags and attributes


const SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // ! to ~ is the ASCII range.

const NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 */

function encodeEntities(value) {
  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
    const hi = match.charCodeAt(0);
    const low = match.charCodeAt(1);
    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
    return '&#' + match.charCodeAt(0) + ';';
  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

let inertBodyHelper;
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 */

function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  let inertBodyElement = null;

  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).

    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.

    let mXSSAttempts = 5;
    let parsedHtml = unsafeHtml;

    do {
      if (mXSSAttempts === 0) {
        throw new Error('Failed to sanitize html because the input is unstable');
      }

      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);

    const sanitizer = new SanitizingHtmlSerializer();
    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);

    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');
    }

    return trustedHTMLFromString(safeHtml);
  } finally {
    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
    if (inertBodyElement) {
      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;

      while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
      }
    }
  }
}

function getTemplateContent(el) {
  return 'content' in el
  /** Microsoft/TypeScript#21517 */
  && isTemplateElement(el) ? el.content : null;
}

function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
 * handled.
 *
 * See DomSanitizer for more details on security in Angular applications.
 *
 * @publicApi
 */


var SecurityContext = /*#__PURE__*/(() => {
  SecurityContext = SecurityContext || {};
  SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
  SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
  SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
  SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext[SecurityContext["URL"] = 4] = "URL";
  SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  return SecurityContext;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
 * dangerous content.
 *
 * This method parses the `html` and locates potentially dangerous content (such as urls and
 * javascript) and removes it.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
 *
 * @param unsafeHtml untrusted `html`, typically from the user.
 * @returns `html` string which is safe to display to user, because all of the dangerous javascript
 * and urls have been removed.
 *
 * @codeGenApi
 */
function ɵɵsanitizeHtml(unsafeHtml) {
  const sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML"
  /* Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }

  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
/**
 * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
 * dangerous content.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
 *
 * @param unsafeStyle untrusted `style`, typically from the user.
 * @returns `style` string which is safe to bind to the `style` properties.
 *
 * @codeGenApi
 */


function ɵɵsanitizeStyle(unsafeStyle) {
  const sanitizer = getSanitizer();

  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
  }

  if (allowSanitizationBypassAndThrow(unsafeStyle, "Style"
  /* Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }

  return renderStringify(unsafeStyle);
}
/**
 * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
 * dangerous
 * content.
 *
 * This method parses the `url` and locates potentially dangerous content (such as javascript) and
 * removes it.
 *
 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
 *
 * @param unsafeUrl untrusted `url`, typically from the user.
 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * all of the dangerous javascript has been removed.
 *
 * @codeGenApi
 */


function ɵɵsanitizeUrl(unsafeUrl) {
  const sanitizer = getSanitizer();

  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
  }

  if (allowSanitizationBypassAndThrow(unsafeUrl, "URL"
  /* Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }

  return _sanitizeUrl(renderStringify(unsafeUrl));
}
/**
 * A `url` sanitizer which only lets trusted `url`s through.
 *
 * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
 *
 * @param unsafeResourceUrl untrusted `url`, typically from the user.
 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * only trusted `url`s have been allowed to pass.
 *
 * @codeGenApi
 */


function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
  const sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL"
  /* ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }

  const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)' : '';
  throw new RuntimeError(904
  /* UNSAFE_VALUE_IN_RESOURCE_URL */
  , errorMessage);
}
/**
 * A `script` sanitizer which only lets trusted javascript through.
 *
 * This passes only `script`s marked trusted by calling {@link
 * bypassSanitizationTrustScript}.
 *
 * @param unsafeScript untrusted `script`, typically from the user.
 * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
 * because only trusted `scripts` have been allowed to pass.
 *
 * @codeGenApi
 */


function ɵɵsanitizeScript(unsafeScript) {
  const sanitizer = getSanitizer();

  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');
  }

  if (allowSanitizationBypassAndThrow(unsafeScript, "Script"
  /* Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }

  const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'unsafe value used in a script context' : '';
  throw new RuntimeError(905
  /* UNSAFE_VALUE_IN_SCRIPT */
  , errorMessage);
}
/**
 * A template tag function for promoting the associated constant literal to a
 * TrustedHTML. Interpolation is explicitly not allowed.
 *
 * @param html constant template literal containing trusted HTML.
 * @returns TrustedHTML wrapping `html`.
 *
 * @security This is a security-sensitive function and should only be used to
 * convert constant values of attributes and properties found in
 * application-provided Angular templates to TrustedHTML.
 *
 * @codeGenApi
 */


function ɵɵtrustConstantHtml(html) {
  // The following runtime check ensures that the function was called as a
  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation
  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray
  // is an array with a `raw` property that is also an array. The associated
  // template literal has no interpolation if and only if the length of the
  // TemplateStringsArray is 1.
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);
  }

  return trustedHTMLFromString(html[0]);
}
/**
 * A template tag function for promoting the associated constant literal to a
 * TrustedScriptURL. Interpolation is explicitly not allowed.
 *
 * @param url constant template literal containing a trusted script URL.
 * @returns TrustedScriptURL wrapping `url`.
 *
 * @security This is a security-sensitive function and should only be used to
 * convert constant values of attributes and properties found in
 * application-provided Angular templates to TrustedScriptURL.
 *
 * @codeGenApi
 */


function ɵɵtrustConstantResourceUrl(url) {
  // The following runtime check ensures that the function was called as a
  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any
  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A
  // TemplateStringsArray is an array with a `raw` property that is also an
  // array. The associated template literal has no interpolation if and only if
  // the length of the TemplateStringsArray is 1.
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);
  }

  return trustedScriptURLFromString(url[0]);
}
/**
 * Detects which sanitizer to use for URL property, based on tag name and prop name.
 *
 * The rules are based on the RESOURCE_URL context config from
 * `packages/compiler/src/schema/dom_security_schema.ts`.
 * If tag and prop names don't match Resource URL schema, use URL sanitizer.
 */


function getUrlSanitizer(tag, prop) {
  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {
    return ɵɵsanitizeResourceUrl;
  }

  return ɵɵsanitizeUrl;
}
/**
 * Sanitizes URL, selecting sanitizer function based on tag and property names.
 *
 * This function is used in case we can't define security context at compile time, when only prop
 * name is available. This happens when we generate host bindings for Directives/Components. The
 * host element is unknown at compile time, so we defer calculation of specific sanitizer to
 * runtime.
 *
 * @param unsafeUrl untrusted `url`, typically from the user.
 * @param tag target element tag name.
 * @param prop name of the property that contains the value.
 * @returns `url` string which is safe to bind.
 *
 * @codeGenApi
 */


function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}

function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith('on')) {
    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;
    throw new RuntimeError(306
    /* INVALID_EVENT_BINDING */
    , errorMessage);
  }
}

function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith('on')) {
    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;
    throw new RuntimeError(306
    /* INVALID_EVENT_BINDING */
    , errorMessage);
  }
}

function getSanitizer() {
  const lView = getLView();
  return lView && lView[SANITIZER];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns the matching `LContext` data for a given DOM node, directive or component instance.
 *
 * This function will examine the provided DOM element, component, or directive instance\'s
 * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
 * value will be that of the newly created `LContext`.
 *
 * If the monkey-patched value is the `LView` instance then the context value for that
 * target will be created and the monkey-patch reference will be updated. Therefore when this
 * function is called it may mutate the provided element\'s, component\'s or any of the associated
 * directive\'s monkey-patch values.
 *
 * If the monkey-patch value is not detected then the code will walk up the DOM until an element
 * is found which contains a monkey-patch reference. When that occurs then the provided element
 * will be updated with a new context (which is then returned). If the monkey-patch value is not
 * detected for a component/directive instance then it will throw an error (all components and
 * directives should be automatically monkey-patched by ivy).
 *
 * @param target Component, Directive or DOM Node.
 */


function getLContext(target) {
  let mpValue = readPatchedData(target);

  if (mpValue) {
    // only when it's an array is it considered an LView instance
    // ... otherwise it's an already constructed LContext instance
    if (Array.isArray(mpValue)) {
      const lView = mpValue;
      let nodeIndex;
      let component = undefined;
      let directives = undefined;

      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);

        if (nodeIndex == -1) {
          throw new Error('The provided component was not found in the application');
        }

        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);

        if (nodeIndex == -1) {
          throw new Error('The provided directive was not found in the application');
        }

        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
      } else {
        nodeIndex = findViaNativeElement(lView, target);

        if (nodeIndex == -1) {
          return null;
        }
      } // the goal is not to fill the entire context full of data because the lookups
      // are expensive. Instead, only the target data (the element, component, container, ICU
      // expression or directive details) are filled into the context. If called multiple times
      // with different target values then the missing target data will be filled in.


      const native = unwrapRNode(lView[nodeIndex]);
      const existingCtx = readPatchedData(native);
      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native); // only when the component has been discovered then update the monkey-patch

      if (component && context.component === undefined) {
        context.component = component;
        attachPatchData(context.component, context);
      } // only when the directives have been discovered then update the monkey-patch


      if (directives && context.directives === undefined) {
        context.directives = directives;

        for (let i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context);
        }
      }

      attachPatchData(context.native, context);
      mpValue = context;
    }
  } else {
    const rElement = target;
    ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM
    // to find the nearest element that has already been monkey patched with data

    let parent = rElement;

    while (parent = parent.parentNode) {
      const parentContext = readPatchedData(parent);

      if (parentContext) {
        let lView;

        if (Array.isArray(parentContext)) {
          lView = parentContext;
        } else {
          lView = parentContext.lView;
        } // the edge of the app was also reached here through another means
        // (maybe because the DOM was changed manually).


        if (!lView) {
          return null;
        }

        const index = findViaNativeElement(lView, rElement);

        if (index >= 0) {
          const native = unwrapRNode(lView[index]);
          const context = createLContext(lView, index, native);
          attachPatchData(native, context);
          mpValue = context;
          break;
        }
      }
    }
  }

  return mpValue || null;
}
/**
 * Creates an empty instance of a `LContext` context
 */


function createLContext(lView, nodeIndex, native) {
  return {
    lView,
    nodeIndex,
    native,
    component: undefined,
    directives: undefined,
    localRefs: undefined
  };
}
/**
 * Takes a component instance and returns the view for that component.
 *
 * @param componentInstance
 * @returns The component's view
 */


function getComponentViewByInstance(componentInstance) {
  let lView = readPatchedData(componentInstance);
  let view;

  if (Array.isArray(lView)) {
    const nodeIndex = findViaComponent(lView, componentInstance);
    view = getComponentLViewByIndex(nodeIndex, lView);
    const context = createLContext(lView, nodeIndex, view[HOST]);
    context.component = componentInstance;
    attachPatchData(componentInstance, context);
    attachPatchData(context.native, context);
  } else {
    const context = lView;
    view = getComponentLViewByIndex(context.nodeIndex, context.lView);
  }

  return view;
}
/**
 * This property will be monkey-patched on elements, components and directives.
 */


const MONKEY_PATCH_KEY_NAME = '__ngContext__';
/**
 * Assigns the given data to the given target (which could be a component,
 * directive or DOM node instance) using monkey-patching.
 */

function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, 'Target expected');
  target[MONKEY_PATCH_KEY_NAME] = data;
}
/**
 * Returns the monkey-patch value data present on the target (which could be
 * a component, directive or a DOM node).
 */


function readPatchedData(target) {
  ngDevMode && assertDefined(target, 'Target expected');
  return target[MONKEY_PATCH_KEY_NAME] || null;
}

function readPatchedLView(target) {
  const value = readPatchedData(target);

  if (value) {
    return Array.isArray(value) ? value : value.lView;
  }

  return null;
}

function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.ɵcmp;
}

function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.ɵdir;
}
/**
 * Locates the element within the given LView and returns the matching index
 */


function findViaNativeElement(lView, target) {
  const tView = lView[TVIEW];

  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }

  return -1;
}
/**
 * Locates the next tNode (child, sibling or parent).
 */


function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    // Let's take the following template: <div><span>text</span></div><component/>
    // After checking the text node, we need to find the next parent that has a "next" TNode,
    // in this case the parent `div`, so that we can find the component.
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }

    return tNode.parent && tNode.parent.next;
  }
}
/**
 * Locates the component within the given LView and returns the matching index
 */


function findViaComponent(lView, componentInstance) {
  const componentIndices = lView[TVIEW].components;

  if (componentIndices) {
    for (let i = 0; i < componentIndices.length; i++) {
      const elementComponentIndex = componentIndices[i];
      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);

      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    const rootComponent = rootComponentView[CONTEXT];

    if (rootComponent === componentInstance) {
      // we are dealing with the root element here therefore we know that the
      // element is the very first element after the HEADER data in the lView
      return HEADER_OFFSET;
    }
  }

  return -1;
}
/**
 * Locates the directive within the given LView and returns the matching index
 */


function findViaDirective(lView, directiveInstance) {
  // if a directive is monkey patched then it will (by default)
  // have a reference to the LView of the current view. The
  // element bound to the directive being search lives somewhere
  // in the view data. We loop through the nodes and check their
  // list of directives for the instance.
  let tNode = lView[TVIEW].firstChild;

  while (tNode) {
    const directiveIndexStart = tNode.directiveStart;
    const directiveIndexEnd = tNode.directiveEnd;

    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }

    tNode = traverseNextElement(tNode);
  }

  return -1;
}
/**
 * Returns a list of directives extracted from the given view based on the
 * provided list of directive index values.
 *
 * @param nodeIndex The node index
 * @param lView The target view data
 * @param includeComponents Whether or not to include components in returned directives
 */


function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
  const tNode = lView[TVIEW].data[nodeIndex];
  let directiveStartIndex = tNode.directiveStart;
  if (directiveStartIndex == 0) return EMPTY_ARRAY;
  const directiveEndIndex = tNode.directiveEnd;
  if (!includeComponents && tNode.flags & 2
  /* isComponentHost */
  ) directiveStartIndex++;
  return lView.slice(directiveStartIndex, directiveEndIndex);
}

function getComponentAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  let directiveStartIndex = tNode.directiveStart;
  return tNode.flags & 2
  /* isComponentHost */
  ? lView[directiveStartIndex] : null;
}
/**
 * Returns a map of local references (local reference name => element or directive instance) that
 * exist on a given element.
 */


function discoverLocalRefs(lView, nodeIndex) {
  const tNode = lView[TVIEW].data[nodeIndex];

  if (tNode && tNode.localNames) {
    const result = {};
    let localIndex = tNode.index + 1;

    for (let i = 0; i < tNode.localNames.length; i += 2) {
      result[tNode.localNames[i]] = lView[localIndex];
      localIndex++;
    }

    return result;
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const ERROR_ORIGINAL_ERROR = 'ngOriginalError';
const ERROR_LOGGER = 'ngErrorLogger';

function wrappedError(message, originalError) {
  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;
  const error = Error(msg);
  error[ERROR_ORIGINAL_ERROR] = originalError;
  return error;
}

function getOriginalError(error) {
  return error[ERROR_ORIGINAL_ERROR];
}

function getErrorLogger(error) {
  return error && error[ERROR_LOGGER] || defaultErrorLogger;
}

function defaultErrorLogger(console, ...values) {
  console.error(...values);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * @NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * @publicApi
 */


class ErrorHandler {
  constructor() {
    /**
     * @internal
     */
    this._console = console;
  }

  handleError(error) {
    const originalError = this._findOriginalError(error); // Note: Browser consoles show the place from where console.error was called.
    // We can use this to give users additional information about the error.


    const errorLogger = getErrorLogger(error);
    errorLogger(this._console, `ERROR`, error);

    if (originalError) {
      errorLogger(this._console, `ORIGINAL ERROR`, originalError);
    }
  }
  /** @internal */


  _findOriginalError(error) {
    let e = error && getOriginalError(error);

    while (e && getOriginalError(e)) {
      e = getOriginalError(e);
    }

    return e || null;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines a schema that allows an NgModule to contain the following:
 * - Non-Angular elements named with dash case (`-`).
 * - Element properties named with dash case (`-`).
 * Dash case is the naming convention for custom elements.
 *
 * @publicApi
 */


const CUSTOM_ELEMENTS_SCHEMA = {
  name: 'custom-elements'
};
/**
 * Defines a schema that allows any property on any element.
 *
 * This schema allows you to ignore the errors related to any unknown elements or properties in a
 * template. The usage of this schema is generally discouraged because it prevents useful validation
 * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.
 *
 * @publicApi
 */

const NO_ERRORS_SCHEMA = {
  name: 'no-errors-schema'
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Disallowed strings in the comment.
 *
 * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
 */

const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
/**
 * Delimiter in the disallowed strings which needs to be wrapped with zero with character.
 */

const COMMENT_DELIMITER = /(<|>)/;
const COMMENT_DELIMITER_ESCAPED = '\u200B$1\u200B';
/**
 * Escape the content of comment strings so that it can be safely inserted into a comment node.
 *
 * The issue is that HTML does not specify any way to escape comment end text inside the comment.
 * Consider: `<!-- The way you close a comment is with ">", and "->" at the beginning or by "-->" or
 * "--!>" at the end. -->`. Above the `"-->"` is meant to be text not an end to the comment. This
 * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)
 *
 * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
 *
 * ```
 * div.innerHTML = div.innerHTML
 * ```
 *
 * One would expect that the above code would be safe to do, but it turns out that because comment
 * text is not escaped, the comment may contain text which will prematurely close the comment
 * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which
 * may contain such text and expect them to be safe.)
 *
 * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and
 * surrounding them with `_>_` where the `_` is a zero width space `\u200B`. The result is that if a
 * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the
 * text it will render normally but it will not cause the HTML parser to close/open the comment.
 *
 * @param value text to make safe for comment node by escaping the comment open/close character
 *     sequence.
 */

function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function normalizeDebugBindingName(name) {
  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
  return `ng-reflect-${name}`;
}

const CAMEL_CASE_REGEXP = /([A-Z])/g;

function camelCaseToDashCase(input) {
  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());
}

function normalizeDebugBindingValue(value) {
  try {
    // Limit the size of the value as otherwise the DOM just gets polluted.
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e) {
    return '[ERROR] Exception while trying to serialize the value';
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const defaultScheduler = /*#__PURE__*/(() => (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
setTimeout // everything else
).bind(_global))();
/**
 *
 * @codeGenApi
 */


function ɵɵresolveWindow(element) {
  return element.ownerDocument.defaultView;
}
/**
 *
 * @codeGenApi
 */


function ɵɵresolveDocument(element) {
  return element.ownerDocument;
}
/**
 *
 * @codeGenApi
 */


function ɵɵresolveBody(element) {
  return element.ownerDocument.body;
}
/**
 * The special delimiter we use to separate property names, prefixes, and suffixes
 * in property binding metadata. See storeBindingMetadata().
 *
 * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
 * because it is a very uncommon character that is unlikely to be part of a user's
 * property names or interpolation strings. If it is in fact used in a property
 * binding, DebugElement.properties will not return the correct value for that
 * binding. However, there should be no runtime effect for real applications.
 *
 * This character is typically rendered as a question mark inside of a diamond.
 * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
 *
 */


const INTERPOLATION_DELIMITER = `�`;
/**
 * Unwrap a value which might be behind a closure (for forward declaration reasons).
 */

function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Called when there are multiple component selectors that match a given node */


function throwMultipleComponentError(tNode, first, second) {
  throw new RuntimeError(-300
  /* MULTIPLE_COMPONENTS_MATCH */
  , `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);
}
/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */


function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
  const field = propName ? ` for '${propName}'` : '';
  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;

  if (creationMode) {
    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;
  }

  throw new RuntimeError(-100
  /* EXPRESSION_CHANGED_AFTER_CHECKED */
  , msg);
}

function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
  let oldValue = prefix,
      newValue = prefix;

  for (let i = 0; i < chunks.length; i++) {
    const slotIdx = rootIndex + i;
    oldValue += `${lView[slotIdx]}${chunks[i]}`;
    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
  }

  return {
    propName,
    oldValue,
    newValue
  };
}
/**
 * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
 * - property name (for property bindings or interpolations)
 * - old and new values, enriched using information from metadata
 *
 * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
 * function description.
 */


function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  const tData = lView[TVIEW].data;
  const metadata = tData[bindingIndex];

  if (typeof metadata === 'string') {
    // metadata for property interpolation
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    } // metadata for property binding


    return {
      propName: metadata,
      oldValue,
      newValue
    };
  } // metadata is not available for this expression, check if this expression is a part of the
  // property interpolation by going from the current binding index left and look for a string that
  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
  // [..., 'id�Prefix � and � suffix', null, null, null, ...]


  if (metadata === null) {
    let idx = bindingIndex - 1;

    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
      idx--;
    }

    const meta = tData[idx];

    if (typeof meta === 'string') {
      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of
      // property interpolations), so we subtract one from total number of found delimiters

      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }

  return {
    propName: undefined,
    oldValue,
    newValue
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Flags for renderer-specific style modifiers.
 * @publicApi
 */


var RendererStyleFlags2 = /*#__PURE__*/(() => {
  RendererStyleFlags2 = RendererStyleFlags2 || {};
  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.

  /**
   * Marks a style as important.
   */
  RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
  /**
   * Marks a style as using dash case naming (this-is-dash-case).
   */

  RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
  return RendererStyleFlags2;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
let _icuContainerIterate;
/**
 * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.
 */


function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
/**
 * Ensures that `IcuContainerVisitor`'s implementation is present.
 *
 * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the
 * bundler to tree shake ICU logic and only load it if ICU instruction is executed.
 */


function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === undefined) {
    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it
    // can be inlined into call-site.
    _icuContainerIterate = loader();
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


const unusedValueExportToPlacateAjd$3 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
 * that LContainer, which is an LView
 * @param lView the lView whose parent to get
 */

function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  const parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
/**
 * Retrieve the root view from any component or `LView` by walking the parent `LView` until
 * reaching the root `LView`.
 *
 * @param componentOrLView any component or `LView`
 */


function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, 'component');
  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);

  while (lView && !(lView[FLAGS] & 512
  /* IsRoot */
  )) {
    lView = getLViewParent(lView);
  }

  ngDevMode && assertLView(lView);
  return lView;
}
/**
 * Returns the `RootContext` instance that is associated with
 * the application where the target is situated. It does this by walking the parent views until it
 * gets to the root view, then getting the context off of that.
 *
 * @param viewOrComponent the `LView` or component to get the root context for.
 */


function getRootContext(viewOrComponent) {
  const rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
  return rootView[CONTEXT];
}
/**
 * Gets the first `LContainer` in the LView or `null` if none exists.
 */


function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
/**
 * Gets the next `LContainer` that is a sibling of the given container.
 */


function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}

function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }

  return viewOrContainer;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$8 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$6 + unusedValueExportToPlacateAjd$7;
/**
 * NOTE: for performance reasons, the possible actions are inlined within the function instead of
 * being passed as an argument.
 */

function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  // If this slot was allocated for a text node dynamically created by i18n, the text node itself
  // won't be created until i18nApply() in the update block, so this node should be skipped.
  // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
  // in `i18n_spec.ts`.
  if (lNodeToHandle != null) {
    let lContainer;
    let isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
    // it has LContainer so that we can process all of those cases appropriately.

    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
      lNodeToHandle = lNodeToHandle[HOST];
    }

    const rNode = unwrapRNode(lNodeToHandle);
    ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);

    if (action === 0
    /* Create */
    && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1
    /* Insert */
    && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2
    /* Detach */
    ) {
      nativeRemoveNode(renderer, rNode, isComponent);
    } else if (action === 3
    /* Destroy */
    ) {
      ngDevMode && ngDevMode.rendererDestroyNode++;
      renderer.destroyNode(rNode);
    }

    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}

function createTextNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateTextNode++;
  ngDevMode && ngDevMode.rendererSetText++;
  return isProceduralRenderer(renderer) ? renderer.createText(value) : renderer.createTextNode(value);
}

function updateTextNode(renderer, rNode, value) {
  ngDevMode && ngDevMode.rendererSetText++;
  isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;
}

function createCommentNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateComment++; // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same
  // method name.

  return renderer.createComment(escapeCommentText(value));
}
/**
 * Creates a native element from a tag name, using a renderer.
 * @param renderer A renderer to use
 * @param name the tag name
 * @param namespace Optional namespace for element.
 * @returns the element created
 */


function createElementNode(renderer, name, namespace) {
  ngDevMode && ngDevMode.rendererCreateElement++;

  if (isProceduralRenderer(renderer)) {
    return renderer.createElement(name, namespace);
  } else {
    const namespaceUri = namespace !== null ? getNamespaceUri(namespace) : null;
    return namespaceUri === null ? renderer.createElement(name) : renderer.createElementNS(namespaceUri, name);
  }
}
/**
 * Removes all DOM elements associated with a view.
 *
 * Because some root nodes of the view may be containers, we sometimes need
 * to propagate deeply into the nested containers to remove all elements in the
 * views beneath it.
 *
 * @param tView The `TView' of the `LView` from which elements should be added or removed
 * @param lView The view from which elements should be added or removed
 */


function removeViewFromContainer(tView, lView) {
  const renderer = lView[RENDERER];
  applyView(tView, lView, renderer, 2
  /* Detach */
  , null, null);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
/**
 * Adds all DOM elements associated with a view.
 *
 * Because some root nodes of the view may be containers, we sometimes need
 * to propagate deeply into the nested containers to add all elements in the
 * views beneath it.
 *
 * @param tView The `TView' of the `LView` from which elements should be added or removed
 * @param parentTNode The `TNode` where the `LView` should be attached to.
 * @param renderer Current renderer to use for DOM manipulations.
 * @param lView The view from which elements should be added or removed
 * @param parentNativeNode The parent `RElement` where it should be inserted into.
 * @param beforeNode The node before which elements should be added, if insert mode
 */


function addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1
  /* Insert */
  , parentNativeNode, beforeNode);
}
/**
 * Detach a `LView` from the DOM by detaching its nodes.
 *
 * @param tView The `TView' of the `LView` to be detached
 * @param lView the `LView` to be detached.
 */


function renderDetachView(tView, lView) {
  applyView(tView, lView, lView[RENDERER], 2
  /* Detach */
  , null, null);
}
/**
 * Traverses down and up the tree of views and containers to remove listeners and
 * call onDestroy callbacks.
 *
 * Notes:
 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
 *  - Must process containers instead of their views to avoid splicing
 *  when views are destroyed and re-added.
 *  - Using a while loop because it's faster than recursion
 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
 *
 *  @param rootView The view to destroy
 */


function destroyViewTree(rootView) {
  // If the view has no children, we can clean it up and return early.
  let lViewOrLContainer = rootView[CHILD_HEAD];

  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }

  while (lViewOrLContainer) {
    let next = null;

    if (isLView(lViewOrLContainer)) {
      // If LView, traverse down to child.
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.

      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView) next = firstView;
    }

    if (!next) {
      // Only clean up view when moving to the side or up, as destroy hooks
      // should be called in order from the bottom up.
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }

        lViewOrLContainer = lViewOrLContainer[PARENT];
      }

      if (lViewOrLContainer === null) lViewOrLContainer = rootView;

      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }

      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }

    lViewOrLContainer = next;
  }
}
/**
 * Inserts a view into a container.
 *
 * This adds the view to the container's array of active views in the correct
 * position. It also adds the view's elements to the DOM if the container isn't a
 * root node of another view (in that case, the view's elements will be added when
 * the container's parent view is added later).
 *
 * @param tView The `TView' of the `LView` to insert
 * @param lView The view to insert
 * @param lContainer The container into which the view should be inserted
 * @param index Which index in the container to insert the child view into
 */


function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  const indexInContainer = CONTAINER_HEADER_OFFSET + index;
  const containerLength = lContainer.length;

  if (index > 0) {
    // This is a new view, we need to add it to the children.
    lContainer[indexInContainer - 1][NEXT] = lView;
  }

  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }

  lView[PARENT] = lContainer; // track views where declaration and insertion points are different

  const declarationLContainer = lView[DECLARATION_LCONTAINER];

  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  } // notify query that a new view has been added


  const lQueries = lView[QUERIES];

  if (lQueries !== null) {
    lQueries.insertView(tView);
  } // Sets the attached flag


  lView[FLAGS] |= 128
  /* Attached */
  ;
}
/**
 * Track views created from the declaration container (TemplateRef) and inserted into a
 * different LContainer.
 */


function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, 'LView required');
  ngDevMode && assertLContainer(declarationContainer);
  const movedViews = declarationContainer[MOVED_VIEWS];
  const insertedLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertedLContainer);
  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');

  if (declaredComponentLView !== insertedComponentLView) {
    // At this point the declaration-component is not same as insertion-component; this means that
    // this is a transplanted view. Mark the declared lView as having transplanted views so that
    // those views can participate in CD.
    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
  }

  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}

function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
  const movedViews = declarationContainer[MOVED_VIEWS];
  const declarationViewIndex = movedViews.indexOf(lView);
  const insertionLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag
  // would be cleared and the counter decremented), we need to decrement the view counter here
  // instead.

  if (lView[FLAGS] & 1024
  /* RefreshTransplantedView */
  ) {
    lView[FLAGS] &= ~1024
    /* RefreshTransplantedView */
    ;
    updateTransplantedViewCount(insertionLContainer, -1);
  }

  movedViews.splice(declarationViewIndex, 1);
}
/**
 * Detaches a view from a container.
 *
 * This method removes the view from the container's array of active views. It also
 * removes the view's elements from the DOM.
 *
 * @param lContainer The container from which to detach a view
 * @param removeIndex The index of the view to detach
 * @returns Detached LView instance.
 */


function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  const viewToDetach = lContainer[indexInContainer];

  if (viewToDetach) {
    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];

    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }

    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }

    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach); // notify query that a view has been removed

    const lQueries = removedLView[QUERIES];

    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }

    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null; // Unsets the attached flag

    viewToDetach[FLAGS] &= ~128
    /* Attached */
    ;
  }

  return viewToDetach;
}
/**
 * A standalone function which destroys an LView,
 * conducting clean up (e.g. removing listeners, calling onDestroys).
 *
 * @param tView The `TView' of the `LView` to be destroyed
 * @param lView The view to be destroyed.
 */


function destroyLView(tView, lView) {
  if (!(lView[FLAGS] & 256
  /* Destroyed */
  )) {
    const renderer = lView[RENDERER];

    if (isProceduralRenderer(renderer) && renderer.destroyNode) {
      applyView(tView, lView, renderer, 3
      /* Destroy */
      , null, null);
    }

    destroyViewTree(lView);
  }
}
/**
 * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
 * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
 * can be propagated to @Output listeners.
 *
 * @param tView `TView` for the `LView` to clean up.
 * @param lView The LView to clean up
 */


function cleanUpView(tView, lView) {
  if (!(lView[FLAGS] & 256
  /* Destroyed */
  )) {
    // Usually the Attached flag is removed when the view is detached from its parent, however
    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
    lView[FLAGS] &= ~128
    /* Attached */
    ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
    // really more of an "afterDestroy" hook if you think about it.

    lView[FLAGS] |= 256
    /* Destroyed */
    ;
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView); // For component views only, the local renderer is destroyed at clean up time.

    if (lView[TVIEW].type === 1
    /* Component */
    && isProceduralRenderer(lView[RENDERER])) {
      ngDevMode && ngDevMode.rendererDestroy++;
      lView[RENDERER].destroy();
    }

    const declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container

    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      // and this is a projected view
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      } // For embedded views still attached to a container: remove query result from this view.


      const lQueries = lView[QUERIES];

      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
  }
}
/** Removes listeners and unsubscribes from output subscriptions */


function processCleanups(tView, lView) {
  const tCleanup = tView.cleanup;
  const lCleanup = lView[CLEANUP]; // `LCleanup` contains both share information with `TCleanup` as well as instance specific
  // information appended at the end. We need to know where the end of the `TCleanup` information
  // is, and we track this with `lastLCleanupIndex`.

  let lastLCleanupIndex = -1;

  if (tCleanup !== null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === 'string') {
        // This is a native DOM listener
        const idxOrTargetGetter = tCleanup[i + 1];
        const target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);
        const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];
        const useCaptureOrSubIdx = tCleanup[i + 3];

        if (typeof useCaptureOrSubIdx === 'boolean') {
          // native DOM listener registered with Renderer3
          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
        } else {
          if (useCaptureOrSubIdx >= 0) {
            // unregister
            lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();
          } else {
            // Subscription
            lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();
          }
        }

        i += 2;
      } else {
        // This is a cleanup function that is grouped with the index of its context
        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];
        tCleanup[i].call(context);
      }
    }
  }

  if (lCleanup !== null) {
    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {
      const instanceCleanupFn = lCleanup[i];
      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');
      instanceCleanupFn();
    }

    lView[CLEANUP] = null;
  }
}
/** Calls onDestroy hooks for this view */


function executeOnDestroys(tView, lView) {
  let destroyHooks;

  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (let i = 0; i < destroyHooks.length; i += 2) {
      const context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.

      if (!(context instanceof NodeInjectorFactory)) {
        const toCall = destroyHooks[i + 1];

        if (Array.isArray(toCall)) {
          for (let j = 0; j < toCall.length; j += 2) {
            const callContext = context[toCall[j]];
            const hook = toCall[j + 1];
            profiler(4
            /* LifecycleHookStart */
            , callContext, hook);

            try {
              hook.call(callContext);
            } finally {
              profiler(5
              /* LifecycleHookEnd */
              , callContext, hook);
            }
          }
        } else {
          profiler(4
          /* LifecycleHookStart */
          , context, toCall);

          try {
            toCall.call(context);
          } finally {
            profiler(5
            /* LifecycleHookEnd */
            , context, toCall);
          }
        }
      }
    }
  }
}
/**
 * Returns a native element if a node can be inserted into the given parent.
 *
 * There are two reasons why we may not be able to insert a element immediately.
 * - Projection: When creating a child content element of a component, we have to skip the
 *   insertion because the content of a component will be projected.
 *   `<component><content>delayed due to projection</content></component>`
 * - Parent container is disconnected: This can happen when we are inserting a view into
 *   parent container, which itself is disconnected. For example the parent container is part
 *   of a View which has not be inserted or is made for projection but has not been inserted
 *   into destination.
 *
 * @param tView: Current `TView`.
 * @param tNode: `TNode` for which we wish to retrieve render parent.
 * @param lView: Current `LView`.
 */


function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
/**
 * Get closest `RElement` or `null` if it can't be found.
 *
 * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.
 * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).
 * If `TNode` is `null` then return host `RElement`:
 *   - return `null` if projection
 *   - return `null` if parent container is disconnected (we have no parent.)
 *
 * @param tView: Current `TView`.
 * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is
 *     needed).
 * @param lView: Current `LView`.
 * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)
 */


function getClosestRElement(tView, tNode, lView) {
  let parentTNode = tNode; // Skip over element and ICU containers as those are represented by a comment node and
  // can't be used as a render parent.

  while (parentTNode !== null && parentTNode.type & (8
  /* ElementContainer */
  | 32
  /* Icu */
  )) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  } // If the parent tNode is null, then we are inserting across views: either into an embedded view
  // or a component view.


  if (parentTNode === null) {
    // We are inserting a root element of the component view into the component host element and
    // it should always be eager.
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(parentTNode, 3
    /* AnyRNode */
    | 4
    /* Container */
    );

    if (parentTNode.flags & 2
    /* isComponentHost */
    ) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      const encapsulation = tView.data[parentTNode.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the
      // parent element is not a component. Component's content nodes are not inserted immediately
      // because they will be projected, and so doing insert at this point would be wasteful.
      // Since the projection would then move it to its final destination. Note that we can't
      // make this assumption when using the Shadow DOM, because the native projection placeholders
      // (<content> or <slot>) have to be in place as elements are being inserted.

      if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {
        return null;
      }
    }

    return getNativeByTNode(parentTNode, lView);
  }
}
/**
 * Inserts a native node before another native node for a given parent using {@link Renderer3}.
 * This is a utility function that can be used when native nodes were determined - it abstracts an
 * actual renderer being used.
 */


function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  ngDevMode && ngDevMode.rendererInsertBefore++;

  if (isProceduralRenderer(renderer)) {
    renderer.insertBefore(parent, child, beforeNode, isMove);
  } else {
    parent.insertBefore(child, beforeNode, isMove);
  }
}

function nativeAppendChild(renderer, parent, child) {
  ngDevMode && ngDevMode.rendererAppendChild++;
  ngDevMode && assertDefined(parent, 'parent node must be defined');

  if (isProceduralRenderer(renderer)) {
    renderer.appendChild(parent, child);
  } else {
    parent.appendChild(child);
  }
}

function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
/** Removes a node from the DOM given its native parent. */


function nativeRemoveChild(renderer, parent, child, isHostElement) {
  if (isProceduralRenderer(renderer)) {
    renderer.removeChild(parent, child, isHostElement);
  } else {
    parent.removeChild(child);
  }
}
/**
 * Returns a native parent of a given native node.
 */


function nativeParentNode(renderer, node) {
  return isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode;
}
/**
 * Returns a native sibling of a given native node.
 */


function nativeNextSibling(renderer, node) {
  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
}
/**
 * Find a node in front of which `currentTNode` should be inserted.
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
/**
 * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into
 * account)
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * does not take `TNode.insertBeforeIndex` into account.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8
  /* ElementContainer */
  | 32
  /* Icu */
  )) {
    return getNativeByTNode(parentTNode, lView);
  }

  return null;
}
/**
 * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.
 *
 * This function will only be set if i18n code runs.
 */


let _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
/**
 * Tree shakable boundary for `processI18nInsertBefore` function.
 *
 * This function will only be set if i18n code runs.
 */

let _processI18nInsertBefore;

function setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;
  _processI18nInsertBefore = processI18nInsertBefore;
}
/**
 * Appends the `child` native node (or a collection of nodes) to the `parent`.
 *
 * @param tView The `TView' to be appended
 * @param lView The current LView
 * @param childRNode The native child (or children) that should be appended
 * @param childTNode The TNode of the child element
 */


function appendChild(tView, lView, childRNode, childTNode) {
  const parentRNode = getParentRElement(tView, childTNode, lView);
  const renderer = lView[RENDERER];
  const parentTNode = childTNode.parent || lView[T_HOST];
  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);

  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (let i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }

  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
/**
 * Returns the first native node for a given LView, starting from the provided TNode.
 *
 * Native nodes are returned in the order in which those appear in the native tree (DOM).
 */


function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 32
    /* Icu */
    | 16
    /* Projection */
    );
    const tNodeType = tNode.type;

    if (tNodeType & 3
    /* AnyRNode */
    ) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4
    /* Container */
    ) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8
    /* ElementContainer */
    ) {
      const elIcuContainerChild = tNode.child;

      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        const rNodeOrLContainer = lView[tNode.index];

        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 32
    /* Icu */
    ) {
      let nextRNode = icuContainerIterate(tNode, lView);
      let rNode = nextRNode(); // If the ICU container has no nodes, than we use the ICU anchor as the node.

      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      const projectionNodes = getProjectionNodes(lView, tNode);

      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }

        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }

  return null;
}

function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }

  return null;
}

function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;

  if (nextViewIndex < lContainer.length) {
    const lView = lContainer[nextViewIndex];
    const firstTNodeOfView = lView[TVIEW].firstChild;

    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }

  return lContainer[NATIVE];
}
/**
 * Removes a native node itself using a given renderer. To remove the node we are looking up its
 * parent from the native tree as not all platforms / browsers support the equivalent of
 * node.remove().
 *
 * @param renderer A renderer to be used
 * @param rNode The native node that should be removed
 * @param isHostElement A flag indicating if a node to be removed is a host of a component.
 */


function nativeRemoveNode(renderer, rNode, isHostElement) {
  ngDevMode && ngDevMode.rendererRemoveNode++;
  const nativeParent = nativeParentNode(renderer, rNode);

  if (nativeParent) {
    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
  }
}
/**
 * Performs the operation of `action` on the node. Typically this involves inserting or removing
 * nodes on the LView or projection boundary.
 */


function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 16
    /* Projection */
    | 32
    /* Icu */
    );
    const rawSlotValue = lView[tNode.index];
    const tNodeType = tNode.type;

    if (isProjection) {
      if (action === 0
      /* Create */
      ) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 4
        /* isProjected */
        ;
      }
    }

    if ((tNode.flags & 64
    /* isDetached */
    ) !== 64
    /* isDetached */
    ) {
      if (tNodeType & 8
      /* ElementContainer */
      ) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32
      /* Icu */
      ) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;

        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }

        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16
      /* Projection */
      ) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(tNode, 3
        /* AnyRNode */
        | 4
        /* Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }

    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}

function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
/**
 * `applyProjection` performs operation on the projection.
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
 * @param lView The `LView` which needs to be inserted, detached, destroyed.
 * @param tProjectionNode node to project
 */


function applyProjection(tView, lView, tProjectionNode) {
  const renderer = lView[RENDERER];
  const parentRNode = getParentRElement(tView, tProjectionNode, lView);
  const parentTNode = tProjectionNode.parent || lView[T_HOST];
  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0
  /* Create */
  , lView, tProjectionNode, parentRNode, beforeNode);
}
/**
 * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
 * detach, destroy)
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param renderer Render to use
 * @param action action to perform (insert, detach, destroy)
 * @param lView The LView which needs to be inserted, detached, destroyed.
 * @param tProjectionNode node to project
 * @param parentRElement parent DOM element for insertion/removal.
 * @param beforeNode Before which node the insertions should happen.
 */


function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  const componentLView = lView[DECLARATION_COMPONENT_VIEW];
  const componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];

  if (Array.isArray(nodeToProjectOrRNodes)) {
    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
    // need to support passing projectable nodes, so we cheat and put them in the TNode
    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
    // because we know that that TView is not shared and therefore it will not be a problem.
    // This should be refactored and cleaned up.
    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
      const rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    let nodeToProject = nodeToProjectOrRNodes;
    const projectedComponentLView = componentLView[PARENT];
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
/**
 * `applyContainer` performs an operation on the container and its views as specified by
 * `action` (insert, detach, destroy)
 *
 * Inserting a Container is complicated by the fact that the container may have Views which
 * themselves have containers or projections.
 *
 * @param renderer Renderer to use
 * @param action action to perform (insert, detach, destroy)
 * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
 * @param parentRElement parent DOM element for insertion/removal.
 * @param beforeNode Before which node the insertions should happen.
 */


function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  const anchor = lContainer[NATIVE]; // LContainer has its own before node.

  const native = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor
  // node (comment in the DOM) that will be different from the LContainer's host node. In this
  // particular case we need to execute action on 2 nodes:
  // - container's host node (this is done in the executeActionOnElementOrContainer)
  // - container's host node (this is done here)

  if (anchor !== native) {
    // This is very strange to me (Misko). I would expect that the native is same as anchor. I
    // don't see a reason why they should be different, but they are.
    //
    // If they are we need to process the second anchor as well.
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }

  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
/**
 * Writes class/style to element.
 *
 * @param renderer Renderer to use.
 * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
 * @param rNode The Node to write to.
 * @param prop Property to write to. This would be the class/style name.
 * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
 *        otherwise).
 */


function applyStyling(renderer, isClassBased, rNode, prop, value) {
  const isProcedural = isProceduralRenderer(renderer);

  if (isClassBased) {
    // We actually want JS true/false here because any truthy value should add the class
    if (!value) {
      ngDevMode && ngDevMode.rendererRemoveClass++;

      if (isProcedural) {
        renderer.removeClass(rNode, prop);
      } else {
        rNode.classList.remove(prop);
      }
    } else {
      ngDevMode && ngDevMode.rendererAddClass++;

      if (isProcedural) {
        renderer.addClass(rNode, prop);
      } else {
        ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
        rNode.classList.add(prop);
      }
    }
  } else {
    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;

    if (value == null
    /** || value === undefined */
    ) {
      ngDevMode && ngDevMode.rendererRemoveStyle++;

      if (isProcedural) {
        renderer.removeStyle(rNode, prop, flags);
      } else {
        rNode.style.removeProperty(prop);
      }
    } else {
      // A value is important if it ends with `!important`. The style
      // parser strips any semicolons at the end of the value.
      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;

      if (isImportant) {
        // !important has to be stripped from the value for it to be valid.
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }

      ngDevMode && ngDevMode.rendererSetStyle++;

      if (isProcedural) {
        renderer.setStyle(rNode, prop, value, flags);
      } else {
        ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
        rNode.style.setProperty(prop, value, isImportant ? 'important' : '');
      }
    }
  }
}
/**
 * Write `cssText` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param renderer Renderer to use
 * @param element The element which needs to be updated.
 * @param newValue The new class list to write.
 */


function writeDirectStyle(renderer, element, newValue) {
  ngDevMode && assertString(newValue, '\'newValue\' should be a string');

  if (isProceduralRenderer(renderer)) {
    renderer.setAttribute(element, 'style', newValue);
  } else {
    element.style.cssText = newValue;
  }

  ngDevMode && ngDevMode.rendererSetStyle++;
}
/**
 * Write `className` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param renderer Renderer to use
 * @param element The element which needs to be updated.
 * @param newValue The new class list to write.
 */


function writeDirectClass(renderer, element, newValue) {
  ngDevMode && assertString(newValue, '\'newValue\' should be a string');

  if (isProceduralRenderer(renderer)) {
    if (newValue === '') {
      // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
      renderer.removeAttribute(element, 'class');
    } else {
      renderer.setAttribute(element, 'class', newValue);
    }
  } else {
    element.className = newValue;
  }

  ngDevMode && ngDevMode.rendererSetClassName++;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an index of `classToSearch` in `className` taking token boundaries into account.
 *
 * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
 *
 * @param className A string containing classes (whitespace separated)
 * @param classToSearch A class name to locate
 * @param startingIndex Starting location of search
 * @returns an index of the located class (or -1 if not found)
 */


function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
  let end = className.length;

  while (true) {
    const foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1) return foundIndex;

    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32
    /* SPACE */
    ) {
      // Ensure that it has leading whitespace
      const length = classToSearch.length;

      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32
      /* SPACE */
      ) {
        // Ensure that it has trailing whitespace
        return foundIndex;
      }
    } // False positive, keep searching from where we left off.


    startingIndex = foundIndex + 1;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3;
const NG_TEMPLATE_SELECTOR = 'ng-template';
/**
 * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
 *
 * @param attrs `TAttributes` to search through.
 * @param cssClassToMatch class to match (lowercase)
 * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
 *    addition to the `AttributeMarker.Classes`.
 */

function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
  // It is strange to me that sometimes the class information comes in form of `class` attribute
  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
  // if that is the right behavior.
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
  let i = 0;

  while (i < attrs.length) {
    let item = attrs[i++];

    if (isProjectionMode && item === 'class') {
      item = attrs[i];

      if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
        return true;
      }
    } else if (item === 1
    /* Classes */
    ) {
      // We found the classes section. Start searching for the class.
      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
        // while we have strings
        if (item.toLowerCase() === cssClassToMatch) return true;
      }

      return false;
    }
  }

  return false;
}
/**
 * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
 *
 * @param tNode current TNode
 */


function isInlineTemplate(tNode) {
  return tNode.type === 4
  /* Container */
  && tNode.value !== NG_TEMPLATE_SELECTOR;
}
/**
 * Function that checks whether a given tNode matches tag-based selector and has a valid type.
 *
 * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
 * directive matching mode:
 * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
 * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
 * tag name was extracted from * syntax so we would match the same directive twice);
 * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
 * (applicable to TNodeType.Container only).
 */


function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  const tagNameToCompare = tNode.type === 4
  /* Container */
  && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
/**
 * A utility function to match an Ivy node static data against a simple CSS selector
 *
 * @param node static data of the node to match
 * @param selector The selector to try matching against the node.
 * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
 * directive matching.
 * @returns true if node matches the selector.
 */


function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
  let mode = 4
  /* ELEMENT */
  ;
  const nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.

  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing ":not" selectors, we skip to the next ":not" if the
  // current one doesn't match

  let skipToNextSelector = false;

  for (let i = 0; i < selector.length; i++) {
    const current = selector[i];

    if (typeof current === 'number') {
      // If we finish processing a :not selector and it hasn't failed, return false
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      } // If we are skipping to the next :not() and this mode flag is positive,
      // it's a part of the current :not() selector, and we should keep skipping


      if (skipToNextSelector && isPositive(current)) continue;
      skipToNextSelector = false;
      mode = current | mode & 1
      /* NOT */
      ;
      continue;
    }

    if (skipToNextSelector) continue;

    if (mode & 4
    /* ELEMENT */
    ) {
      mode = 2
      /* ATTRIBUTE */
      | mode & 1
      /* NOT */
      ;

      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else {
      const selectorAttrValue = mode & 8
      /* CLASS */
      ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with
      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])

      if (mode & 8
      /* CLASS */
      && tNode.attrs !== null) {
        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }

        continue;
      }

      const attrName = mode & 8
      /* CLASS */
      ? 'class' : current;
      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);

      if (attrIndexInNode === -1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
        continue;
      }

      if (selectorAttrValue !== '') {
        let nodeAttrValue;

        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = '';
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0
          /* NamespaceURI */
          , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match
          // selectors without case-sensitivity
          // (selectors are already in lowercase when generated)

          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }

        const compareAgainstClassName = mode & 8
        /* CLASS */
        ? nodeAttrValue : null;

        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2
        /* ATTRIBUTE */
        && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }
      }
    }
  }

  return isPositive(mode) || skipToNextSelector;
}

function isPositive(mode) {
  return (mode & 1
  /* NOT */
  ) === 0;
}
/**
 * Examines the attribute's definition array for a node to find the index of the
 * attribute that matches the given `name`.
 *
 * NOTE: This will not match namespaced attributes.
 *
 * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
 * The following table summarizes which types of attributes we attempt to match:
 *
 * ===========================================================================================================
 * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
 * Attributes
 * ===========================================================================================================
 * Inline + Projection     | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Inline + Directive      | NO                | NO                  | YES                 | NO
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Projection | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Directive  | YES               | YES                 | NO                  | YES
 * ===========================================================================================================
 *
 * @param name the name of the attribute to find
 * @param attrs the attribute array to examine
 * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
 * rather than a manually expanded template node (e.g `<ng-template>`).
 * @param isProjectionMode true if we are matching against content projection otherwise we are
 * matching against directives.
 */


function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
  if (attrs === null) return -1;
  let i = 0;

  if (isProjectionMode || !isInlineTemplate) {
    let bindingsMode = false;

    while (i < attrs.length) {
      const maybeAttrName = attrs[i];

      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3
      /* Bindings */
      || maybeAttrName === 6
      /* I18n */
      ) {
        bindingsMode = true;
      } else if (maybeAttrName === 1
      /* Classes */
      || maybeAttrName === 2
      /* Styles */
      ) {
        let value = attrs[++i]; // We should skip classes here because we have a separate mechanism for
        // matching classes in projection mode.

        while (typeof value === 'string') {
          value = attrs[++i];
        }

        continue;
      } else if (maybeAttrName === 4
      /* Template */
      ) {
        // We do not care about Template attributes in this scenario.
        break;
      } else if (maybeAttrName === 0
      /* NamespaceURI */
      ) {
        // Skip the whole namespaced attribute and value. This is by design.
        i += 4;
        continue;
      } // In binding mode there are only names, rather than name-value pairs.


      i += bindingsMode ? 1 : 2;
    } // We did not match the attribute


    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}

function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
  for (let i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }

  return false;
}

function getProjectAsAttrValue(tNode) {
  const nodeAttrs = tNode.attrs;

  if (nodeAttrs != null) {
    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5
    /* ProjectAs */
    ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
    // (attribute names are stored at even indexes)

    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }

  return null;
}

function getNameOnlyMarkerIndex(nodeAttrs) {
  for (let i = 0; i < nodeAttrs.length; i++) {
    const nodeAttr = nodeAttrs[i];

    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }

  return nodeAttrs.length;
}

function matchTemplateAttribute(attrs, name) {
  let i = attrs.indexOf(4
  /* Template */
  );

  if (i > -1) {
    i++;

    while (i < attrs.length) {
      const attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the
      // attrs array (that starts with a number that represents an attribute marker).

      if (typeof attr === 'number') return -1;
      if (attr === name) return i;
      i++;
    }
  }

  return -1;
}
/**
 * Checks whether a selector is inside a CssSelectorList
 * @param selector Selector to be checked.
 * @param list List in which to look for the selector.
 */


function isSelectorInSelectorList(selector, list) {
  selectorListLoop: for (let i = 0; i < list.length; i++) {
    const currentSelectorInList = list[i];

    if (selector.length !== currentSelectorInList.length) {
      continue;
    }

    for (let j = 0; j < selector.length; j++) {
      if (selector[j] !== currentSelectorInList[j]) {
        continue selectorListLoop;
      }
    }

    return true;
  }

  return false;
}

function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
}

function stringifyCSSSelector(selector) {
  let result = selector[0];
  let i = 1;
  let mode = 2
  /* ATTRIBUTE */
  ;
  let currentChunk = '';
  let isNegativeMode = false;

  while (i < selector.length) {
    let valueOrMarker = selector[i];

    if (typeof valueOrMarker === 'string') {
      if (mode & 2
      /* ATTRIBUTE */
      ) {
        const attrValue = selector[++i];
        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
      } else if (mode & 8
      /* CLASS */
      ) {
        currentChunk += '.' + valueOrMarker;
      } else if (mode & 4
      /* ELEMENT */
      ) {
        currentChunk += ' ' + valueOrMarker;
      }
    } else {
      //
      // Append current chunk to the final result in case we come across SelectorFlag, which
      // indicates that the previous section of a selector is over. We need to accumulate content
      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
      // ```
      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
      // ```
      // should be transformed to `.classA :not(.classB .classC)`.
      //
      // Note: for negative selector part, we accumulate content between flags until we find the
      // next negative flag. This is needed to support a case where `:not()` rule contains more than
      // one chunk, e.g. the following selector:
      // ```
      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
      // ```
      // should be stringified to `:not(p.foo) :not(.bar)`
      //
      if (currentChunk !== '' && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = '';
      }

      mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
      // mode is maintained for remaining chunks of a selector.

      isNegativeMode = isNegativeMode || !isPositive(mode);
    }

    i++;
  }

  if (currentChunk !== '') {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }

  return result;
}
/**
 * Generates string representation of CSS selector in parsed form.
 *
 * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
 * additional parsing at runtime (for example, for directive matching). However in some cases (for
 * example, while bootstrapping a component), a string version of the selector is required to query
 * for the host element on the page. This function takes the parsed form of a selector and returns
 * its string representation.
 *
 * @param selectorList selector in parsed form
 * @returns string representation of a given selector
 */


function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(',');
}
/**
 * Extracts attributes and classes information from a given CSS selector.
 *
 * This function is used while creating a component dynamically. In this case, the host element
 * (that is created dynamically) should contain attributes and classes specified in component's CSS
 * selector.
 *
 * @param selector CSS selector in parsed form (in a form of array)
 * @returns object with `attrs` and `classes` fields that contain extracted information
 */


function extractAttrsAndClassesFromSelector(selector) {
  const attrs = [];
  const classes = [];
  let i = 1;
  let mode = 2
  /* ATTRIBUTE */
  ;

  while (i < selector.length) {
    let valueOrMarker = selector[i];

    if (typeof valueOrMarker === 'string') {
      if (mode === 2
      /* ATTRIBUTE */
      ) {
        if (valueOrMarker !== '') {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8
      /* CLASS */
      ) {
        classes.push(valueOrMarker);
      }
    } else {
      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
      // mode is maintained for remaining chunks of a selector. Since attributes and classes are
      // extracted only for "positive" part of the selector, we can stop here.
      if (!isPositive(mode)) break;
      mode = valueOrMarker;
    }

    i++;
  }

  return {
    attrs,
    classes
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** A special value which designates that a value has not changed. */


const NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {
  __brand__: 'NO_CHANGE'
} : {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Advances to an element for later binding instructions.
 *
 * Used in conjunction with instructions like {@link property} to act on elements with specified
 * indices, for example those created with {@link element} or {@link elementStart}.
 *
 * ```ts
 * (rf: RenderFlags, ctx: any) => {
 *   if (rf & 1) {
 *     text(0, 'Hello');
 *     text(1, 'Goodbye')
 *     element(2, 'div');
 *   }
 *   if (rf & 2) {
 *     advance(2); // Advance twice to the <div>.
 *     property('title', 'test');
 *   }
 *  }
 * ```
 * @param delta Number of elements to advance forwards by.
 *
 * @codeGenApi
 */

function ɵɵadvance(delta) {
  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
}

function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView, index); // Flush the initial hooks for elements in the view that have been added up to this point.
  // PERF WARNING: do NOT extract this to a separate function without running benchmarks

  if (!checkNoChangesMode) {
    const hooksInitPhaseCompleted = (lView[FLAGS] & 3
    /* InitPhaseStateMask */
    ) === 3
    /* InitPhaseCompleted */
    ;

    if (hooksInitPhaseCompleted) {
      const preOrderCheckHooks = tView.preOrderCheckHooks;

      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      const preOrderHooks = tView.preOrderHooks;

      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0
        /* OnInitHooksToBeRun */
        , index);
      }
    }
  } // We must set the selected index *after* running the hooks, because hooks may have side-effects
  // that cause other template functions to run, thus updating the selected index, which is global
  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
  // will be altered by the time we leave the `ɵɵadvance` instruction.


  setSelectedIndex(index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
 */

/**
 * Creates an `Array` construction with a given name. This is useful when
 * looking for memory consumption to see what time of array it is.
 *
 *
 * @param name Name to give to the constructor
 * @returns A subclass of `Array` if possible. This can only be done in
 *          environments which support `class` construct.
 */


function createNamedArrayType(name) {
  // This should never be called in prod mode, so let's verify that is the case.
  if (ngDevMode) {
    try {
      // If this function were compromised the following could lead to arbitrary
      // script execution. We bless it with Trusted Types anyway since this
      // function is stripped out of production binaries.
      return newTrustedFunctionForDev('Array', `return class ${name} extends Array{}`)(Array);
    } catch (e) {
      // If it does not work just give up and fall back to regular Array.
      return Array;
    }
  } else {
    throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(prev, 0, 32767
  /* UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(next, 0, 32767
  /* UNSIGNED_MASK */
  );
  return prev << 17
  /* PREV_SHIFT */
  | next << 2
  /* NEXT_SHIFT */
  ;
}

function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange >> 17
  /* PREV_SHIFT */
  & 32767
  /* UNSIGNED_MASK */
  ;
}

function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 2
  /* PREV_DUPLICATE */
  ) == 2
  /* PREV_DUPLICATE */
  ;
}

function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  ngDevMode && assertNumberInRange(previous, 0, 32767
  /* UNSIGNED_MASK */
  );
  return tStylingRange & ~4294836224
  /* PREV_MASK */
  | previous << 17
  /* PREV_SHIFT */
  ;
}

function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange | 2
  /* PREV_DUPLICATE */
  ;
}

function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 131068
  /* NEXT_MASK */
  ) >> 2
  /* NEXT_SHIFT */
  ;
}

function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  ngDevMode && assertNumberInRange(next, 0, 32767
  /* UNSIGNED_MASK */
  );
  return tStylingRange & ~131068
  /* NEXT_MASK */
  | //
  next << 2
  /* NEXT_SHIFT */
  ;
}

function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return (tStylingRange & 1
  /* NEXT_DUPLICATE */
  ) === 1
  /* NEXT_DUPLICATE */
  ;
}

function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  return tStylingRange | 1
  /* NEXT_DUPLICATE */
  ;
}

function getTStylingRangeTail(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, 'expected number');
  const next = getTStylingRangeNext(tStylingRange);
  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Patch a `debug` property on top of the existing object.
 *
 * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
 *
 * @param obj Object to patch
 * @param debug Value to patch
 */


function attachDebugObject(obj, debug) {
  if (ngDevMode) {
    Object.defineProperty(obj, 'debug', {
      value: debug,
      enumerable: false
    });
  } else {
    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
  }
}
/**
 * Patch a `debug` property getter on top of the existing object.
 *
 * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
 *
 * @param obj Object to patch
 * @param debugGetter Getter returning a value to patch
 */


function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, 'debug', {
      get: debugGetter,
      enumerable: false
    });
  } else {
    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/*
 * This file contains conditionally attached classes which provide human readable (debug) level
 * information for `LView`, `LContainer` and other internal data structures. These data structures
 * are stored internally as array which makes it very difficult during debugging to reason about the
 * current state of the system.
 *
 * Patching the array with extra property does change the array's hidden class' but it does not
 * change the cost of access, therefore this patching should not have significant if any impact in
 * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
 *
 * So instead of seeing:
 * ```
 * Array(30) [Object, 659, null, …]
 * ```
 *
 * You get to see:
 * ```
 * LViewDebug {
 *   views: [...],
 *   flags: {attached: true, ...}
 *   nodes: [
 *     {html: '<div id="123">', ..., nodes: [
 *       {html: '<span>', ..., nodes: null}
 *     ]}
 *   ]
 * }
 * ```
 */


let LVIEW_COMPONENT_CACHE;
let LVIEW_EMBEDDED_CACHE;
let LVIEW_ROOT;
let LVIEW_COMPONENT;
let LVIEW_EMBEDDED;
/**
 * This function clones a blueprint and creates LView.
 *
 * Simple slice will keep the same type, and we need it to be LView
 */

function cloneToLViewFromTViewBlueprint(tView) {
  const debugTView = tView;
  const lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
  return lView.concat(tView.blueprint);
}

class LRootView extends Array {}

class LComponentView extends Array {}

class LEmbeddedView extends Array {}

function getLViewToClone(type, name) {
  switch (type) {
    case 0
    /* Root */
    :
      if (LVIEW_ROOT === undefined) LVIEW_ROOT = new LRootView();
      return LVIEW_ROOT;

    case 1
    /* Component */
    :
      if (!ngDevMode || !ngDevMode.namedConstructors) {
        if (LVIEW_COMPONENT === undefined) LVIEW_COMPONENT = new LComponentView();
        return LVIEW_COMPONENT;
      }

      if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();
      let componentArray = LVIEW_COMPONENT_CACHE.get(name);

      if (componentArray === undefined) {
        componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
        LVIEW_COMPONENT_CACHE.set(name, componentArray);
      }

      return componentArray;

    case 2
    /* Embedded */
    :
      if (!ngDevMode || !ngDevMode.namedConstructors) {
        if (LVIEW_EMBEDDED === undefined) LVIEW_EMBEDDED = new LEmbeddedView();
        return LVIEW_EMBEDDED;
      }

      if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();
      let embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);

      if (embeddedArray === undefined) {
        embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
        LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
      }

      return embeddedArray;
  }
}

function nameSuffix(text) {
  if (text == null) return '';
  const index = text.lastIndexOf('_Template');
  return '_' + (index === -1 ? text : text.substr(0, index));
}
/**
 * This class is a debug version of Object literal so that we can have constructor name show up
 * in
 * debug tools in ngDevMode.
 */


const TViewConstructor = class TView {
  constructor(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {
    this.type = type;
    this.blueprint = blueprint;
    this.template = template;
    this.queries = queries;
    this.viewQuery = viewQuery;
    this.declTNode = declTNode;
    this.data = data;
    this.bindingStartIndex = bindingStartIndex;
    this.expandoStartIndex = expandoStartIndex;
    this.hostBindingOpCodes = hostBindingOpCodes;
    this.firstCreatePass = firstCreatePass;
    this.firstUpdatePass = firstUpdatePass;
    this.staticViewQueries = staticViewQueries;
    this.staticContentQueries = staticContentQueries;
    this.preOrderHooks = preOrderHooks;
    this.preOrderCheckHooks = preOrderCheckHooks;
    this.contentHooks = contentHooks;
    this.contentCheckHooks = contentCheckHooks;
    this.viewHooks = viewHooks;
    this.viewCheckHooks = viewCheckHooks;
    this.destroyHooks = destroyHooks;
    this.cleanup = cleanup;
    this.contentQueries = contentQueries;
    this.components = components;
    this.directiveRegistry = directiveRegistry;
    this.pipeRegistry = pipeRegistry;
    this.firstChild = firstChild;
    this.schemas = schemas;
    this.consts = consts;
    this.incompleteFirstPass = incompleteFirstPass;
    this._decls = _decls;
    this._vars = _vars;
  }

  get template_() {
    const buf = [];
    processTNodeChildren(this.firstChild, buf);
    return buf.join('');
  }

  get type_() {
    return TViewTypeAsString[this.type] || `TViewType.?${this.type}?`;
  }

};

class TNode {
  constructor(tView_, //
  type, //
  index, //
  insertBeforeIndex, //
  injectorIndex, //
  directiveStart, //
  directiveEnd, //
  directiveStylingLast, //
  propertyBindings, //
  flags, //
  providerIndexes, //
  value, //
  attrs, //
  mergedAttrs, //
  localNames, //
  initialInputs, //
  inputs, //
  outputs, //
  tViews, //
  next, //
  projectionNext, //
  child, //
  parent, //
  projection, //
  styles, //
  stylesWithoutHost, //
  residualStyles, //
  classes, //
  classesWithoutHost, //
  residualClasses, //
  classBindings, //
  styleBindings) {
    this.tView_ = tView_;
    this.type = type;
    this.index = index;
    this.insertBeforeIndex = insertBeforeIndex;
    this.injectorIndex = injectorIndex;
    this.directiveStart = directiveStart;
    this.directiveEnd = directiveEnd;
    this.directiveStylingLast = directiveStylingLast;
    this.propertyBindings = propertyBindings;
    this.flags = flags;
    this.providerIndexes = providerIndexes;
    this.value = value;
    this.attrs = attrs;
    this.mergedAttrs = mergedAttrs;
    this.localNames = localNames;
    this.initialInputs = initialInputs;
    this.inputs = inputs;
    this.outputs = outputs;
    this.tViews = tViews;
    this.next = next;
    this.projectionNext = projectionNext;
    this.child = child;
    this.parent = parent;
    this.projection = projection;
    this.styles = styles;
    this.stylesWithoutHost = stylesWithoutHost;
    this.residualStyles = residualStyles;
    this.classes = classes;
    this.classesWithoutHost = classesWithoutHost;
    this.residualClasses = residualClasses;
    this.classBindings = classBindings;
    this.styleBindings = styleBindings;
  }
  /**
   * Return a human debug version of the set of `NodeInjector`s which will be consulted when
   * resolving tokens from this `TNode`.
   *
   * When debugging applications, it is often difficult to determine which `NodeInjector`s will be
   * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be
   * consulted in order when resolving a token starting at this `TNode`.
   *
   * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is
   * difficult to reason about.
   *
   * @param lView The `LView` instance for this `TNode`.
   */


  debugNodeInjectorPath(lView) {
    const path = [];
    let injectorIndex = getInjectorIndex(this, lView);

    if (injectorIndex === -1) {
      // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for
      // parent NodeInjector.
      const parentLocation = getParentInjectorLocation(this, lView);

      if (parentLocation !== NO_PARENT_INJECTOR) {
        // We found a parent, so start searching from the parent location.
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      } else {// No parents have been found, so there are no `NodeInjector`s to consult.
      }
    }

    while (injectorIndex !== -1) {
      ngDevMode && assertNodeInjector(lView, injectorIndex);
      const tNode = lView[TVIEW].data[injectorIndex + 8
      /* TNODE */
      ];
      path.push(buildDebugNode(tNode, lView));
      const parentLocation = lView[injectorIndex + 8
      /* PARENT */
      ];

      if (parentLocation === NO_PARENT_INJECTOR) {
        injectorIndex = -1;
      } else {
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      }
    }

    return path;
  }

  get type_() {
    return toTNodeTypeAsString(this.type) || `TNodeType.?${this.type}?`;
  }

  get flags_() {
    const flags = [];
    if (this.flags & 16
    /* hasClassInput */
    ) flags.push('TNodeFlags.hasClassInput');
    if (this.flags & 8
    /* hasContentQuery */
    ) flags.push('TNodeFlags.hasContentQuery');
    if (this.flags & 32
    /* hasStyleInput */
    ) flags.push('TNodeFlags.hasStyleInput');
    if (this.flags & 128
    /* hasHostBindings */
    ) flags.push('TNodeFlags.hasHostBindings');
    if (this.flags & 2
    /* isComponentHost */
    ) flags.push('TNodeFlags.isComponentHost');
    if (this.flags & 1
    /* isDirectiveHost */
    ) flags.push('TNodeFlags.isDirectiveHost');
    if (this.flags & 64
    /* isDetached */
    ) flags.push('TNodeFlags.isDetached');
    if (this.flags & 4
    /* isProjected */
    ) flags.push('TNodeFlags.isProjected');
    return flags.join('|');
  }

  get template_() {
    if (this.type & 1
    /* Text */
    ) return this.value;
    const buf = [];
    const tagName = typeof this.value === 'string' && this.value || this.type_;
    buf.push('<', tagName);

    if (this.flags) {
      buf.push(' ', this.flags_);
    }

    if (this.attrs) {
      for (let i = 0; i < this.attrs.length;) {
        const attrName = this.attrs[i++];

        if (typeof attrName == 'number') {
          break;
        }

        const attrValue = this.attrs[i++];
        buf.push(' ', attrName, '="', attrValue, '"');
      }
    }

    buf.push('>');
    processTNodeChildren(this.child, buf);
    buf.push('</', tagName, '>');
    return buf.join('');
  }

  get styleBindings_() {
    return toDebugStyleBinding(this, false);
  }

  get classBindings_() {
    return toDebugStyleBinding(this, true);
  }

  get providerIndexStart_() {
    return this.providerIndexes & 1048575
    /* ProvidersStartIndexMask */
    ;
  }

  get providerIndexEnd_() {
    return this.providerIndexStart_ + (this.providerIndexes >>> 20
    /* CptViewProvidersCountShift */
    );
  }

}

const TNodeDebug = TNode;

function toDebugStyleBinding(tNode, isClassBased) {
  const tData = tNode.tView_.data;
  const bindings = [];
  const range = isClassBased ? tNode.classBindings : tNode.styleBindings;
  const prev = getTStylingRangePrev(range);
  const next = getTStylingRangeNext(range);
  let isTemplate = next !== 0;
  let cursor = isTemplate ? next : prev;

  while (cursor !== 0) {
    const itemKey = tData[cursor];
    const itemRange = tData[cursor + 1];
    bindings.unshift({
      key: itemKey,
      index: cursor,
      isTemplate: isTemplate,
      prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
      nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
      nextIndex: getTStylingRangeNext(itemRange),
      prevIndex: getTStylingRangePrev(itemRange)
    });
    if (cursor === prev) isTemplate = false;
    cursor = getTStylingRangePrev(itemRange);
  }

  bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
  return bindings;
}

function processTNodeChildren(tNode, buf) {
  while (tNode) {
    buf.push(tNode.template_);
    tNode = tNode.next;
  }
}

class TViewData extends Array {}

let TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
// `LView` constructor could have side-effects.

/**
 * This function clones a blueprint and creates TData.
 *
 * Simple slice will keep the same type, and we need it to be TData
 */

function cloneToTViewData(list) {
  if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();
  return TVIEWDATA_EMPTY.concat(list);
}

class LViewBlueprint extends Array {}

class MatchesArray extends Array {}

class TViewComponents extends Array {}

class TNodeLocalNames extends Array {}

class TNodeInitialInputs extends Array {}

class LCleanup extends Array {}

class TCleanup extends Array {}

function attachLViewDebug(lView) {
  attachDebugObject(lView, new LViewDebug(lView));
}

function attachLContainerDebug(lContainer) {
  attachDebugObject(lContainer, new LContainerDebug(lContainer));
}

function toDebug(obj) {
  if (obj) {
    const debug = obj.debug;
    assertDefined(debug, 'Object does not have a debug representation.');
    return debug;
  } else {
    return obj;
  }
}
/**
 * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
 * reading.
 *
 * @param value possibly wrapped native DOM node.
 * @param includeChildren If `true` then the serialized HTML form will include child elements
 * (same
 * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
 * itself
 * (will not serialize child elements).
 */


function toHtml(value, includeChildren = false) {
  const node = unwrapRNode(value);

  if (node) {
    switch (node.nodeType) {
      case Node.TEXT_NODE:
        return node.textContent;

      case Node.COMMENT_NODE:
        return `<!--${node.textContent}-->`;

      case Node.ELEMENT_NODE:
        const outerHTML = node.outerHTML;

        if (includeChildren) {
          return outerHTML;
        } else {
          const innerHTML = '>' + node.innerHTML + '<';
          return outerHTML.split(innerHTML)[0] + '>';
        }

    }
  }

  return null;
}

class LViewDebug {
  constructor(_raw_lView) {
    this._raw_lView = _raw_lView;
  }
  /**
   * Flags associated with the `LView` unpacked into a more readable state.
   */


  get flags() {
    const flags = this._raw_lView[FLAGS];
    return {
      __raw__flags__: flags,
      initPhaseState: flags & 3
      /* InitPhaseStateMask */
      ,
      creationMode: !!(flags & 4
      /* CreationMode */
      ),
      firstViewPass: !!(flags & 8
      /* FirstLViewPass */
      ),
      checkAlways: !!(flags & 16
      /* CheckAlways */
      ),
      dirty: !!(flags & 64
      /* Dirty */
      ),
      attached: !!(flags & 128
      /* Attached */
      ),
      destroyed: !!(flags & 256
      /* Destroyed */
      ),
      isRoot: !!(flags & 512
      /* IsRoot */
      ),
      indexWithinInitPhase: flags >> 11
      /* IndexWithinInitPhaseShift */

    };
  }

  get parent() {
    return toDebug(this._raw_lView[PARENT]);
  }

  get hostHTML() {
    return toHtml(this._raw_lView[HOST], true);
  }

  get html() {
    return (this.nodes || []).map(mapToHTML).join('');
  }

  get context() {
    return this._raw_lView[CONTEXT];
  }
  /**
   * The tree of nodes associated with the current `LView`. The nodes have been normalized into
   * a tree structure with relevant details pulled out for readability.
   */


  get nodes() {
    const lView = this._raw_lView;
    const tNode = lView[TVIEW].firstChild;
    return toDebugNodes(tNode, lView);
  }

  get template() {
    return this.tView.template_;
  }

  get tView() {
    return this._raw_lView[TVIEW];
  }

  get cleanup() {
    return this._raw_lView[CLEANUP];
  }

  get injector() {
    return this._raw_lView[INJECTOR$1];
  }

  get rendererFactory() {
    return this._raw_lView[RENDERER_FACTORY];
  }

  get renderer() {
    return this._raw_lView[RENDERER];
  }

  get sanitizer() {
    return this._raw_lView[SANITIZER];
  }

  get childHead() {
    return toDebug(this._raw_lView[CHILD_HEAD]);
  }

  get next() {
    return toDebug(this._raw_lView[NEXT]);
  }

  get childTail() {
    return toDebug(this._raw_lView[CHILD_TAIL]);
  }

  get declarationView() {
    return toDebug(this._raw_lView[DECLARATION_VIEW]);
  }

  get queries() {
    return this._raw_lView[QUERIES];
  }

  get tHost() {
    return this._raw_lView[T_HOST];
  }

  get decls() {
    return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);
  }

  get vars() {
    return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);
  }

  get expando() {
    return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
  }
  /**
   * Normalized view of child views (and containers) attached at this location.
   */


  get childViews() {
    const childViews = [];
    let child = this.childHead;

    while (child) {
      childViews.push(child);
      child = child.next;
    }

    return childViews;
  }

}

function mapToHTML(node) {
  if (node.type === 'ElementContainer') {
    return (node.children || []).map(mapToHTML).join('');
  } else if (node.type === 'IcuContainer') {
    throw new Error('Not implemented');
  } else {
    return toHtml(node.native, true) || '';
  }
}

function toLViewRange(tView, lView, start, end) {
  let content = [];

  for (let index = start; index < end; index++) {
    content.push({
      index: index,
      t: tView.data[index],
      l: lView[index]
    });
  }

  return {
    start: start,
    end: end,
    length: end - start,
    content: content
  };
}
/**
 * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
 *
 * @param tNode
 * @param lView
 */


function toDebugNodes(tNode, lView) {
  if (tNode) {
    const debugNodes = [];
    let tNodeCursor = tNode;

    while (tNodeCursor) {
      debugNodes.push(buildDebugNode(tNodeCursor, lView));
      tNodeCursor = tNodeCursor.next;
    }

    return debugNodes;
  } else {
    return [];
  }
}

function buildDebugNode(tNode, lView) {
  const rawValue = lView[tNode.index];
  const native = unwrapRNode(rawValue);
  const factories = [];
  const instances = [];
  const tView = lView[TVIEW];

  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    const def = tView.data[i];
    factories.push(def.type);
    instances.push(lView[i]);
  }

  return {
    html: toHtml(native),
    type: toTNodeTypeAsString(tNode.type),
    tNode,
    native: native,
    children: toDebugNodes(tNode.child, lView),
    factories,
    instances,
    injector: buildNodeInjectorDebug(tNode, tView, lView),

    get injectorResolutionPath() {
      return tNode.debugNodeInjectorPath(lView);
    }

  };
}

function buildNodeInjectorDebug(tNode, tView, lView) {
  const viewProviders = [];

  for (let i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {
    viewProviders.push(tView.data[i]);
  }

  const providers = [];

  for (let i = tNode.providerIndexEnd_; i < tNode.directiveEnd; i++) {
    providers.push(tView.data[i]);
  }

  const nodeInjectorDebug = {
    bloom: toBloom(lView, tNode.injectorIndex),
    cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),
    providers,
    viewProviders,
    parentInjectorIndex: lView[tNode.providerIndexStart_ - 1]
  };
  return nodeInjectorDebug;
}
/**
 * Convert a number at `idx` location in `array` into binary representation.
 *
 * @param array
 * @param idx
 */


function binary(array, idx) {
  const value = array[idx]; // If not a number we print 8 `?` to retain alignment but let user know that it was called on
  // wrong type.

  if (typeof value !== 'number') return '????????'; // We prefix 0s so that we have constant length number

  const text = '00000000' + value.toString(2);
  return text.substring(text.length - 8);
}
/**
 * Convert a bloom filter at location `idx` in `array` into binary representation.
 *
 * @param array
 * @param idx
 */


function toBloom(array, idx) {
  if (idx < 0) {
    return 'NO_NODE_INJECTOR';
  }

  return `${binary(array, idx + 7)}_${binary(array, idx + 6)}_${binary(array, idx + 5)}_${binary(array, idx + 4)}_${binary(array, idx + 3)}_${binary(array, idx + 2)}_${binary(array, idx + 1)}_${binary(array, idx + 0)}`;
}

class LContainerDebug {
  constructor(_raw_lContainer) {
    this._raw_lContainer = _raw_lContainer;
  }

  get hasTransplantedViews() {
    return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
  }

  get views() {
    return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);
  }

  get parent() {
    return toDebug(this._raw_lContainer[PARENT]);
  }

  get movedViews() {
    return this._raw_lContainer[MOVED_VIEWS];
  }

  get host() {
    return this._raw_lContainer[HOST];
  }

  get native() {
    return this._raw_lContainer[NATIVE];
  }

  get next() {
    return toDebug(this._raw_lContainer[NEXT]);
  }

}
/**
 * A permanent marker promise which signifies that the current CD tree is
 * clean.
 */


const _CLEAN_PROMISE = /*#__PURE__*/(() => Promise.resolve(null))();
/**
 * Invoke `HostBindingsFunction`s for view.
 *
 * This methods executes `TView.hostBindingOpCodes`. It is used to execute the
 * `HostBindingsFunction`s associated with the current `LView`.
 *
 * @param tView Current `TView`.
 * @param lView Current `LView`.
 */


function processHostBindingOpCodes(tView, lView) {
  const hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null) return;

  try {
    for (let i = 0; i < hostBindingOpCodes.length; i++) {
      const opCode = hostBindingOpCodes[i];

      if (opCode < 0) {
        // Negative numbers are element indexes.
        setSelectedIndex(~opCode);
      } else {
        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
        const directiveIdx = opCode;
        const bindingRootIndx = hostBindingOpCodes[++i];
        const hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        const context = lView[directiveIdx];
        hostBindingFn(2
        /* Update */
        , context);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
/** Refreshes all content queries declared by directives in a given view */


function refreshContentQueries(tView, lView) {
  const contentQueries = tView.contentQueries;

  if (contentQueries !== null) {
    for (let i = 0; i < contentQueries.length; i += 2) {
      const queryStartIdx = contentQueries[i];
      const directiveDefIdx = contentQueries[i + 1];

      if (directiveDefIdx !== -1) {
        const directiveDef = tView.data[directiveDefIdx];
        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');
        ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');
        setCurrentQueryIndex(queryStartIdx);
        directiveDef.contentQueries(2
        /* Update */
        , lView[directiveDefIdx], directiveDefIdx);
      }
    }
  }
}
/** Refreshes child components in the current view (update mode). */


function refreshChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    refreshComponent(hostLView, components[i]);
  }
}
/** Renders child components in the current view (creation mode). */


function renderChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    renderComponent$1(hostLView, components[i]);
  }
}

function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
  const lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4
  /* CreationMode */
  | 128
  /* Attached */
  | 8
  /* FirstLViewPass */
  ;
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context;
  lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];
  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;
  lView[T_HOST] = tHostNode;
  ngDevMode && assertEqual(tView.type == 2
  /* Embedded */
  ? parentLView !== null : true, true, 'Embedded views must have parentLView');
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2
  /* Embedded */
  ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  ngDevMode && attachLViewDebug(lView);
  return lView;
}

function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.'); // Keep this function short, so that the VM will inline it.

  ngDevMode && assertPureTNodeType(type);
  let tNode = tView.data[index];

  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);

    if (isInI18nBlock()) {
      // If we are in i18n block then all elements should be pre declared through `Placeholder`
      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was
      // removed, so we mark it as detached.
      tNode.flags |= 64
      /* isDetached */
      ;
    }
  } else if (tNode.type & 64
  /* Placeholder */
  ) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    const parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');
  }

  setCurrentTNode(tNode, true);
  return tNode;
}

function createTNodeAtIndex(tView, index, type, name, attrs) {
  const currentTNode = getCurrentTNodePlaceholderOk();
  const isParent = isCurrentTNodeParent();
  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places.

  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one
  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
  // the index 1 or more, so we can't just check node index.

  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }

  if (currentTNode !== null) {
    if (isParent) {
      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?
      if (currentTNode.child == null && tNode.parent !== null) {
        // We are in the same view, which means we are adding content node to the parent view.
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want
        // to break the links which i18n created.
        currentTNode.next = tNode;
      }
    }
  }

  return tNode;
}
/**
 * When elements are created dynamically after a view blueprint is created (e.g. through
 * i18nApply()), we need to adjust the blueprint for future
 * template passes.
 *
 * @param tView `TView` associated with `LView`
 * @param lView The `LView` containing the blueprint to adjust
 * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
 * @param initialValue Initial value to store in blueprint
 */


function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0) return -1;

  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');
    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');
    assertFirstUpdatePass(tView);
  }

  const allocIdx = lView.length;

  for (let i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }

  return allocIdx;
} //////////////////////////
//// Render
//////////////////////////

/**
 * Processes a view in the creation mode. This includes a number of steps in a specific order:
 * - creating view query functions (if any);
 * - executing a template function in the creation mode;
 * - updating static queries (if any);
 * - creating child components defined in a given view.
 */


function renderView(tView, lView, context) {
  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
  enterView(lView);

  try {
    const viewQuery = tView.viewQuery;

    if (viewQuery !== null) {
      executeViewQueryFn(1
      /* Create */
      , viewQuery, context);
    } // Execute a template associated with this view, if it exists. A template function might not be
    // defined for the root component views.


    const templateFn = tView.template;

    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1
      /* Create */
      , context);
    } // This needs to be set before children are processed to support recursive components.
    // This must be set to false immediately after the first creation run because in an
    // ngFor loop, all the views will be created together before update mode runs and turns
    // off firstCreatePass. If we don't set it here, instances will perform directive
    // matching, etc again and again.


    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    } // We resolve content queries specifically marked as `static` in creation mode. Dynamic
    // content queries are resolved during change detection (i.e. update mode), after embedded
    // views are refreshed (see block above).


    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    } // We must materialize query results before child components are processed
    // in case a child component has projected a container. The LContainer needs
    // to exist so the embedded views are properly attached by the container.


    if (tView.staticViewQueries) {
      executeViewQueryFn(2
      /* Update */
      , tView.viewQuery, context);
    } // Render child component views.


    const components = tView.components;

    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    // If we didn't manage to get past the first template pass due to
    // an error, mark the view as corrupted so we can try to recover.
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }

    throw error;
  } finally {
    lView[FLAGS] &= ~4
    /* CreationMode */
    ;
    leaveView();
  }
}
/**
 * Processes a view in update mode. This includes a number of steps in a specific order:
 * - executing a template function in update mode;
 * - executing hooks;
 * - refreshing queries;
 * - setting host bindings;
 * - refreshing child (embedded and component) views.
 */


function refreshView(tView, lView, templateFn, context) {
  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
  const flags = lView[FLAGS];
  if ((flags & 256
  /* Destroyed */
  ) === 256
  /* Destroyed */
  ) return;
  enterView(lView); // Check no changes mode is a dev only mode used to verify that bindings have not changed
  // since they were assigned. We do not want to execute lifecycle hooks in that mode.

  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();

  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);

    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2
      /* Update */
      , context);
    }

    const hooksInitPhaseCompleted = (flags & 3
    /* InitPhaseStateMask */
    ) === 3
    /* InitPhaseCompleted */
    ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks

    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;

        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;

        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0
          /* OnInitHooksToBeRun */
          , null);
        }

        incrementInitPhaseFlags(lView, 0
        /* OnInitHooksToBeRun */
        );
      }
    } // First mark transplanted views that are declared in this lView as needing a refresh at their
    // insertion points. This is needed to avoid the situation where the template is defined in this
    // `LView` but its declaration appears after the insertion component.


    markTransplantedViewsForRefresh(lView);
    refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.

    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    } // execute content hooks (AfterContentInit, AfterContentChecked)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks


    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const contentCheckHooks = tView.contentCheckHooks;

        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        const contentHooks = tView.contentHooks;

        if (contentHooks !== null) {
          executeInitAndCheckHooks(lView, contentHooks, 1
          /* AfterContentInitHooksToBeRun */
          );
        }

        incrementInitPhaseFlags(lView, 1
        /* AfterContentInitHooksToBeRun */
        );
      }
    }

    processHostBindingOpCodes(tView, lView); // Refresh child component views.

    const components = tView.components;

    if (components !== null) {
      refreshChildComponents(lView, components);
    } // View queries must execute after refreshing child components because a template in this view
    // could be inserted in a child component. If the view query executes before child component
    // refresh, the template might not yet be inserted.


    const viewQuery = tView.viewQuery;

    if (viewQuery !== null) {
      executeViewQueryFn(2
      /* Update */
      , viewQuery, context);
    } // execute view hooks (AfterViewInit, AfterViewChecked)
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks


    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const viewCheckHooks = tView.viewCheckHooks;

        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        const viewHooks = tView.viewHooks;

        if (viewHooks !== null) {
          executeInitAndCheckHooks(lView, viewHooks, 2
          /* AfterViewInitHooksToBeRun */
          );
        }

        incrementInitPhaseFlags(lView, 2
        /* AfterViewInitHooksToBeRun */
        );
      }
    }

    if (tView.firstUpdatePass === true) {
      // We need to make sure that we only flip the flag on successful `refreshView` only
      // Don't do this in `finally` block.
      // If we did this in `finally` block then an exception could block the execution of styling
      // instructions which in turn would be unable to insert themselves into the styling linked
      // list. The result of this would be that if the exception would not be throw on subsequent CD
      // the styling would be unable to process it data and reflect to the DOM.
      tView.firstUpdatePass = false;
    } // Do not reset the dirty state when running in check no changes mode. We don't want components
    // to behave differently depending on whether check no changes is enabled or not. For example:
    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
    // no changes cycle, the component would be not be dirty for the next update pass. This would
    // be different in production mode where the component dirty state is not reset.


    if (!isInCheckNoChangesPass) {
      lView[FLAGS] &= ~(64
      /* Dirty */
      | 8
      /* FirstLViewPass */
      );
    }

    if (lView[FLAGS] & 1024
    /* RefreshTransplantedView */
    ) {
      lView[FLAGS] &= ~1024
      /* RefreshTransplantedView */
      ;
      updateTransplantedViewCount(lView[PARENT], -1);
    }
  } finally {
    leaveView();
  }
}

function renderComponentOrTemplate(tView, lView, templateFn, context) {
  const rendererFactory = lView[RENDERER_FACTORY]; // Check no changes mode is a dev only mode used to verify that bindings have not changed
  // since they were assigned. We do not want to invoke renderer factory functions in that mode
  // to avoid any possible side-effects.

  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
  const creationModeIsActive = isCreationMode(lView);

  try {
    if (!checkNoChangesMode && !creationModeIsActive && rendererFactory.begin) {
      rendererFactory.begin();
    }

    if (creationModeIsActive) {
      renderView(tView, lView, context);
    }

    refreshView(tView, lView, templateFn, context);
  } finally {
    if (!checkNoChangesMode && !creationModeIsActive && rendererFactory.end) {
      rendererFactory.end();
    }
  }
}

function executeTemplate(tView, lView, templateFn, rf, context) {
  const prevSelectedIndex = getSelectedIndex();
  const isUpdatePhase = rf & 2
  /* Update */
  ;

  try {
    setSelectedIndex(-1);

    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      // When we're updating, inherently select 0 so we don't
      // have to generate that instruction for most update blocks.
      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
    }

    const preHookType = isUpdatePhase ? 2
    /* TemplateUpdateStart */
    : 0
    /* TemplateCreateStart */
    ;
    profiler(preHookType, context);
    templateFn(rf, context);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    const postHookType = isUpdatePhase ? 3
    /* TemplateUpdateEnd */
    : 1
    /* TemplateCreateEnd */
    ;
    profiler(postHookType, context);
  }
} //////////////////////////
//// Element
//////////////////////////


function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    const start = tNode.directiveStart;
    const end = tNode.directiveEnd;

    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
      const def = tView.data[directiveIndex];

      if (def.contentQueries) {
        def.contentQueries(1
        /* Create */
        , lView[directiveIndex], directiveIndex);
      }
    }
  }
}
/**
 * Creates directive instances.
 */


function createDirectivesInstances(tView, lView, tNode) {
  if (!getBindingsEnabled()) return;
  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));

  if ((tNode.flags & 128
  /* hasHostBindings */
  ) === 128
  /* hasHostBindings */
  ) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
/**
 * Takes a list of local names and indices and pushes the resolved local variable values
 * to LView in the same order as they are loaded in the template with load().
 */


function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
  const localNames = tNode.localNames;

  if (localNames !== null) {
    let localIndex = tNode.index + 1;

    for (let i = 0; i < localNames.length; i += 2) {
      const index = localNames[i + 1];
      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
/**
 * Gets TView from a template function or creates a new TView
 * if it doesn't already exist.
 *
 * @param def ComponentDef
 * @returns TView
 */


function getOrCreateTComponentView(def) {
  const tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't
  // complete successfully since we can't know for sure whether it's in a usable shape.

  if (tView === null || tView.incompleteFirstPass) {
    // Declaration node here is null since this function is called when we dynamically create a
    // component and hence there is no declaration.
    const declTNode = null;
    return def.tView = createTView(1
    /* Component */
    , declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
  }

  return tView;
}
/**
 * Creates a TView instance
 *
 * @param type Type of `TView`.
 * @param declTNode Declaration location of this `TView`.
 * @param templateFn Template function
 * @param decls The number of nodes, local refs, and pipes in this template
 * @param directives Registry of directives for this view
 * @param pipes Registry of pipes for this view
 * @param viewQuery View queries for this view
 * @param schemas Schemas for this view
 * @param consts Constants for this view
 */


function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {
  ngDevMode && ngDevMode.tView++;
  const bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,
  // we don't know which directives are active on this template. As soon as a directive is matched
  // that has a host binding, we will update the blueprint with that def's hostVars count.

  const initialViewLength = bindingStartIndex + vars;
  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;
  const tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, // type: TViewType,
  blueprint, // blueprint: LView,
  templateFn, // template: ComponentTemplate<{}>|null,
  null, // queries: TQueries|null
  viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
  declTNode, // declTNode: TNode|null,
  cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
  bindingStartIndex, // bindingStartIndex: number,
  initialViewLength, // expandoStartIndex: number,
  null, // hostBindingOpCodes: HostBindingOpCodes,
  true, // firstCreatePass: boolean,
  true, // firstUpdatePass: boolean,
  false, // staticViewQueries: boolean,
  false, // staticContentQueries: boolean,
  null, // preOrderHooks: HookData|null,
  null, // preOrderCheckHooks: HookData|null,
  null, // contentHooks: HookData|null,
  null, // contentCheckHooks: HookData|null,
  null, // viewHooks: HookData|null,
  null, // viewCheckHooks: HookData|null,
  null, // destroyHooks: DestroyHookData|null,
  null, // cleanup: any[]|null,
  null, // contentQueries: number[]|null,
  null, // components: number[]|null,
  typeof directives === 'function' ? //
  directives() : //
  directives, // directiveRegistry: DirectiveDefList|null,
  typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
  null, // firstChild: TNode|null,
  schemas, // schemas: SchemaMetadata[]|null,
  consts, // consts: TConstants|null
  false, // incompleteFirstPass: boolean
  decls, // ngDevMode only: decls
  vars) : {
    type: type,
    blueprint: blueprint,
    template: templateFn,
    queries: null,
    viewQuery: viewQuery,
    declTNode: declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex: bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === 'function' ? directives() : directives,
    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
    firstChild: null,
    schemas: schemas,
    consts: consts,
    incompleteFirstPass: false
  };

  if (ngDevMode) {
    // For performance reasons it is important that the tView retains the same shape during runtime.
    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
    // prevent class transitions.
    Object.seal(tView);
  }

  return tView;
}

function createViewBlueprint(bindingStartIndex, initialViewLength) {
  const blueprint = ngDevMode ? new LViewBlueprint() : [];

  for (let i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }

  return blueprint;
}

function createError(text, token) {
  return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);
}

function assertHostNodeExists(rElement, elementOrSelector) {
  if (!rElement) {
    if (typeof elementOrSelector === 'string') {
      throw createError('Host node with selector not found:', elementOrSelector);
    } else {
      throw createError('Host node is required:', elementOrSelector);
    }
  }
}
/**
 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
 *
 * @param rendererFactory Factory function to create renderer instance.
 * @param elementOrSelector Render element or CSS selector to locate the element.
 * @param encapsulation View Encapsulation defined for component that requests host element.
 */


function locateHostElement(renderer, elementOrSelector, encapsulation) {
  if (isProceduralRenderer(renderer)) {
    // When using native Shadow DOM, do not clear host element to allow native slot projection
    const preserveContent = encapsulation === ViewEncapsulation$1.ShadowDom;
    return renderer.selectRootElement(elementOrSelector, preserveContent);
  }

  let rElement = typeof elementOrSelector === 'string' ? renderer.querySelector(elementOrSelector) : elementOrSelector;
  ngDevMode && assertHostNodeExists(rElement, elementOrSelector); // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
  // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
  // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
  // renderer, and procedural renderer case is handled above.

  rElement.textContent = '';
  return rElement;
}
/**
 * Saves context for this cleanup function in LView.cleanupInstances.
 *
 * On the first template pass, saves in TView:
 * - Cleanup function
 * - Index of context we just saved in LView.cleanupInstances
 *
 * This function can also be used to store instance specific cleanup fns. In that case the `context`
 * is `null` and the function is store in `LView` (rather than it `TView`).
 */


function storeCleanupWithContext(tView, lView, context, cleanupFn) {
  const lCleanup = getOrCreateLViewCleanup(lView);

  if (context === null) {
    // If context is null that this is instance specific callback. These callbacks can only be
    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }

    lCleanup.push(cleanupFn);
  } else {
    lCleanup.push(context);

    if (tView.firstCreatePass) {
      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
    }
  }
}

function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
  ngDevMode && assertNotSame(attrs, undefined, '\'undefined\' is not valid value for \'attrs\'');
  ngDevMode && ngDevMode.tNode++;
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  let injectorIndex = tParent ? tParent.injectorIndex : -1;
  const tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView
  type, // type: TNodeType
  index, // index: number
  null, // insertBeforeIndex: null|-1|number|number[]
  injectorIndex, // injectorIndex: number
  -1, // directiveStart: number
  -1, // directiveEnd: number
  -1, // directiveStylingLast: number
  null, // propertyBindings: number[]|null
  0, // flags: TNodeFlags
  0, // providerIndexes: TNodeProviderIndexes
  value, // value: string|null
  attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
  null, // mergedAttrs
  null, // localNames: (string|number)[]|null
  undefined, // initialInputs: (string[]|null)[]|null|undefined
  null, // inputs: PropertyAliases|null
  null, // outputs: PropertyAliases|null
  null, // tViews: ITView|ITView[]|null
  null, // next: ITNode|null
  null, // projectionNext: ITNode|null
  null, // child: ITNode|null
  tParent, // parent: TElementNode|TContainerNode|null
  null, // projection: number|(ITNode|RNode[])[]|null
  null, // styles: string|null
  null, // stylesWithoutHost: string|null
  undefined, // residualStyles: string|null
  null, // classes: string|null
  null, // classesWithoutHost: string|null
  undefined, // residualClasses: string|null
  0, // classBindings: TStylingRange;
  0) : {
    type,
    index,
    insertBeforeIndex: null,
    injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    propertyBindings: null,
    flags: 0,
    providerIndexes: 0,
    value: value,
    attrs: attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: undefined,
    inputs: null,
    outputs: null,
    tViews: null,
    next: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: undefined,
    classes: null,
    classesWithoutHost: null,
    residualClasses: undefined,
    classBindings: 0,
    styleBindings: 0
  };

  if (ngDevMode) {
    // For performance reasons it is important that the tNode retains the same shape during runtime.
    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
    // prevent class transitions.
    Object.seal(tNode);
  }

  return tNode;
}

function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
  for (let publicName in inputAliasMap) {
    if (inputAliasMap.hasOwnProperty(publicName)) {
      propStore = propStore === null ? {} : propStore;
      const internalName = inputAliasMap[publicName];

      if (propStore.hasOwnProperty(publicName)) {
        propStore[publicName].push(directiveDefIdx, internalName);
      } else {
        propStore[publicName] = [directiveDefIdx, internalName];
      }
    }
  }

  return propStore;
}
/**
 * Initializes data structures required to work with directive inputs and outputs.
 * Initialization is done for all directives matched on a given TNode.
 */


function initializeInputAndOutputAliases(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const tViewData = tView.data;
  const tNodeAttrs = tNode.attrs;
  const inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
  let inputsStore = null;
  let outputsStore = null;

  for (let i = start; i < end; i++) {
    const directiveDef = tViewData[i];
    const directiveInputs = directiveDef.inputs; // Do not use unbound attributes as inputs to structural directives, since structural
    // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
    // should be set for inline templates.

    const initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;
    inputsFromAttrs.push(initialInputs);
    inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
    outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);
  }

  if (inputsStore !== null) {
    if (inputsStore.hasOwnProperty('class')) {
      tNode.flags |= 16
      /* hasClassInput */
      ;
    }

    if (inputsStore.hasOwnProperty('style')) {
      tNode.flags |= 32
      /* hasStyleInput */
      ;
    }
  }

  tNode.initialInputs = inputsFromAttrs;
  tNode.inputs = inputsStore;
  tNode.outputs = outputsStore;
}
/**
 * Mapping between attributes names that don't correspond to their element property names.
 *
 * Performance note: this function is written as a series of if checks (instead of, say, a property
 * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
 * mapping property names. Do NOT change without benchmarking.
 *
 * Note: this mapping has to be kept in sync with the equally named mapping in the template
 * type-checking machinery of ngtsc.
 */


function mapPropName(name) {
  if (name === 'class') return 'className';
  if (name === 'for') return 'htmlFor';
  if (name === 'formaction') return 'formAction';
  if (name === 'innerHtml') return 'innerHTML';
  if (name === 'readonly') return 'readOnly';
  if (name === 'tabindex') return 'tabIndex';
  return name;
}

function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
  const element = getNativeByTNode(tNode, lView);
  let inputData = tNode.inputs;
  let dataValue;

  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
    setInputsForProperty(tView, lView, dataValue, propName, value);
    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);

    if (ngDevMode) {
      setNgReflectProperties(lView, element, tNode.type, dataValue, value);
    }
  } else if (tNode.type & 3
  /* AnyRNode */
  ) {
    propName = mapPropName(propName);

    if (ngDevMode) {
      validateAgainstEventProperties(propName);

      if (!validateProperty(element, tNode.value, propName, tView.schemas)) {
        // Return here since we only log warnings for unknown properties.
        logUnknownPropertyError(propName, tNode.value);
        return;
      }

      ngDevMode.rendererSetProperty++;
    } // It is assumed that the sanitizer is only added when the compiler determines that the
    // property is risky, so sanitization can be done without further checks.


    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;

    if (isProceduralRenderer(renderer)) {
      renderer.setProperty(element, propName, value);
    } else if (!isAnimationProp(propName)) {
      element.setProperty ? element.setProperty(propName, value) : element[propName] = value;
    }
  } else if (tNode.type & 12
  /* AnyContainer */
  ) {
    // If the node is a container and the property didn't
    // match any of the inputs or schemas we should throw.
    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
      logUnknownPropertyError(propName, tNode.value);
    }
  }
}
/** If node is an OnPush component, marks its LView dirty. */


function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);

  if (!(childComponentLView[FLAGS] & 16
  /* CheckAlways */
  )) {
    childComponentLView[FLAGS] |= 64
    /* Dirty */
    ;
  }
}

function setNgReflectProperty(lView, element, type, attrName, value) {
  const renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  const debugValue = normalizeDebugBindingValue(value);

  if (type & 3
  /* AnyRNode */
  ) {
    if (value == null) {
      isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) : element.removeAttribute(attrName);
    } else {
      isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) : element.setAttribute(attrName, debugValue);
    }
  } else {
    const textContent = escapeCommentText(`bindings=${JSON.stringify({
      [attrName]: debugValue
    }, null, 2)}`);

    if (isProceduralRenderer(renderer)) {
      renderer.setValue(element, textContent);
    } else {
      element.textContent = textContent;
    }
  }
}

function setNgReflectProperties(lView, element, type, dataValue, value) {
  if (type & (3
  /* AnyRNode */
  | 4
  /* Container */
  )) {
    /**
     * dataValue is an array containing runtime input or output names for the directives:
     * i+0: directive instance index
     * i+1: privateName
     *
     * e.g. [0, 'change', 'change-minified']
     * we want to set the reflected property with the privateName: dataValue[i+1]
     */
    for (let i = 0; i < dataValue.length; i += 2) {
      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
    }
  }
}
/**
 * Validates that the property of the element is known at runtime and returns
 * false if it's not the case.
 * This check is relevant for JIT-compiled components (for AOT-compiled
 * ones this check happens at build time).
 *
 * The property is considered known if either:
 * - it's a known property of the element
 * - the element is allowed by one of the schemas
 * - the property is used for animations
 *
 * @param element Element to validate
 * @param tagName Name of the tag to check
 * @param propName Name of the property to check
 * @param schemas Array of schemas
 */


function validateProperty(element, tagName, propName, schemas) {
  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
  // defined as an array (as an empty array in case `schemas` field is not defined) and we should
  // execute the check below.
  if (schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element,
  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).

  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {
    return true;
  } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
  // need to account for both here, while being careful with `typeof null` also returning 'object'.


  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
}
/**
 * Returns true if the tag name is allowed by specified schemas.
 * @param schemas Array of schemas
 * @param tagName Name of the tag
 */


function matchingSchemas(schemas, tagName) {
  if (schemas !== null) {
    for (let i = 0; i < schemas.length; i++) {
      const schema = schemas[i];

      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
        return true;
      }
    }
  }

  return false;
}
/**
 * Logs an error that a property is not supported on an element.
 * @param propName Name of the invalid property.
 * @param tagName Name of the node on which we encountered the property.
 */


function logUnknownPropertyError(propName, tagName) {
  const message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'.`;
  console.error(formatRuntimeError(303
  /* UNKNOWN_BINDING */
  , message));
}
/**
 * Instantiate a root component.
 */


function instantiateRootComponent(tView, lView, def) {
  const rootTNode = getCurrentTNode();

  if (tView.firstCreatePass) {
    if (def.providersResolver) def.providersResolver(def);
    const directiveIndex = allocExpando(tView, lView, 1, null);
    ngDevMode && assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');
    configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);
  }

  const directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);
  attachPatchData(directive, lView);
  const native = getNativeByTNode(rootTNode, lView);

  if (native) {
    attachPatchData(native, lView);
  }

  return directive;
}
/**
 * Resolve the matched directives on a node.
 */


function resolveDirectives(tView, lView, tNode, localRefs) {
  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
  // tsickle.
  ngDevMode && assertFirstCreatePass(tView);
  let hasDirectives = false;

  if (getBindingsEnabled()) {
    const directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
    const exportsMap = localRefs === null ? null : {
      '': -1
    };

    if (directiveDefs !== null) {
      hasDirectives = true;
      initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in
      // the viewEngine:
      // - viewProviders have priority over providers
      // - the last directive in NgModule.declarations has priority over the previous one
      // So to match these rules, the order in which providers are added in the arrays is very
      // important.

      for (let i = 0; i < directiveDefs.length; i++) {
        const def = directiveDefs[i];
        if (def.providersResolver) def.providersResolver(def);
      }

      let preOrderHooksFound = false;
      let preOrderCheckHooksFound = false;
      let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);
      ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');

      for (let i = 0; i < directiveDefs.length; i++) {
        const def = directiveDefs[i]; // Merge the attrs in the order of matches. This assumes that the first directive is the
        // component itself, so that the component has the least priority.

        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
        saveNameToExportMap(directiveIdx, def, exportsMap);
        if (def.contentQueries !== null) tNode.flags |= 8
        /* hasContentQuery */
        ;
        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 128
        /* hasHostBindings */
        ;
        const lifeCycleHooks = def.type.prototype; // Only push a node index into the preOrderHooks array if this is the first
        // pre-order hook found on this node.

        if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
          // We will push the actual hook function into this array later during dir instantiation.
          // We cannot do it now because we must ensure hooks are registered in the same
          // order that directives are created (i.e. injection order).
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);
          preOrderHooksFound = true;
        }

        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);
          preOrderCheckHooksFound = true;
        }

        directiveIdx++;
      }

      initializeInputAndOutputAliases(tView, tNode);
    }

    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  } // Merge the template attrs last so that they have the highest priority.


  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  return hasDirectives;
}
/**
 * Add `hostBindings` to the `TView.hostBindingOpCodes`.
 *
 * @param tView `TView` to which the `hostBindings` should be added.
 * @param tNode `TNode` the element which contains the directive
 * @param lView `LView` current `LView`
 * @param directiveIdx Directive index in view.
 * @param directiveVarsIdx Where will the directive's vars be stored
 * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
 */


function registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  const hostBindings = def.hostBindings;

  if (hostBindings) {
    let hostBindingOpCodes = tView.hostBindingOpCodes;

    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }

    const elementIndx = ~tNode.index;

    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      // Conditionally add select element so that we are more efficient in execution.
      // NOTE: this is strictly not necessary and it trades code size for runtime perf.
      // (We could just always add it.)
      hostBindingOpCodes.push(elementIndx);
    }

    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
/**
 * Returns the last selected element index in the `HostBindingOpCodes`
 *
 * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only
 * if it changes. This method returns the last index (or '0' if not found.)
 *
 * Selected element index are only the ones which are negative.
 */


function lastSelectedElementIdx(hostBindingOpCodes) {
  let i = hostBindingOpCodes.length;

  while (i > 0) {
    const value = hostBindingOpCodes[--i];

    if (typeof value === 'number' && value < 0) {
      return value;
    }
  }

  return 0;
}
/**
 * Instantiate all the directives that were previously resolved on the current node.
 */


function instantiateAllDirectives(tView, lView, tNode, native) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;

  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }

  attachPatchData(native, lView);
  const initialInputs = tNode.initialInputs;

  for (let i = start; i < end; i++) {
    const def = tView.data[i];
    const isComponent = isComponentDef(def);

    if (isComponent) {
      ngDevMode && assertTNodeType(tNode, 3
      /* AnyRNode */
      );
      addComponentLogic(lView, tNode, def);
    }

    const directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);

    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }

    if (isComponent) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = directive;
    }
  }
}

function invokeDirectivesHostBindings(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const firstCreatePass = tView.firstCreatePass;
  const elementIndex = tNode.index;
  const currentDirectiveIndex = getCurrentDirectiveIndex();

  try {
    setSelectedIndex(elementIndex);

    for (let dirIndex = start; dirIndex < end; dirIndex++) {
      const def = tView.data[dirIndex];
      const directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);

      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
/**
 * Invoke the host bindings in creation mode.
 *
 * @param def `DirectiveDef` which may contain the `hostBindings` function.
 * @param directive Instance of directive.
 */


function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1
    /* Create */
    , directive);
  }
}
/**
 * Matches the current node against all available selectors.
 * If a component is matched (at most one), it is returned in first position in the array.
 */


function findDirectiveDefMatches(tView, viewData, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  );
  const registry = tView.directiveRegistry;
  let matches = null;

  if (registry) {
    for (let i = 0; i < registry.length; i++) {
      const def = registry[i];

      if (isNodeMatchingSelectorList(tNode, def.selectors,
      /* isProjectionMode */
      false)) {
        matches || (matches = ngDevMode ? new MatchesArray() : []);
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);

        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2
            /* Element */
            , `"${tNode.value}" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);

            if (tNode.flags & 2
            /* isComponentHost */
            ) {
              // If another component has been matched previously, it's the first element in the
              // `matches` array, see how we store components/directives in `matches` below.
              throwMultipleComponentError(tNode, matches[0].type, def.type);
            }
          }

          markAsComponentHost(tView, tNode); // The component is always stored first with directives after.

          matches.unshift(def);
        } else {
          matches.push(def);
        }
      }
    }
  }

  return matches;
}
/**
 * Marks a given TNode as a component's host. This consists of:
 * - setting appropriate TNode flags;
 * - storing index of component's host element so it will be queued for view refresh during CD.
 */


function markAsComponentHost(tView, hostTNode) {
  ngDevMode && assertFirstCreatePass(tView);
  hostTNode.flags |= 2
  /* isComponentHost */
  ;
  (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
}
/** Caches local names and their matching directive indices for query and template lookups. */


function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  if (localRefs) {
    const localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined
    // in the template to ensure the data is loaded in the same slots as their refs
    // in the template (for template queries).

    for (let i = 0; i < localRefs.length; i += 2) {
      const index = exportsMap[localRefs[i + 1]];
      if (index == null) throw new RuntimeError(-301
      /* EXPORT_NOT_FOUND */
      , ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
      localNames.push(localRefs[i], index);
    }
  }
}
/**
 * Builds up an export map as directives are created, so local refs can be quickly mapped
 * to their directive instances.
 */


function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (let i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }

    if (isComponentDef(def)) exportsMap[''] = directiveIdx;
  }
}
/**
 * Initializes the flags on the current node, setting all indices to the initial index,
 * the directive count to 0, and adding the isComponent flag.
 * @param index the initial index
 */


function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
  tNode.flags |= 1
  /* isDirectiveHost */
  ; // When the first directive is created on a node, save the index

  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
/**
 * Setup directive for instantiation.
 *
 * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well
 * as `LView`. `TView` gets the `DirectiveDef`.
 *
 * @param tView `TView`
 * @param tNode `TNode`
 * @param lView `LView`
 * @param directiveIndex Index where the directive will be stored in the Expando.
 * @param def `DirectiveDef`
 */


function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');
  tView.data[directiveIndex] = def;
  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}

function addComponentLogic(lView, hostTNode, def) {
  const native = getNativeByTNode(hostTNode, lView);
  const tView = getOrCreateTComponentView(def); // Only component views should be added to the view tree directly. Embedded views are
  // accessed through their containers because they may be removed / re-added later.

  const rendererFactory = lView[RENDERER_FACTORY];
  const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64
  /* Dirty */
  : 16
  /* CheckAlways */
  , native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null)); // Component view will always be created before any injected LContainers,
  // so this is a regular element, wrap it with the component view

  lView[hostTNode.index] = componentView;
}

function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2
    /* Element */
    , `Attempted to set attribute \`${name}\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);
  }

  const element = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
}

function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    ngDevMode && ngDevMode.rendererRemoveAttribute++;
    isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) : element.removeAttribute(name);
  } else {
    ngDevMode && ngDevMode.rendererSetAttribute++;
    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);

    if (isProceduralRenderer(renderer)) {
      renderer.setAttribute(element, name, strValue, namespace);
    } else {
      namespace ? element.setAttributeNS(namespace, name, strValue) : element.setAttribute(name, strValue);
    }
  }
}
/**
 * Sets initial input properties on directive instances from attribute data
 *
 * @param lView Current LView that is being processed.
 * @param directiveIndex Index of the directive in directives array
 * @param instance Instance of the directive on which to set the initial inputs
 * @param def The directive def that contains the list of inputs
 * @param tNode The static data for this node
 */


function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  const initialInputs = initialInputData[directiveIndex];

  if (initialInputs !== null) {
    const setInput = def.setInput;

    for (let i = 0; i < initialInputs.length;) {
      const publicName = initialInputs[i++];
      const privateName = initialInputs[i++];
      const value = initialInputs[i++];

      if (setInput !== null) {
        def.setInput(instance, value, publicName, privateName);
      } else {
        instance[privateName] = value;
      }

      if (ngDevMode) {
        const nativeElement = getNativeByTNode(tNode, lView);
        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
      }
    }
  }
}
/**
 * Generates initialInputData for a node and stores it in the template's static storage
 * so subsequent template invocations don't have to recalculate it.
 *
 * initialInputData is an array containing values that need to be set as input properties
 * for directives on this node, but only once on creation. We need this array to support
 * the case where you set an @Input property of a directive using attribute-like syntax.
 * e.g. if you have a `name` @Input, you can set it once like this:
 *
 * <my-component name="Bess"></my-component>
 *
 * @param inputs The list of inputs from the directive def
 * @param attrs The static attrs on this node
 */


function generateInitialInputs(inputs, attrs) {
  let inputsToStore = null;
  let i = 0;

  while (i < attrs.length) {
    const attrName = attrs[i];

    if (attrName === 0
    /* NamespaceURI */
    ) {
      // We do not allow inputs on namespaced attributes.
      i += 4;
      continue;
    } else if (attrName === 5
    /* ProjectAs */
    ) {
      // Skip over the `ngProjectAs` value.
      i += 2;
      continue;
    } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.


    if (typeof attrName === 'number') break;

    if (inputs.hasOwnProperty(attrName)) {
      if (inputsToStore === null) inputsToStore = [];
      inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
    }

    i += 2;
  }

  return inputsToStore;
} //////////////////////////
//// ViewContainer & View
//////////////////////////
// Not sure why I need to do `any` here but TS complains later.


const LContainerArray = class LContainer extends Array {};
/**
 * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
 *
 * @param hostNative The host element for the LContainer
 * @param hostTNode The host TNode for the LContainer
 * @param currentView The parent view of the LContainer
 * @param native The native comment element
 * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
 * @returns LContainer
 */

function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native); // https://jsperf.com/array-literal-vs-new-array-really

  const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
  true, // Boolean `true` in this position signifies that this is an `LContainer`
  false, // has transplanted views
  currentView, // parent
  null, // next
  0, // transplanted views to refresh count
  tNode, // t_host
  native, // native,
  null, // view refs
  null);
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
  ngDevMode && attachLContainerDebug(lContainer);
  return lContainer;
}
/**
 * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
 * them by executing an associated template function.
 */


function refreshEmbeddedViews(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];
      const embeddedTView = embeddedLView[TVIEW];
      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');

      if (viewAttachedToChangeDetector(embeddedLView)) {
        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
      }
    }
  }
}
/**
 * Mark transplanted views as needing to be refreshed at their insertion points.
 *
 * @param lView The `LView` that may have transplanted views.
 */


function markTransplantedViewsForRefresh(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;
    const movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');

    for (let i = 0; i < movedViews.length; i++) {
      const movedLView = movedViews[i];
      const insertionLContainer = movedLView[PARENT];
      ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for
      // refresh.

      if ((movedLView[FLAGS] & 1024
      /* RefreshTransplantedView */
      ) === 0) {
        updateTransplantedViewCount(insertionLContainer, 1);
      } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
      // those that aren't (declaration component === insertion component). In the latter case,
      // it's fine to add the flag, as we will clear it immediately in
      // `refreshEmbeddedViews` for the view currently being refreshed.


      movedLView[FLAGS] |= 1024
      /* RefreshTransplantedView */
      ;
    }
  }
} /////////////

/**
 * Refreshes components by entering the component view and processing its bindings, queries, etc.
 *
 * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
 */


function refreshComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

  if (viewAttachedToChangeDetector(componentView)) {
    const tView = componentView[TVIEW];

    if (componentView[FLAGS] & (16
    /* CheckAlways */
    | 64
    /* Dirty */
    )) {
      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
      refreshContainsDirtyView(componentView);
    }
  }
}
/**
 * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
 * children or descendants of the given lView.
 *
 * @param lView The lView which contains descendant transplanted views that need to be refreshed.
 */


function refreshContainsDirtyView(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];

      if (embeddedLView[FLAGS] & 1024
      /* RefreshTransplantedView */
      ) {
        const embeddedTView = embeddedLView[TVIEW];
        ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
      } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
        refreshContainsDirtyView(embeddedLView);
      }
    }
  }

  const tView = lView[TVIEW]; // Refresh child component views.

  const components = tView.components;

  if (components !== null) {
    for (let i = 0; i < components.length; i++) {
      const componentView = getComponentLViewByIndex(components[i], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

      if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
        refreshContainsDirtyView(componentView);
      }
    }
  }
}

function renderComponent$1(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  const componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  renderView(componentTView, componentView, componentView[CONTEXT]);
}
/**
 * Syncs an LView instance with its blueprint if they have gotten out of sync.
 *
 * Typically, blueprints and their view instances should always be in sync, so the loop here
 * will be skipped. However, consider this case of two components side-by-side:
 *
 * App template:
 * ```
 * <comp></comp>
 * <comp></comp>
 * ```
 *
 * The following will happen:
 * 1. App template begins processing.
 * 2. First <comp> is matched as a component and its LView is created.
 * 3. Second <comp> is matched as a component and its LView is created.
 * 4. App template completes processing, so it's time to check child templates.
 * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
 * 6. Second <comp> template is checked. Its blueprint has been updated by the first
 * <comp> template, but its LView was created before this update, so it is out of sync.
 *
 * Note that embedded views inside ngFor loops will never be out of sync because these views
 * are processed as soon as they are created.
 *
 * @param tView The `TView` that contains the blueprint for syncing
 * @param lView The view to sync
 */


function syncViewWithBlueprint(tView, lView) {
  for (let i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
/**
 * Adds LView or LContainer to the end of the current view tree.
 *
 * This structure will be used to traverse through nested views to remove listeners
 * and call onDestroy callbacks.
 *
 * @param lView The view where LView or LContainer should be added
 * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
 * @param lViewOrLContainer The LView or LContainer to add to the view tree
 * @returns The state passed in
 */


function addToViewTree(lView, lViewOrLContainer) {
  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
  // of order, the change detection will run out of order, as the act of retrieving the the
  // LContainer from the RNode is what adds it to the queue.
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }

  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
} ///////////////////////////////
//// Change detection
///////////////////////////////

/**
 * Marks current view and all ancestors dirty.
 *
 * Returns the root view because it is found as a byproduct of marking the view tree
 * dirty, and can be used by methods that consume markViewDirty() to easily schedule
 * change detection. Otherwise, such methods would need to traverse up the view tree
 * an additional time to get the root view and schedule a tick on it.
 *
 * @param lView The starting LView to mark dirty
 * @returns the root LView
 */


function markViewDirty(lView) {
  while (lView) {
    lView[FLAGS] |= 64
    /* Dirty */
    ;
    const parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container

    if (isRootView(lView) && !parent) {
      return lView;
    } // continue otherwise


    lView = parent;
  }

  return null;
}
/**
 * Used to schedule change detection on the whole application.
 *
 * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
 * It is usually called indirectly by calling `markDirty` when the view needs to be
 * re-rendered.
 *
 * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
 * `scheduleTick` requests. The scheduling function can be overridden in
 * `renderComponent`'s `scheduler` option.
 */


function scheduleTick(rootContext, flags) {
  const nothingScheduled = rootContext.flags === 0
  /* Empty */
  ;

  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
    // https://github.com/angular/angular/issues/39296
    // should only attach the flags when really scheduling a tick
    rootContext.flags |= flags;
    let res;
    rootContext.clean = new Promise(r => res = r);
    rootContext.scheduler(() => {
      if (rootContext.flags & 1
      /* DetectChanges */
      ) {
        rootContext.flags &= ~1
        /* DetectChanges */
        ;
        tickRootContext(rootContext);
      }

      if (rootContext.flags & 2
      /* FlushPlayers */
      ) {
        rootContext.flags &= ~2
        /* FlushPlayers */
        ;
        const playerHandler = rootContext.playerHandler;

        if (playerHandler) {
          playerHandler.flushPlayers();
        }
      }

      rootContext.clean = _CLEAN_PROMISE;
      res(null);
    });
  }
}

function tickRootContext(rootContext) {
  for (let i = 0; i < rootContext.components.length; i++) {
    const rootComponent = rootContext.components[i];
    const lView = readPatchedLView(rootComponent);
    const tView = lView[TVIEW];
    renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
  }
}

function detectChangesInternal(tView, lView, context) {
  const rendererFactory = lView[RENDERER_FACTORY];
  if (rendererFactory.begin) rendererFactory.begin();

  try {
    refreshView(tView, lView, tView.template, context);
  } catch (error) {
    handleError(lView, error);
    throw error;
  } finally {
    if (rendererFactory.end) rendererFactory.end();
  }
}
/**
 * Synchronously perform change detection on a root view and its components.
 *
 * @param lView The view which the change detection should be performed on.
 */


function detectChangesInRootView(lView) {
  tickRootContext(lView[CONTEXT]);
}

function checkNoChangesInternal(tView, view, context) {
  setIsInCheckNoChangesMode(true);

  try {
    detectChangesInternal(tView, view, context);
  } finally {
    setIsInCheckNoChangesMode(false);
  }
}
/**
 * Checks the change detector on a root view and its components, and throws if any changes are
 * detected.
 *
 * This is used in development mode to verify that running change detection doesn't
 * introduce other changes.
 *
 * @param lView The view which the change detection should be checked on.
 */


function checkNoChangesInRootView(lView) {
  setIsInCheckNoChangesMode(true);

  try {
    detectChangesInRootView(lView);
  } finally {
    setIsInCheckNoChangesMode(false);
  }
}

function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
  setCurrentQueryIndex(0);
  viewQueryFn(flags, component);
} ///////////////////////////////
//// Bindings & interpolations
///////////////////////////////

/**
 * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
 *
 * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
 * - a bound property name;
 * - a static parts of interpolated strings;
 *
 * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
 * property binding metadata will be stored in `TView.data` at the same index as a bound value in
 * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
 * following format:
 * - `propertyName` for bound properties;
 * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
 * interpolated properties.
 *
 * @param tData `TData` where meta-data will be saved;
 * @param tNode `TNode` that is a target of the binding;
 * @param propertyName bound property name;
 * @param bindingIndex binding index in `LView`
 * @param interpolationParts static interpolation parts (for property interpolations)
 */


function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
  // Binding meta-data are stored only the first time a given property instruction is processed.
  // Since we don't have a concept of the "first update pass" we need to check for presence of the
  // binding meta-data to decide if one should be stored (or if was stored already).
  if (tData[bindingIndex] === null) {
    if (tNode.inputs == null || !tNode.inputs[propertyName]) {
      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      let bindingMetadata = propertyName;

      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }

      tData[bindingIndex] = bindingMetadata;
    }
  }
}

const CLEAN_PROMISE = _CLEAN_PROMISE;

function getOrCreateLViewCleanup(view) {
  // top level variables should not be exported for performance reasons (PERF_NOTES.md)
  return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
}

function getOrCreateTViewCleanup(tView) {
  return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
}
/**
 * There are cases where the sub component's renderer needs to be included
 * instead of the current renderer (see the componentSyntheticHost* instructions).
 */


function loadComponentRenderer(currentDef, tNode, lView) {
  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
  // component (see packages/core/src/render3/component.ts). This is not consistent with the process
  // of creating inner components, when current directive index is available in the state. In order
  // to avoid relying on current def being `null` (thus special-casing root component creation), the
  // process of creating root component should be unified with the process of creating inner
  // components.
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }

  return lView[RENDERER];
}
/** Handles an error thrown in an LView. */


function handleError(lView, error) {
  const injector = lView[INJECTOR$1];
  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler && errorHandler.handleError(error);
}
/**
 * Set the inputs of directives at the current node to corresponding value.
 *
 * @param tView The current TView
 * @param lView the `LView` which contains the directives.
 * @param inputs mapping between the public "input" name and privately-known,
 *        possibly minified, property names to write to.
 * @param value Value to set.
 */


function setInputsForProperty(tView, lView, inputs, publicName, value) {
  for (let i = 0; i < inputs.length;) {
    const index = inputs[i++];
    const privateName = inputs[i++];
    const instance = lView[index];
    ngDevMode && assertIndexInRange(lView, index);
    const def = tView.data[index];

    if (def.setInput !== null) {
      def.setInput(instance, value, publicName, privateName);
    } else {
      instance[privateName] = value;
    }
  }
}
/**
 * Updates a text binding at a given index in a given LView.
 */


function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, 'Value should be a string');
  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
  ngDevMode && assertIndexInRange(lView, index);
  const element = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element, 'native element should exist');
  updateTextNode(lView[RENDERER], element, value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compute the static styling (class/style) from `TAttributes`.
 *
 * This function should be called during `firstCreatePass` only.
 *
 * @param tNode The `TNode` into which the styling information should be loaded.
 * @param attrs `TAttributes` containing the styling information.
 * @param writeToHost Where should the resulting static styles be written?
 *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
 *   - `true` Write to `TNode.styles` / `TNode.classes`
 */


function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
  let styles = writeToHost ? tNode.styles : null;
  let classes = writeToHost ? tNode.classes : null;
  let mode = 0;

  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const value = attrs[i];

      if (typeof value === 'number') {
        mode = value;
      } else if (mode == 1
      /* Classes */
      ) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2
      /* Styles */
      ) {
        const style = value;
        const styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
      }
    }
  }

  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Synchronously perform change detection on a component (and possibly its sub-components).
 *
 * This function triggers change detection in a synchronous way on a component.
 *
 * @param component The component which the change detection should be performed on.
 */


function detectChanges(component) {
  const view = getComponentViewByInstance(component);
  detectChangesInternal(view[TVIEW], view, component);
}
/**
 * Marks the component as dirty (needing change detection). Marking a component dirty will
 * schedule a change detection on it at some point in the future.
 *
 * Marking an already dirty component as dirty won't do anything. Only one outstanding change
 * detection can be scheduled per component tree.
 *
 * @param component Component to mark as dirty.
 */


function markDirty(component) {
  ngDevMode && assertDefined(component, 'component');
  const rootView = markViewDirty(getComponentViewByInstance(component));
  ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
  scheduleTick(rootView[CONTEXT], 1
  /* DetectChanges */
  );
}
/**
 * Used to perform change detection on the whole application.
 *
 * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
 * executes lifecycle hooks and conditionally checks components based on their
 * `ChangeDetectionStrategy` and dirtiness.
 *
 * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
 * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
 * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
 * be changed when calling `renderComponent` and providing the `scheduler` option.
 */


function tick(component) {
  const rootView = getRootView(component);
  const rootContext = rootView[CONTEXT];
  tickRootContext(rootContext);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
 *
 * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
 * project.
 *
 * @publicApi
 */


const INJECTOR = /*#__PURE__*/new InjectionToken('INJECTOR', // Dissable tslint because this is const enum which gets inlined not top level prop access.
// tslint:disable-next-line: no-toplevel-property-access
-1
/* Injector */
);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

class NullInjector {
  get(token, notFoundValue = THROW_IF_NOT_FOUND) {
    if (notFoundValue === THROW_IF_NOT_FOUND) {
      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
      error.name = 'NullInjectorError';
      throw error;
    }

    return notFoundValue;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An internal token whose presence in an injector indicates that the injector should treat itself
 * as a root scoped injector when processing requests for unknown tokens which may indicate
 * they are provided in the root scope.
 */


const INJECTOR_SCOPE = /*#__PURE__*/new InjectionToken('Set Injector scope.');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marker which indicates that a value has not yet been created from the factory function.
 */

const NOT_YET = {};
/**
 * Marker which indicates that the factory function for a token is in the process of being called.
 *
 * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
 * injection of a dependency has recursively attempted to inject the original token, and there is
 * a circular dependency among the providers.
 */

const CIRCULAR = {};
/**
 * A lazily initialized NullInjector.
 */

let NULL_INJECTOR$1 = undefined;

function getNullInjector() {
  if (NULL_INJECTOR$1 === undefined) {
    NULL_INJECTOR$1 = new NullInjector();
  }

  return NULL_INJECTOR$1;
}
/**
 * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
 *
 * @publicApi
 */


function createInjector(defType, parent = null, additionalProviders = null, name) {
  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);

  injector._resolveInjectorDefTypes();

  return injector;
}
/**
 * Creates a new injector without eagerly resolving its injector types. Can be used in places
 * where resolving the injector types immediately can lead to an infinite loop. The injector types
 * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
 */


function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name) {
  return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
}

class R3Injector {
  constructor(def, additionalProviders, parent, source = null) {
    this.parent = parent;
    /**
     * Map of tokens to records which contain the instances of those tokens.
     * - `null` value implies that we don't have the record. Used by tree-shakable injectors
     * to prevent further searches.
     */

    this.records = new Map();
    /**
     * The transitive set of `InjectorType`s which define this injector.
     */

    this.injectorDefTypes = new Set();
    /**
     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
     */

    this.onDestroy = new Set();
    this._destroyed = false;
    const dedupStack = []; // Start off by creating Records for every provider declared in every InjectorType
    // included transitively in additional providers then do the same for `def`. This order is
    // important because `def` may include providers that override ones in additionalProviders.

    additionalProviders && deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));
    deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack)); // Make sure the INJECTOR token provides this injector.

    this.records.set(INJECTOR, makeRecord(undefined, this)); // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
    // any injectable scoped to APP_ROOT_SCOPE.

    const record = this.records.get(INJECTOR_SCOPE);
    this.scope = record != null ? record.value : null; // Source name, used for debugging

    this.source = source || (typeof def === 'object' ? null : stringify(def));
  }
  /**
   * Flag indicating that this injector was previously destroyed.
   */


  get destroyed() {
    return this._destroyed;
  }
  /**
   * Destroy the injector and release references to every instance or provider associated with it.
   *
   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
   * hook was found.
   */


  destroy() {
    this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().

    this._destroyed = true;

    try {
      // Call all the lifecycle hooks.
      this.onDestroy.forEach(service => service.ngOnDestroy());
    } finally {
      // Release all references.
      this.records.clear();
      this.onDestroy.clear();
      this.injectorDefTypes.clear();
    }
  }

  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
    this.assertNotDestroyed(); // Set the injection context.

    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(undefined);

    try {
      // Check for the SkipSelf flag.
      if (!(flags & InjectFlags.SkipSelf)) {
        // SkipSelf isn't set, check if the record belongs to this injector.
        let record = this.records.get(token);

        if (record === undefined) {
          // No record, but maybe the token is scoped to this injector. Look for an injectable
          // def with a scope matching this injector.
          const def = couldBeInjectableType(token) && getInjectableDef(token);

          if (def && this.injectableDefInScope(def)) {
            // Found an injectable def and it's scoped to this injector. Pretend as if it was here
            // all along.
            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
          } else {
            record = null;
          }

          this.records.set(token, record);
        } // If a record was found, get the instance for it and return it.


        if (record != null
        /* NOT null || undefined */
        ) {
          return this.hydrate(token, record);
        }
      } // Select the next injector based on the Self flag - if self is set, the next injector is
      // the NullInjector, otherwise it's the parent.


      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
      // is undefined, the value is null, otherwise it's the notFoundValue.

      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
      return nextInjector.get(token, notFoundValue);
    } catch (e) {
      if (e.name === 'NullInjectorError') {
        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(stringify(token));

        if (previousInjector) {
          // We still have a parent injector, keep throwing
          throw e;
        } else {
          // Format & throw the final error message when we don't have any previous injector
          return catchInjectorError(e, token, 'R3InjectorError', this.source);
        }
      } else {
        throw e;
      }
    } finally {
      // Lastly, restore the previous injection context.
      setInjectImplementation(previousInjectImplementation);
      setCurrentInjector(previousInjector);
    }
  }
  /** @internal */


  _resolveInjectorDefTypes() {
    this.injectorDefTypes.forEach(defType => this.get(defType));
  }

  toString() {
    const tokens = [],
          records = this.records;
    records.forEach((v, token) => tokens.push(stringify(token)));
    return `R3Injector[${tokens.join(', ')}]`;
  }

  assertNotDestroyed() {
    if (this._destroyed) {
      throw new RuntimeError(205
      /* INJECTOR_ALREADY_DESTROYED */
      , ngDevMode && 'Injector has already been destroyed.');
    }
  }
  /**
   * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
   * to this injector.
   *
   * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
   * the function will return "true" to indicate that the providers of the type definition need
   * to be processed. This allows us to process providers of injector types after all imports of
   * an injector definition are processed. (following View Engine semantics: see FW-1349)
   */


  processInjectorType(defOrWrappedDef, parents, dedupStack) {
    defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
    if (!defOrWrappedDef) return false; // Either the defOrWrappedDef is an InjectorType (with injector def) or an
    // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
    // read, so care is taken to only do the read once.
    // First attempt to read the injector def (`ɵinj`).

    let def = getInjectorDef(defOrWrappedDef); // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.

    const ngModule = def == null && defOrWrappedDef.ngModule || undefined; // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
    // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
    // is the `ngModule`.

    const defType = ngModule === undefined ? defOrWrappedDef : ngModule; // Check for circular dependencies.

    if (ngDevMode && parents.indexOf(defType) !== -1) {
      const defName = stringify(defType);
      const path = parents.map(stringify);
      throwCyclicDependencyError(defName, path);
    } // Check for multiple imports of the same module


    const isDuplicate = dedupStack.indexOf(defType) !== -1; // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
    // `InjectorDef` is on its `ngModule`.

    if (ngModule !== undefined) {
      def = getInjectorDef(ngModule);
    } // If no definition was found, it might be from exports. Remove it.


    if (def == null) {
      return false;
    } // Add providers in the same way that @NgModule resolution did:
    // First, include providers from any imports.


    if (def.imports != null && !isDuplicate) {
      // Before processing defType's imports, add it to the set of parents. This way, if it ends
      // up deeply importing itself, this can be detected.
      ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module

      dedupStack.push(defType);
      let importTypesWithProviders;

      try {
        deepForEach(def.imports, imported => {
          if (this.processInjectorType(imported, parents, dedupStack)) {
            if (importTypesWithProviders === undefined) importTypesWithProviders = []; // If the processed import is an injector type with providers, we store it in the
            // list of import types with providers, so that we can process those afterwards.

            importTypesWithProviders.push(imported);
          }
        });
      } finally {
        // Remove it from the parents set when finished.
        ngDevMode && parents.pop();
      } // Imports which are declared with providers (TypeWithProviders) need to be processed
      // after all imported modules are processed. This is similar to how View Engine
      // processes/merges module imports in the metadata resolver. See: FW-1349.


      if (importTypesWithProviders !== undefined) {
        for (let i = 0; i < importTypesWithProviders.length; i++) {
          const {
            ngModule,
            providers
          } = importTypesWithProviders[i];
          deepForEach(providers, provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY));
        }
      }
    } // Track the InjectorType and add a provider for it. It's important that this is done after the
    // def's imports.


    this.injectorDefTypes.add(defType);

    const factory = getFactoryDef(defType) || (() => new defType());

    this.records.set(defType, makeRecord(factory, NOT_YET)); // Next, include providers listed on the definition itself.

    const defProviders = def.providers;

    if (defProviders != null && !isDuplicate) {
      const injectorType = defOrWrappedDef;
      deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));
    }

    return ngModule !== undefined && defOrWrappedDef.providers !== undefined;
  }
  /**
   * Process a `SingleProvider` and add it.
   */


  processProvider(provider, ngModuleType, providers) {
    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
    // property.
    provider = resolveForwardRef(provider);
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.

    const record = providerToRecord(provider, ngModuleType, providers);

    if (!isTypeProvider(provider) && provider.multi === true) {
      // If the provider indicates that it's a multi-provider, process it specially.
      // First check whether it's been defined already.
      let multiRecord = this.records.get(token);

      if (multiRecord) {
        // It has. Throw a nice error if
        if (ngDevMode && multiRecord.multi === undefined) {
          throwMixedMultiProviderError();
        }
      } else {
        multiRecord = makeRecord(undefined, NOT_YET, true);

        multiRecord.factory = () => injectArgs(multiRecord.multi);

        this.records.set(token, multiRecord);
      }

      token = provider;
      multiRecord.multi.push(provider);
    } else {
      const existing = this.records.get(token);

      if (ngDevMode && existing && existing.multi !== undefined) {
        throwMixedMultiProviderError();
      }
    }

    this.records.set(token, record);
  }

  hydrate(token, record) {
    if (ngDevMode && record.value === CIRCULAR) {
      throwCyclicDependencyError(stringify(token));
    } else if (record.value === NOT_YET) {
      record.value = CIRCULAR;
      record.value = record.factory();
    }

    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
      this.onDestroy.add(record.value);
    }

    return record.value;
  }

  injectableDefInScope(def) {
    if (!def.providedIn) {
      return false;
    }

    const providedIn = resolveForwardRef(def.providedIn);

    if (typeof providedIn === 'string') {
      return providedIn === 'any' || providedIn === this.scope;
    } else {
      return this.injectorDefTypes.has(providedIn);
    }
  }

}

function injectableDefOrInjectorDefFactory(token) {
  // Most tokens will have an injectable def directly on them, which specifies a factory directly.
  const injectableDef = getInjectableDef(token);
  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);

  if (factory !== null) {
    return factory;
  } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
  // If it's missing that, it's an error.


  if (token instanceof InjectionToken) {
    throw new RuntimeError(204
    /* INVALID_INJECTION_TOKEN */
    , ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);
  } // Undecorated types can sometimes be created if they have no constructor arguments.


  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  } // There was no way to resolve a factory for this token.


  throw new RuntimeError(204
  /* INVALID_INJECTION_TOKEN */
  , ngDevMode && 'unreachable');
}

function getUndecoratedInjectableFactory(token) {
  // If the token has parameters then it has dependencies that we cannot resolve implicitly.
  const paramLength = token.length;

  if (paramLength > 0) {
    const args = newArray(paramLength, '?');
    throw new RuntimeError(204
    /* INVALID_INJECTION_TOKEN */
    , ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);
  } // The constructor function appears to have no parameters.
  // This might be because it inherits from a super-class. In which case, use an injectable
  // def from an ancestor if there is one.
  // Otherwise this really is a simple class with no dependencies, so return a factory that
  // just instantiates the zero-arg constructor.


  const inheritedInjectableDef = getInheritedInjectableDef(token);

  if (inheritedInjectableDef !== null) {
    return () => inheritedInjectableDef.factory(token);
  } else {
    return () => new token();
  }
}

function providerToRecord(provider, ngModuleType, providers) {
  if (isValueProvider(provider)) {
    return makeRecord(undefined, provider.useValue);
  } else {
    const factory = providerToFactory(provider, ngModuleType, providers);
    return makeRecord(factory, NOT_YET);
  }
}
/**
 * Converts a `SingleProvider` into a factory function.
 *
 * @param provider provider to convert to factory
 */


function providerToFactory(provider, ngModuleType, providers) {
  let factory = undefined;

  if (isTypeProvider(provider)) {
    const unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = () => resolveForwardRef(provider.useValue);
    } else if (isFactoryProvider(provider)) {
      factory = () => provider.useFactory(...injectArgs(provider.deps || []));
    } else if (isExistingProvider(provider)) {
      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));
    } else {
      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));

      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }

      if (hasDeps(provider)) {
        factory = () => new classRef(...injectArgs(provider.deps));
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }

  return factory;
}

function makeRecord(factory, value, multi = false) {
  return {
    factory: factory,
    value: value,
    multi: multi ? [] : undefined
  };
}

function isValueProvider(value) {
  return value !== null && typeof value == 'object' && USE_VALUE$1 in value;
}

function isExistingProvider(value) {
  return !!(value && value.useExisting);
}

function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}

function isTypeProvider(value) {
  return typeof value === 'function';
}

function isClassProvider(value) {
  return !!value.useClass;
}

function hasDeps(value) {
  return !!value.deps;
}

function hasOnDestroy(value) {
  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';
}

function couldBeInjectableType(value) {
  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Concrete injectors implement this interface. Injectors are configured
 * with [providers](guide/glossary#provider) that associate
 * dependencies of various types with [injection tokens](guide/glossary#di-token).
 *
 * @see ["DI Providers"](guide/dependency-injection-providers).
 * @see `StaticProvider`
 *
 * @usageNotes
 *
 *  The following example creates a service injector instance.
 *
 * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
 *
 * ### Usage example
 *
 * {@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 *
 * {@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * @publicApi
 */


let Injector = /*#__PURE__*/(() => {
  class Injector {
    static create(options, parent) {
      var _a;

      if (Array.isArray(options)) {
        return createInjector({
          name: ''
        }, parent, options, '');
      } else {
        const name = (_a = options.name) !== null && _a !== void 0 ? _a : '';
        return createInjector({
          name
        }, options.parent, options.providers, name);
      }
    }

  }

  Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
  Injector.NULL = /* @__PURE__ */new NullInjector();
  /** @nocollapse */

  Injector.ɵprov = ɵɵdefineInjectable({
    token: Injector,
    providedIn: 'any',
    factory: () => ɵɵinject(INJECTOR)
  });
  /**
   * @internal
   * @nocollapse
   */

  Injector.__NG_ELEMENT_ID__ = -1
  /* Injector */
  ;
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */

  /**
   * Retrieves the component instance associated with a given DOM element.
   *
   * @usageNotes
   * Given the following DOM structure:
   *
   * ```html
   * <app-root>
   *   <div>
   *     <child-comp></child-comp>
   *   </div>
   * </app-root>
   * ```
   *
   * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
   * associated with this DOM element.
   *
   * Calling the function on `<app-root>` will return the `MyApp` instance.
   *
   *
   * @param element DOM element from which the component should be retrieved.
   * @returns Component instance associated with the element or `null` if there
   *    is no component associated with it.
   *
   * @publicApi
   * @globalApi ng
   */

  return Injector;
})();

function getComponent$1(element) {
  assertDomElement(element);
  const context = getLContext(element);
  if (context === null) return null;

  if (context.component === undefined) {
    context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
  }

  return context.component;
}
/**
 * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
 * view that the element is part of. Otherwise retrieves the instance of the component whose view
 * owns the element (in this case, the result is the same as calling `getOwningComponent`).
 *
 * @param element Element for which to get the surrounding component instance.
 * @returns Instance of the component that is around the element or null if the element isn't
 *    inside any component.
 *
 * @publicApi
 * @globalApi ng
 */


function getContext(element) {
  assertDomElement(element);
  const context = getLContext(element);
  return context === null ? null : context.lView[CONTEXT];
}
/**
 * Retrieves the component instance whose view contains the DOM element.
 *
 * For example, if `<child-comp>` is used in the template of `<app-comp>`
 * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
 * would return `<app-comp>`.
 *
 * @param elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @returns Component instance whose view owns the DOM element or null if the element is not
 *    part of a component view.
 *
 * @publicApi
 * @globalApi ng
 */


function getOwningComponent(elementOrDir) {
  const context = getLContext(elementOrDir);
  if (context === null) return null;
  let lView = context.lView;
  let parent;
  ngDevMode && assertLView(lView);

  while (lView[TVIEW].type === 2
  /* Embedded */
  && (parent = getLViewParent(lView))) {
    lView = parent;
  }

  return lView[FLAGS] & 512
  /* IsRoot */
  ? null : lView[CONTEXT];
}
/**
 * Retrieves all root components associated with a DOM element, directive or component instance.
 * Root components are those which have been bootstrapped by Angular.
 *
 * @param elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @returns Root components associated with the target object.
 *
 * @publicApi
 * @globalApi ng
 */


function getRootComponents(elementOrDir) {
  return [...getRootContext(elementOrDir).components];
}
/**
 * Retrieves an `Injector` associated with an element, component or directive instance.
 *
 * @param elementOrDir DOM element, component or directive instance for which to
 *    retrieve the injector.
 * @returns Injector associated with the element, component or directive instance.
 *
 * @publicApi
 * @globalApi ng
 */


function getInjector(elementOrDir) {
  const context = getLContext(elementOrDir);
  if (context === null) return Injector.NULL;
  const tNode = context.lView[TVIEW].data[context.nodeIndex];
  return new NodeInjector(tNode, context.lView);
}
/**
 * Retrieve a set of injection tokens at a given DOM node.
 *
 * @param element Element for which the injection tokens should be retrieved.
 */


function getInjectionTokens(element) {
  const context = getLContext(element);
  if (context === null) return [];
  const lView = context.lView;
  const tView = lView[TVIEW];
  const tNode = tView.data[context.nodeIndex];
  const providerTokens = [];
  const startIndex = tNode.providerIndexes & 1048575
  /* ProvidersStartIndexMask */
  ;
  const endIndex = tNode.directiveEnd;

  for (let i = startIndex; i < endIndex; i++) {
    let value = tView.data[i];

    if (isDirectiveDefHack(value)) {
      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
      // design flaw.  We should always store same type so that we can be monomorphic. The issue
      // is that for Components/Directives we store the def instead the type. The correct behavior
      // is that we should always be storing injectable type in this location.
      value = value.type;
    }

    providerTokens.push(value);
  }

  return providerTokens;
}
/**
 * Retrieves directive instances associated with a given DOM node. Does not include
 * component instances.
 *
 * @usageNotes
 * Given the following DOM structure:
 *
 * ```html
 * <app-root>
 *   <button my-button></button>
 *   <my-comp></my-comp>
 * </app-root>
 * ```
 *
 * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
 * directive that is associated with the DOM node.
 *
 * Calling `getDirectives` on `<my-comp>` will return an empty array.
 *
 * @param node DOM node for which to get the directives.
 * @returns Array of directives associated with the node.
 *
 * @publicApi
 * @globalApi ng
 */


function getDirectives(node) {
  // Skip text nodes because we can't have directives associated with them.
  if (node instanceof Text) {
    return [];
  }

  const context = getLContext(node);

  if (context === null) {
    return [];
  }

  const lView = context.lView;
  const tView = lView[TVIEW];
  const nodeIndex = context.nodeIndex;

  if (!(tView === null || tView === void 0 ? void 0 : tView.data[nodeIndex])) {
    return [];
  }

  if (context.directives === undefined) {
    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
  } // The `directives` in this case are a named array called `LComponentView`. Clone the
  // result so we don't expose an internal data structure in the user's console.


  return context.directives === null ? [] : [...context.directives];
}
/**
 * Returns the debug (partial) metadata for a particular directive or component instance.
 * The function accepts an instance of a directive or component and returns the corresponding
 * metadata.
 *
 * @param directiveOrComponentInstance Instance of a directive or component
 * @returns metadata of the passed directive or component
 *
 * @publicApi
 * @globalApi ng
 */


function getDirectiveMetadata$1(directiveOrComponentInstance) {
  const {
    constructor
  } = directiveOrComponentInstance;

  if (!constructor) {
    throw new Error('Unable to find the instance constructor');
  } // In case a component inherits from a directive, we may have component and directive metadata
  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.


  const componentDef = getComponentDef(constructor);

  if (componentDef) {
    return {
      inputs: componentDef.inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }

  const directiveDef = getDirectiveDef(constructor);

  if (directiveDef) {
    return {
      inputs: directiveDef.inputs,
      outputs: directiveDef.outputs
    };
  }

  return null;
}
/**
 * Retrieve map of local references.
 *
 * The references are retrieved as a map of local reference name to element or directive instance.
 *
 * @param target DOM element, component or directive instance for which to retrieve
 *    the local references.
 */


function getLocalRefs(target) {
  const context = getLContext(target);
  if (context === null) return {};

  if (context.localRefs === undefined) {
    context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
  }

  return context.localRefs || {};
}
/**
 * Retrieves the host element of a component or directive instance.
 * The host element is the DOM element that matched the selector of the directive.
 *
 * @param componentOrDirective Component or directive instance for which the host
 *     element should be retrieved.
 * @returns Host element of the target.
 *
 * @publicApi
 * @globalApi ng
 */


function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
/**
 * Retrieves the rendered text for a given component.
 *
 * This function retrieves the host element of a component and
 * and then returns the `textContent` for that element. This implies
 * that the text returned will include re-projected content of
 * the component as well.
 *
 * @param component The component to return the content text for.
 */


function getRenderedText(component) {
  const hostElement = getHostElement(component);
  return hostElement.textContent || '';
}
/**
 * Retrieves a list of event listeners associated with a DOM element. The list does include host
 * listeners, but it does not include event listeners defined outside of the Angular context
 * (e.g. through `addEventListener`).
 *
 * @usageNotes
 * Given the following DOM structure:
 *
 * ```html
 * <app-root>
 *   <div (click)="doSomething()"></div>
 * </app-root>
 * ```
 *
 * Calling `getListeners` on `<div>` will return an object that looks as follows:
 *
 * ```ts
 * {
 *   name: 'click',
 *   element: <div>,
 *   callback: () => doSomething(),
 *   useCapture: false
 * }
 * ```
 *
 * @param element Element for which the DOM listeners should be retrieved.
 * @returns Array of event listeners on the DOM element.
 *
 * @publicApi
 * @globalApi ng
 */


function getListeners(element) {
  assertDomElement(element);
  const lContext = getLContext(element);
  if (lContext === null) return [];
  const lView = lContext.lView;
  const tView = lView[TVIEW];
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  const listeners = [];

  if (tCleanup && lCleanup) {
    for (let i = 0; i < tCleanup.length;) {
      const firstParam = tCleanup[i++];
      const secondParam = tCleanup[i++];

      if (typeof firstParam === 'string') {
        const name = firstParam;
        const listenerElement = unwrapRNode(lView[secondParam]);
        const callback = lCleanup[tCleanup[i++]];
        const useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.
        // if useCaptureOrIndx is positive number then it in unsubscribe method
        // if useCaptureOrIndx is negative number then it is a Subscription

        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';
        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;

        if (element == listenerElement) {
          listeners.push({
            element,
            name,
            callback,
            useCapture,
            type
          });
        }
      }
    }
  }

  listeners.sort(sortListeners);
  return listeners;
}

function sortListeners(a, b) {
  if (a.name == b.name) return 0;
  return a.name < b.name ? -1 : 1;
}
/**
 * This function should not exist because it is megamorphic and only mostly correct.
 *
 * See call site for more info.
 */


function isDirectiveDefHack(obj) {
  return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
}
/**
 * Returns the attached `DebugNode` instance for an element in the DOM.
 *
 * @param element DOM element which is owned by an existing component's view.
 */


function getDebugNode$1(element) {
  if (ngDevMode && !(element instanceof Node)) {
    throw new Error('Expecting instance of DOM Element');
  }

  const lContext = getLContext(element);

  if (lContext === null) {
    return null;
  }

  const lView = lContext.lView;
  const nodeIndex = lContext.nodeIndex;

  if (nodeIndex !== -1) {
    const valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own
    // data. In this situation the TNode is not accessed at the same spot.

    const tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);
    ngDevMode && assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');
    return buildDebugNode(tNode, lView);
  }

  return null;
}
/**
 * Retrieve the component `LView` from component/element.
 *
 * NOTE: `LView` is a private and should not be leaked outside.
 *       Don't export this method to `ng.*` on window.
 *
 * @param target DOM element or component instance for which to retrieve the LView.
 */


function getComponentLView(target) {
  const lContext = getLContext(target);
  const nodeIndx = lContext.nodeIndex;
  const lView = lContext.lView;
  const componentLView = lView[nodeIndx];
  ngDevMode && assertLView(componentLView);
  return componentLView;
}
/** Asserts that a value is a DOM Element. */


function assertDomElement(value) {
  if (typeof Element !== 'undefined' && !(value instanceof Element)) {
    throw new Error('Expecting instance of DOM Element');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks a component for check (in case of OnPush components) and synchronously
 * performs change detection on the application this component belongs to.
 *
 * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
 *
 * @publicApi
 * @globalApi ng
 */


function applyChanges(component) {
  markDirty(component);
  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file introduces series of globally accessible debug tools
 * to allow for the Angular debugging story to function.
 *
 * To see this in action run the following command:
 *
 *   bazel run //packages/core/test/bundling/todo:devserver
 *
 *  Then load `localhost:5432` and start using the console tools.
 */

/**
 * This value reflects the property on the window where the dev
 * tools are patched (window.ng).
 * */


const GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
let _published = false;
/**
 * Publishes a collection of default debug tools onto`window.ng`.
 *
 * These functions are available globally when Angular is in development
 * mode and are automatically stripped away from prod mode is on.
 */

function publishDefaultGlobalUtils$1() {
  if (!_published) {
    _published = true;
    /**
     * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
     * The contract of the function might be changed in any release and/or the function can be
     * removed completely.
     */

    publishGlobalUtil('ɵsetProfiler', setProfiler);
    publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata$1);
    publishGlobalUtil('getComponent', getComponent$1);
    publishGlobalUtil('getContext', getContext);
    publishGlobalUtil('getListeners', getListeners);
    publishGlobalUtil('getOwningComponent', getOwningComponent);
    publishGlobalUtil('getHostElement', getHostElement);
    publishGlobalUtil('getInjector', getInjector);
    publishGlobalUtil('getRootComponents', getRootComponents);
    publishGlobalUtil('getDirectives', getDirectives);
    publishGlobalUtil('applyChanges', applyChanges);
  }
}
/**
 * Publishes the given function to `window.ng` so that it can be
 * used from the browser console when an application is not in production.
 */


function publishGlobalUtil(name, fn) {
  if (typeof COMPILED === 'undefined' || !COMPILED) {
    // Note: we can't export `ng` when using closure enhanced optimization as:
    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
    // - we can't declare a closure extern as the namespace `ng` is already used within Google
    //   for typings for AngularJS (via `goog.provide('ng....')`).
    const w = _global;
    ngDevMode && assertDefined(fn, 'function not defined');

    if (w) {
      let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];

      if (!container) {
        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
      }

      container[name] = fn;
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: A hack to not pull in the NullInjector from @angular/core.


const NULL_INJECTOR = {
  get: (token, notFoundValue) => {
    throwProviderNotFoundError(token, 'NullInjector');
  }
};
/**
 * Bootstraps a Component into an existing host element and returns an instance
 * of the component.
 *
 * Use this function to bootstrap a component into the DOM tree. Each invocation
 * of this function will create a separate tree of components, injectors and
 * change detection cycles and lifetimes. To dynamically insert a new component
 * into an existing tree such that it shares the same injection, change detection
 * and object lifetime, use {@link ViewContainer#createComponent}.
 *
 * @param componentType Component to bootstrap
 * @param options Optional parameters which control bootstrapping
 */

function renderComponent(componentType
/* Type as workaround for: Microsoft/TypeScript/issues/4881 */
, opts = {}) {
  ngDevMode && publishDefaultGlobalUtils$1();
  ngDevMode && assertComponentType(componentType);
  const rendererFactory = opts.rendererFactory || domRendererFactory3;
  const sanitizer = opts.sanitizer || null;
  const componentDef = getComponentDef(componentType);
  if (componentDef.type != componentType) componentDef.type = componentType; // The first index of the first selector is the tag name.

  const componentTag = componentDef.selectors[0][0];
  const hostRenderer = rendererFactory.createRenderer(null, null);
  const hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
  const rootFlags = componentDef.onPush ? 64
  /* Dirty */
  | 512
  /* IsRoot */
  : 16
  /* CheckAlways */
  | 512
  /* IsRoot */
  ;
  const rootContext = createRootContext(opts.scheduler, opts.playerHandler);
  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);
  const rootTView = createTView(0
  /* Root */
  , null, null, 1, 0, null, null, null, null, null);
  const rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null, opts.injector || null);
  enterView(rootView);
  let component;

  try {
    if (rendererFactory.begin) rendererFactory.begin();
    const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
    component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null); // create mode pass

    renderView(rootTView, rootView, null); // update mode pass

    refreshView(rootTView, rootView, null, null);
  } finally {
    leaveView();
    if (rendererFactory.end) rendererFactory.end();
  }

  return component;
}
/**
 * Creates the root component view and the root component node.
 *
 * @param rNode Render host element.
 * @param def ComponentDef
 * @param rootView The parent view where the host node is stored
 * @param rendererFactory Factory to be used for creating child renderers.
 * @param hostRenderer The current renderer
 * @param sanitizer The sanitizer, if provided
 *
 * @returns Component view created
 */


function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
  const tView = rootView[TVIEW];
  const index = HEADER_OFFSET;
  ngDevMode && assertIndexInRange(rootView, index);
  rootView[index] = rNode; // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at
  // the same time we want to communicate the debug `TNode` that this is a special `TNode`
  // representing a host element.

  const tNode = getOrCreateTNode(tView, index, 2
  /* Element */
  , '#host', null);
  const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;

  if (mergedAttrs !== null) {
    computeStaticStyling(tNode, mergedAttrs, true);

    if (rNode !== null) {
      setUpAttributes(hostRenderer, rNode, mergedAttrs);

      if (tNode.classes !== null) {
        writeDirectClass(hostRenderer, rNode, tNode.classes);
      }

      if (tNode.styles !== null) {
        writeDirectStyle(hostRenderer, rNode, tNode.styles);
      }
    }
  }

  const viewRenderer = rendererFactory.createRenderer(rNode, def);
  const componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64
  /* Dirty */
  : 16
  /* CheckAlways */
  , rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null);

  if (tView.firstCreatePass) {
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
    markAsComponentHost(tView, tNode);
    initTNodeFlags(tNode, rootView.length, 1);
  }

  addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST

  return rootView[index] = componentView;
}
/**
 * Creates a root component and sets it up with features and host bindings. Shared by
 * renderComponent() and ViewContainerRef.createComponent().
 */


function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
  const tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData

  const component = instantiateRootComponent(tView, rootLView, componentDef);
  rootContext.components.push(component);
  componentView[CONTEXT] = component;
  hostFeatures && hostFeatures.forEach(feature => feature(component, componentDef)); // We want to generate an empty QueryList for root content queries for backwards
  // compatibility with ViewEngine.

  if (componentDef.contentQueries) {
    const tNode = getCurrentTNode();
    ngDevMode && assertDefined(tNode, 'TNode expected');
    componentDef.contentQueries(1
    /* Create */
    , component, tNode.directiveStart);
  }

  const rootTNode = getCurrentTNode();
  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');

  if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
    setSelectedIndex(rootTNode.index);
    const rootTView = rootLView[TVIEW];
    registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);
    invokeHostBindingsInCreationMode(componentDef, component);
  }

  return component;
}

function createRootContext(scheduler, playerHandler) {
  return {
    components: [],
    scheduler: scheduler || defaultScheduler,
    clean: CLEAN_PROMISE,
    playerHandler: playerHandler || null,
    flags: 0
    /* Empty */

  };
}
/**
 * Used to enable lifecycle hooks on the root component.
 *
 * Include this feature when calling `renderComponent` if the root component
 * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
 * be called properly.
 *
 * Example:
 *
 * ```
 * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
 * ```
 */


function LifecycleHooksFeature(component, def) {
  const lView = readPatchedLView(component);
  ngDevMode && assertDefined(lView, 'LView is required');
  const tView = lView[TVIEW];
  const tNode = getCurrentTNode();
  ngDevMode && assertDefined(tNode, 'TNode is required');
  registerPostOrderHooks(tView, tNode);
}
/**
 * Wait on component until it is rendered.
 *
 * This function returns a `Promise` which is resolved when the component's
 * change detection is executed. This is determined by finding the scheduler
 * associated with the `component`'s render tree and waiting until the scheduler
 * flushes. If nothing is scheduled, the function returns a resolved promise.
 *
 * Example:
 * ```
 * await whenRendered(myComponent);
 * ```
 *
 * @param component Component to wait upon
 * @returns Promise which resolves when the component is rendered.
 */


function whenRendered(component) {
  return getRootContext(component).clean;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
/**
 * Merges the definition from a super class to a sub class.
 * @param definition The definition that is a SubClass of another directive of component
 *
 * @codeGenApi
 */


function ɵɵInheritDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let shouldInheritFields = true;
  const inheritanceChain = [definition];

  while (superType) {
    let superDef = undefined;

    if (isComponentDef(definition)) {
      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
      superDef = superType.ɵcmp || superType.ɵdir;
    } else {
      if (superType.ɵcmp) {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}` : '';
        throw new RuntimeError(903
        /* INVALID_INHERITANCE */
        , errorMessage);
      } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.


      superDef = superType.ɵdir;
    }

    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that
        // would've justified object creation. Unwrap them if necessary.

        const writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings

        const superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries

        const superViewQuery = superDef.viewQuery;
        const superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs

        fillProperties(definition.inputs, superDef.inputs);
        fillProperties(definition.declaredInputs, superDef.declaredInputs);
        fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.
        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).

        if (isComponentDef(superDef) && superDef.data.animation) {
          // If super def is a Component, the `definition` is also a Component, since Directives can
          // not inherit Components (we throw an error above and cannot reach this code).
          const defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      } // Run parent features


      const features = superDef.features;

      if (features) {
        for (let i = 0; i < features.length; i++) {
          const feature = features[i];

          if (feature && feature.ngInherit) {
            feature(definition);
          } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
          // def already has all the necessary information inherited from its super class(es), so we
          // can stop merging fields from super classes. However we need to iterate through the
          // prototype chain to look for classes that might contain other "features" (like
          // NgOnChanges), which we should invoke for the original `definition`. We set the
          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
          // logic and only invoking functions from the "features" list.


          if (feature === ɵɵInheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }

    superType = Object.getPrototypeOf(superType);
  }

  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
/**
 * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
 *
 * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
 * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
 * type.
 */


function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  let hostVars = 0;
  let hostAttrs = null; // We process the inheritance order from the base to the leaves here.

  for (let i = inheritanceChain.length - 1; i >= 0; i--) {
    const def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.

    def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.

    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}

function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}

function inheritViewQuery(definition, superViewQuery) {
  const prevViewQuery = definition.viewQuery;

  if (prevViewQuery) {
    definition.viewQuery = (rf, ctx) => {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}

function inheritContentQueries(definition, superContentQueries) {
  const prevContentQueries = definition.contentQueries;

  if (prevContentQueries) {
    definition.contentQueries = (rf, ctx, directiveIndex) => {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}

function inheritHostBindings(definition, superHostBindings) {
  const prevHostBindings = definition.hostBindings;

  if (prevHostBindings) {
    definition.hostBindings = (rf, ctx) => {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Fields which exist on either directive or component definitions, and need to be copied from
 * parent to child classes by the `ɵɵCopyDefinitionFeature`.
 */


const COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.
'providersResolver' // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
// as inputs, outputs, and host binding functions.
];
/**
 * Fields which exist only on component definitions, and need to be copied from parent to child
 * classes by the `ɵɵCopyDefinitionFeature`.
 *
 * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
 * since those should go in `COPY_DIRECTIVE_FIELDS` above.
 */

const COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template
// semantics.
'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.
'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.
'schemas'];
/**
 * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
 * definition.
 *
 * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
 * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
 * generates a skeleton definition on the child class, and applies this feature.
 *
 * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
 * including things like the component template function.
 *
 * @param definition The definition of a child class which inherits from a parent class with its
 * own definition.
 *
 * @codeGenApi
 */

function ɵɵCopyDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let superDef = undefined;

  if (isComponentDef(definition)) {
    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
    superDef = superType.ɵcmp;
  } else {
    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
    superDef = superType.ɵdir;
  } // Needed because `definition` fields are readonly.


  const defAny = definition; // Copy over any fields that apply to either directives or components.

  for (const field of COPY_DIRECTIVE_FIELDS) {
    defAny[field] = superDef[field];
  }

  if (isComponentDef(superDef)) {
    // Copy over any component-specific fields.
    for (const field of COPY_COMPONENT_FIELDS) {
      defAny[field] = superDef[field];
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let _symbolIterator = null;

function getSymbolIterator() {
  if (!_symbolIterator) {
    const Symbol = _global['Symbol'];

    if (Symbol && Symbol.iterator) {
      _symbolIterator = Symbol.iterator;
    } else {
      // es6-shim specific logic
      const keys = Object.getOwnPropertyNames(Map.prototype);

      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];

        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
          _symbolIterator = key;
        }
      }
    }
  }

  return _symbolIterator;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function devModeEqual(a, b) {
  const isListLikeIterableA = isListLikeIterable(a);
  const isListLikeIterableB = isListLikeIterable(b);

  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    const isAObject = a && (typeof a === 'object' || typeof a === 'function');
    const isBObject = b && (typeof b === 'object' || typeof b === 'function');

    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}

function isListLikeIterable(obj) {
  if (!isJsObject(obj)) return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
}

function areIterablesEqual(a, b, comparator) {
  const iterator1 = a[getSymbolIterator()]();
  const iterator2 = b[getSymbolIterator()]();

  while (true) {
    const item1 = iterator1.next();
    const item2 = iterator2.next();
    if (item1.done && item2.done) return true;
    if (item1.done || item2.done) return false;
    if (!comparator(item1.value, item2.value)) return false;
  }
}

function iterateListLike(obj, fn) {
  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn(obj[i]);
    }
  } else {
    const iterator = obj[getSymbolIterator()]();
    let item;

    while (!(item = iterator.next()).done) {
      fn(item.value);
    }
  }
}

function isJsObject(o) {
  return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO(misko): consider inlining

/** Updates binding and returns the value. */


function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
/** Gets the current binding value. */


function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
  return lView[bindingIndex];
}
/**
 * Updates binding if changed, then returns whether it was updated.
 *
 * This function also checks the `CheckNoChangesMode` and throws if changes are made.
 * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
 * behavior.
 *
 * @param lView current `LView`
 * @param bindingIndex The binding in the `LView` to check
 * @param value New value to check against `lView[bindingIndex]`
 * @returns `true` if the bindings has changed. (Throws if binding has changed during
 *          `CheckNoChangesMode`)
 */


function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
  const oldValue = lView[bindingIndex];

  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      // View engine didn't report undefined values as changed on the first checkNoChanges pass
      // (before the change detection was run).
      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;

      if (!devModeEqual(oldValueToCompare, value)) {
        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
      } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
      // For this reason we exit as if no change. The early exit is needed to prevent the changed
      // value to be written into `LView` (If we would write the new value that we would not see it
      // as change on next CD.)


      return false;
    }

    lView[bindingIndex] = value;
    return true;
  }
}
/** Updates 2 bindings if changed, then returns whether either was updated. */


function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  const different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
/** Updates 3 bindings if changed, then returns whether any was updated. */


function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
/** Updates 4 bindings if changed, then returns whether any was updated. */


function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Updates the value of or removes a bound attribute on an Element.
 *
 * Used in the case of `[attr.title]="value"`
 *
 * @param name name The name of the attribute.
 * @param value value The attribute is removed when value is `null` or `undefined`.
 *                  Otherwise the attribute value is set to the stringified value.
 * @param sanitizer An optional function used to sanitize the value.
 * @param namespace Optional namespace to use when setting the attribute.
 *
 * @codeGenApi
 */


function ɵɵattribute(name, value, sanitizer, namespace) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
  }

  return ɵɵattribute;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create interpolation bindings with a variable number of expressions.
 *
 * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
 * Those are faster because there is no need to create an array of expressions and iterate over it.
 *
 * `values`:
 * - has static text at even indexes,
 * - has evaluated expressions at odd indexes.
 *
 * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
 */


function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
  let isBindingUpdated = false;
  let bindingIndex = getBindingIndex();

  for (let i = 1; i < values.length; i += 2) {
    // Check if bindings (odd indexes) have changed
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }

  setBindingIndex(bindingIndex);

  if (!isBindingUpdated) {
    return NO_CHANGE;
  } // Build the updated content


  let content = values[0];

  for (let i = 1; i < values.length; i += 2) {
    content += renderStringify(values[i]) + values[i + 1];
  }

  return content;
}
/**
 * Creates an interpolation binding with 1 expression.
 *
 * @param prefix static value used for concatenation only.
 * @param v0 value checked for change.
 * @param suffix static value used for concatenation only.
 */


function interpolation1(lView, prefix, v0, suffix) {
  const different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 2 expressions.
 */


function interpolation2(lView, prefix, v0, i0, v1, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 3 expressions.
 */


function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
/**
 * Create an interpolation binding with 4 expressions.
 */


function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 5 expressions.
 */


function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 6 expressions.
 */


function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 7 expressions.
 */


function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 8 expressions.
 */


function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
/**
 *
 * Update an interpolated attribute on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
  }

  return ɵɵattributeInterpolate1;
}
/**
 *
 * Update an interpolated attribute on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
  }

  return ɵɵattributeInterpolate2;
}
/**
 *
 * Update an interpolated attribute on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }

  return ɵɵattributeInterpolate3;
}
/**
 *
 * Update an interpolated attribute on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }

  return ɵɵattributeInterpolate4;
}
/**
 *
 * Update an interpolated attribute on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }

  return ɵɵattributeInterpolate5;
}
/**
 *
 * Update an interpolated attribute on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }

  return ɵɵattributeInterpolate6;
}
/**
 *
 * Update an interpolated attribute on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }

  return ɵɵattributeInterpolate7;
}
/**
 *
 * Update an interpolated attribute on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * @param attrName The name of the attribute to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }

  return ɵɵattributeInterpolate8;
}
/**
 * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * @param attrName The name of the attribute to update.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);

  if (interpolated !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);

    if (ngDevMode) {
      const interpolationInBetween = [values[0]]; // prefix

      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }

      storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }

  return ɵɵattributeInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the "create" only version

  const tNode = getOrCreateTNode(tView, index, 4
  /* Container */
  , tagName || null, getConstant(tViewConsts, attrsIndex));
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  registerPostOrderHooks(tView, tNode);
  const embeddedTView = tNode.tViews = createTView(2
  /* Embedded */
  , tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);

  if (tView.queries !== null) {
    tView.queries.template(tView, tNode);
    embeddedTView.queries = tView.queries.embeddedTView(tNode);
  }

  return tNode;
}
/**
 * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
 *
 * <ng-template #foo>
 *    <div></div>
 * </ng-template>
 *
 * @param index The index of the container in the data array
 * @param templateFn Inline template
 * @param decls The number of nodes, local refs, and pipes for this template
 * @param vars The number of bindings for this template
 * @param tagName The name of the container element, if applicable
 * @param attrsIndex Index of template attributes in the `consts` array.
 * @param localRefs Index of the local references in the `consts` array.
 * @param localRefExtractor A function which extracts local-refs values from the template.
 *        Defaults to the current element associated with the local-ref.
 *
 * @codeGenApi
 */


function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, false);
  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
  appendChild(tView, lView, comment, tNode);
  attachPatchData(comment, lView);
  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
  }

  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode, localRefExtractor);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Store a value in the `data` at a given `index`. */


function store(tView, lView, index, value) {
  // We don't store any static data for local variables, so the first time
  // we see the template, we should store as null to avoid a sparse array
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }

  lView[index] = value;
}
/**
 * Retrieves a local reference from the current contextViewData.
 *
 * If the reference to retrieve is in a parent view, this instruction is used in conjunction
 * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
 *
 * @param index The index of the local ref in contextViewData.
 *
 * @codeGenApi
 */


function ɵɵreference(index) {
  const contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of @angular/core.
 */


const angularCoreDiEnv = {
  'ɵɵdefineInjectable': ɵɵdefineInjectable,
  'ɵɵdefineInjector': ɵɵdefineInjector,
  'ɵɵinject': ɵɵinject,
  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
  'resolveForwardRef': resolveForwardRef
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
 * injectable def (`ɵprov`) onto the injectable type.
 */

function compileInjectable(type, meta) {
  let ngInjectableDef = null;
  let ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it

  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: () => {
        if (ngInjectableDef === null) {
          const compiler = getCompilerFacade({
            usage: 0
            /* Decorator */
            ,
            kind: 'injectable',
            type
          });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));
        }

        return ngInjectableDef;
      }
    });
  } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it


  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({
            usage: 0
            /* Decorator */
            ,
            kind: 'injectable',
            type
          });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {
            name: type.name,
            type,
            typeArgumentCount: 0,
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }

        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}

const USE_VALUE = /*#__PURE__*/getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});

function isUseClassProvider(meta) {
  return meta.useClass !== undefined;
}

function isUseValueProvider(meta) {
  return USE_VALUE in meta;
}

function isUseFactoryProvider(meta) {
  return meta.useFactory !== undefined;
}

function isUseExistingProvider(meta) {
  return meta.useExisting !== undefined;
}

function getInjectableMetadata(type, srcMeta) {
  // Allow the compilation of a class with a `@Injectable()` decorator without parameters
  const meta = srcMeta || {
    providedIn: null
  };
  const compilerMeta = {
    name: type.name,
    type: type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };

  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
    compilerMeta.deps = convertDependencies(meta.deps);
  } // Check to see if the user explicitly provided a `useXxxx` property.


  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }

  return compilerMeta;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injectable decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */


const Injectable = /*#__PURE__*/makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function findFirstClosedCycle(keys) {
  const res = [];

  for (let i = 0; i < keys.length; ++i) {
    if (res.indexOf(keys[i]) > -1) {
      res.push(keys[i]);
      return res;
    }

    res.push(keys[i]);
  }

  return res;
}

function constructResolvingPath(keys) {
  if (keys.length > 1) {
    const reversed = findFirstClosedCycle(keys.slice().reverse());
    const tokenStrs = reversed.map(k => stringify(k.token));
    return ' (' + tokenStrs.join(' -> ') + ')';
  }

  return '';
}

function injectionError(injector, key, constructResolvingMessage, originalError) {
  const keys = [key];
  const errMsg = constructResolvingMessage(keys);
  const error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);
  error.addKey = addKey;
  error.keys = keys;
  error.injectors = [injector];
  error.constructResolvingMessage = constructResolvingMessage;
  error[ERROR_ORIGINAL_ERROR] = originalError;
  return error;
}

function addKey(injector, key) {
  this.injectors.push(injector);
  this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property

  this.message = this.constructResolvingMessage(this.keys);
}
/**
 * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
 * {@link Injector} does not have a {@link Provider} for the given key.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 */


function noProviderError(injector, key) {
  return injectionError(injector, key, function (keys) {
    const first = stringify(keys[0].token);
    return `No provider for ${first}!${constructResolvingPath(keys)}`;
  });
}
/**
 * Thrown when dependencies form a cycle.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 */


function cyclicDependencyError(injector, key) {
  return injectionError(injector, key, function (keys) {
    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;
  });
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);

 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 */


function instantiationError(injector, originalException, originalStack, key) {
  return injectionError(injector, key, function (keys) {
    const first = stringify(keys[0].token);
    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;
  }, originalException);
}
/**
 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
 * creation.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 */


function invalidProviderError(provider) {
  return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 *
 */


function noAnnotationError(typeOrFunc, params) {
  const signature = [];

  for (let i = 0, ii = params.length; i < ii; i++) {
    const parameter = params[i];

    if (!parameter || parameter.length == 0) {
      signature.push('?');
    } else {
      signature.push(parameter.map(stringify).join(' '));
    }
  }

  return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 *
 */


function outOfBoundsError(index) {
  return Error(`Index ${index} is out-of-bounds.`);
} // TODO: add a working example after alpha38 is released

/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 */


function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A unique object used for retrieving items from the {@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 *
 * @deprecated No replacement
 * @publicApi
 */


class ReflectiveKey {
  /**
   * Private
   */
  constructor(token, id) {
    this.token = token;
    this.id = id;

    if (!token) {
      throw new Error('Token must be defined!');
    }

    this.displayName = stringify(this.token);
  }
  /**
   * Retrieves a `Key` for a token.
   */


  static get(token) {
    return _globalKeyRegistry.get(resolveForwardRef(token));
  }
  /**
   * @returns the number of keys registered in the system.
   */


  static get numberOfKeys() {
    return _globalKeyRegistry.numberOfKeys;
  }

}

class KeyRegistry {
  constructor() {
    this._allKeys = new Map();
  }

  get(token) {
    if (token instanceof ReflectiveKey) return token;

    if (this._allKeys.has(token)) {
      return this._allKeys.get(token);
    }

    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);

    this._allKeys.set(token, newKey);

    return newKey;
  }

  get numberOfKeys() {
    return this._allKeys.size;
  }

}

const _globalKeyRegistry = /*#__PURE__*/new KeyRegistry();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */


class Reflector {
  constructor(reflectionCapabilities) {
    this.reflectionCapabilities = reflectionCapabilities;
  }

  updateCapabilities(caps) {
    this.reflectionCapabilities = caps;
  }

  factory(type) {
    return this.reflectionCapabilities.factory(type);
  }

  parameters(typeOrFunc) {
    return this.reflectionCapabilities.parameters(typeOrFunc);
  }

  annotations(typeOrFunc) {
    return this.reflectionCapabilities.annotations(typeOrFunc);
  }

  propMetadata(typeOrFunc) {
    return this.reflectionCapabilities.propMetadata(typeOrFunc);
  }

  hasLifecycleHook(type, lcProperty) {
    return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
  }

  getter(name) {
    return this.reflectionCapabilities.getter(name);
  }

  setter(name) {
    return this.reflectionCapabilities.setter(name);
  }

  method(name) {
    return this.reflectionCapabilities.method(name);
  }

  importUri(type) {
    return this.reflectionCapabilities.importUri(type);
  }

  resourceUri(type) {
    return this.reflectionCapabilities.resourceUri(type);
  }

  resolveIdentifier(name, moduleUrl, members, runtime) {
    return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
  }

  resolveEnum(identifier, name) {
    return this.reflectionCapabilities.resolveEnum(identifier, name);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */


const reflector = /*#__PURE__*/new Reflector( /*#__PURE__*/new ReflectionCapabilities());
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */

class ReflectiveDependency {
  constructor(key, optional, visibility) {
    this.key = key;
    this.optional = optional;
    this.visibility = visibility;
  }

  static fromKey(key) {
    return new ReflectiveDependency(key, false, null);
  }

}

const _EMPTY_LIST = [];

class ResolvedReflectiveProvider_ {
  constructor(key, resolvedFactories, multiProvider) {
    this.key = key;
    this.resolvedFactories = resolvedFactories;
    this.multiProvider = multiProvider;
    this.resolvedFactory = this.resolvedFactories[0];
  }

}
/**
 * An internal resolved representation of a factory function created by resolving `Provider`.
 * @publicApi
 */


class ResolvedReflectiveFactory {
  constructor(
  /**
   * Factory function which can return an instance of an object represented by a key.
   */
  factory,
  /**
   * Arguments (dependencies) to the `factory` function.
   */
  dependencies) {
    this.factory = factory;
    this.dependencies = dependencies;
  }

}
/**
 * Resolve a single provider.
 */


function resolveReflectiveFactory(provider) {
  let factoryFn;
  let resolvedDeps;

  if (provider.useClass) {
    const useClass = resolveForwardRef(provider.useClass);
    factoryFn = reflector.factory(useClass);
    resolvedDeps = _dependenciesFor(useClass);
  } else if (provider.useExisting) {
    factoryFn = aliasInstance => aliasInstance;

    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
  } else if (provider.useFactory) {
    factoryFn = provider.useFactory;
    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
  } else {
    factoryFn = () => provider.useValue;

    resolvedDeps = _EMPTY_LIST;
  }

  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the `Provider` into `ResolvedProvider`.
 *
 * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
 * syntax.
 */


function resolveReflectiveProvider(provider) {
  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
}
/**
 * Resolve a list of Providers.
 */


function resolveReflectiveProviders(providers) {
  const normalized = _normalizeProviders(providers, []);

  const resolved = normalized.map(resolveReflectiveProvider);
  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
  return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
 * multi providers have been merged.
 */


function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
  for (let i = 0; i < providers.length; i++) {
    const provider = providers[i];
    const existing = normalizedProvidersMap.get(provider.key.id);

    if (existing) {
      if (provider.multiProvider !== existing.multiProvider) {
        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
      }

      if (provider.multiProvider) {
        for (let j = 0; j < provider.resolvedFactories.length; j++) {
          existing.resolvedFactories.push(provider.resolvedFactories[j]);
        }
      } else {
        normalizedProvidersMap.set(provider.key.id, provider);
      }
    } else {
      let resolvedProvider;

      if (provider.multiProvider) {
        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
      } else {
        resolvedProvider = provider;
      }

      normalizedProvidersMap.set(provider.key.id, resolvedProvider);
    }
  }

  return normalizedProvidersMap;
}

function _normalizeProviders(providers, res) {
  providers.forEach(b => {
    if (b instanceof Type) {
      res.push({
        provide: b,
        useClass: b
      });
    } else if (b && typeof b == 'object' && b.provide !== undefined) {
      res.push(b);
    } else if (Array.isArray(b)) {
      _normalizeProviders(b, res);
    } else {
      throw invalidProviderError(b);
    }
  });
  return res;
}

function constructDependencies(typeOrFunc, dependencies) {
  if (!dependencies) {
    return _dependenciesFor(typeOrFunc);
  } else {
    const params = dependencies.map(t => [t]);
    return dependencies.map(t => _extractToken(typeOrFunc, t, params));
  }
}

function _dependenciesFor(typeOrFunc) {
  const params = reflector.parameters(typeOrFunc);
  if (!params) return [];

  if (params.some(p => p == null)) {
    throw noAnnotationError(typeOrFunc, params);
  }

  return params.map(p => _extractToken(typeOrFunc, p, params));
}

function _extractToken(typeOrFunc, metadata, params) {
  let token = null;
  let optional = false;

  if (!Array.isArray(metadata)) {
    if (metadata instanceof Inject) {
      return _createDependency(metadata.token, optional, null);
    } else {
      return _createDependency(metadata, optional, null);
    }
  }

  let visibility = null;

  for (let i = 0; i < metadata.length; ++i) {
    const paramMetadata = metadata[i];

    if (paramMetadata instanceof Type) {
      token = paramMetadata;
    } else if (paramMetadata instanceof Inject) {
      token = paramMetadata.token;
    } else if (paramMetadata instanceof Optional) {
      optional = true;
    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
      visibility = paramMetadata;
    } else if (paramMetadata instanceof InjectionToken) {
      token = paramMetadata;
    }
  }

  token = resolveForwardRef(token);

  if (token != null) {
    return _createDependency(token, optional, visibility);
  } else {
    throw noAnnotationError(typeOrFunc, params);
  }
}

function _createDependency(token, optional, visibility) {
  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Threshold for the dynamic version


const UNDEFINED = {};
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * @usageNotes
 * ### Example
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * @Injectable()
 * class Engine {
 * }
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * TODO: delete in v14.
 *
 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
 * @publicApi
 */

class ReflectiveInjector {
  /**
   * Turns an array of provider definitions into an array of resolved providers.
   *
   * A resolution is a process of flattening multiple nested arrays and converting individual
   * providers into an array of `ResolvedReflectiveProvider`s.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Injectable()
   * class Engine {
   * }
   *
   * @Injectable()
   * class Car {
   *   constructor(public engine:Engine) {}
   * }
   *
   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
   *
   * expect(providers.length).toEqual(2);
   *
   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
   * expect(providers[0].key.displayName).toBe("Car");
   * expect(providers[0].dependencies.length).toEqual(1);
   * expect(providers[0].factory).toBeDefined();
   *
   * expect(providers[1].key.displayName).toBe("Engine");
   * });
   * ```
   *
   */
  static resolve(providers) {
    return resolveReflectiveProviders(providers);
  }
  /**
   * Resolves an array of providers and creates an injector from those providers.
   *
   * The passed-in providers can be an array of `Type`, `Provider`,
   * or a recursive array of more providers.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Injectable()
   * class Engine {
   * }
   *
   * @Injectable()
   * class Car {
   *   constructor(public engine:Engine) {}
   * }
   *
   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
   * expect(injector.get(Car) instanceof Car).toBe(true);
   * ```
   */


  static resolveAndCreate(providers, parent) {
    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
  }
  /**
   * Creates an injector from previously resolved providers.
   *
   * This API is the recommended way to construct injectors in performance-sensitive parts.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Injectable()
   * class Engine {
   * }
   *
   * @Injectable()
   * class Car {
   *   constructor(public engine:Engine) {}
   * }
   *
   * var providers = ReflectiveInjector.resolve([Car, Engine]);
   * var injector = ReflectiveInjector.fromResolvedProviders(providers);
   * expect(injector.get(Car) instanceof Car).toBe(true);
   * ```
   */


  static fromResolvedProviders(providers, parent) {
    return new ReflectiveInjector_(providers, parent);
  }

}

let ReflectiveInjector_ = /*#__PURE__*/(() => {
  class ReflectiveInjector_ {
    /**
     * Private
     */
    constructor(_providers, _parent) {
      /** @internal */
      this._constructionCounter = 0;
      this._providers = _providers;
      this.parent = _parent || null;
      const len = _providers.length;
      this.keyIds = [];
      this.objs = [];

      for (let i = 0; i < len; i++) {
        this.keyIds[i] = _providers[i].key.id;
        this.objs[i] = UNDEFINED;
      }
    }

    get(token, notFoundValue = THROW_IF_NOT_FOUND) {
      return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    }

    resolveAndCreateChild(providers) {
      const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return this.createChildFromResolved(ResolvedReflectiveProviders);
    }

    createChildFromResolved(providers) {
      const inj = new ReflectiveInjector_(providers);
      inj.parent = this;
      return inj;
    }

    resolveAndInstantiate(provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    }

    instantiateResolved(provider) {
      return this._instantiateProvider(provider);
    }

    getProviderAtIndex(index) {
      if (index < 0 || index >= this._providers.length) {
        throw outOfBoundsError(index);
      }

      return this._providers[index];
    }
    /** @internal */


    _new(provider) {
      if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
        throw cyclicDependencyError(this, provider.key);
      }

      return this._instantiateProvider(provider);
    }

    _getMaxNumberOfObjects() {
      return this.objs.length;
    }

    _instantiateProvider(provider) {
      if (provider.multiProvider) {
        const res = [];

        for (let i = 0; i < provider.resolvedFactories.length; ++i) {
          res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
        }

        return res;
      } else {
        return this._instantiate(provider, provider.resolvedFactories[0]);
      }
    }

    _instantiate(provider, ResolvedReflectiveFactory) {
      const factory = ResolvedReflectiveFactory.factory;
      let deps;

      try {
        deps = ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));
      } catch (e) {
        if (e.addKey) {
          e.addKey(this, provider.key);
        }

        throw e;
      }

      let obj;

      try {
        obj = factory(...deps);
      } catch (e) {
        throw instantiationError(this, e, e.stack, provider.key);
      }

      return obj;
    }

    _getByReflectiveDependency(dep) {
      return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    }

    _getByKey(key, visibility, notFoundValue) {
      if (key === ReflectiveInjector_.INJECTOR_KEY) {
        return this;
      }

      if (visibility instanceof Self) {
        return this._getByKeySelf(key, notFoundValue);
      } else {
        return this._getByKeyDefault(key, notFoundValue, visibility);
      }
    }

    _getObjByKeyId(keyId) {
      for (let i = 0; i < this.keyIds.length; i++) {
        if (this.keyIds[i] === keyId) {
          if (this.objs[i] === UNDEFINED) {
            this.objs[i] = this._new(this._providers[i]);
          }

          return this.objs[i];
        }
      }

      return UNDEFINED;
    }
    /** @internal */


    _throwOrNull(key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) {
        return notFoundValue;
      } else {
        throw noProviderError(this, key);
      }
    }
    /** @internal */


    _getByKeySelf(key, notFoundValue) {
      const obj = this._getObjByKeyId(key.id);

      return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
    }
    /** @internal */


    _getByKeyDefault(key, notFoundValue, visibility) {
      let inj;

      if (visibility instanceof SkipSelf) {
        inj = this.parent;
      } else {
        inj = this;
      }

      while (inj instanceof ReflectiveInjector_) {
        const inj_ = inj;

        const obj = inj_._getObjByKeyId(key.id);

        if (obj !== UNDEFINED) return obj;
        inj = inj_.parent;
      }

      if (inj !== null) {
        return inj.get(key.token, notFoundValue);
      } else {
        return this._throwOrNull(key, notFoundValue);
      }
    }

    get displayName() {
      const providers = _mapProviders(this, b => ' "' + b.key.displayName + '" ').join(', ');

      return `ReflectiveInjector(providers: [${providers}])`;
    }

    toString() {
      return this.displayName;
    }

  }

  ReflectiveInjector_.INJECTOR_KEY = /* @__PURE__ */ReflectiveKey.get(Injector);
  return ReflectiveInjector_;
})();

function _mapProviders(injector, fn) {
  const res = [];

  for (let i = 0; i < injector._providers.length; ++i) {
    res[i] = fn(injector.getProviderAtIndex(i));
  }

  return res;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function ɵɵdirectiveInject(token, flags = InjectFlags.Default) {
  const lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests
  // if inject utilities are used before bootstrapping.

  if (lView === null) {
    // Verify that we will not get into infinite loop.
    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);
    return ɵɵinject(token, flags);
  }

  const tNode = getCurrentTNode();
  return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * @codeGenApi
 */


function ɵɵinvalidFactory() {
  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';
  throw new Error(msg);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a property on a selected element.
 *
 * Operates on the element selected by index via the {@link select} instruction.
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
 *
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 * @returns This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵproperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵproperty;
}
/**
 * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
 * directive input.
 */


function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  const inputs = tNode.inputs;
  const property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.

  setInputsForProperty(tView, lView, inputs[property], property, value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 2
  /* Element */
  , name, attrs);
  const hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  ngDevMode && validateElementIsKnown(native, tNode.value, tView.schemas, hasDirectives);

  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }

  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }

  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }

  return tNode;
}
/**
 * Create DOM element. The instruction must later be followed by `elementEnd()` call.
 *
 * @param index Index of the element in the LView array
 * @param name Name of the DOM Node
 * @param attrsIndex Index of the element's attributes in the `consts` array.
 * @param localRefsIndex Index of the element's local references in the `consts` array.
 * @returns This function returns itself so that it may be chained.
 *
 * Attributes and localRefs are passed as an array of strings where elements with an even index
 * hold an attribute name and elements with an odd index hold an attribute value, ex.:
 * ['id', 'warning5', 'class', 'alert']
 *
 * @codeGenApi
 */


function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const renderer = lView[RENDERER];
  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());
  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  const mergedAttrs = tNode.mergedAttrs;

  if (mergedAttrs !== null) {
    setUpAttributes(renderer, native, mergedAttrs);
  }

  const classes = tNode.classes;

  if (classes !== null) {
    writeDirectClass(renderer, native, classes);
  }

  const styles = tNode.styles;

  if (styles !== null) {
    writeDirectStyle(renderer, native, styles);
  }

  if ((tNode.flags & 64
  /* isDetached */
  ) !== 64
  /* isDetached */
  ) {
    // In the i18n case, the translation may have removed this element, so only add it if it is not
    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
    appendChild(tView, lView, native, tNode);
  } // any immediate children of a component or template container must be pre-emptively
  // monkey-patched with the component view data so that the element can be inspected
  // later on using any element discovery utility methods (see `element_discovery.ts`)


  if (getElementDepthCount() === 0) {
    attachPatchData(native, lView);
  }

  increaseElementDepthCount();

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }

  if (localRefsIndex !== null) {
    saveResolvedLocalsInData(lView, tNode);
  }

  return ɵɵelementStart;
}
/**
 * Mark the end of the element.
 * @returns This function returns itself so that it may be chained.
 *
 * @codeGenApi
 */


function ɵɵelementEnd() {
  let currentTNode = getCurrentTNode();
  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');

  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }

  const tNode = currentTNode;
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  );
  decreaseElementDepthCount();
  const tView = getTView();

  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);

    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }

  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
  }

  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
  }

  return ɵɵelementEnd;
}
/**
 * Creates an empty element using {@link elementStart} and {@link elementEnd}
 *
 * @param index Index of the element in the data array
 * @param name Name of the DOM Node
 * @param attrsIndex Index of the element's attributes in the `consts` array.
 * @param localRefsIndex Index of the element's local references in the `consts` array.
 * @returns This function returns itself so that it may be chained.
 *
 * @codeGenApi
 */


function ɵɵelement(index, name, attrsIndex, localRefsIndex) {
  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);
  ɵɵelementEnd();
  return ɵɵelement;
}
/**
 * Validates that the element is known at runtime and produces
 * an error if it's not the case.
 * This check is relevant for JIT-compiled components (for AOT-compiled
 * ones this check happens at build time).
 *
 * The element is considered known if either:
 * - it's a known HTML element
 * - it's a known custom element
 * - the element matches any directive
 * - the element is allowed by one of the schemas
 *
 * @param element Element to validate
 * @param tagName Name of the tag to check
 * @param schemas Array of schemas
 * @param hasDirectives Boolean indicating that the element matches any directive
 */


function validateElementIsKnown(element, tagName, schemas, hasDirectives) {
  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
  // defined as an array (as an empty array in case `schemas` field is not defined) and we should
  // execute the check below.
  if (schemas === null) return; // If the element matches any directive, it's considered as valid.

  if (!hasDirectives && tagName !== null) {
    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered
    // as a custom element. Note that unknown elements with a dash in their name won't be instances
    // of HTMLUnknownElement in browsers that support web components.
    const isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
    // because while most browsers return 'function', IE returns 'object'.
    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);

    if (isUnknown && !matchingSchemas(schemas, tagName)) {
      let message = `'${tagName}' is not a known element:\n`;
      message += `1. If '${tagName}' is an Angular component, then verify that it is part of this module.\n`;

      if (tagName && tagName.indexOf('-') > -1) {
        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;
      } else {
        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
      }

      console.error(formatRuntimeError(304
      /* UNKNOWN_ELEMENT */
      , message));
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 8
  /* ElementContainer */
  , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify
  // and execute directives on the ng-container.

  if (attrs !== null) {
    computeStaticStyling(tNode, attrs, true);
  }

  const localRefs = getConstant(tViewConsts, localRefsIndex);
  resolveDirectives(tView, lView, tNode, localRefs);

  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }

  return tNode;
}
/**
 * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
 * The instruction must later be followed by `elementContainerEnd()` call.
 *
 * @param index Index of the element in the LView array
 * @param attrsIndex Index of the container attributes in the `consts` array.
 * @param localRefsIndex Index of the container's local references in the `consts` array.
 * @returns This function returns itself so that it may be chained.
 *
 * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
 * the DOM (as a comment node can't have attributes). Attributes are here only for directive
 * matching purposes and setting initial inputs of directives.
 *
 * @codeGenApi
 */


function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  ngDevMode && ngDevMode.rendererCreateComment++;
  const native = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');
  appendChild(tView, lView, native, tNode);
  attachPatchData(native, lView);

  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }

  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }

  return ɵɵelementContainerStart;
}
/**
 * Mark the end of the <ng-container>.
 * @returns This function returns itself so that it may be chained.
 *
 * @codeGenApi
 */


function ɵɵelementContainerEnd() {
  let currentTNode = getCurrentTNode();
  const tView = getTView();

  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(currentTNode);
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }

  ngDevMode && assertTNodeType(currentTNode, 8
  /* ElementContainer */
  );

  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);

    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }

  return ɵɵelementContainerEnd;
}
/**
 * Creates an empty logical container using {@link elementContainerStart}
 * and {@link elementContainerEnd}
 *
 * @param index Index of the element in the LView array
 * @param attrsIndex Index of the container attributes in the `consts` array.
 * @param localRefsIndex Index of the container's local references in the `consts` array.
 * @returns This function returns itself so that it may be chained.
 *
 * @codeGenApi
 */


function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);
  ɵɵelementContainerEnd();
  return ɵɵelementContainer;
}
/**
 * Returns the current OpaqueViewState instance.
 *
 * Used in conjunction with the restoreView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * @codeGenApi
 */


function ɵɵgetCurrentView() {
  return getLView();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Determine if the argument is shaped like a Promise
 */


function isPromise(obj) {
  // allow any Promise/A+ compliant thenable.
  // It's up to the caller to ensure that obj.then conforms to the spec
  return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is a Subscribable
 */


function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === 'function';
}
/**
 * Determine if the argument is an Observable
 *
 * Strictly this tests that the `obj` is `Subscribable`, since `Observable`
 * types need additional methods, such as `lift()`. But it is adequate for our
 * needs since within the Angular framework code we only ever need to use the
 * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects
 * into `Observable` as needed.
 */


const isObservable = isSubscribable;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds an event listener to the current node.
 *
 * If an output exists on one of the node's directives, it also subscribes to the output
 * and saves the subscription for later cleanup.
 *
 * @param eventName Name of the event
 * @param listenerFn The function to be called when event emits
 * @param useCapture Whether or not to use capture in event listener
 * @param eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @codeGenApi
 */

function ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);
  return ɵɵlistener;
}
/**
 * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
 * in the component's renderer. Normally all host listeners are evaluated with the
 * parent component's renderer, but, in the case of animation @triggers, they need
 * to be evaluated with the sub component's renderer (because that's where the
 * animation triggers are defined).
 *
 * Do not use this instruction as a replacement for `listener`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * @param eventName Name of the event
 * @param listenerFn The function to be called when event emits
 * @param useCapture Whether or not to use capture in event listener
 * @param eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @codeGenApi
 */


function ɵɵsyntheticHostListener(eventName, listenerFn) {
  const tNode = getCurrentTNode();
  const lView = getLView();
  const tView = getTView();
  const currentDef = getCurrentDirectiveDef(tView.data);
  const renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);
  return ɵɵsyntheticHostListener;
}
/**
 * A utility function that checks if a given element has already an event handler registered for an
 * event with a specified name. The TView.cleanup data structure is used to find out which events
 * are registered for a given element.
 */


function findExistingListener(tView, lView, eventName, tNodeIdx) {
  const tCleanup = tView.cleanup;

  if (tCleanup != null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      const cleanupEventName = tCleanup[i];

      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
        // We have found a matching event name on the same node but it might not have been
        // registered yet, so we must explicitly verify entries in the LView cleanup data
        // structures.
        const lCleanup = lView[CLEANUP];
        const listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
      // 2-element entries (for directive and queries destroy hooks). As such we can encounter
      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
      // documentation of TView.cleanup for more details of this data structure layout.


      if (typeof cleanupEventName === 'string') {
        i += 2;
      }
    }
  }

  return null;
}

function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {
  const isTNodeDirectiveHost = isDirectiveHost(tNode);
  const firstCreatePass = tView.firstCreatePass;
  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
  const context = lView[CONTEXT]; // When the ɵɵlistener instruction was generated and is executed we know that there is either a
  // native listener or a directive output on this element. As such we we know that we will have to
  // register a listener and store its cleanup function on LView.

  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertTNodeType(tNode, 3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  );
  let processOutputs = true; // Adding a native event listener is applicable when:
  // - The corresponding TNode represents a DOM element.
  // - The event target has a resolver (usually resulting in a global object,
  //   such as `window` or `document`).

  if (tNode.type & 3
  /* AnyRNode */
  || eventTargetResolver) {
    const native = getNativeByTNode(tNode, lView);
    const target = eventTargetResolver ? eventTargetResolver(native) : native;
    const lCleanupIndex = lCleanup.length;
    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all
    // events (including outputs).

    if (isProceduralRenderer(renderer)) {
      // There might be cases where multiple directives on the same element try to register an event
      // handler function for the same event. In this situation we want to avoid registration of
      // several native listeners as each registration would be intercepted by NgZone and
      // trigger change detection. This would mean that a single user action would result in several
      // change detections being invoked. To avoid this situation we want to have only one call to
      // native handler registration (for the same element and same type of event).
      //
      // In order to have just one native event handler in presence of multiple handler functions,
      // we just register a first handler function as a native event listener and then chain
      // (coalesce) other handler functions on top of the first native handler function.
      let existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an
      // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
      // view engine.
      // Also, we don't have to search for existing listeners is there are no directives
      // matching on a given node as we can't register multiple event handlers for the same event in
      // a template (this would mean having duplicate attributes).

      if (!eventTargetResolver && isTNodeDirectiveHost) {
        existingListener = findExistingListener(tView, lView, eventName, tNode.index);
      }

      if (existingListener !== null) {
        // Attach a new listener to coalesced listeners list, maintaining the order in which
        // listeners are registered. For performance reasons, we keep a reference to the last
        // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
        // the entire set each time we need to add a new listener.
        const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
        lastListenerFn.__ngNextListenerFn__ = listenerFn;
        existingListener.__ngLastListenerFn__ = listenerFn;
        processOutputs = false;
      } else {
        listenerFn = wrapListener(tNode, lView, context, listenerFn, false
        /** preventDefault */
        );
        const cleanupFn = renderer.listen(target, eventName, listenerFn);
        ngDevMode && ngDevMode.rendererAddEventListener++;
        lCleanup.push(listenerFn, cleanupFn);
        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
      }
    } else {
      listenerFn = wrapListener(tNode, lView, context, listenerFn, true
      /** preventDefault */
      );
      target.addEventListener(eventName, listenerFn, useCapture);
      ngDevMode && ngDevMode.rendererAddEventListener++;
      lCleanup.push(listenerFn);
      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
    }
  } else {
    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush
    // ancestors are marked dirty when an event occurs.
    listenerFn = wrapListener(tNode, lView, context, listenerFn, false
    /** preventDefault */
    );
  } // subscribe to directive outputs


  const outputs = tNode.outputs;
  let props;

  if (processOutputs && outputs !== null && (props = outputs[eventName])) {
    const propsLength = props.length;

    if (propsLength) {
      for (let i = 0; i < propsLength; i += 2) {
        const index = props[i];
        ngDevMode && assertIndexInRange(lView, index);
        const minifiedName = props[i + 1];
        const directiveInstance = lView[index];
        const output = directiveInstance[minifiedName];

        if (ngDevMode && !isObservable(output)) {
          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
        }

        const subscription = output.subscribe(listenerFn);
        const idx = lCleanup.length;
        lCleanup.push(listenerFn, subscription);
        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
      }
    }
  }
}

function executeListenerWithErrorHandling(lView, context, listenerFn, e) {
  try {
    profiler(6
    /* OutputStart */
    , context, listenerFn); // Only explicitly returning false from a listener should preventDefault

    return listenerFn(e) !== false;
  } catch (error) {
    handleError(lView, error);
    return false;
  } finally {
    profiler(7
    /* OutputEnd */
    , context, listenerFn);
  }
}
/**
 * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
 * if applicable.
 *
 * @param tNode The TNode associated with this listener
 * @param lView The LView that contains this listener
 * @param listenerFn The listener function to call
 * @param wrapWithPreventDefault Whether or not to prevent default behavior
 * (the procedural renderer does this already, so in those cases, we should skip)
 */


function wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {
  // Note: we are performing most of the work in the listener function itself
  // to optimize listener registration.
  return function wrapListenerIn_markDirtyAndPreventDefault(e) {
    // Ivy uses `Function` as a special token that allows us to unwrap the function
    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
    if (e === Function) {
      return listenerFn;
    } // In order to be backwards compatible with View Engine, events on component host nodes
    // must also mark the component view itself dirty (i.e. the view that it owns).


    const startView = tNode.flags & 2
    /* isComponentHost */
    ? getComponentLViewByIndex(tNode.index, lView) : lView; // See interfaces/view.ts for more on LViewFlags.ManualOnPush

    if ((lView[FLAGS] & 32
    /* ManualOnPush */
    ) === 0) {
      markViewDirty(startView);
    }

    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for
    // their presence and invoke as needed.

    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;

    while (nextListenerFn) {
      // We should prevent default if any of the listeners explicitly return false
      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }

    if (wrapWithPreventDefault && result === false) {
      e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)

      e.returnValue = false;
    }

    return result;
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieves a context at the level specified and saves it as the global, contextViewData.
 * Will get the next level up if level is not specified.
 *
 * This is used to save contexts of parent views so they can be bound in embedded views, or
 * in conjunction with reference() to bind a ref from a parent view.
 *
 * @param level The relative level of the view from which to grab context compared to contextVewData
 * @returns context
 *
 * @codeGenApi
 */


function ɵɵnextContext(level = 1) {
  return nextContextImpl(level);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Checks a given node against matching projection slots and returns the
 * determined slot index. Returns "null" if no slot matched the given node.
 *
 * This function takes into account the parsed ngProjectAs selector from the
 * node's attributes. If present, it will check whether the ngProjectAs selector
 * matches any of the projection slot selectors.
 */


function matchingProjectionSlotIndex(tNode, projectionSlots) {
  let wildcardNgContentIndex = null;
  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);

  for (let i = 0; i < projectionSlots.length; i++) {
    const slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching
    // any selector. This is necessary to be backwards compatible with view engine.

    if (slotValue === '*') {
      wildcardNgContentIndex = i;
      continue;
    } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
    // to the list of selectors, otherwise we fall back to matching against the node.


    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,
    /* isProjectionMode */
    true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i; // first matching selector "captures" a given node
    }
  }

  return wildcardNgContentIndex;
}
/**
 * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
 * It takes all the selectors from the entire component's template and decides where
 * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
 * backed by a selector).
 *
 * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
 * un-parsed form.
 *
 * The parsed form is needed for efficient matching of a node against a given CSS selector.
 * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
 *
 * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
 * drawbacks:
 * - having only a textual form would require runtime parsing of CSS selectors;
 * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
 * template author).
 *
 * @param projectionSlots? A collection of projection slots. A projection slot can be based
 *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
 *        all nodes which do not match any selector. If not specified, a single wildcard
 *        selector projection slot will be defined.
 *
 * @codeGenApi
 */


function ɵɵprojectionDef(projectionSlots) {
  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];

  if (!componentNode.projection) {
    // If no explicit projection slots are defined, fall back to a single
    // projection slot with the wildcard selector.
    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    const tails = projectionHeads.slice();
    let componentChild = componentNode.child;

    while (componentChild !== null) {
      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;

      if (slotIndex !== null) {
        if (tails[slotIndex]) {
          tails[slotIndex].projectionNext = componentChild;
        } else {
          projectionHeads[slotIndex] = componentChild;
        }

        tails[slotIndex] = componentChild;
      }

      componentChild = componentChild.next;
    }
  }
}
/**
 * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
 * to the projectionDef instruction.
 *
 * @param nodeIndex
 * @param selectorIndex:
 *        - 0 when the selector is `*` (or unspecified as this is the default value),
 *        - 1 based index of the selector from the {@link projectionDef}
 *
 * @codeGenApi
 */


function ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {
  const lView = getLView();
  const tView = getTView();
  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16
  /* Projection */
  , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.

  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content

  setCurrentTNodeAsNotParent();

  if ((tProjectionNode.flags & 64
  /* isDetached */
  ) !== 64
  /* isDetached */
  ) {
    // re-distribution of projectable nodes is stored on a component's view level
    applyProjection(tView, lView, tProjectionNode);
  }
}
/**
 *
 * Update an interpolated property on an element with a lone bound value
 *
 * Used when the value passed to a property has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div title="{{v0}}"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate('title', v0);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate(propName, v0, sanitizer) {
  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);
  return ɵɵpropertyInterpolate;
}
/**
 *
 * Update an interpolated property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
  }

  return ɵɵpropertyInterpolate1;
}
/**
 *
 * Update an interpolated property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
  }

  return ɵɵpropertyInterpolate2;
}
/**
 *
 * Update an interpolated property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }

  return ɵɵpropertyInterpolate3;
}
/**
 *
 * Update an interpolated property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }

  return ɵɵpropertyInterpolate4;
}
/**
 *
 * Update an interpolated property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }

  return ɵɵpropertyInterpolate5;
}
/**
 *
 * Update an interpolated property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }

  return ɵɵpropertyInterpolate6;
}
/**
 *
 * Update an interpolated property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }

  return ɵɵpropertyInterpolate7;
}
/**
 *
 * Update an interpolated property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }

  return ɵɵpropertyInterpolate8;
}
/**
 * Update an interpolated property on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
 *
 * @param propName The name of the property to update.
 * @param values The collection of values and the strings inbetween those values, beginning with a
 * string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param sanitizer An optional sanitizer function
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵpropertyInterpolateV(propName, values, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);

  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);

    if (ngDevMode) {
      const interpolationInBetween = [values[0]]; // prefix

      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }

      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }

  return ɵɵpropertyInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * NOTE: The word `styling` is used interchangeably as style or class styling.
 *
 * This file contains code to link styling instructions together so that they can be replayed in
 * priority order. The file exists because Ivy styling instruction execution order does not match
 * that of the priority order. The purpose of this code is to create a linked list so that the
 * instructions can be traversed in priority order when computing the styles.
 *
 * Assume we are dealing with the following code:
 * ```
 * @Component({
 *   template: `
 *     <my-cmp [style]=" {color: '#001'} "
 *             [style.color]=" #002 "
 *             dir-style-color-1
 *             dir-style-color-2> `
 * })
 * class ExampleComponent {
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#001'});
 *     ɵɵstyleProp('color', '#002');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `[dir-style-color-1]',
 * })
 * class Style1Directive {
 *   @HostBinding('style') style = {color: '#005'};
 *   @HostBinding('style.color') color = '#006';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#005'});
 *     ɵɵstyleProp('color', '#006');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `[dir-style-color-2]',
 * })
 * class Style2Directive {
 *   @HostBinding('style') style = {color: '#007'};
 *   @HostBinding('style.color') color = '#008';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#007'});
 *     ɵɵstyleProp('color', '#008');
 *     ...
 *   }
 * }
 *
 * @Directive({
 *   selector: `my-cmp',
 * })
 * class MyComponent {
 *   @HostBinding('style') style = {color: '#003'};
 *   @HostBinding('style.color') color = '#004';
 *
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#003'});
 *     ɵɵstyleProp('color', '#004');
 *     ...
 *   }
 * }
 * ```
 *
 * The Order of instruction execution is:
 *
 * NOTE: the comment binding location is for illustrative purposes only.
 *
 * ```
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * ```
 *
 * The correct priority order of concatenation is:
 *
 * ```
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * ```
 *
 * What color should be rendered?
 *
 * Once the items are correctly sorted in the list, the answer is simply the last item in the
 * concatenation list which is `#002`.
 *
 * To do so we keep a linked list of all of the bindings which pertain to this element.
 * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
 * us to traverse them in the order of priority.
 *
 * |Idx|`TView.data`|`LView`          | Notes
 * |---|------------|-----------------|--------------
 * |...|            |                 |
 * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
 * |11 |`30 | 12`   | ...             |
 * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
 * |13 |`10 | 0`    | ...             |
 * |...|            |                 |
 * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
 * |21 |`0 | 22`    | ...             |
 * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
 * |23 |`20 | 24`   | ...             |
 * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
 * |25 |`22 | 26`   | ...             |
 * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
 * |27 |`24 | 28`   | ...             |
 * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
 * |29 |`26 | 30`   | ...             |
 * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
 * |31 |`28 | 10`   | ...             |
 *
 * The above data structure allows us to re-concatenate the styling no matter which data binding
 * changes.
 *
 * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
 * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
 * there is a map (which may contain the name). This information is useful in knowing if other
 * styles with higher priority need to be searched for overwrites.
 *
 * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
 * `tnode_linked_list_spec.ts` for working example.
 */


let __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
/**
 * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
 * list of styles and compute the duplicate flag.
 *
 * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
 *
 * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
 * the head/tail of the template portion of the styles.
 *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
 *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
 *
 * @param tData The `TData` to insert into.
 * @param tNode `TNode` associated with the styling element.
 * @param tStylingKey See `TStylingKey`.
 * @param index location of where `tStyleValue` should be stored (and linked into list.)
 * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
 *               template.)
 * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 */


function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  let tmplHead = getTStylingRangePrev(tBindings);
  let tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  let isKeyDuplicateOfStatic = false;
  let tStylingKey;

  if (Array.isArray(tStylingKeyWithStatic)) {
    // We are case when the `TStylingKey` contains static fields as well.
    const staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1]; // unwrap.
    // We need to check if our key is present in the static so that we can mark it as duplicate.

    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      // tStylingKey is present in the statics, need to mark it as duplicate.
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }

  if (isHostBinding) {
    // We are inserting host bindings
    // If we don't have template bindings then `tail` is 0.
    const hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first
    // template bindings (there are none.) Instead the head points to the tail of the template.

    if (hasTemplateBindings) {
      // template head's "prev" will point to last host binding or to 0 if no host bindings yet
      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host
      // binding to point to this one

      if (previousNode !== 0) {
        // We need to update the template-tail value to point to us.
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      } // The "previous" of the template binding head should point to this host binding


      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host
      // binding to point to this one

      if (tmplHead !== 0) {
        // We need to update the template-tail value to point to us.
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      } // if we don't have template, the head points to template-tail, and needs to be advanced.


      tmplHead = index;
    }
  } else {
    // We are inserting in template section.
    // We need to set this binding's "previous" to the current template tail
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');

    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      // We need to update the previous value "next" to point to this binding
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }

    tmplTail = index;
  } // Now we need to update / compute the duplicates.
  // Starting with our location search towards head (least priority)


  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }

  markDuplicates(tData, tStylingKey, index, true, isClassBinding);
  markDuplicates(tData, tStylingKey, index, false, isClassBinding);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);

  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
/**
 * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
 *
 * @param tNode `TNode` where the residual is stored.
 * @param tStylingKey `TStylingKey` to store.
 * @param tData `TData` associated with the current `LView`.
 * @param index location of where `tStyleValue` should be stored (and linked into list.)
 * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 */


function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;

  if (residual != null
  /* or undefined */
  && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    // We have duplicate in the residual so mark ourselves as duplicate.
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
/**
 * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
 * `TStyleValue`.
 *
 * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
 * with it set to `false` to search both the previous as well as next items in the list.
 *
 * No duplicate case
 * ```
 *   [style.color]
 *   [style.width.px] <<- index
 *   [style.height.px]
 * ```
 *
 * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
 * duplicates because `width` is not found in any other part of the linked list.
 *
 * Duplicate case
 * ```
 *   [style.color]
 *   [style.width.em]
 *   [style.width.px] <<- index
 * ```
 * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
 * because `width` is found in the chain.
 *
 * Map case 1
 * ```
 *   [style.width.px]
 *   [style.color]
 *   [style]  <<- index
 * ```
 * In the above case adding `[style]` will produce a duplicate with any other bindings because
 * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
 *
 * Map case 2
 * ```
 *   [style]
 *   [style.width.px]
 *   [style.color]  <<- index
 * ```
 * In the above case adding `[style.color]` will produce a duplicate because there is already a
 * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
 * `width`.
 *
 * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
 * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
 *        the linked list.
 * @param index Starting location in the linked list to search from
 * @param isPrevDir Direction.
 *        - `true` for previous (lower priority);
 *        - `false` for next (higher priority).
 */


function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
  const tStylingAtIndex = tData[index + 1];
  const isMap = tStylingKey === null;
  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  let foundDuplicate = false; // We keep iterating as long as we have a cursor
  // AND either:
  // - we found what we are looking for, OR
  // - we are a map in which case we have to continue searching even after we find what we were
  //   looking for since we are a wild card and everything needs to be flipped to duplicate.

  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    const tStylingValueAtCursor = tData[cursor];
    const tStyleRangeAtCursor = tData[cursor + 1];

    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }

    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }

  if (foundDuplicate) {
    // if we found a duplicate, than mark ourselves.
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
/**
 * Determines if two `TStylingKey`s are a match.
 *
 * When computing whether a binding contains a duplicate, we need to compare if the instruction
 * `TStylingKey` has a match.
 *
 * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
 * - `color`
 *    - `color`    // Match another color
 *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
 *    - `['', 'color', 'other', true]` // wrapped `color` so match
 *    - `['', null, 'other', true]`       // wrapped `null` so match
 *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
 * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
 *
 * @param tStylingKeyCursor
 * @param tStylingKey
 */


function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');

  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.
  ) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
    // statics and we need to check those as well.
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)


const parserState = {
  textEnd: 0,
  key: 0,
  keyEnd: 0,
  value: 0,
  valueEnd: 0
};
/**
 * Retrieves the last parsed `key` of style.
 * @param text the text to substring the key from.
 */

function getLastParsedKey(text) {
  return text.substring(parserState.key, parserState.keyEnd);
}
/**
 * Retrieves the last parsed `value` of style.
 * @param text the text to substring the key from.
 */


function getLastParsedValue(text) {
  return text.substring(parserState.value, parserState.valueEnd);
}
/**
 * Initializes `className` string for parsing and parses the first token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 * @param text `className` to parse
 * @returns index where the next invocation of `parseClassNameNext` should resume.
 */


function parseClassName(text) {
  resetParserState(text);
  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses next `className` token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 *
 * @param text `className` to parse
 * @param index where the parsing should resume.
 * @returns index where the next invocation of `parseClassNameNext` should resume.
 */


function parseClassNameNext(text, index) {
  const end = parserState.textEnd;

  if (end === index) {
    return -1;
  }

  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
  return consumeWhitespace(text, index, end);
}
/**
 * Initializes `cssText` string for parsing and parses the first key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 * ```
 * @param text `cssText` to parse
 * @returns index where the next invocation of `parseStyleNext` should resume.
 */


function parseStyle(text) {
  resetParserState(text);
  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses the next `cssText` key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 *
 * @param text `cssText` to parse
 * @param index where the parsing should resume.
 * @returns index where the next invocation of `parseStyleNext` should resume.
 */


function parseStyleNext(text, startIndex) {
  const end = parserState.textEnd;
  let index = parserState.key = consumeWhitespace(text, startIndex, end);

  if (end === index) {
    // we reached an end so just quit
    return -1;
  }

  index = parserState.keyEnd = consumeStyleKey(text, index, end);
  index = consumeSeparator(text, index, end, 58
  /* COLON */
  );
  index = parserState.value = consumeWhitespace(text, index, end);
  index = parserState.valueEnd = consumeStyleValue(text, index, end);
  return consumeSeparator(text, index, end, 59
  /* SEMI_COLON */
  );
}
/**
 * Reset the global state of the styling parser.
 * @param text The styling text to parse.
 */


function resetParserState(text) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text.length;
}
/**
 * Returns index of next non-whitespace character.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
 *          that location.)
 */


function consumeWhitespace(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32
  /* SPACE */
  ) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Returns index of last char in class token.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last char in class token.
 */


function consumeClassToken(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32
  /* SPACE */
  ) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes all of the characters belonging to style key and token.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last style key character.
 */


function consumeStyleKey(text, startIndex, endIndex) {
  let ch;

  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45
  /* DASH */
  || ch === 95
  /* UNDERSCORE */
  || (ch & -33
  /* UPPER_CASE */
  ) >= 65
  /* A */
  && (ch & -33
  /* UPPER_CASE */
  ) <= 90
  /* Z */
  || ch >= 48
  /* ZERO */
  && ch <= 57
  /* NINE */
  )) {
    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes all whitespace and the separator `:` after the style key.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after separator and surrounding whitespace.
 */


function consumeSeparator(text, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text, startIndex, endIndex);

  if (startIndex < endIndex) {
    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text, String.fromCharCode(separator), startIndex);
    }

    startIndex++;
  }

  return startIndex;
}
/**
 * Consumes style value honoring `url()` and `""` text.
 *
 * @param text Text to scan
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after last style value character.
 */


function consumeStyleValue(text, startIndex, endIndex) {
  let ch1 = -1; // 1st previous character

  let ch2 = -1; // 2nd previous character

  let ch3 = -1; // 3rd previous character

  let i = startIndex;
  let lastChIndex = i;

  while (i < endIndex) {
    const ch = text.charCodeAt(i++);

    if (ch === 59
    /* SEMI_COLON */
    ) {
      return lastChIndex;
    } else if (ch === 34
    /* DOUBLE_QUOTE */
    || ch === 39
    /* SINGLE_QUOTE */
    ) {
      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85
    /* U */
    && ch2 === 82
    /* R */
    && ch1 === 76
    /* L */
    && ch === 40
    /* OPEN_PAREN */
    ) {
      lastChIndex = i = consumeQuotedText(text, 41
      /* CLOSE_PAREN */
      , i, endIndex);
    } else if (ch > 32
    /* SPACE */
    ) {
      // if we have a non-whitespace character then capture its location
      lastChIndex = i;
    }

    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33
    /* UPPER_CASE */
    ;
  }

  return lastChIndex;
}
/**
 * Consumes all of the quoted characters.
 *
 * @param text Text to scan
 * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
 * @param startIndex Starting index of character where the scan should start.
 * @param endIndex Ending index of character where the scan should end.
 * @returns Index after quoted characters.
 */


function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
  let ch1 = -1; // 1st previous character

  let index = startIndex;

  while (index < endIndex) {
    const ch = text.charCodeAt(index++);

    if (ch == quoteCharCode && ch1 !== 92
    /* BACK_SLASH */
    ) {
      return index;
    }

    if (ch == 92
    /* BACK_SLASH */
    && ch1 === 92
    /* BACK_SLASH */
    ) {
      // two back slashes cancel each other out. For example `"\\"` should properly end the
      // quotation. (It should not assume that the last `"` is escaped.)
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }

  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}

function malformedStyleError(text, expecting, index) {
  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.substr(index + 1) + `'. Expecting '${expecting}'.`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a style binding on an element with the provided value.
 *
 * If the style value is falsy then it will be removed from the element
 * (or assigned a different value depending if there are any styles placed
 * on the element with `styleMap` or any static styles that are
 * present from when the element was created with `styling`).
 *
 * Note that the styling element is updated as part of `stylingApply`.
 *
 * @param prop A valid CSS property.
 * @param value New value to write (`null` or an empty string to remove).
 * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
 *
 * Note that this will apply the provided style value to the host element if this function is called
 * within a host binding function.
 *
 * @codeGenApi
 */


function ɵɵstyleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return ɵɵstyleProp;
}
/**
 * Update a class binding on an element with the provided value.
 *
 * This instruction is meant to handle the `[class.foo]="exp"` case and,
 * therefore, the class binding itself must already be allocated using
 * `styling` within the creation block.
 *
 * @param prop A valid CSS class (only one).
 * @param value A true/false value which will turn the class on or off.
 *
 * Note that this will apply the provided class value to the host element if this function
 * is called within a host binding function.
 *
 * @codeGenApi
 */


function ɵɵclassProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return ɵɵclassProp;
}
/**
 * Update style bindings using an object literal on an element.
 *
 * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
 * When styles are applied to the element they will then be updated with respect to
 * any styles/classes set via `styleProp`. If any styles are set to falsy
 * then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 *
 * @param styles A key/value style map of the styles that will be applied to the given element.
 *        Any missing styles (that have already been applied to the element beforehand) will be
 *        removed (unset) from the element's styling.
 *
 * Note that this will apply the provided styleMap value to the host element if this function
 * is called within a host binding.
 *
 * @codeGenApi
 */


function ɵɵstyleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
/**
 * Parse text as style and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵstyleMap`.
 *
 * @param keyValueArray KeyValueArray to add parsed values to.
 * @param text text to parse.
 */


function styleStringParser(keyValueArray, text) {
  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
  }
}
/**
 * Update class bindings using an object literal or class-string on an element.
 *
 * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
 * When classes are applied to the element they will then be updated with
 * respect to any styles/classes set via `classProp`. If any
 * classes are set to falsy then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 * Note that this will the provided classMap value to the host element if this function is called
 * within a host binding.
 *
 * @param classes A key/value map or string of CSS classes that will be added to the
 *        given element. Any missing classes (that have already been applied to the element
 *        beforehand) will be removed (unset) from the element's list of CSS classes.
 *
 * @codeGenApi
 */


function ɵɵclassMap(classes) {
  checkStylingMap(keyValueArraySet, classStringParser, classes, true);
}
/**
 * Parse text as class and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵclassMap`.
 *
 * @param keyValueArray KeyValueArray to add parsed values to.
 * @param text text to parse.
 */


function classStringParser(keyValueArray, text) {
  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
  }
}
/**
 * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
 *
 * @param prop property name.
 * @param value binding value.
 * @param suffix suffix for the property (e.g. `em` or `px`)
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function checkStylingProperty(prop, value, suffix, isClassBased) {
  const lView = getLView();
  const tView = getTView(); // Styling instructions use 2 slots per binding.
  // 1. one for the value / TStylingKey
  // 2. one for the intermittent-value / TStylingRange

  const bindingIndex = incrementBindingIndex(2);

  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }

  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
/**
 * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
 *
 * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 *        function so that `style` can be processed. This is done for tree shaking purposes.
 * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
 *        have different parsers.)
 * @param value bound value from application
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);

  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }

  const lView = getLView();

  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
    // if so as not to read unnecessarily.
    const tNode = tView.data[getSelectedIndex()];

    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        // verify that if we are shadowing then `TData` is appropriately marked so that we skip
        // processing this binding in styling resolution.
        const tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
      } // VE does not concatenate the static portion like we are doing here.
      // Instead VE just ignores the static completely if dynamic binding is present.
      // Because of locality we have already set the static portion because we don't know if there
      // is a dynamic portion until later. If we would ignore the static portion it would look like
      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
      // thing as it would think that the static portion was removed. For this reason we
      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.


      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');

      if (staticPrefix !== null) {
        // We want to make sure that falsy values of `value` become empty strings.
        value = concatStringsWithSpace(staticPrefix, value ? value : '');
      } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
      // This takes over the `[style]` binding. (Same for `[class]`)


      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
/**
 * Determines when the binding is in `hostBindings` section
 *
 * @param tView Current `TView`
 * @param bindingIndex index of binding which we would like if it is in `hostBindings`
 */


function isInHostBindings(tView, bindingIndex) {
  // All host bindings are placed after the expando section.
  return bindingIndex >= tView.expandoStartIndex;
}
/**
 * Collects the necessary information to insert the binding into a linked list of style bindings
 * using `insertTStylingBinding`.
 *
 * @param tView `TView` where the binding linked list will be stored.
 * @param tStylingKey Property/key of the binding.
 * @param bindingIndex Index of binding associated with the `prop`
 * @param isClassBased `true` if `class` change (`false` if `style`)
 */


function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  const tData = tView.data;

  if (tData[bindingIndex + 1] === null) {
    // The above check is necessary because we don't clear first update pass until first successful
    // (no exception) template execution. This prevents the styling instruction from double adding
    // itself to the list.
    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
    // if so as not to read unnecessarily.
    const tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, 'TNode expected');
    const isHostBindings = isInHostBindings(tView, bindingIndex);

    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
      // If there is a directive which uses `@Input('style')` or `@Input('class')` than
      // we need to neutralize this binding since that directive is shadowing it.
      // We turn this into a noop by setting the key to `false`
      tStylingKey = false;
    }

    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
/**
 * Adds static styling information to the binding if applicable.
 *
 * The linked list of styles not only stores the list and keys, but also stores static styling
 * information on some of the keys. This function determines if the key should contain the styling
 * information and computes it.
 *
 * See `TStylingStatic` for more details.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  const hostDirectiveDef = getCurrentDirectiveDef(tData);
  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

  if (hostDirectiveDef === null) {
    // We are in template node.
    // If template node already had styling instruction then it has already collected the static
    // styling and there is no need to collect them again. We know that we are the first styling
    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;

    if (isFirstStylingInstructionInTemplate) {
      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
      // they are already merged and it would not be possible to figure which property belongs where
      // in the priority.
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.

      residual = null;
    }
  } else {
    // We are in host binding node and there was no binding instruction in template node.
    // This means that we need to compute the residual.
    const directiveStylingLast = tNode.directiveStylingLast;
    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;

    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);

      if (residual === null) {
        // - If `null` than either:
        //    - Template styling instruction already ran and it has consumed the static
        //      styling into its `TStylingKey` and so there is no need to update residual. Instead
        //      we need to update the `TStylingKey` associated with the first template node
        //      instruction. OR
        //    - Some other styling instruction ran and determined that there are no residuals
        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);

        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
          // Only recompute if `templateStylingKey` had static values. (If no static value found
          // then there is nothing to do since this operation can only produce less static keys, not
          // more.)
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]
          /* unwrap previous statics */
          , isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        // We only need to recompute residual if it is not `null`.
        // - If existing residual (implies there was no template styling). This means that some of
        //   the statics may have moved from the residual to the `stylingKey` and so we have to
        //   recompute.
        // - If `undefined` this is the first time we are running.
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }

  if (residual !== undefined) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }

  return stylingKey;
}
/**
 * Retrieve the `TStylingKey` for the template styling instruction.
 *
 * This is needed since `hostBinding` styling instructions are inserted after the template
 * instruction. While the template instruction needs to update the residual in `TNode` the
 * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
 * the template instruction is downstream from the `hostBindings` instructions.
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @return `TStylingKey` if found or `undefined` if not found.
 */


function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;

  if (getTStylingRangeNext(bindings) === 0) {
    // There does not seem to be a styling instruction in the `template`.
    return undefined;
  }

  return tData[getTStylingRangePrev(bindings)];
}
/**
 * Update the `TStylingKey` of the first template instruction in `TNode`.
 *
 * Logically `hostBindings` styling instructions are of lower priority than that of the template.
 * However, they execute after the template styling instructions. This means that they get inserted
 * in front of the template styling instructions.
 *
 * If we have a template styling instruction and a new `hostBindings` styling instruction is
 * executed it means that it may need to steal static fields from the template instruction. This
 * method allows us to update the first template instruction `TStylingKey` with a new value.
 *
 * Assume:
 * ```
 * <div my-dir style="color: red" [style.color]="tmplExp"></div>
 *
 * @Directive({
 *   host: {
 *     'style': 'width: 100px',
 *     '[style.color]': 'dirExp',
 *   }
 * })
 * class MyDir {}
 * ```
 *
 * when `[style.color]="tmplExp"` executes it creates this data structure.
 * ```
 *  ['', 'color', 'color', 'red', 'width', '100px'],
 * ```
 *
 * The reason for this is that the template instruction does not know if there are styling
 * instructions and must assume that there are none and must collect all of the static styling.
 * (both
 * `color' and 'width`)
 *
 * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
 * ```
 *  ['', 'color', 'width', '100px'],  // newly inserted
 *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
 * ```
 *
 * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
 * update it like so:
 * ```
 *  ['', 'color', 'width', '100px'],
 *  ['', 'color', 'color', 'red'],    // UPDATE
 * ```
 *
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param tStylingKey New `TStylingKey` which is replacing the old one.
 */


function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
/**
 * Collect all static values after the current `TNode.directiveStylingLast` index.
 *
 * Collect the remaining styling information which has not yet been collected by an existing
 * styling instruction.
 *
 * @param tData `TData` where the `DirectiveDefs` are stored.
 * @param tNode `TNode` which contains the directive range.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectResidual(tData, tNode, isClassBased) {
  let residual = undefined;
  const directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
  // collecting things after the last `hostBindings` directive which had a styling instruction.)

  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    const attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }

  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
/**
 * Collect the static styling information with lower priority than `hostDirectiveDef`.
 *
 * (This is opposite of residual styling.)
 *
 * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
 *        styling. (Or `null` if template styling)
 * @param tData `TData` where the linked list is stored.
 * @param tNode `TNode` for which the styling is being computed.
 * @param stylingKey Existing `TStylingKey` to update or wrap.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  // We need to loop because there can be directives which have `hostAttrs` but don't have
  // `hostBindings` so this loop catches up to the current directive..
  let currentDirective = null;
  const directiveEnd = tNode.directiveEnd;
  let directiveStylingLast = tNode.directiveStylingLast;

  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }

  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, 'expected to be defined');
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef) break;
    directiveStylingLast++;
  }

  if (hostDirectiveDef !== null) {
    // we only advance the styling cursor if we are collecting data from host bindings.
    // Template executes before host bindings and so if we would update the index,
    // host bindings would not get their statics.
    tNode.directiveStylingLast = directiveStylingLast;
  }

  return stylingKey;
}
/**
 * Convert `TAttrs` into `TStylingStatic`.
 *
 * @param stylingKey existing `TStylingKey` to update or wrap.
 * @param attrs `TAttributes` to process.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  const desiredMarker = isClassBased ? 1
  /* Classes */
  : 2
  /* Styles */
  ;
  let currentMarker = -1
  /* ImplicitAttributes */
  ;

  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const item = attrs[i];

      if (typeof item === 'number') {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
          }

          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }

  return stylingKey === undefined ? null : stylingKey;
}
/**
 * Convert user input to `KeyValueArray`.
 *
 * This function takes user input which could be `string`, Object literal, or iterable and converts
 * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
 * where
 * even indexes contain keys and odd indexes contain values for those keys).
 *
 * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
 * independent
 * way.
 * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
 * applied)
 *
 * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
 * difference in linear fashion without the need to allocate any additional data.
 *
 * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
 * which values need to be deleted, over the new `Map` to determine additions, and we would have to
 * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
 *
 * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 *        function so that `style` can be processed. This is done
 *        for tree shaking purposes.
 * @param stringParser The parser is passed in so that it will be tree shakable. See
 *        `styleStringParser` and `classStringParser`
 * @param value The value to parse/convert to `KeyValueArray`
 */


function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
  if (value == null
  /*|| value === undefined */
  || value === '') return EMPTY_ARRAY;
  const styleKeyValueArray = [];
  const unwrappedValue = unwrapSafeValue(value);

  if (Array.isArray(unwrappedValue)) {
    for (let i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === 'object') {
    for (const key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === 'string') {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
  }

  return styleKeyValueArray;
}
/**
 * Set a `value` for a `key`.
 *
 * See: `keyValueArraySet` for details
 *
 * @param keyValueArray KeyValueArray to add to.
 * @param key Style key to add.
 * @param value The value to set.
 */


function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
/**
 * Update map based styling.
 *
 * Map based styling could be anything which contains more than one binding. For example `string`,
 * or object literal. Dealing with all of these types would complicate the logic so
 * instead this function expects that the complex input is first converted into normalized
 * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
 * very cheap to compute deltas between the previous and current value.
 *
 * @param tView Associated `TView.data` contains the linked list of binding priorities.
 * @param tNode `TNode` where the binding is located.
 * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param renderer Renderer to use if any updates.
 * @param oldKeyValueArray Previous value represented as `KeyValueArray`
 * @param newKeyValueArray Current value represented as `KeyValueArray`
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param bindingIndex Binding index of the binding.
 */


function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
    oldKeyValueArray = EMPTY_ARRAY;
  }

  let oldIndex = 0;
  let newIndex = 0;
  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;

  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
    let setKey = null;
    let setValue = undefined;

    if (oldKey === newKey) {
      // UPDATE: Keys are equal => new value is overwriting old value.
      oldIndex += 2;
      newIndex += 2;

      if (oldValue !== newValue) {
        setKey = newKey;
        setValue = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
      // `"background" < "color"` so we need to delete `"background"` because it is not found in the
      // new array.
      oldIndex += 2;
      setKey = oldKey;
    } else {
      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
      // `"color" > "background"` so we need to add `color` because it is in new array but not in
      // old array.
      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
      newIndex += 2;
      setKey = newKey;
      setValue = newValue;
    }

    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
    }

    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
/**
 * Update a simple (property name) styling.
 *
 * This function takes `prop` and updates the DOM to that value. The function takes the binding
 * value as well as binding priority into consideration to determine which value should be written
 * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
 * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
 *
 * @param tView Associated `TView.data` contains the linked list of binding priorities.
 * @param tNode `TNode` where the binding is located.
 * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param renderer Renderer to use if any updates.
 * @param prop Either style property name or a class name.
 * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
 * @param isClassBased `true` if `class` (`false` if `style`)
 * @param bindingIndex Binding index of the binding.
 */


function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3
  /* AnyRNode */
  )) {
    // It is possible to have styling on non-elements (such as ng-container).
    // This is rare, but it does happen. In such a case, just ignore the binding.
    return;
  }

  const tData = tView.data;
  const tRange = tData[bindingIndex + 1];
  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;

  if (!isStylingValuePresent(higherPriorityValue)) {
    // We don't have a next duplicate, or we did not find a duplicate value.
    if (!isStylingValuePresent(value)) {
      // We should delete current value or restore to lower priority value.
      if (getTStylingRangePrevDuplicate(tRange)) {
        // We have a possible prev duplicate, let's retrieve it.
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }

    const rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
/**
 * Search for styling value with higher priority which is overwriting current value, or a
 * value of lower priority to which we should fall back if the value is `undefined`.
 *
 * When value is being applied at a location, related values need to be consulted.
 * - If there is a higher priority binding, we should be using that one instead.
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
 *   requires that we check `exp2` to see if it is set to value other than `undefined`.
 * - If there is a lower priority binding and we are changing to `undefined`
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
 *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
 *
 * NOTE: The styling stores two values.
 * 1. The raw value which came from the application is stored at `index + 0` location. (This value
 *    is used for dirty checking).
 * 2. The normalized value is stored at `index + 1`.
 *
 * @param tData `TData` used for traversing the priority.
 * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
 *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
 *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
 *   - `null` search prev and go all the way to end. Return last value where
 *     `isStylingValuePresent(value)` is true.
 * @param lView `LView` used for retrieving the actual values.
 * @param prop Property which we are interested in.
 * @param index Starting index in the linked list of styling bindings where the search should start.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  // `TNode` to use for resolving static styling. Also controls search direction.
  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
  //   - `null` search prev and go all the way to end. Return last value where
  //     `isStylingValuePresent(value)` is true.
  const isPrevDirection = tNode === null;
  let value = undefined;

  while (index > 0) {
    const rawKey = tData[index];
    const containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.

    const key = containsStatics ? rawKey[1] : rawKey;
    const isStylingMap = key === null;
    let valueAtLViewIndex = lView[index + 1];

    if (valueAtLViewIndex === NO_CHANGE) {
      // In firstUpdatePass the styling instructions create a linked list of styling.
      // On subsequent passes it is possible for a styling instruction to try to read a binding
      // which
      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
      // we have `undefined` (or empty array in case of styling-map instruction) instead. This
      // allows the resolution to apply the value (which may later be overwritten when the
      // binding actually executes.)
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;
    }

    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;

    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }

    if (isStylingValuePresent(currentValue)) {
      value = currentValue;

      if (isPrevDirection) {
        return value;
      }
    }

    const tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }

  if (tNode !== null) {
    // in case where we are going in next direction AND we did not find anything, we need to
    // consult residual styling
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

    if (residual != null
    /** OR residual !=== undefined */
    ) {
      value = keyValueArrayGet(residual, prop);
    }
  }

  return value;
}
/**
 * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
 * resolution should be used.)
 *
 * @param value Binding style value.
 */


function isStylingValuePresent(value) {
  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
  // have an opinion as to what this binding should be and you should consult other bindings by
  // priority to determine the valid value.
  // This is extracted into a single function so that we have a single place to control this.
  return value !== undefined;
}
/**
 * Normalizes and/or adds a suffix to the value.
 *
 * If value is `null`/`undefined` no suffix is added
 * @param value
 * @param suffix
 */


function normalizeSuffix(value, suffix) {
  if (value == null
  /** || value === undefined */
  ) {// do nothing
  } else if (typeof suffix === 'string') {
    value = value + suffix;
  } else if (typeof value === 'object') {
    value = stringify(unwrapSafeValue(value));
  }

  return value;
}
/**
 * Tests if the `TNode` has input shadow.
 *
 * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
 * `@Input('class')` as input.
 *
 * @param tNode `TNode` which we would like to see if it has shadow.
 * @param isClassBased `true` if `class` (`false` if `style`)
 */


function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 16
  /* hasClassInput */
  : 32
  /* hasStyleInput */
  )) !== 0;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create static text node
 *
 * @param index Index of the node in the data array
 * @param value Static string value to write.
 *
 * @codeGenApi
 */


function ɵɵtext(index, value = '') {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1
  /* Text */
  , value, null) : tView.data[adjustedIndex];
  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);
  appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.

  setCurrentTNode(tNode, false);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update text content with a lone bound value
 *
 * Used when a text node has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div>{{v0}}</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate(v0);
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate(v0) {
  ɵɵtextInterpolate1('', v0, '');
  return ɵɵtextInterpolate;
}
/**
 *
 * Update text content with single bound value surrounded by other text.
 *
 * Used when a text node has 1 interpolated value in it:
 *
 * ```html
 * <div>prefix{{v0}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate1('prefix', v0, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolated = interpolation1(lView, prefix, v0, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate1;
}
/**
 *
 * Update text content with 2 bound values surrounded by other text.
 *
 * Used when a text node has 2 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate2;
}
/**
 *
 * Update text content with 3 bound values surrounded by other text.
 *
 * Used when a text node has 3 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate3;
}
/**
 *
 * Update text content with 4 bound values surrounded by other text.
 *
 * Used when a text node has 4 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see ɵɵtextInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate4;
}
/**
 *
 * Update text content with 5 bound values surrounded by other text.
 *
 * Used when a text node has 5 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate5;
}
/**
 *
 * Update text content with 6 bound values surrounded by other text.
 *
 * Used when a text node has 6 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change. @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate6;
}
/**
 *
 * Update text content with 7 bound values surrounded by other text.
 *
 * Used when a text node has 7 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate7;
}
/**
 *
 * Update text content with 8 bound values surrounded by other text.
 *
 * Used when a text node has 8 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 * @returns itself, so that it may be chained.
 * @see textInterpolateV
 * @codeGenApi
 */


function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolate8;
}
/**
 * Update text content with 9 or more bound values other surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 *
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵtextInterpolateV(values) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);

  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }

  return ɵɵtextInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated class on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div class="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 * Update an interpolated class on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @codeGenApi
 */


function ɵɵclassMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated style on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style="key: {{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate3(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate4(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate5(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
 *             key5: {{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate6(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate7(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}; key7: {{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate8(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, '; key7: ', v7, 'suffix');
 * ```
 *
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @codeGenApi
 */


function ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  ɵɵstyleMap(interpolatedValue);
}
/**
 * Update an interpolated style on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolateV(
 *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
 * ```
 *.
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
 * @codeGenApi
 */


function ɵɵstyleMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  ɵɵstyleMap(interpolatedValue);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * Update an interpolated style property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate1;
}
/**
 *
 * Update an interpolated style property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate2;
}
/**
 *
 * Update an interpolated style property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate3;
}
/**
 *
 * Update an interpolated style property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate4;
}
/**
 *
 * Update an interpolated style property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate5;
}
/**
 *
 * Update an interpolated style property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate6;
}
/**
 *
 * Update an interpolated style property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate7(
 *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate7;
}
/**
 *
 * Update an interpolated style property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
 * '-', v7, 'suffix');
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`.
 * @param prefix Static value used for concatenation only.
 * @param v0 Value checked for change.
 * @param i0 Static value used for concatenation only.
 * @param v1 Value checked for change.
 * @param i1 Static value used for concatenation only.
 * @param v2 Value checked for change.
 * @param i2 Static value used for concatenation only.
 * @param v3 Value checked for change.
 * @param i3 Static value used for concatenation only.
 * @param v4 Value checked for change.
 * @param i4 Static value used for concatenation only.
 * @param v5 Value checked for change.
 * @param i5 Static value used for concatenation only.
 * @param v6 Value checked for change.
 * @param i6 Static value used for concatenation only.
 * @param v7 Value checked for change.
 * @param suffix Static value used for concatenation only.
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolate8;
}
/**
 * Update an interpolated style property on an element with 9 or more bound values surrounded by
 * text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
 * </div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolateV(
 *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * @param styleIndex Index of style to update. This index value refers to the
 *        index of the style in the style bindings array that was passed into
 *        `styling`..
 * @param values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @returns itself, so that it may be chained.
 * @codeGenApi
 */


function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return ɵɵstylePropInterpolateV;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Update a property on a host element. Only applies to native node properties, not inputs.
 *
 * Operates on the element selected by index via the {@link select} instruction.
 *
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 * @returns This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵhostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵhostProperty;
}
/**
 * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
 * the component's renderer. Normally all host bindings are evaluated with the parent
 * component's renderer, but, in the case of animation @triggers, they need to be
 * evaluated with the sub component's renderer (because that's where the animation
 * triggers are defined).
 *
 * Do not use this instruction as a replacement for `elementProperty`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * @param index The index of the element to update in the data array
 * @param propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param value New value to write.
 * @param sanitizer An optional function used to sanitize the value.
 *
 * @codeGenApi
 */


function ɵɵsyntheticHostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();

  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }

  return ɵɵsyntheticHostProperty;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */


if (typeof ngI18nClosureMode === 'undefined') {
  // These property accesses can be ignored because ngI18nClosureMode will be set to false
  // when optimizing code and the whole if statement will be dropped.
  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.

  /*#__PURE__*/
  (function () {
    // tslint:disable-next-line:no-toplevel-property-access
    _global['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.
    // tslint:disable-next-line:no-toplevel-property-access
    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
  })();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY.


const u = undefined;

function plural(val) {
  const n = val,
        i = Math.floor(Math.abs(val)),
        v = val.toString().replace(/^[^.]*\.?/, '').length;
  if (i === 1 && v === 0) return 1;
  return 5;
}

var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "×", "‰", "∞", "NaN", ":"], ["#,##0.###", "#,##0%", "¤#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This const is used to store the locale data registered with `registerLocaleData`
 */

let LOCALE_DATA = {};
/**
 * Register locale data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n-common-format-data-locale) to know how to import additional locale
 * data.
 *
 * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
 */

function registerLocaleData(data, localeId, extraData) {
  if (typeof localeId !== 'string') {
    extraData = localeId;
    localeId = data[LocaleDataIndex.LocaleId];
  }

  localeId = localeId.toLowerCase().replace(/_/g, '-');
  LOCALE_DATA[localeId] = data;

  if (extraData) {
    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
  }
}
/**
 * Finds the locale data for a given locale.
 *
 * @param locale The locale code.
 * @returns The locale data.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 */


function findLocaleData(locale) {
  const normalizedLocale = normalizeLocale(locale);
  let match = getLocaleData(normalizedLocale);

  if (match) {
    return match;
  } // let's try to find a parent locale


  const parentLocale = normalizedLocale.split('-')[0];
  match = getLocaleData(parentLocale);

  if (match) {
    return match;
  }

  if (parentLocale === 'en') {
    return localeEn;
  }

  throw new Error(`Missing locale data for the locale "${locale}".`);
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * @param locale The code of the locale whose currency code we want.
 * @returns The code of the default currency for the given locale.
 *
 */


function getLocaleCurrencyCode(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.CurrencyCode] || null;
}
/**
 * Retrieves the plural function used by ICU expressions to determine the plural case to use
 * for a given locale.
 * @param locale A locale code for the locale format rules to use.
 * @returns The plural function for the locale.
 * @see `NgPlural`
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
 */


function getLocalePluralCase(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
/**
 * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
 * or from the global `ng.common.locale`.
 */


function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }

  return LOCALE_DATA[normalizedLocale];
}
/**
 * Helper function to remove all the locale data from `LOCALE_DATA`.
 */


function unregisterAllLocaleData() {
  LOCALE_DATA = {};
}
/**
 * Index of each type of locale data from the locale data array
 */


var LocaleDataIndex = /*#__PURE__*/(() => {
  LocaleDataIndex = LocaleDataIndex || {};
  LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
  LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
  LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
  LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
  LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
  LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
  LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
  LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
  LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
  LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
  LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
  LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
  LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
  LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
  LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
  LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
  LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
  LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
  LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
  LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
  LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
  LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
  return LocaleDataIndex;
})();

/**
 * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
 */
function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, '-');
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
/**
 * Returns the plural case based on the locale
 */

function getPluralCase(value, locale) {
  const plural = getLocalePluralCase(locale)(parseInt(value, 10));
  const result = pluralMapping[plural];
  return result !== undefined ? result : 'other';
}
/**
 * The locale id that the application is using by default (for translations and ICU expressions).
 */


const DEFAULT_LOCALE_ID = 'en-US';
/**
 * USD currency code that the application uses by default for CurrencyPipe when no
 * DEFAULT_CURRENCY_CODE is provided.
 */

const USD_CURRENCY_CODE = 'USD';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks that the next string is an element name.
 *
 * See `I18nMutateOpCodes` documentation.
 */

const ELEMENT_MARKER = {
  marker: 'element'
};
/**
 * Marks that the next string is comment text need for ICU.
 *
 * See `I18nMutateOpCodes` documentation.
 */

const ICU_MARKER = {
  marker: 'ICU'
};
/**
 * See `I18nCreateOpCodes`
 */

var I18nCreateOpCode = /*#__PURE__*/(() => {
  I18nCreateOpCode = I18nCreateOpCode || {};

  /**
   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and
   * `COMMENT`.
   */
  I18nCreateOpCode[I18nCreateOpCode["SHIFT"] = 2] = "SHIFT";
  /**
   * Should the node be appended to parent imedditatly after creation.
   */

  I18nCreateOpCode[I18nCreateOpCode["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
  /**
   * If set the node should be comment (rather than a text) node.
   */

  I18nCreateOpCode[I18nCreateOpCode["COMMENT"] = 2] = "COMMENT";
  return I18nCreateOpCode;
})();
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
const unusedValueExportToPlacateAjd$2 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The locale id that the application is currently using (for translations and ICU expressions).
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 */

let LOCALE_ID$1 = DEFAULT_LOCALE_ID;
/**
 * Sets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 *
 * @param localeId
 */

function setLocaleId(localeId) {
  assertDefined(localeId, `Expected localeId to be defined`);

  if (typeof localeId === 'string') {
    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');
  }
}
/**
 * Gets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 */


function getLocaleId() {
  return LOCALE_ID$1;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).
 *
 * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
 * takes `TNode.insertBeforeIndex` into account.
 *
 * @param parentTNode parent `TNode`
 * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
 * @param lView current `LView`
 */


function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;

  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
/**
 * Process `TNode.insertBeforeIndex` by adding i18n text nodes.
 *
 * See `TNode.insertBeforeIndex`
 */


function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;

  if (Array.isArray(tNodeInsertBeforeIndex)) {
    // An array indicates that there are i18n nodes that need to be added as children of this
    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so
    // only now can be added. The first element of the array is the normal index where we should
    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of
    // `childRNode`.
    ngDevMode && assertDomNode(childRNode);
    let i18nParent = childRNode;
    let anchorRNode = null;

    if (!(childTNode.type & 3
    /* AnyRNode */
    )) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }

    if (i18nParent !== null && (childTNode.flags & 2
    /* isComponentHost */
    ) === 0) {
      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.
        // see `assertDomNode` below.
        const i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list
 * `tNode.insertBeforeIndex`.
 *
 * Things to keep in mind:
 * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the
 *    `ɵɵi18nStart` instruction.
 * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by
 *    `ɵɵelementStart` instruction.
 * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a
 *    smaller index `TNode` is guaranteed to be created before a larger one)
 *
 * We use the above three invariants to determine `TNode.insertBeforeIndex`.
 *
 * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,
 * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that
 * the next node is not yet created and therefore we can't insert in front of it.
 *
 * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't
 *        know if there will be further `TNode`s inserted after.)
 * Rule2: If `previousTNode` is created after the `tNode` being inserted, then
 *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check
 *        previous to see if we can update its `insertBeforeTNode`)
 *
 * See `TNode.insertBeforeIndex` for more context.
 *
 * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in
 *     reverse order. (If `TNode` would have `previous` this would not be necessary.)
 * @param newTNode A TNode to add to the `previousTNodes` list.
 */


function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  // Start with Rule1
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');
  previousTNodes.push(newTNode);

  if (previousTNodes.length > 1) {
    for (let i = previousTNodes.length - 2; i >= 0; i--) {
      const existingTNode = previousTNodes[i]; // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.
      // It is safe to ignore them.

      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)
          // then add the `insertBeforeIndex`.
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}

function isI18nText(tNode) {
  return !(tNode.type & 64
  /* Placeholder */
  );
}

function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}

function getInsertBeforeIndex(tNode) {
  const index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}

function setInsertBeforeIndex(tNode, value) {
  const index = tNode.insertBeforeIndex;

  if (Array.isArray(index)) {
    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieve `TIcu` at a given `index`.
 *
 * The `TIcu` can be stored either directly (if it is nested ICU) OR
 * it is stored inside tho `TIcuContainer` if it is top level ICU.
 *
 * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
 * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
 * expressed (parent ICU may have selected a case which does not contain it.)
 *
 * @param tView Current `TView`.
 * @param index Index where the value should be read from.
 */


function getTIcu(tView, index) {
  const value = tView.data[index];
  if (value === null || typeof value === 'string') return null;

  if (ngDevMode && !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {
    throwError('We expect to get \'null\'|\'TIcu\'|\'TIcuContainer\', but got: ' + value);
  } // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be
  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it
  // will be just two cases which fits into the browser inline cache (inline cache can take up to
  // 4)


  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
/**
 * Store `TIcu` at a give `index`.
 *
 * The `TIcu` can be stored either directly (if it is nested ICU) OR
 * it is stored inside tho `TIcuContainer` if it is top level ICU.
 *
 * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
 * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
 * expressed (parent ICU may have selected a case which does not contain it.)
 *
 * @param tView Current `TView`.
 * @param index Index where the value should be stored at in `Tview.data`
 * @param tIcu The TIcu to store.
 */


function setTIcu(tView, index, tIcu) {
  const tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \'null\'|\'TIcuContainer\'');

  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(tNode, 32
    /* Icu */
    );
    tNode.value = tIcu;
  }
}
/**
 * Set `TNode.insertBeforeIndex` taking the `Array` into account.
 *
 * See `TNode.insertBeforeIndex`
 */


function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  let insertBeforeIndex = tNode.insertBeforeIndex;

  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [null
    /* may be updated to number later */
    , index];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');
    insertBeforeIndex.push(index);
  }
}
/**
 * Create `TNode.type=TNodeType.Placeholder` node.
 *
 * See `TNodeType.Placeholder` for more information.
 */


function createTNodePlaceholder(tView, previousTNodes, index) {
  const tNode = createTNodeAtIndex(tView, index, 64
  /* Placeholder */
  , null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
/**
 * Returns current ICU case.
 *
 * ICU cases are stored as index into the `TIcu.cases`.
 * At times it is necessary to communicate that the ICU case just switched and that next ICU update
 * should update all bindings regardless of the mask. In such a case the we store negative numbers
 * for cases which have just been switched. This function removes the negative flag.
 */


function getCurrentICUCaseIndex(tIcu, lView) {
  const currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}

function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17
  /* SHIFT_PARENT */
  ;
}

function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070
  /* MASK_REF */
  ) >>> 1
  /* SHIFT_REF */
  ;
}

function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1
  /* MASK_INSTRUCTION */
  ;
}

function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');
  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');
  return opCode | parentIdx << 17
  /* SHIFT_PARENT */
  | refIdx << 1
  /* SHIFT_REF */
  ;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Keep track of which input bindings in `ɵɵi18nExp` have changed.
 *
 * This is used to efficiently update expressions in i18n only when the corresponding input has
 * changed.
 *
 * 1) Each bit represents which of the `ɵɵi18nExp` has changed.
 * 2) There are 32 bits allowed in JS.
 * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more
 * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means
 * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare
 * so in practice it should not be an issue.)
 */


let changeMask = 0b0;
/**
 * Keeps track of which bit needs to be updated in `changeMask`
 *
 * This value gets incremented on every call to `ɵɵi18nExp`
 */

let changeMaskCounter = 0;
/**
 * Keep track of which input bindings in `ɵɵi18nExp` have changed.
 *
 * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.
 *
 * @param hasChange did `ɵɵi18nExp` detect a change.
 */

function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }

  changeMaskCounter++;
}

function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const tI18n = tView.data[index]; // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`

    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  } // Reset changeMask & maskBit to default for the next update cycle


  changeMask = 0b0;
  changeMaskCounter = 0;
}
/**
 * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.
 *
 * Creates text (and comment) nodes which are internationalized.
 *
 * @param lView Current lView
 * @param createOpCodes Set of op-codes to apply
 * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is
 *     a root node.
 * @param insertInFrontOf DOM node that should be used as an anchor.
 */


function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  const renderer = lView[RENDERER];

  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    let rNode = lView[index];

    if (rNode === null) {
      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a
      // case which was already instantiated, no need to create new DOM nodes.
      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);
    }

    if (appendNow && parentRNode !== null) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
/**
 * Apply `I18nMutateOpCodes` OpCodes.
 *
 * @param tView Current `TView`
 * @param mutableOpCodes Mutable OpCodes to process
 * @param lView Current `LView`
 * @param anchorRNode place where the i18n node should be inserted.
 */


function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  const renderer = lView[RENDERER]; // `rootIdx` represents the node into which all inserts happen.

  let rootIdx = null; // `rootRNode` represents the real node into which we insert. This can be different from
  // `lView[rootIdx]` if we have projection.
  //  - null we don't have a parent (as can be the case in when we are inserting into a root of
  //    LView which has no parent.)
  //  - `RElement` The element representing the root after taking projection into account.

  let rootRNode;

  for (let i = 0; i < mutableOpCodes.length; i++) {
    const opCode = mutableOpCodes[i];

    if (typeof opCode == 'string') {
      const textNodeIndex = mutableOpCodes[++i];

      if (lView[textNodeIndex] === null) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = createTextNode(renderer, opCode);
      }
    } else if (typeof opCode == 'number') {
      switch (opCode & 1
      /* MASK_INSTRUCTION */
      ) {
        case 0
        /* AppendChild */
        :
          const parentIdx = getParentFromIcuCreateOpCode(opCode);

          if (rootIdx === null) {
            // The first operation should save the `rootIdx` because the first operation
            // must insert into the root. (Only subsequent operations can insert into a dynamic
            // parent)
            rootIdx = parentIdx;
            rootRNode = nativeParentNode(renderer, anchorRNode);
          }

          let insertInFrontOf;
          let parentRNode;

          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          } // FIXME(misko): Refactor with `processI18nText`


          if (parentRNode !== null) {
            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.
            // In such a case there is no "root" we can attach to. This is fine, as we still need to
            // create the elements. When the `LView` gets later added to a parent these "root" nodes
            // get picked up and added.
            ngDevMode && assertDomNode(parentRNode);
            const refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref'); // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n
            // which can't have components.

            const child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            const tIcu = getTIcu(tView, refIdx);

            if (tIcu !== null && typeof tIcu === 'object') {
              // If we just added a comment node which has ICU then that ICU may have already been
              // rendered and therefore we need to re-add it here.
              ngDevMode && assertTIcu(tIcu);
              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);

              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }

          break;

        case 1
        /* Attr */
        :
          const elementNodeIndex = opCode >>> 1
          /* SHIFT_REF */
          ;
          const attrName = mutableOpCodes[++i];
          const attrValue = mutableOpCodes[++i]; // This code is used for ICU expressions only, since we don't support
          // directives/components in ICUs, we don't need to worry about inputs here

          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;

        default:
          if (ngDevMode) {
            throw new RuntimeError(700
            /* INVALID_I18N_STRUCTURE */
            , `Unable to determine the type of mutate operation for "${opCode}"`);
          }

      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          const commentValue = mutableOpCodes[++i];
          const commentNodeIndex = mutableOpCodes[++i];

          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected "${commentValue}" to be a comment node value`);
            ngDevMode && ngDevMode.rendererCreateComment++;
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

            attachPatchData(commentRNode, lView);
          }

          break;

        case ELEMENT_MARKER:
          const tagName = mutableOpCodes[++i];
          const elementNodeIndex = mutableOpCodes[++i];

          if (lView[elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, 'string', `Expected "${tagName}" to be an element node tag name`);
            ngDevMode && ngDevMode.rendererCreateElement++;
            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null); // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)

            attachPatchData(elementRNode, lView);
          }

          break;

        default:
          ngDevMode && throwError(`Unable to determine the type of mutate operation for "${opCode}"`);
      }
    }
  }
}
/**
 * Apply `I18nUpdateOpCodes` OpCodes
 *
 * @param tView Current `TView`
 * @param lView Current `LView`
 * @param updateOpCodes OpCodes to process
 * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
 * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
 *     `bindingsStartIndex`)
 */


function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {
  for (let i = 0; i < updateOpCodes.length; i++) {
    // bit code to check if we should apply the next update
    const checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes

    const skipCodes = updateOpCodes[++i];

    if (checkBit & changeMask) {
      // The value has been updated since last checked
      let value = '';

      for (let j = i + 1; j <= i + skipCodes; j++) {
        const opCode = updateOpCodes[j];

        if (typeof opCode == 'string') {
          value += opCode;
        } else if (typeof opCode == 'number') {
          if (opCode < 0) {
            // Negative opCode represent `i18nExp` values offset.
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            const nodeIndex = opCode >>> 2
            /* SHIFT_REF */
            ;

            switch (opCode & 3
            /* MASK_OPCODE */
            ) {
              case 1
              /* Attr */
              :
                const propName = updateOpCodes[++j];
                const sanitizeFn = updateOpCodes[++j];
                const tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');

                if (typeof tNodeOrTagName === 'string') {
                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does
                  // not have TNode), in which case we know that there are no directives, and hence
                  // we use attribute setting.
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                }

                break;

              case 0
              /* Text */
              :
                const rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;

              case 2
              /* IcuSwitch */
              :
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;

              case 3
              /* IcuUpdate */
              :
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      const opCode = updateOpCodes[i + 1];

      if (opCode > 0 && (opCode & 3
      /* MASK_OPCODE */
      ) === 3
      /* IcuUpdate */
      ) {
        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but
        // we still need to execute `icuUpdateCase` because the case has changed recently due to
        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in
        // pairs.)
        const nodeIndex = opCode >>> 2
        /* SHIFT_REF */
        ;
        const tIcu = getTIcu(tView, nodeIndex);
        const currentIndex = lView[tIcu.currentCaseLViewIndex];

        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }

    i += skipCodes;
  }
}
/**
 * Apply OpCodes associated with updating an existing ICU.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
 * @param lView Current `LView`
 */


function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

  if (activeCaseIndex !== null) {
    let mask = changeMask;

    if (activeCaseIndex < 0) {
      // Clear the flag.
      // Negative number means that the ICU was freshly created and we need to force the update.
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex; // -1 is same as all bits on, which simulates creation since it marks all bits dirty

      mask = -1;
    }

    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
/**
 * Apply OpCodes associated with switching a case on ICU.
 *
 * This involves tearing down existing case and than building up a new case.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param lView Current `LView`
 * @param value Value of the case to update to.
 */


function applyIcuSwitchCase(tView, tIcu, lView, value) {
  // Rebuild a new case for this ICU
  const caseIndex = getCaseIndex(tIcu, value);
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;

    if (caseIndex !== null) {
      // Add the nodes for the new case
      const anchorRNode = lView[tIcu.anchorIdx];

      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
    }
  }
}
/**
 * Apply OpCodes associated with tearing ICU case.
 *
 * This involves tearing down existing case and than building up a new case.
 *
 * @param tView Current `TView`
 * @param tIcu Current `TIcu`
 * @param lView Current `LView`
 */


function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);

  if (activeCaseIndex !== null) {
    const removeCodes = tIcu.remove[activeCaseIndex];

    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];

      if (nodeOrIcuIndex > 0) {
        // Positive numbers are `RNode`s.
        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        // Negative numbers are ICUs
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
/**
 * Returns the index of the current case of an ICU expression depending on the main binding value
 *
 * @param icuExpression
 * @param bindingValue The value of the main binding used by this ICU expression
 */


function getCaseIndex(icuExpression, bindingValue) {
  let index = icuExpression.cases.indexOf(bindingValue);

  if (index === -1) {
    switch (icuExpression.type) {
      case 1
      /* plural */
      :
        {
          const resolvedCase = getPluralCase(bindingValue, getLocaleId());
          index = icuExpression.cases.indexOf(resolvedCase);

          if (index === -1 && resolvedCase !== 'other') {
            index = icuExpression.cases.indexOf('other');
          }

          break;
        }

      case 0
      /* select */
      :
        {
          index = icuExpression.cases.indexOf('other');
          break;
        }
    }
  }

  return index === -1 ? null : index;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function loadIcuContainerVisitor() {
  const _stack = [];

  let _index = -1;

  let _lView;

  let _removes;
  /**
   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`
   * to determine which root belong to the ICU.
   *
   * Example of usage.
   * ```
   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);
   * let rNode: RNode|null;
   * while(rNode = nextRNode()) {
   *   console.log(rNode);
   * }
   * ```
   *
   * @param tIcuContainerNode Current `TIcuContainerNode`
   * @param lView `LView` where the `RNode`s should be looked up.
   */


  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _lView = lView;

    while (_stack.length) _stack.pop();

    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(tIcuContainerNode.value, lView);
    return icuContainerIteratorNext;
  }

  function enterIcu(tIcu, lView) {
    _index = 0;
    const currentCase = getCurrentICUCaseIndex(tIcu, lView);

    if (currentCase !== null) {
      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
      _removes = tIcu.remove[currentCase];
    } else {
      _removes = EMPTY_ARRAY;
    }
  }

  function icuContainerIteratorNext() {
    if (_index < _removes.length) {
      const removeOpCode = _removes[_index++];
      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');

      if (removeOpCode > 0) {
        const rNode = _lView[removeOpCode];
        ngDevMode && assertDomNode(rNode);
        return rNode;
      } else {
        _stack.push(_index, _removes); // ICUs are represented by negative indices


        const tIcuIndex = ~removeOpCode;
        const tIcu = _lView[TVIEW].data[tIcuIndex];
        ngDevMode && assertTIcu(tIcu);
        enterIcu(tIcu, _lView);
        return icuContainerIteratorNext();
      }
    } else {
      if (_stack.length === 0) {
        return null;
      } else {
        _removes = _stack.pop();
        _index = _stack.pop();
        return icuContainerIteratorNext();
      }
    }
  }

  return icuContainerIteratorStart;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Converts `I18nCreateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.
 * This function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nCreateOpCodes` if attached as a method.
 * @param opcodes `I18nCreateOpCodes` if invoked as a function.
 */


function i18nCreateOpCodesToString(opcodes) {
  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];

  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);

    if (appendNow) {
      lines.push(`parent.appendChild(lView[${index}]);`);
    }
  }

  return lines;
}
/**
 * Converts `I18nUpdateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
 * This function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nUpdateOpCodes` if attached as a method.
 * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
 */


function i18nUpdateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];

  function consumeOpCode(value) {
    const ref = value >>> 2
    /* SHIFT_REF */
    ;
    const opCode = value & 3
    /* MASK_OPCODE */
    ;

    switch (opCode) {
      case 0
      /* Text */
      :
        return `(lView[${ref}] as Text).textContent = $$$`;

      case 1
      /* Attr */
      :
        const attrName = parser.consumeString();
        const sanitizationFn = parser.consumeFunction();
        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';
        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;

      case 2
      /* IcuSwitch */
      :
        return `icuSwitchCase(${ref}, $$$)`;

      case 3
      /* IcuUpdate */
      :
        return `icuUpdateCase(${ref})`;
    }

    throw new Error('unexpected OpCode');
  }

  while (parser.hasMore()) {
    let mask = parser.consumeNumber();
    let size = parser.consumeNumber();
    const end = parser.i + size;
    const statements = [];
    let statement = '';

    while (parser.i < end) {
      let value = parser.consumeNumberOrString();

      if (typeof value === 'string') {
        statement += value;
      } else if (value < 0) {
        // Negative numbers are ref indexes
        // Here `i` refers to current binding index. It is to signify that the value is relative,
        // rather than absolute.
        statement += '${lView[i' + value + ']}';
      } else {
        // Positive numbers are operations.
        const opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
        statement = '';
      }
    }

    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);
  }

  return lines;
}
/**
 * Converts `I18nCreateOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This
 * function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nCreateOpCodes` if attached as a method.
 * @param opcodes `I18nCreateOpCodes` if invoked as a function.
 */


function icuCreateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];

  function consumeOpCode(opCode) {
    const parent = getParentFromIcuCreateOpCode(opCode);
    const ref = getRefFromIcuCreateOpCode(opCode);

    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0
      /* AppendChild */
      :
        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;

      case 1
      /* Attr */
      :
        return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
    }

    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));
  }

  let lastRef = -1;

  while (parser.hasMore()) {
    let value = parser.consumeNumberStringOrMarker();

    if (value === ICU_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createComment("${text}")`);
    } else if (value === ELEMENT_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createElement("${text}")`);
    } else if (typeof value === 'string') {
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
    } else if (typeof value === 'number') {
      const line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error('Unexpected value');
    }
  }

  return lines;
}
/**
 * Converts `I18nRemoveOpCodes` array into a human readable format.
 *
 * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This
 * function provides a human readable view of the opcodes. This is useful when debugging the
 * application as well as writing more readable tests.
 *
 * @param this `I18nRemoveOpCodes` if attached as a method.
 * @param opcodes `I18nRemoveOpCodes` if invoked as a function.
 */


function i18nRemoveOpCodesToString(opcodes) {
  const removeCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];

  for (let i = 0; i < removeCodes.length; i++) {
    const nodeOrIcuIndex = removeCodes[i];

    if (nodeOrIcuIndex > 0) {
      // Positive numbers are `RNode`s.
      lines.push(`remove(lView[${nodeOrIcuIndex}])`);
    } else {
      // Negative numbers are ICUs
      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
    }
  }

  return lines;
}

class OpCodeParser {
  constructor(codes) {
    this.i = 0;
    this.codes = codes;
  }

  hasMore() {
    return this.i < this.codes.length;
  }

  consumeNumber() {
    let value = this.codes[this.i++];
    assertNumber(value, 'expecting number in OpCode');
    return value;
  }

  consumeString() {
    let value = this.codes[this.i++];
    assertString(value, 'expecting string in OpCode');
    return value;
  }

  consumeFunction() {
    let value = this.codes[this.i++];

    if (value === null || typeof value === 'function') {
      return value;
    }

    throw new Error('expecting function in OpCode');
  }

  consumeNumberOrString() {
    let value = this.codes[this.i++];

    if (typeof value === 'string') {
      return value;
    }

    assertNumber(value, 'expecting number or string in OpCode');
    return value;
  }

  consumeNumberStringOrMarker() {
    let value = this.codes[this.i++];

    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {
      return value;
    }

    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');
    return value;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const BINDING_REGEXP = /�(\d+):?\d*�/gi;
const ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
const NESTED_ICU = /�(\d+)�/;
const ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
const MARKER = `�`;
const SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
const PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
/**
 * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
 * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
 * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
 * and later on replaced by a space. We are re-implementing the same idea here, since translations
 * might contain this special character.
 */

const NGSP_UNICODE_REGEXP = /\uE500/g;

function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, ' ');
}
/**
 * Create dynamic nodes from i18n translation block.
 *
 * - Text nodes are created synchronously
 * - TNodes are linked into tree lazily
 *
 * @param tView Current `TView`
 * @parentTNodeIndex index to the parent TNode of this i18n block
 * @param lView Current `LView`
 * @param index Index of `ɵɵi18nStart` instruction.
 * @param message Message to translate.
 * @param subTemplateIndex Index into the sub template of message translation. (ie in case of
 *     `ngIf`) (-1 otherwise)
 */


function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  const rootTNode = getCurrentParentTNode();
  const createOpCodes = [];
  const updateOpCodes = [];
  const existingTNodeStack = [[]];

  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  message = getTranslationForTemplate(message, subTemplateIndex);
  const msgParts = replaceNgsp(message).split(PH_REGEXP);

  for (let i = 0; i < msgParts.length; i++) {
    let value = msgParts[i];

    if ((i & 1) === 0) {
      // Even indexes are text (including bindings & ICU expressions)
      const parts = i18nParseTextIntoPartsAndICU(value);

      for (let j = 0; j < parts.length; j++) {
        let part = parts[j];

        if ((j & 1) === 0) {
          // `j` is odd therefore `part` is string
          const text = part;
          ngDevMode && assertString(text, 'Parsed ICU part should be string');

          if (text !== '') {
            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
          }
        } else {
          // `j` is Even therefor `part` is an `ICUExpression`
          const icuExpression = part; // Verify that ICU expression has the right shape. Translations might contain invalid
          // constructions (while original messages were correct), so ICU parsing at runtime may
          // not succeed (thus `icuExpression` remains a string).
          // Note: we intentionally retain the error here by not using `ngDevMode`, because
          // the value can change based on the locale and users aren't guaranteed to hit
          // an invalid string while they're developing.

          if (typeof icuExpression !== 'object') {
            throw new Error(`Unable to parse ICU expression in "${message}" message.`);
          }

          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);
          const icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');
          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      // Odd indexes are placeholders (elements and sub-templates)
      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')
      const isClosing = value.charCodeAt(0) === 47
      /* SLASH */
      ;
      const type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(type, 42
      /* STAR */
      , 35
      /* HASH */
      );
      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));

      if (isClosing) {
        existingTNodeStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
      }
    }
  }

  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes
  };
}
/**
 * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.
 *
 * @param tView Current `TView` needed to allocate space in i18n range.
 * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be
 *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.
 * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
 * @param lView Current `LView` needed to allocate space in i18n range.
 * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.
 * @param text Text to be added when the `Text` or `Comment` node will be created.
 * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.
 */


function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
  const i18nNodeIdx = allocExpando(tView, lView, 1, null);
  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  let parentTNode = getCurrentParentTNode();

  if (rootTNode === parentTNode) {
    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.
    // (there is no parent), but in some circumstances (because we are inconsistent about how we set
    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.
    parentTNode = null;
  }

  if (parentTNode === null) {
    // If we don't have a parent that means that we can eagerly add nodes.
    // If we have a parent than these nodes can't be added now (as the parent has not been created
    // yet) and instead the `parentTNode` is responsible for adding it. See
    // `TNode.insertBeforeIndex`
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }

  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }

  createOpCodes.push(opCode, text === null ? '' : text); // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the
  // bindings are.

  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32
  /* Icu */
  : 1
  /* Text */
  , text === null ? ngDevMode ? '{{?}}' : '' : text, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  const tNodeIdx = tNode.index;
  setCurrentTNode(tNode, false
  /* Text nodes are self closing */
  );

  if (parentTNode !== null && rootTNode !== parentTNode) {
    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)
    // We have to make sure to add ourselves to the parent.
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }

  return tNode;
}
/**
 * Processes text node in i18n block.
 *
 * Text nodes can have:
 * - Create instruction in `createOpCodes` for creating the text node.
 * - Allocate spec for text node in i18n range of `LView`
 * - If contains binding:
 *    - bindings => allocate space in i18n range of `LView` to store the binding value.
 *    - populate `updateOpCodes` with update instructions.
 *
 * @param tView Current `TView`
 * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will
 *     be added as part of the `i18nStart` instruction or as part of the
 *     `TNode.insertBeforeIndex`.
 * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
 * @param createOpCodes Location where the creation OpCodes will be stored.
 * @param lView Current `LView`
 * @param text The translated text (which may contain binding)
 */


function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
  const hasBinding = text.match(BINDING_REGEXP);
  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);

  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);
  }
}
/**
 * See `i18nAttributes` above.
 */


function i18nAttributesFirstPass(tView, index, values) {
  const previousElement = getCurrentTNode();
  const previousElementIndex = previousElement.index;
  const updateOpCodes = [];

  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  if (tView.firstCreatePass && tView.data[index] === null) {
    for (let i = 0; i < values.length; i += 2) {
      const attrName = values[i];
      const message = values[i + 1];

      if (message !== '') {
        // Check if attribute value contains an ICU and throw an error if that's the case.
        // ICUs in element attributes are not supported.
        // Note: we intentionally retain the error here by not using `ngDevMode`, because
        // the `value` can change based on the locale and users aren't guaranteed to hit
        // an invalid string while they're developing.
        if (ICU_REGEXP.test(message)) {
          throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
        } // i18n attributes that hit this code path are guaranteed to have bindings, because
        // the compiler treats static i18n attributes as regular attribute bindings.
        // Since this may not be the first i18n attribute on this element we need to pass in how
        // many previous bindings there have already been.


        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }

    tView.data[index] = updateOpCodes;
  }
}
/**
 * Generate the OpCodes to update the bindings of a string.
 *
 * @param updateOpCodes Place where the update opcodes will be stored.
 * @param str The string containing the bindings.
 * @param destinationNode Index of the destination node which will receive the binding.
 * @param attrName Name of the attribute, if the string belongs to an attribute.
 * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
 * @param bindingStart The lView index of the next expression that can be bound via an opCode.
 * @returns The mask value for these bindings
 */


function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');
  const maskIndex = updateOpCodes.length; // Location of mask

  const sizeIndex = maskIndex + 1; // location of size for skipping

  updateOpCodes.push(null, null); // Alloc space for mask and size

  const startIndex = maskIndex + 2; // location of first allocation.

  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }

  const textParts = str.split(BINDING_REGEXP);
  let mask = 0;

  for (let j = 0; j < textParts.length; j++) {
    const textValue = textParts[j];

    if (j & 1) {
      // Odd indexes are bindings
      const bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== '') {
      // Even indexes are text
      updateOpCodes.push(textValue);
    }
  }

  updateOpCodes.push(destinationNode << 2
  /* SHIFT_REF */
  | (attrName ? 1
  /* Attr */
  : 0
  /* Text */
  ));

  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }

  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
/**
 * Count the number of bindings in the given `opCodes`.
 *
 * It could be possible to speed this up, by passing the number of bindings found back from
 * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more
 * complexity in the code and/or transient objects to be created.
 *
 * Since this function is only called once when the template is instantiated, is trivial in the
 * first instance (since `opCodes` will be an empty array), and it is not common for elements to
 * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.
 */


function countBindings(opCodes) {
  let count = 0;

  for (let i = 0; i < opCodes.length; i++) {
    const opCode = opCodes[i]; // Bindings are negative numbers.

    if (typeof opCode === 'number' && opCode < 0) {
      count++;
    }
  }

  return count;
}
/**
 * Convert binding index to mask bit.
 *
 * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
 * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to
 * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner
 * case is that we will execute binding code more often than necessary. (penalty of performance)
 */


function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}

function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
/**
 * Removes everything inside the sub-templates of a message.
 */


function removeInnerTemplateTranslation(message) {
  let match;
  let res = '';
  let index = 0;
  let inTemplate = false;
  let tagMatched;

  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match.index + match[0].length);
      tagMatched = match[1];
      inTemplate = true;
    } else {
      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
        index = match.index;
        inTemplate = false;
      }
    }
  }

  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
  res += message.substr(index);
  return res;
}
/**
 * Extracts a part of a message and removes the rest.
 *
 * This method is used for extracting a part of the message associated with a template. A
 * translated message can span multiple templates.
 *
 * Example:
 * ```
 * <div i18n>Translate <span *ngIf>me</span>!</div>
 * ```
 *
 * @param message The message to crop
 * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
 * external template and removes all sub-templates.
 */


function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    // We want the root template message, ignore all sub-templates
    return removeInnerTemplateTranslation(message);
  } else {
    // We want a specific sub-template
    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
    const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
/**
 * Generate the OpCodes for ICU expressions.
 *
 * @param icuExpression
 * @param index Index where the anchor is stored and an optional `TIcuContainerNode`
 *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.
 *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)
 */


function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');
  let bindingMask = 0;
  const tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  const values = icuExpression.values;

  for (let i = 0; i < values.length; i++) {
    // Each value is an array of strings & other ICU expressions
    const valueArr = values[i];
    const nestedIcus = [];

    for (let j = 0; j < valueArr.length; j++) {
      const value = valueArr[j];

      if (typeof value !== 'string') {
        // It is an nested ICU expression
        const icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node

        valueArr[j] = `<!--�${icuIndex}�-->`;
      }
    }

    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;
  }

  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
}
/**
 * Parses text containing an ICU expression and produces a JSON object for it.
 * Original code from closure library, modified for Angular.
 *
 * @param pattern Text containing an ICU expression that needs to be parsed.
 *
 */


function parseICUBlock(pattern) {
  const cases = [];
  const values = [];
  let icuType = 1
  /* plural */
  ;
  let mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
    if (type === 'select') {
      icuType = 0
      /* select */
      ;
    } else {
      icuType = 1
      /* plural */
      ;
    }

    mainBinding = parseInt(binding.substr(1), 10);
    return '';
  });
  const parts = i18nParseTextIntoPartsAndICU(pattern); // Looking for (key block)+ sequence. One of the keys has to be "other".

  for (let pos = 0; pos < parts.length;) {
    let key = parts[pos++].trim();

    if (icuType === 1
    /* plural */
    ) {
      // Key can be "=x", we just want "x"
      key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
    }

    if (key.length) {
      cases.push(key);
    }

    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);

    if (cases.length > values.length) {
      values.push(blocks);
    }
  } // TODO(ocombe): support ICU expressions in attributes, see #21615


  return {
    type: icuType,
    mainBinding: mainBinding,
    cases,
    values
  };
}
/**
 * Breaks pattern into strings and top level {...} blocks.
 * Can be used to break a message into text and ICU expressions, or to break an ICU expression
 * into keys and cases. Original code from closure library, modified for Angular.
 *
 * @param pattern (sub)Pattern to be broken.
 * @returns An `Array<string|IcuExpression>` where:
 *   - odd positions: `string` => text between ICU expressions
 *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.
 */


function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }

  let prevPos = 0;
  const braceStack = [];
  const results = [];
  const braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.

  braces.lastIndex = 0;
  let match;

  while (match = braces.exec(pattern)) {
    const pos = match.index;

    if (match[0] == '}') {
      braceStack.pop();

      if (braceStack.length == 0) {
        // End of the block.
        const block = pattern.substring(prevPos, pos);

        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }

        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        const substring = pattern.substring(prevPos, pos);
        results.push(substring);
        prevPos = pos + 1;
      }

      braceStack.push('{');
    }
  }

  const substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
/**
 * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
 *
 */


function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  const create = [];
  const remove = [];
  const update = [];

  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }

  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove);
  tIcu.update.push(update);
  const inertBodyHelper = getInertBodyHelper(getDocument());
  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');
  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;

  if (inertRootNode) {
    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}

function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {
  let bindingMask = 0;
  let currentNode = parentNode.firstChild;

  while (currentNode) {
    const newIndex = allocExpando(tView, lView, 1, null);

    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        const element = currentNode;
        const tagName = element.tagName.toLowerCase();

        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          const elAttrs = element.attributes;

          for (let i = 0; i < elAttrs.length; i++) {
            const attr = elAttrs.item(i);
            const lowerAttrName = attr.name.toLowerCase();
            const hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding

            if (hasBinding) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else if (SRCSET_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, sanitizeSrcset);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see https://g.co/ng/security#xss)`);
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          } // Parse the children of this node (if any)


          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove, newIndex, depth);
        }

        break;

      case Node.TEXT_NODE:
        const value = currentNode.textContent || '';
        const hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);
        addRemoveNode(remove, newIndex, depth);

        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }

        break;

      case Node.COMMENT_NODE:
        // Check if the comment node is a placeholder for a nested ICU
        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');

        if (isNestedIcu) {
          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          const icuExpression = nestedIcus[nestedIcuIndex]; // Create the comment node that will anchor the ICU expression

          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);
          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove, newIndex, depth);
        }

        break;
    }

    currentNode = currentNode.nextSibling;
  }

  return bindingMask;
}

function addRemoveNode(remove, index, depth) {
  if (depth === 0) {
    remove.push(index);
  }
}

function addRemoveNestedIcu(remove, index, depth) {
  if (depth === 0) {
    remove.push(~index); // remove ICU at `index`

    remove.push(index); // remove ICU comment at `index`
  }
}

function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2
  /* SHIFT_REF */
  | 2
  /* IcuSwitch */
  );
}

function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(bindingMask, 1, index << 2
  /* SHIFT_REF */
  | 3
  /* IcuUpdate */
  );
}

function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }

  create.push(text, createAtIdx, icuCreateOpCode(0
  /* AppendChild */
  , appendToParentIdx, createAtIdx));
}

function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1
  /* SHIFT_REF */
  | 1
  /* Attr */
  , attr.name, attr.value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// i18nPostprocess consts


const ROOT_TEMPLATE_ID = 0;
const PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
const PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
const PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
const PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
const PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
const PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
const PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
/**
 * Handles message string post-processing for internationalization.
 *
 * Handles message string post-processing by transforming it from intermediate
 * format (that might contain some markers that we need to replace) to the final
 * form, consumable by i18nStart instruction. Post processing steps include:
 *
 * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
 * 2. Replace all ICU vars (like "VAR_PLURAL")
 * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
 * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
 *    in case multiple ICUs have the same placeholder name
 *
 * @param message Raw translation string for post processing
 * @param replacements Set of replacements that should be applied
 *
 * @returns Transformed string that can be consumed by i18nStart instruction
 *
 * @codeGenApi
 */

function i18nPostprocess(message, replacements = {}) {
  /**
   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
   *
   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
   * front of �#6�. The post processing step restores the right order by keeping track of the
   * template id stack and looks for placeholders that belong to the currently active template.
   */
  let result = message;

  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    const matches = {};
    const templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
      const content = phs || tmpl;
      const placeholders = matches[content] || [];

      if (!placeholders.length) {
        content.split('|').forEach(placeholder => {
          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
          placeholders.push([templateId, isCloseTemplateTag, placeholder]);
        });
        matches[content] = placeholders;
      }

      if (!placeholders.length) {
        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
      }

      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      let idx = 0; // find placeholder index that matches current template id

      for (let i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      } // update template id stack based on the current tag extracted


      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];

      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      } // remove processed tag from the list


      placeholders.splice(idx, 1);
      return placeholder;
    });
  } // return current result if no replacements specified


  if (!Object.keys(replacements).length) {
    return result;
  }
  /**
   * Step 2: replace all ICU vars (like "VAR_PLURAL")
   */


  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {
    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;
  });
  /**
   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
   */

  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {
    return replacements.hasOwnProperty(key) ? replacements[key] : match;
  });
  /**
   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
   * multiple ICUs have the same placeholder name
   */

  result = result.replace(PP_ICUS_REGEXP, (match, key) => {
    if (replacements.hasOwnProperty(key)) {
      const list = replacements[key];

      if (!list.length) {
        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);
      }

      return list.shift();
    }

    return match;
  });
  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Marks a block of text as translatable.
 *
 * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * @param index A unique index of the translation in the static block.
 * @param messageIndex An index of the translation message from the `def.consts` array.
 * @param subTemplateIndex Optional sub-template index in the `message`.
 *
 * @codeGenApi
 */


function ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const message = getConstant(tView.consts, messageIndex);
  const parentTNode = getCurrentParentTNode();

  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }

  const tI18n = tView.data[adjustedIndex];
  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView); // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.
  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.

  const insertInFrontOf = parentTNode && parentTNode.type & 8
  /* ElementContainer */
  ? lView[parentTNode.index] : null;
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
/**
 * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
 * into the render tree, moves the placeholder nodes and removes the deleted nodes.
 *
 * @codeGenApi
 */


function ɵɵi18nEnd() {
  setInI18nBlock(false);
}
/**
 *
 * Use this instruction to create a translation block that doesn't contain any placeholder.
 * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
 *
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * @param index A unique index of the translation in the static block.
 * @param messageIndex An index of the translation message from the `def.consts` array.
 * @param subTemplateIndex Optional sub-template index in the `message`.
 *
 * @codeGenApi
 */


function ɵɵi18n(index, messageIndex, subTemplateIndex) {
  ɵɵi18nStart(index, messageIndex, subTemplateIndex);
  ɵɵi18nEnd();
}
/**
 * Marks a list of attributes as translatable.
 *
 * @param index A unique index in the static block
 * @param values
 *
 * @codeGenApi
 */


function ɵɵi18nAttributes(index, attrsIndex) {
  const tView = getTView();
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
/**
 * Stores the values of the bindings during each update cycle in order to determine if we need to
 * update the translated nodes.
 *
 * @param value The binding's value
 * @returns This function returns itself so that it may be chained
 * (e.g. `i18nExp(ctx.name)(ctx.title)`)
 *
 * @codeGenApi
 */


function ɵɵi18nExp(value) {
  const lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return ɵɵi18nExp;
}
/**
 * Updates a translation block or an i18n attribute when the bindings have changed.
 *
 * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
 * (i18n attribute) on which it should update the content.
 *
 * @codeGenApi
 */


function ɵɵi18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
/**
 * Handles message string post-processing for internationalization.
 *
 * Handles message string post-processing by transforming it from intermediate
 * format (that might contain some markers that we need to replace) to the final
 * form, consumable by i18nStart instruction. Post processing steps include:
 *
 * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
 * 2. Replace all ICU vars (like "VAR_PLURAL")
 * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
 * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
 *    in case multiple ICUs have the same placeholder name
 *
 * @param message Raw translation string for post processing
 * @param replacements Set of replacements that should be applied
 *
 * @returns Transformed string that can be consumed by i18nStart instruction
 *
 * @codeGenApi
 */


function ɵɵi18nPostprocess(message, replacements = {}) {
  return i18nPostprocess(message, replacements);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Resolves the providers which are defined in the DirectiveDef.
 *
 * When inserting the tokens and the factories in their respective arrays, we can assume that
 * this method is called first for the component (if any), and then for other directives on the same
 * node.
 * As a consequence,the providers are always processed in that order:
 * 1) The view providers of the component
 * 2) The providers of the component
 * 3) The providers of the other directives
 * This matches the structure of the injectables arrays of a view (for each node).
 * So the tokens and the factories can be pushed at the end of the arrays, except
 * in one case for multi providers.
 *
 * @param def the directive definition
 * @param providers: Array of `providers`.
 * @param viewProviders: Array of `viewProviders`.
 */


function providersResolver(def, providers, viewProviders) {
  const tView = getTView();

  if (tView.firstCreatePass) {
    const isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated

    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated

    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);
  }
}
/**
 * Resolves a provider and publishes it to the DI system.
 */


function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
  provider = resolveForwardRef(provider);

  if (Array.isArray(provider)) {
    // Recursively call `resolveProvider`
    // Recursion is OK in this case because this code will not be in hot-path once we implement
    // cloning of the initial state.
    for (let i = 0; i < provider.length; i++) {
      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
    }
  } else {
    const tView = getTView();
    const lView = getLView();
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    let providerFactory = providerToFactory(provider);
    const tNode = getCurrentTNode();
    const beginIndex = tNode.providerIndexes & 1048575
    /* ProvidersStartIndexMask */
    ;
    const endIndex = tNode.directiveStart;
    const cptViewProvidersCount = tNode.providerIndexes >> 20
    /* CptViewProvidersCountShift */
    ;

    if (isTypeProvider(provider) || !provider.multi) {
      // Single provider case: the factory is created and pushed immediately
      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);
      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);

      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;

        if (isViewProvider) {
          tNode.providerIndexes += 1048576
          /* CptViewProvidersCountShifter */
          ;
        }

        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      // Multi provider case:
      // We create a multi factory which is going to aggregate all the values.
      // Since the output of such a factory depends on content or view injection,
      // we create two of them, which are linked together.
      //
      // The first one (for view providers) is always in the first block of the injectables array,
      // and the second one (for providers) is always in the second block.
      // This is important because view providers have higher priority. When a multi token
      // is being looked up, the view providers should be found first.
      // Note that it is not possible to have a multi factory in the third block (directive block).
      //
      // The algorithm to process multi providers is as follows:
      // 1) If the multi provider comes from the `viewProviders` of the component:
      //   a) If the special view providers factory doesn't exist, it is created and pushed.
      //   b) Else, the multi provider is added to the existing multi factory.
      // 2) If the multi provider comes from the `providers` of the component or of another
      // directive:
      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
      //      It is also linked to the multi factory for view providers, if it exists.
      //   b) Else, the multi provider is added to the existing multi factory.
      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];

      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        // Cases 1.a and 2.a
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);

        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
        }

        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;

        if (isViewProvider) {
          tNode.providerIndexes += 1048576
          /* CptViewProvidersCountShifter */
          ;
        }

        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        // Cases 1.b and 2.b
        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }

      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
/**
 * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
 * @param tView `TView` in which to register the hook.
 * @param provider Provider whose hook should be registered.
 * @param contextIndex Index under which to find the context for the hook when it's being invoked.
 * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
 * provider factory.
 */


function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  const providerIsTypeProvider = isTypeProvider(provider);
  const providerIsClassProvider = isClassProvider(provider);

  if (providerIsTypeProvider || providerIsClassProvider) {
    // Resolve forward references as `useClass` can hold a forward reference.
    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
    const prototype = classToken.prototype;
    const ngOnDestroy = prototype.ngOnDestroy;

    if (ngOnDestroy) {
      const hooks = tView.destroyHooks || (tView.destroyHooks = []);

      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
        const existingCallbacksIndex = hooks.indexOf(contextIndex);

        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
/**
 * Add a factory in a multi factory.
 * @returns Index at which the factory was inserted.
 */


function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory.componentProviders++;
  }

  return multiFactory.multi.push(factory) - 1;
}
/**
 * Returns the index of item in the array, but only in the begin to end range.
 */


function indexOf(item, arr, begin, end) {
  for (let i = begin; i < end; i++) {
    if (arr[i] === item) return i;
  }

  return -1;
}
/**
 * Use this with `multi` `providers`.
 */


function multiProvidersFactoryResolver(_, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
/**
 * Use this with `multi` `viewProviders`.
 *
 * This factory knows how to concatenate itself with the existing `multi` `providers`.
 */


function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
  const factories = this.multi;
  let result;

  if (this.providerFactory) {
    const componentCount = this.providerFactory.componentProviders;
    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component

    result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.

    multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives

    for (let i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = []; // Insert the `viewProvider` instances.

    multiResolve(factories, result);
  }

  return result;
}
/**
 * Maps an array of factories into an array of values.
 */


function multiResolve(factories, result) {
  for (let i = 0; i < factories.length; i++) {
    const factory = factories[i];
    result.push(factory());
  }

  return result;
}
/**
 * Creates a multi factory.
 */


function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent && !isViewProvider);
  return factory;
}
/**
 * This feature resolves the providers of a directive (or component),
 * and publish them into the DI system, making it visible to others for injection.
 *
 * For example:
 * ```ts
 * class ComponentWithProviders {
 *   constructor(private greeter: GreeterDE) {}
 *
 *   static ɵcmp = defineComponent({
 *     type: ComponentWithProviders,
 *     selectors: [['component-with-providers']],
 *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
 *    decls: 1,
 *    vars: 1,
 *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
 *      if (fs & RenderFlags.Create) {
 *        ɵɵtext(0);
 *      }
 *      if (fs & RenderFlags.Update) {
 *        ɵɵtextInterpolate(ctx.greeter.greet());
 *      }
 *    },
 *    features: [ɵɵProvidersFeature([GreeterDE])]
 *  });
 * }
 * ```
 *
 * @param definition
 *
 * @codeGenApi
 */


function ɵɵProvidersFeature(providers, viewProviders = []) {
  return definition => {
    definition.providersResolver = (def, processProvidersFn) => {
      return providersResolver(def, //
      processProvidersFn ? processProvidersFn(providers) : providers, //
      viewProviders);
    };
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents a component created by a `ComponentFactory`.
 * Provides access to the component instance and related objects,
 * and provides the means of destroying the instance.
 *
 * @publicApi
 */


class ComponentRef$1 {}
/**
 * Base class for a factory that can create a component dynamically.
 * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
 * Use the resulting `ComponentFactory.create()` method to create a component of that type.
 *
 * @see [Dynamic Components](guide/dynamic-component-loader)
 *
 * @publicApi
 *
 * @deprecated Angular no longer requires Component factories. Please use other APIs where
 *     Component class can be used directly.
 */


class ComponentFactory$1 {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function noComponentFactoryError(component) {
  const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);
  error[ERROR_COMPONENT] = component;
  return error;
}

const ERROR_COMPONENT = 'ngComponent';

function getComponent(error) {
  return error[ERROR_COMPONENT];
}

class _NullComponentFactoryResolver {
  resolveComponentFactory(component) {
    throw noComponentFactoryError(component);
  }

}
/**
 * A simple registry that maps `Components` to generated `ComponentFactory` classes
 * that can be used to create instances of components.
 * Use to obtain the factory for a given component type,
 * then use the factory's `create()` method to create a component of that type.
 *
 * Note: since v13, dynamic component creation via
 * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)
 * does **not** require resolving component factory: component class can be used directly.
 *
 * @publicApi
 *
 * @deprecated Angular no longer requires Component factories. Please use other APIs where
 *     Component class can be used directly.
 */


let ComponentFactoryResolver$1 = /*#__PURE__*/(() => {
  class ComponentFactoryResolver$1 {}

  ComponentFactoryResolver$1.NULL = /* @__PURE__ */new _NullComponentFactoryResolver();
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */

  /**
   * Creates an ElementRef from the most recent node.
   *
   * @returns The ElementRef instance to use
   */

  return ComponentFactoryResolver$1;
})();

function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
/**
 * Creates an ElementRef given a node.
 *
 * @param tNode The node for which you'd like an ElementRef
 * @param lView The view to which the node belongs
 * @returns The ElementRef instance to use
 */


function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 *
 * @security Permitting direct access to the DOM can make your application more vulnerable to
 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
 * [Security Guide](https://g.co/ng/security).
 *
 * @publicApi
 */
// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
// i.e. users have to ask for what they need. With that, we can build better analysis tools
// and could do better codegen in the future.


let ElementRef = /*#__PURE__*/(() => {
  class ElementRef {
    constructor(nativeElement) {
      this.nativeElement = nativeElement;
    }

  }

  /**
   * @internal
   * @nocollapse
   */
  ElementRef.__NG_ELEMENT_ID__ = injectElementRef;
  /**
   * Unwraps `ElementRef` and return the `nativeElement`.
   *
   * @param value value to unwrap
   * @returns `nativeElement` if `ElementRef` otherwise returns value as is.
   */

  return ElementRef;
})();

function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const Renderer2Interceptor = /*#__PURE__*/new InjectionToken('Renderer2Interceptor');
/**
 * Creates and initializes a custom renderer that implements the `Renderer2` base class.
 *
 * @publicApi
 */

class RendererFactory2 {}
/**
 * Extend this base class to implement custom rendering. By default, Angular
 * renders a template into DOM. You can use custom rendering to intercept
 * rendering calls, or to render to something other than DOM.
 *
 * Create your custom renderer using `RendererFactory2`.
 *
 * Use a custom renderer to bypass Angular's templating and
 * make custom UI changes that can't be expressed declaratively.
 * For example if you need to set a property or an attribute whose name is
 * not statically known, use the `setProperty()` or
 * `setAttribute()` method.
 *
 * @publicApi
 */


let Renderer2 = /*#__PURE__*/(() => {
  class Renderer2 {}

  /**
   * @internal
   * @nocollapse
   */
  Renderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();
  /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */


  return Renderer2;
})();

function getOrCreateRenderer2(lView) {
  const renderer = lView[RENDERER];

  if (ngDevMode && !isProceduralRenderer(renderer)) {
    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
  }

  return renderer;
}
/** Injects a Renderer2 for the current component. */


function injectRenderer2() {
  // We need the Renderer to be based on the component that it's being injected into, however since
  // DI happens before we've entered its view, `getLView` will return the parent view instead.
  const lView = getLView();
  const tNode = getCurrentTNode();
  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * @publicApi
 */


let Sanitizer = /*#__PURE__*/(() => {
  class Sanitizer {}

  /** @nocollapse */
  Sanitizer.ɵprov = ɵɵdefineInjectable({
    token: Sanitizer,
    providedIn: 'root',
    factory: () => null
  });
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */

  /**
   * @description Represents the version of Angular
   *
   * @publicApi
   */

  return Sanitizer;
})();

class Version {
  constructor(full) {
    this.full = full;
    this.major = full.split('.')[0];
    this.minor = full.split('.')[1];
    this.patch = full.split('.').slice(2).join('.');
  }

}
/**
 * @publicApi
 */


const VERSION = /*#__PURE__*/new Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This default value is when checking the hierarchy for a token.
//
// It means both:
// - the token is not provided by the current injector,
// - only the element injectors should be checked (ie do not check module injectors
//
//          mod1
//         /
//       el1   mod2
//         \  /
//         el2
//
// When requesting el2.injector.get(token), we should check in the following order and return the
// first found value:
// - el2.injector.get(token, default)
// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
// - mod2.injector.get(token, default)

const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
  while (tNode !== null) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    | 16
    /* Projection */
    | 32
    /* Icu */
    );
    const lNode = lView[tNode.index];

    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    } // A given lNode can represent either a native node or a LContainer (when it is a host of a
    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
    // from the views in this container.


    if (isLContainer(lNode)) {
      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
        const lViewInAContainer = lNode[i];
        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;

        if (lViewFirstChildTNode !== null) {
          collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
        }
      }
    }

    const tNodeType = tNode.type;

    if (tNodeType & 8
    /* ElementContainer */
    ) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32
    /* Icu */
    ) {
      const nextRNode = icuContainerIterate(tNode, lView);
      let rNode;

      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16
    /* Projection */
    ) {
      const nodesInSlot = getProjectionNodes(lView, tNode);

      if (Array.isArray(nodesInSlot)) {
        result.push(...nodesInSlot);
      } else {
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }

    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }

  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class ViewRef$1 {
  constructor(
  /**
   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
   *
   * When ViewRef is created for a dynamic component, this also represents the `LView` for the
   * component.
   *
   * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
   * view.
   *
   * @internal
   */
  _lView,
  /**
   * This represents the `LView` associated with the point where `ChangeDetectorRef` was
   * requested.
   *
   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
   */
  _cdRefInjectingView) {
    this._lView = _lView;
    this._cdRefInjectingView = _cdRefInjectingView;
    this._appRef = null;
    this._attachedToViewContainer = false;
  }

  get rootNodes() {
    const lView = this._lView;
    const tView = lView[TVIEW];
    return collectNativeNodes(tView, lView, tView.firstChild, []);
  }

  get context() {
    return this._lView[CONTEXT];
  }

  set context(value) {
    this._lView[CONTEXT] = value;
  }

  get destroyed() {
    return (this._lView[FLAGS] & 256
    /* Destroyed */
    ) === 256
    /* Destroyed */
    ;
  }

  destroy() {
    if (this._appRef) {
      this._appRef.detachView(this);
    } else if (this._attachedToViewContainer) {
      const parent = this._lView[PARENT];

      if (isLContainer(parent)) {
        const viewRefs = parent[VIEW_REFS];
        const index = viewRefs ? viewRefs.indexOf(this) : -1;

        if (index > -1) {
          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');
          detachView(parent, index);
          removeFromArray(viewRefs, index);
        }
      }

      this._attachedToViewContainer = false;
    }

    destroyLView(this._lView[TVIEW], this._lView);
  }

  onDestroy(callback) {
    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
  }
  /**
   * Marks a view and all of its ancestors dirty.
   *
   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
   * checked when it needs to be re-rendered but the two normal triggers haven't marked it
   * dirty (i.e. inputs haven't changed and events haven't fired in the view).
   *
   * <!-- TODO: Add a link to a chapter on OnPush components -->
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Component({
   *   selector: 'app-root',
   *   template: `Number of ticks: {{numberOfTicks}}`
   *   changeDetection: ChangeDetectionStrategy.OnPush,
   * })
   * class AppComponent {
   *   numberOfTicks = 0;
   *
   *   constructor(private ref: ChangeDetectorRef) {
   *     setInterval(() => {
   *       this.numberOfTicks++;
   *       // the following is required, otherwise the view will not be updated
   *       this.ref.markForCheck();
   *     }, 1000);
   *   }
   * }
   * ```
   */


  markForCheck() {
    markViewDirty(this._cdRefInjectingView || this._lView);
  }
  /**
   * Detaches the view from the change detection tree.
   *
   * Detached views will not be checked during change detection runs until they are
   * re-attached, even if they are dirty. `detach` can be used in combination with
   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
   * detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds. We can do that by detaching
   * the component's change detector and doing a local check every five seconds.
   *
   * ```typescript
   * class DataProvider {
   *   // in a real application the returned data will be different every time
   *   get data() {
   *     return [1,2,3,4,5];
   *   }
   * }
   *
   * @Component({
   *   selector: 'giant-list',
   *   template: `
   *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
   *   `,
   * })
   * class GiantList {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
   *     ref.detach();
   *     setInterval(() => {
   *       this.ref.detectChanges();
   *     }, 5000);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   providers: [DataProvider],
   *   template: `
   *     <giant-list><giant-list>
   *   `,
   * })
   * class App {
   * }
   * ```
   */


  detach() {
    this._lView[FLAGS] &= ~128
    /* Attached */
    ;
  }
  /**
   * Re-attaches a view to the change detection tree.
   *
   * This can be used to re-attach views that were previously detached from the tree
   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example creates a component displaying `live` data. The component will detach
   * its change detector from the main change detector tree when the component's live property
   * is set to false.
   *
   * ```typescript
   * class DataProvider {
   *   data = 1;
   *
   *   constructor() {
   *     setInterval(() => {
   *       this.data = this.data * 2;
   *     }, 500);
   *   }
   * }
   *
   * @Component({
   *   selector: 'live-data',
   *   inputs: ['live'],
   *   template: 'Data: {{dataProvider.data}}'
   * })
   * class LiveData {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
   *
   *   set live(value) {
   *     if (value) {
   *       this.ref.reattach();
   *     } else {
   *       this.ref.detach();
   *     }
   *   }
   * }
   *
   * @Component({
   *   selector: 'app-root',
   *   providers: [DataProvider],
   *   template: `
   *     Live Update: <input type="checkbox" [(ngModel)]="live">
   *     <live-data [live]="live"><live-data>
   *   `,
   * })
   * class AppComponent {
   *   live = true;
   * }
   * ```
   */


  reattach() {
    this._lView[FLAGS] |= 128
    /* Attached */
    ;
  }
  /**
   * Checks the view and its children.
   *
   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
   * local change detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine, the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds.
   *
   * We can do that by detaching the component's change detector and doing a local change detection
   * check every five seconds.
   *
   * See {@link ChangeDetectorRef#detach detach} for more information.
   */


  detectChanges() {
    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
  }
  /**
   * Checks the change detector and its children, and throws if any changes are detected.
   *
   * This is used in development mode to verify that running change detection doesn't
   * introduce other changes.
   */


  checkNoChanges() {
    if (ngDevMode) {
      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
    }
  }

  attachToViewContainerRef() {
    if (this._appRef) {
      const errorMessage = ngDevMode ? 'This view is already attached directly to the ApplicationRef!' : '';
      throw new RuntimeError(902
      /* VIEW_ALREADY_ATTACHED */
      , errorMessage);
    }

    this._attachedToViewContainer = true;
  }

  detachFromAppRef() {
    this._appRef = null;
    renderDetachView(this._lView[TVIEW], this._lView);
  }

  attachToAppRef(appRef) {
    if (this._attachedToViewContainer) {
      const errorMessage = ngDevMode ? 'This view is already attached to a ViewContainer!' : '';
      throw new RuntimeError(902
      /* VIEW_ALREADY_ATTACHED */
      , errorMessage);
    }

    this._appRef = appRef;
  }

}
/** @internal */


class RootViewRef extends ViewRef$1 {
  constructor(_view) {
    super(_view);
    this._view = _view;
  }

  detectChanges() {
    detectChangesInRootView(this._view);
  }

  checkNoChanges() {
    if (ngDevMode) {
      checkNoChangesInRootView(this._view);
    }
  }

  get context() {
    return null;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class ComponentFactoryResolver extends ComponentFactoryResolver$1 {
  /**
   * @param ngModule The NgModuleRef to which all resolved factories are bound.
   */
  constructor(ngModule) {
    super();
    this.ngModule = ngModule;
  }

  resolveComponentFactory(component) {
    ngDevMode && assertComponentType(component);
    const componentDef = getComponentDef(component);
    return new ComponentFactory(componentDef, this.ngModule);
  }

}

function toRefArray(map) {
  const array = [];

  for (let nonMinified in map) {
    if (map.hasOwnProperty(nonMinified)) {
      const minified = map[nonMinified];
      array.push({
        propName: minified,
        templateName: nonMinified
      });
    }
  }

  return array;
}

function getNamespace(elementName) {
  const name = elementName.toLowerCase();
  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;
}

function createChainedInjector(rootViewInjector, moduleInjector) {
  return {
    get: (token, notFoundValue, flags) => {
      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);

      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
      }

      return moduleInjector.get(token, notFoundValue, flags);
    }
  };
}
/**
 * Render3 implementation of {@link viewEngine_ComponentFactory}.
 */


class ComponentFactory extends ComponentFactory$1 {
  /**
   * @param componentDef The component definition.
   * @param ngModule The NgModuleRef to which the factory is bound.
   */
  constructor(componentDef, ngModule) {
    super();
    this.componentDef = componentDef;
    this.ngModule = ngModule;
    this.componentType = componentDef.type;
    this.selector = stringifyCSSSelectorList(componentDef.selectors);
    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
    this.isBoundToModule = !!ngModule;
  }

  get inputs() {
    return toRefArray(this.componentDef.inputs);
  }

  get outputs() {
    return toRefArray(this.componentDef.outputs);
  }

  create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
    ngModule = ngModule || this.ngModule;
    const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
    const rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
    const sanitizer = rootViewInjector.get(Sanitizer, null);
    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created
    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.

    const elementName = this.componentDef.selectors[0][0] || 'div';
    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace(elementName));
    const rootFlags = this.componentDef.onPush ? 64
    /* Dirty */
    | 512
    /* IsRoot */
    : 16
    /* CheckAlways */
    | 512
    /* IsRoot */
    ;
    const rootContext = createRootContext(); // Create the root view. Uses empty TView and ContentTemplate.

    const rootTView = createTView(0
    /* Root */
    , null, null, 1, 0, null, null, null, null, null);
    const rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector); // rootView is the parent when bootstrapping
    // TODO(misko): it looks like we are entering view here but we don't really need to as
    // `renderView` does that. However as the code is written it is needed because
    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
    // issues would allow us to drop this.

    enterView(rootLView);
    let component;
    let tElementNode;

    try {
      const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);

      if (hostRNode) {
        if (rootSelectorOrNode) {
          setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
        } else {
          // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
          // is not defined), also apply attributes and classes extracted from component selector.
          // Extract attributes and classes from the first selector only to match VE behavior.
          const {
            attrs,
            classes
          } = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);

          if (attrs) {
            setUpAttributes(hostRenderer, hostRNode, attrs);
          }

          if (classes && classes.length > 0) {
            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
          }
        }
      }

      tElementNode = getTNode(rootTView, HEADER_OFFSET);

      if (projectableNodes !== undefined) {
        const projection = tElementNode.projection = [];

        for (let i = 0; i < this.ngContentSelectors.length; i++) {
          const nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
          // case). Here we do normalize passed data structure to be an array of arrays to avoid
          // complex checks down the line.
          // We also normalize the length of the passed in projectable nodes (to match the number of
          // <ng-container> slots defined by a component).

          projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
        }
      } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
      // executed here?
      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref


      component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
      renderView(rootTView, rootLView, null);
    } finally {
      leaveView();
    }

    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
  }

}

const componentFactoryResolver = /*#__PURE__*/new ComponentFactoryResolver();
/**
 * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
 * ComponentFactoryResolver
 * already exists, retrieves the existing ComponentFactoryResolver.
 *
 * @returns The ComponentFactoryResolver instance to use
 */

function injectComponentFactoryResolver() {
  return componentFactoryResolver;
}
/**
 * Represents an instance of a Component created via a {@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
 * method.
 *
 */


class ComponentRef extends ComponentRef$1 {
  constructor(componentType, instance, location, _rootLView, _tNode) {
    super();
    this.location = location;
    this._rootLView = _rootLView;
    this._tNode = _tNode;
    this.instance = instance;
    this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);
    this.componentType = componentType;
  }

  get injector() {
    return new NodeInjector(this._tNode, this._rootLView);
  }

  destroy() {
    this.hostView.destroy();
  }

  onDestroy(callback) {
    this.hostView.onDestroy(callback);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Adds decorator, constructor, and property metadata to a given type via static metadata fields
 * on the type.
 *
 * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
 *
 * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments
 * being tree-shaken away during production builds.
 */


function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(() => {
    const clazz = type;

    if (decorators !== null) {
      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {
        clazz.decorators.push(...decorators);
      } else {
        clazz.decorators = decorators;
      }
    }

    if (ctorParameters !== null) {
      // Rather than merging, clobber the existing parameters. If other projects exist which
      // use tsickle-style annotations and reflect over them in the same way, this could
      // cause issues, but that is vanishingly unlikely.
      clazz.ctorParameters = ctorParameters;
    }

    if (propDecorators !== null) {
      // The property decorator objects are merged as it is possible different fields have
      // different decorator types. Decorators on individual fields are not merged, as it's
      // also incredibly unlikely that a field will be decorated both with an Angular
      // decorator and a non-Angular decorator that's also been downleveled.
      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {
        clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
 * Provides access to the `NgModule` instance and related objects.
 *
 * @publicApi
 */


class NgModuleRef$1 {}
/**
 * @publicApi
 *
 * @deprecated
 * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy
 * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)
 * for additional context. Angular provides APIs that accept NgModule classes directly (such as
 * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and
 * [createNgModuleRef](api/core/createNgModuleRef)), consider switching to those APIs instead of
 * using factory-based ones.
 */


class NgModuleFactory$1 {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Map of module-id to the corresponding NgModule.
 * - In pre Ivy we track NgModuleFactory,
 * - In post Ivy we track the NgModuleType
 */


const modules = /*#__PURE__*/new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * @publicApi
 */

function registerModuleFactory(id, factory) {
  const existing = modules.get(id);
  assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
  modules.set(id, factory);
}

function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming) {
    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
  }
}

function registerNgModuleType(ngModuleType) {
  const visited = new Set();
  recurse(ngModuleType);

  function recurse(ngModuleType) {
    // The imports array of an NgModule must refer to other NgModules,
    // so an error is thrown if no module definition is available.
    const def = getNgModuleDef(ngModuleType,
    /* throwNotFound */
    true);
    const id = def.id;

    if (id !== null) {
      const existing = modules.get(id);
      assertSameOrNotExisting(id, existing, ngModuleType);
      modules.set(id, ngModuleType);
    }

    const imports = maybeUnwrapFn(def.imports);

    for (const i of imports) {
      if (!visited.has(i)) {
        visited.add(i);
        recurse(i);
      }
    }
  }
}

function clearModulesForTest() {
  modules.clear();
}

function getRegisteredNgModuleType(id) {
  return modules.get(id) || autoRegisterModuleById[id];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.
 * @param ngModule NgModule class.
 * @param parentInjector Optional injector instance to use as a parent for the module injector. If
 *     not provided, `NullInjector` will be used instead.
 * @publicApi
 */


function createNgModuleRef(ngModule, parentInjector) {
  return new NgModuleRef(ngModule, parentInjector !== null && parentInjector !== void 0 ? parentInjector : null);
}

class NgModuleRef extends NgModuleRef$1 {
  constructor(ngModuleType, _parent) {
    super();
    this._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore

    this._bootstrapComponents = [];
    this.injector = this;
    this.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:
    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
    // circular dependency which will result in a runtime error, because the injector doesn't
    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
    // and providing it, rather than letting the injector resolve it.

    this.componentFactoryResolver = new ComponentFactoryResolver(this);
    const ngModuleDef = getNgModuleDef(ngModuleType);
    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
      provide: NgModuleRef$1,
      useValue: this
    }, {
      provide: ComponentFactoryResolver$1,
      useValue: this.componentFactoryResolver
    }], stringify(ngModuleType)); // We need to resolve the injector types separately from the injector creation, because
    // the module might be trying to use this ref in its constructor for DI which will cause a
    // circular error that will eventually error out, because the injector isn't created yet.

    this._r3Injector._resolveInjectorDefTypes();

    this.instance = this.get(ngModuleType);
  }

  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {
    if (token === Injector || token === NgModuleRef$1 || token === INJECTOR) {
      return this;
    }

    return this._r3Injector.get(token, notFoundValue, injectFlags);
  }

  destroy() {
    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
    const injector = this._r3Injector;
    !injector.destroyed && injector.destroy();
    this.destroyCbs.forEach(fn => fn());
    this.destroyCbs = null;
  }

  onDestroy(callback) {
    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
    this.destroyCbs.push(callback);
  }

}

class NgModuleFactory extends NgModuleFactory$1 {
  constructor(moduleType) {
    super();
    this.moduleType = moduleType;
    const ngModuleDef = getNgModuleDef(moduleType);

    if (ngModuleDef !== null) {
      // Register the NgModule with Angular's module registry. The location (and hence timing) of
      // this call is critical to ensure this works correctly (modules get registered when expected)
      // without bloating bundles (modules are registered when otherwise not referenced).
      //
      // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
      // several practical consequences:
      //
      // - If an .ngfactory file is not imported from, the module won't be registered (and can be
      //   tree shaken).
      // - If an .ngfactory file is imported from, the module will be registered even if an instance
      //   is not actually created (via `create` below).
      // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
      //   imports,
      //
      // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
      // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
      // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
      // the side effect of registration is added here, in the constructor of NgModuleFactory,
      // ensuring no matter how a factory is created, the module is registered correctly.
      //
      // An alternative would be to include the registration side effect inline following the actual
      // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
      // will be registered and retained even if they're otherwise never referenced.
      registerNgModuleType(moduleType);
    }
  }

  create(parentInjector) {
    return new NgModuleRef(this.moduleType, parentInjector);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Bindings for pure functions are stored after regular bindings.
 *
 * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
 * ------------------------------------------------------------------------------------------
 * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
 * ------------------------------------------------------------------------------------------
 *                    ^                      ^
 *      TView.bindingStartIndex      TView.expandoStartIndex
 *
 * Pure function instructions are given an offset from the binding root. Adding the offset to the
 * binding root gives the first index where the bindings are stored. In component views, the binding
 * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
 * any directive instances + any hostVars in directives evaluated before it.
 *
 * See VIEW_DATA.md for more information about host binding resolution.
 */

/**
 * If the value hasn't been saved, calls the pure function to store and return the
 * value. If it has been saved, returns the saved value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns a value
 * @param thisArg Optional calling context of pureFn
 * @returns value
 *
 * @codeGenApi
 */


function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns an updated value
 * @param exp Updated expression value
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param exp7
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param exp5
 * @param exp6
 * @param exp7
 * @param exp8
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param exps An array of binding values
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 * @codeGenApi
 */


function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
/**
 * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
 * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
 * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
 * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
 * it to `undefined`.
 */


function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  const lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn Function that returns an updated value
 * @param exp Updated expression value
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn
 * @param exp1
 * @param exp2
 * @param exp3
 * @param exp4
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 *
 */


function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param lView LView in which the function is being executed.
 * @param bindingRoot Binding root index.
 * @param slotOffset the offset from binding root to the reserved slot
 * @param pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param exps An array of binding values
 * @param thisArg Optional calling context of pureFn
 * @returns Updated or cached value
 */


function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  let bindingIndex = bindingRoot + slotOffset;
  let different = false;

  for (let i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }

  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Create a pipe.
 *
 * @param index Pipe index where the pipe will be stored.
 * @param pipeName The name of the pipe
 * @returns T the instance of the pipe.
 *
 * @codeGenApi
 */


function ɵɵpipe(index, pipeName) {
  const tView = getTView();
  let pipeDef;
  const adjustedIndex = index + HEADER_OFFSET;

  if (tView.firstCreatePass) {
    // The `getPipeDef` throws if a pipe with a given name is not found
    // (so we use non-null assertion below).
    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;

    if (pipeDef.onDestroy) {
      (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }

  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);

  try {
    // DI for pipes is supposed to behave like directives when placed on a component
    // host node, which means that we have to disable access to `viewProviders`.
    const previousIncludeViewProviders = setIncludeViewProviders(false);
    const pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    // we have to restore the injector implementation in finally, just in case the creation of the
    // pipe throws an error.
    setInjectImplementation(previousInjectImplementation);
  }
}
/**
 * Searches the pipe registry for a pipe with the given name. If one is found,
 * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
 *
 * @param name Name of pipe to resolve
 * @param registry Full list of available pipes
 * @returns Matching PipeDef
 */


function getPipeDef(name, registry) {
  if (registry) {
    for (let i = registry.length - 1; i >= 0; i--) {
      const pipeDef = registry[i];

      if (name === pipeDef.name) {
        return pipeDef;
      }
    }
  }

  if (ngDevMode) {
    const lView = getLView();
    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
    const context = declarationLView[CONTEXT];
    const component = context ? ` in the '${context.constructor.name}' component` : '';
    throw new RuntimeError(-302
    /* PIPE_NOT_FOUND */
    , `The pipe '${name}' could not be found${component}!`);
  }
}
/**
 * Invokes a pipe with 1 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind1(index, slotOffset, v1) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
}
/**
 * Invokes a pipe with 2 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind2(index, slotOffset, v1, v2) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
}
/**
 * Invokes a pipe with 3 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 * @param v3 4rd argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
}
/**
 * Invokes a pipe with 4 arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param v1 1st argument to {@link PipeTransform#transform}.
 * @param v2 2nd argument to {@link PipeTransform#transform}.
 * @param v3 3rd argument to {@link PipeTransform#transform}.
 * @param v4 4th argument to {@link PipeTransform#transform}.
 *
 * @codeGenApi
 */


function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);
}
/**
 * Invokes a pipe with variable number of arguments.
 *
 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * @param index Pipe index where the pipe was stored on creation.
 * @param slotOffset the offset in the reserved slot space
 * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
 *
 * @codeGenApi
 */


function ɵɵpipeBindV(index, slotOffset, values) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
}

function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class EventEmitter_ extends rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject {
  constructor(isAsync = false) {
    super();
    this.__isAsync = isAsync;
  }

  emit(value) {
    super.next(value);
  }

  subscribe(observerOrNext, error, complete) {
    var _a, _b, _c;

    let nextFn = observerOrNext;

    let errorFn = error || (() => null);

    let completeFn = complete;

    if (observerOrNext && typeof observerOrNext === 'object') {
      const observer = observerOrNext;
      nextFn = (_a = observer.next) === null || _a === void 0 ? void 0 : _a.bind(observer);
      errorFn = (_b = observer.error) === null || _b === void 0 ? void 0 : _b.bind(observer);
      completeFn = (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.bind(observer);
    }

    if (this.__isAsync) {
      errorFn = _wrapInTimeout(errorFn);

      if (nextFn) {
        nextFn = _wrapInTimeout(nextFn);
      }

      if (completeFn) {
        completeFn = _wrapInTimeout(completeFn);
      }
    }

    const sink = super.subscribe({
      next: nextFn,
      error: errorFn,
      complete: completeFn
    });

    if (observerOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__.Subscription) {
      observerOrNext.add(sink);
    }

    return sink;
  }

}

function _wrapInTimeout(fn) {
  return value => {
    setTimeout(fn, undefined, value);
  };
}
/**
 * @publicApi
 */


const EventEmitter = EventEmitter_;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function symbolIterator() {
  return this._results[getSymbolIterator()]();
}
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
 * provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * @usageNotes
 * ### Example
 * ```typescript
 * @Component({...})
 * class Container {
 *   @ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 *
 * @publicApi
 */


class QueryList {
  /**
   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
   *     the same result)
   */
  constructor(_emitDistinctChangesOnly = false) {
    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
    this.dirty = true;
    this._results = [];
    this._changesDetected = false;
    this._changes = null;
    this.length = 0;
    this.first = undefined;
    this.last = undefined; // This function should be declared on the prototype, but doing so there will cause the class
    // declaration to have side-effects and become not tree-shakable. For this reason we do it in
    // the constructor.
    // [getSymbolIterator()](): Iterator<T> { ... }

    const symbol = getSymbolIterator();
    const proto = QueryList.prototype;
    if (!proto[symbol]) proto[symbol] = symbolIterator;
  }
  /**
   * Returns `Observable` of `QueryList` notifying the subscriber of changes.
   */


  get changes() {
    return this._changes || (this._changes = new EventEmitter());
  }
  /**
   * Returns the QueryList entry at `index`.
   */


  get(index) {
    return this._results[index];
  }
  /**
   * See
   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
   */


  map(fn) {
    return this._results.map(fn);
  }
  /**
   * See
   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
   */


  filter(fn) {
    return this._results.filter(fn);
  }
  /**
   * See
   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
   */


  find(fn) {
    return this._results.find(fn);
  }
  /**
   * See
   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
   */


  reduce(fn, init) {
    return this._results.reduce(fn, init);
  }
  /**
   * See
   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
   */


  forEach(fn) {
    this._results.forEach(fn);
  }
  /**
   * See
   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
   */


  some(fn) {
    return this._results.some(fn);
  }
  /**
   * Returns a copy of the internal results list as an Array.
   */


  toArray() {
    return this._results.slice();
  }

  toString() {
    return this._results.toString();
  }
  /**
   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
   * on change detection, it will not notify of changes to the queries, unless a new change
   * occurs.
   *
   * @param resultsTree The query results to store
   * @param identityAccessor Optional function for extracting stable object identity from a value
   *    in the array. This function is executed for each element of the query result list while
   *    comparing current query list with the new one (provided as a first argument of the `reset`
   *    function) to detect if the lists are different. If the function is not provided, elements
   *    are compared as is (without any pre-processing).
   */


  reset(resultsTree, identityAccessor) {
    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of
    // QueryList (but not for QueryList itself.)
    const self = this;
    self.dirty = false;
    const newResultFlat = flatten(resultsTree);

    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {
      self._results = newResultFlat;
      self.length = newResultFlat.length;
      self.last = newResultFlat[this.length - 1];
      self.first = newResultFlat[0];
    }
  }
  /**
   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
   */


  notifyOnChanges() {
    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);
  }
  /** internal */


  setDirty() {
    this.dirty = true;
  }
  /** internal */


  destroy() {
    this.changes.complete();
    this.changes.unsubscribe();
  }

}

Symbol.iterator;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents an embedded template that can be used to instantiate embedded views.
 * To instantiate embedded views based on a template, use the `ViewContainerRef`
 * method `createEmbeddedView()`.
 *
 * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
 * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
 * is injected into the constructor of the directive,
 * using the `TemplateRef` token.
 *
 * You can also use a `Query` to find a `TemplateRef` associated with
 * a component or a directive.
 *
 * @see `ViewContainerRef`
 * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
 *
 * @publicApi
 */

let TemplateRef = /*#__PURE__*/(() => {
  class TemplateRef {}

  /**
   * @internal
   * @nocollapse
   */
  TemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;
  return TemplateRef;
})();
const ViewEngineTemplateRef = TemplateRef; // TODO(alxhub): combine interface and implementation. Currently this is challenging since something
// in g3 depends on them being separate.

const R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {
  constructor(_declarationLView, _declarationTContainer, elementRef) {
    super();
    this._declarationLView = _declarationLView;
    this._declarationTContainer = _declarationTContainer;
    this.elementRef = elementRef;
  }

  createEmbeddedView(context) {
    const embeddedTView = this._declarationTContainer.tViews;
    const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16
    /* CheckAlways */
    , null, embeddedTView.declTNode, null, null, null, null);
    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];
    ngDevMode && assertLContainer(declarationLContainer);
    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
    const declarationViewLQueries = this._declarationLView[QUERIES];

    if (declarationViewLQueries !== null) {
      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
    }

    renderView(embeddedTView, embeddedLView, context);
    return new ViewRef$1(embeddedLView);
  }

};
/**
 * Creates a TemplateRef given a node.
 *
 * @returns The TemplateRef instance to use
 */

function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
/**
 * Creates a TemplateRef and stores it on the injector.
 *
 * @param hostTNode The node on which a TemplateRef is requested
 * @param hostLView The `LView` to which the node belongs
 * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
 */


function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4
  /* Container */
  ) {
    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents a container where one or more views can be attached to a component.
 *
 * Can contain *host views* (created by instantiating a
 * component with the `createComponent()` method), and *embedded views*
 * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
 *
 * A view container instance can contain other view containers,
 * creating a [view hierarchy](guide/glossary#view-tree).
 *
 * @see `ComponentRef`
 * @see `EmbeddedViewRef`
 *
 * @publicApi
 */


let ViewContainerRef = /*#__PURE__*/(() => {
  class ViewContainerRef {}

  /**
   * @internal
   * @nocollapse
   */
  ViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;
  /**
   * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
   * already exists, retrieves the existing ViewContainerRef.
   *
   * @returns The ViewContainerRef instance to use
   */

  return ViewContainerRef;
})();

function injectViewContainerRef() {
  const previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}

const VE_ViewContainerRef = ViewContainerRef; // TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix
// for that lands, this can be cleaned up.

const R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {
  constructor(_lContainer, _hostTNode, _hostLView) {
    super();
    this._lContainer = _lContainer;
    this._hostTNode = _hostTNode;
    this._hostLView = _hostLView;
  }

  get element() {
    return createElementRef(this._hostTNode, this._hostLView);
  }

  get injector() {
    return new NodeInjector(this._hostTNode, this._hostLView);
  }
  /** @deprecated No replacement */


  get parentInjector() {
    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);

    if (hasParentInjector(parentLocation)) {
      const parentView = getParentInjectorView(parentLocation, this._hostLView);
      const injectorIndex = getParentInjectorIndex(parentLocation);
      ngDevMode && assertNodeInjector(parentView, injectorIndex);
      const parentTNode = parentView[TVIEW].data[injectorIndex + 8
      /* TNODE */
      ];
      return new NodeInjector(parentTNode, parentView);
    } else {
      return new NodeInjector(null, this._hostLView);
    }
  }

  clear() {
    while (this.length > 0) {
      this.remove(this.length - 1);
    }
  }

  get(index) {
    const viewRefs = getViewRefs(this._lContainer);
    return viewRefs !== null && viewRefs[index] || null;
  }

  get length() {
    return this._lContainer.length - CONTAINER_HEADER_OFFSET;
  }

  createEmbeddedView(templateRef, context, index) {
    const viewRef = templateRef.createEmbeddedView(context || {});
    this.insert(viewRef, index);
    return viewRef;
  }

  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, ngModuleRef) {
    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
    let index; // This function supports 2 signatures and we need to handle options correctly for both:
    //   1. When first argument is a Component type. This signature also requires extra
    //      options to be provided as as object (more ergonomic option).
    //   2. First argument is a Component factory. In this case extra options are represented as
    //      positional arguments. This signature is less ergonomic and will be deprecated.

    if (isComponentFactory) {
      if (ngDevMode) {
        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + 'which to insert the new component\'s host view into this container)');
      }

      index = indexOrOptions;
    } else {
      if (ngDevMode) {
        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);
        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + 'and a number (representing an index at which to insert the new component\'s ' + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');
      }

      const options = indexOrOptions || {};
      index = options.index;
      injector = options.injector;
      projectableNodes = options.projectableNodes;
      ngModuleRef = options.ngModuleRef;
    }

    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));
    const contextInjector = injector || this.parentInjector; // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.

    if (!ngModuleRef && componentFactory.ngModule == null) {
      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that
      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an
      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based
      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try
      // using a provided injector first, then fall back to the parent injector of this
      // `ViewContainerRef` instance.
      //
      // For the factory-less case, it's critical to establish a connection with the module
      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),
      // so that a component can use DI tokens provided in MgModules. For this reason, we can not
      // rely on the provided injector, since it might be detached from the DI tree (for example, if
      // it was created via `Injector.create` without specifying a parent injector, or if an
      // injector is retrieved from an `NgModuleRef` created via `createNgModuleRef` using an
      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent
      // injector, which is normally connected to the DI tree, which includes module injector
      // subtree.
      const _injector = isComponentFactory ? contextInjector : this.parentInjector; // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||
      // undefined` expression which seems to cause internal google apps to fail. This is documented
      // in the following internal bug issue: go/b/142967802


      const result = _injector.get(NgModuleRef$1, null);

      if (result) {
        ngModuleRef = result;
      }
    }

    const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
    this.insert(componentRef.hostView, index);
    return componentRef;
  }

  insert(viewRef, index) {
    const lView = viewRef._lView;
    const tView = lView[TVIEW];

    if (ngDevMode && viewRef.destroyed) {
      throw new Error('Cannot insert a destroyed View in a ViewContainer!');
    }

    if (viewAttachedToContainer(lView)) {
      // If view is already attached, detach it first so we clean up references appropriately.
      const prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for
      // those cases will be:
      // equal to -1 for views attached to this ViewContainerRef
      // >= 0 for views attached to a different ViewContainerRef

      if (prevIdx !== -1) {
        this.detach(prevIdx);
      } else {
        const prevLContainer = lView[PARENT];
        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on
        // LView (nor anywhere else).

        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
        prevVCRef.detach(prevVCRef.indexOf(viewRef));
      }
    } // Logical operation of adding `LView` to `LContainer`


    const adjustedIdx = this._adjustIndex(index);

    const lContainer = this._lContainer;
    insertView(tView, lView, lContainer, adjustedIdx); // Physical operation of adding the DOM nodes.

    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);
    const renderer = lView[RENDERER];
    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);

    if (parentRNode !== null) {
      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
    }

    viewRef.attachToViewContainerRef();
    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
    return viewRef;
  }

  move(viewRef, newIndex) {
    if (ngDevMode && viewRef.destroyed) {
      throw new Error('Cannot move a destroyed View in a ViewContainer!');
    }

    return this.insert(viewRef, newIndex);
  }

  indexOf(viewRef) {
    const viewRefsArr = getViewRefs(this._lContainer);
    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
  }

  remove(index) {
    const adjustedIdx = this._adjustIndex(index, -1);

    const detachedView = detachView(this._lContainer, adjustedIdx);

    if (detachedView) {
      // Before destroying the view, remove it from the container's array of `ViewRef`s.
      // This ensures the view container length is updated before calling
      // `destroyLView`, which could recursively call view container methods that
      // rely on an accurate container length.
      // (e.g. a method on this view container being called by a child directive's OnDestroy
      // lifecycle hook)
      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
      destroyLView(detachedView[TVIEW], detachedView);
    }
  }

  detach(index) {
    const adjustedIdx = this._adjustIndex(index, -1);

    const view = detachView(this._lContainer, adjustedIdx);
    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
    return wasDetached ? new ViewRef$1(view) : null;
  }

  _adjustIndex(index, shift = 0) {
    if (index == null) {
      return this.length + shift;
    }

    if (ngDevMode) {
      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`); // +1 because it's legal to insert at the end.

      assertLessThan(index, this.length + 1 + shift, 'index');
    }

    return index;
  }

};

function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}

function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
/**
 * Creates a ViewContainerRef and stores it on the injector.
 *
 * @param ViewContainerRefToken The ViewContainerRef type
 * @param ElementRefToken The ElementRef type
 * @param hostTNode The node that is requesting a ViewContainerRef
 * @param hostLView The view to which the node belongs
 * @returns The ViewContainerRef instance to use
 */


function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(hostTNode, 12
  /* AnyContainer */
  | 3
  /* AnyRNode */
  );
  let lContainer;
  const slotValue = hostLView[hostTNode.index];

  if (isLContainer(slotValue)) {
    // If the host is a container, we don't need to create a new LContainer
    lContainer = slotValue;
  } else {
    let commentNode; // If the host is an element container, the native host element is guaranteed to be a
    // comment and we can reuse that comment as anchor element for the new LContainer.
    // The comment node in question is already part of the DOM structure so we don't need to append
    // it again.

    if (hostTNode.type & 8
    /* ElementContainer */
    ) {
      commentNode = unwrapRNode(slotValue);
    } else {
      // If the host is a regular element, we have to insert a comment node manually which will
      // be used as an anchor when inserting elements. In this specific case we use low-level DOM
      // manipulation to insert it.
      const renderer = hostLView[RENDERER];
      ngDevMode && ngDevMode.rendererCreateComment++;
      commentNode = renderer.createComment(ngDevMode ? 'container' : '');
      const hostNative = getNativeByTNode(hostTNode, hostLView);
      const parentOfHostNative = nativeParentNode(renderer, hostNative);
      nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
    }

    hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);
    addToViewTree(hostLView, lContainer);
  }

  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.


const unusedValueExportToPlacateAjd$1 = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.

const unusedValueExportToPlacateAjd = 1;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

const unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd;

class LQuery_ {
  constructor(queryList) {
    this.queryList = queryList;
    this.matches = null;
  }

  clone() {
    return new LQuery_(this.queryList);
  }

  setDirty() {
    this.queryList.setDirty();
  }

}

class LQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }

  createEmbeddedView(tView) {
    const tQueries = tView.queries;

    if (tQueries !== null) {
      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
      const viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the
      // TQueries collection and up until a first content query declared in the embedded view. Only
      // propagated LQueries are created at this point (LQuery corresponding to declared content
      // queries will be instantiated from the content query instructions for each directive).

      for (let i = 0; i < noOfInheritedQueries; i++) {
        const tQuery = tQueries.getByIndex(i);
        const parentLQuery = this.queries[tQuery.indexInDeclarationView];
        viewLQueries.push(parentLQuery.clone());
      }

      return new LQueries_(viewLQueries);
    }

    return null;
  }

  insertView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }

  detachView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }

  dirtyQueriesWithMatches(tView) {
    for (let i = 0; i < this.queries.length; i++) {
      if (getTQuery(tView, i).matches !== null) {
        this.queries[i].setDirty();
      }
    }
  }

}

class TQueryMetadata_ {
  constructor(predicate, flags, read = null) {
    this.predicate = predicate;
    this.flags = flags;
    this.read = read;
  }

}

class TQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }

  elementStart(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementStart(tView, tNode);
    }
  }

  elementEnd(tNode) {
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementEnd(tNode);
    }
  }

  embeddedTView(tNode) {
    let queriesForTemplateRef = null;

    for (let i = 0; i < this.length; i++) {
      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);

      if (tqueryClone) {
        tqueryClone.indexInDeclarationView = i;

        if (queriesForTemplateRef !== null) {
          queriesForTemplateRef.push(tqueryClone);
        } else {
          queriesForTemplateRef = [tqueryClone];
        }
      }
    }

    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
  }

  template(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].template(tView, tNode);
    }
  }

  getByIndex(index) {
    ngDevMode && assertIndexInRange(this.queries, index);
    return this.queries[index];
  }

  get length() {
    return this.queries.length;
  }

  track(tquery) {
    this.queries.push(tquery);
  }

}

class TQuery_ {
  constructor(metadata, nodeIndex = -1) {
    this.metadata = metadata;
    this.matches = null;
    this.indexInDeclarationView = -1;
    this.crossesNgTemplate = false;
    /**
     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
     * elements in a template.
     */

    this._appliesToNextNode = true;
    this._declarationNodeIndex = nodeIndex;
  }

  elementStart(tView, tNode) {
    if (this.isApplyingToNode(tNode)) {
      this.matchTNode(tView, tNode);
    }
  }

  elementEnd(tNode) {
    if (this._declarationNodeIndex === tNode.index) {
      this._appliesToNextNode = false;
    }
  }

  template(tView, tNode) {
    this.elementStart(tView, tNode);
  }

  embeddedTView(tNode, childQueryIndex) {
    if (this.isApplyingToNode(tNode)) {
      this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from
      // embedded views created based on this `<ng-template>`).

      this.addMatch(-tNode.index, childQueryIndex);
      return new TQuery_(this.metadata);
    }

    return null;
  }

  isApplyingToNode(tNode) {
    if (this._appliesToNextNode && (this.metadata.flags & 1
    /* descendants */
    ) !== 1
    /* descendants */
    ) {
      const declarationNodeIdx = this._declarationNodeIndex;
      let parent = tNode.parent; // Determine if a given TNode is a "direct" child of a node on which a content query was
      // declared (only direct children of query's host node can match with the descendants: false
      // option). There are 3 main use-case / conditions to consider here:
      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
      // host node;
      // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
      // here <i #target> parent node is null;
      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
      // up past the query's host node!).

      while (parent !== null && parent.type & 8
      /* ElementContainer */
      && parent.index !== declarationNodeIdx) {
        parent = parent.parent;
      }

      return declarationNodeIdx === (parent !== null ? parent.index : -1);
    }

    return this._appliesToNextNode;
  }

  matchTNode(tView, tNode) {
    const predicate = this.metadata.predicate;

    if (Array.isArray(predicate)) {
      for (let i = 0; i < predicate.length; i++) {
        const name = predicate[i];
        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.

        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
      }
    } else {
      if (predicate === TemplateRef) {
        if (tNode.type & 4
        /* Container */
        ) {
          this.matchTNodeWithReadOption(tView, tNode, -1);
        }
      } else {
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
      }
    }
  }

  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
    if (nodeMatchIdx !== null) {
      const read = this.metadata.read;

      if (read !== null) {
        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4
        /* Container */
        ) {
          this.addMatch(tNode.index, -2);
        } else {
          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);

          if (directiveOrProviderIdx !== null) {
            this.addMatch(tNode.index, directiveOrProviderIdx);
          }
        }
      } else {
        this.addMatch(tNode.index, nodeMatchIdx);
      }
    }
  }

  addMatch(tNodeIdx, matchIdx) {
    if (this.matches === null) {
      this.matches = [tNodeIdx, matchIdx];
    } else {
      this.matches.push(tNodeIdx, matchIdx);
    }
  }

}
/**
 * Iterates over local names for a given node and returns directive index
 * (or -1 if a local name points to an element).
 *
 * @param tNode static data of a node to check
 * @param selector selector to match
 * @returns directive index, -1 or null if a selector didn't match any of the local names
 */


function getIdxOfMatchingSelector(tNode, selector) {
  const localNames = tNode.localNames;

  if (localNames !== null) {
    for (let i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }

  return null;
}

function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3
  /* AnyRNode */
  | 8
  /* ElementContainer */
  )) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4
  /* Container */
  ) {
    return createTemplateRef(tNode, currentView);
  }

  return null;
}

function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    // if read token and / or strategy is not specified, detect it using appropriate tNode type
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    // read a special token from a node injector
    return createSpecialToken(lView, tNode, read);
  } else {
    // read a token
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}

function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(tNode, 3
    /* AnyRNode */
    | 12
    /* AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
  }
}
/**
 * A helper function that creates query results for a given view. This function is meant to do the
 * processing once and only once for a given view instance (a set of results for a given view
 * doesn't change).
 */


function materializeViewResults(tView, lView, tQuery, queryIndex) {
  const lQuery = lView[QUERIES].queries[queryIndex];

  if (lQuery.matches === null) {
    const tViewData = tView.data;
    const tQueryMatches = tQuery.matches;
    const result = [];

    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const matchedNodeIdx = tQueryMatches[i];

      if (matchedNodeIdx < 0) {
        // we at the <ng-template> marker which might have results in views created based on this
        // <ng-template> - those results will be in separate views though, so here we just leave
        // null as a placeholder
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        const tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }

    lQuery.matches = result;
  }

  return lQuery.matches;
}
/**
 * A helper function that collects (already materialized) query results from a tree of views,
 * starting with a provided LView.
 */


function collectQueryResults(tView, lView, queryIndex, result) {
  const tQuery = tView.queries.getByIndex(queryIndex);
  const tQueryMatches = tQuery.matches;

  if (tQueryMatches !== null) {
    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);

    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const tNodeIdx = tQueryMatches[i];

      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        const childQueryIndex = tQueryMatches[i + 1];
        const declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container

        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {
          const embeddedLView = declarationLContainer[i];

          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        } // collect matches for views created from this declaration container and inserted into
        // different containers


        if (declarationLContainer[MOVED_VIEWS] !== null) {
          const embeddedLViews = declarationLContainer[MOVED_VIEWS];

          for (let i = 0; i < embeddedLViews.length; i++) {
            const embeddedLView = embeddedLViews[i];
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }

  return result;
}
/**
 * Refreshes a query by combining matches from all active views and removing matches from deleted
 * views.
 *
 * @returns `true` if a query got dirty during change detection or if this is a static query
 * resolving in creation mode, `false` otherwise.
 *
 * @codeGenApi
 */


function ɵɵqueryRefresh(queryList) {
  const lView = getLView();
  const tView = getTView();
  const queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  const tQuery = getTQuery(tView, queryIndex);

  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2
  /* isStatic */
  ) === 2
  /* isStatic */
  )) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }

    return true;
  }

  return false;
}
/**
 * Creates new QueryList, stores the reference in LView and returns QueryList.
 *
 * @param predicate The type for which the query will search
 * @param flags Flags associated with the query
 * @param read What to save in the query
 *
 * @codeGenApi
 */


function ɵɵviewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, 'Expecting flags');
  const tView = getTView();

  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);

    if ((flags & 2
    /* isStatic */
    ) === 2
    /* isStatic */
    ) {
      tView.staticViewQueries = true;
    }
  }

  createLQuery(tView, getLView(), flags);
}
/**
 * Registers a QueryList, associated with a content query, for later refresh (part of a view
 * refresh).
 *
 * @param directiveIndex Current directive index
 * @param predicate The type for which the query will search
 * @param flags Flags associated with the query
 * @param read What to save in the query
 * @returns QueryList<T>
 *
 * @codeGenApi
 */


function ɵɵcontentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, 'Expecting flags');
  const tView = getTView();

  if (tView.firstCreatePass) {
    const tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);

    if ((flags & 2
    /* isStatic */
    ) === 2
    /* isStatic */
    ) {
      tView.staticContentQueries = true;
    }
  }

  createLQuery(tView, getLView(), flags);
}
/**
 * Loads a QueryList corresponding to the current view or content query.
 *
 * @codeGenApi
 */


function ɵɵloadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}

function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}

function createLQuery(tView, lView, flags) {
  const queryList = new QueryList((flags & 4
  /* emitDistinctChangesOnly */
  ) === 4
  /* emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();
  lView[QUERIES].queries.push(new LQuery_(queryList));
}

function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null) tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}

function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;

  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}

function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
  return tView.queries.getByIndex(index);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
 * `<ng-template>` element.
 *
 * @codeGenApi
 */


function ɵɵtemplateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of @angular/core.
 */


const angularCoreEnv = /*#__PURE__*/(() => ({
  'ɵɵattribute': ɵɵattribute,
  'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,
  'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,
  'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,
  'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,
  'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,
  'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,
  'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,
  'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,
  'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,
  'ɵɵdefineComponent': ɵɵdefineComponent,
  'ɵɵdefineDirective': ɵɵdefineDirective,
  'ɵɵdefineInjectable': ɵɵdefineInjectable,
  'ɵɵdefineInjector': ɵɵdefineInjector,
  'ɵɵdefineNgModule': ɵɵdefineNgModule,
  'ɵɵdefinePipe': ɵɵdefinePipe,
  'ɵɵdirectiveInject': ɵɵdirectiveInject,
  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,
  'ɵɵinject': ɵɵinject,
  'ɵɵinjectAttribute': ɵɵinjectAttribute,
  'ɵɵinvalidFactory': ɵɵinvalidFactory,
  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,
  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,
  'ɵɵProvidersFeature': ɵɵProvidersFeature,
  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,
  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,
  'ɵɵnextContext': ɵɵnextContext,
  'ɵɵnamespaceHTML': ɵɵnamespaceHTML,
  'ɵɵnamespaceMathML': ɵɵnamespaceMathML,
  'ɵɵnamespaceSVG': ɵɵnamespaceSVG,
  'ɵɵenableBindings': ɵɵenableBindings,
  'ɵɵdisableBindings': ɵɵdisableBindings,
  'ɵɵelementStart': ɵɵelementStart,
  'ɵɵelementEnd': ɵɵelementEnd,
  'ɵɵelement': ɵɵelement,
  'ɵɵelementContainerStart': ɵɵelementContainerStart,
  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,
  'ɵɵelementContainer': ɵɵelementContainer,
  'ɵɵpureFunction0': ɵɵpureFunction0,
  'ɵɵpureFunction1': ɵɵpureFunction1,
  'ɵɵpureFunction2': ɵɵpureFunction2,
  'ɵɵpureFunction3': ɵɵpureFunction3,
  'ɵɵpureFunction4': ɵɵpureFunction4,
  'ɵɵpureFunction5': ɵɵpureFunction5,
  'ɵɵpureFunction6': ɵɵpureFunction6,
  'ɵɵpureFunction7': ɵɵpureFunction7,
  'ɵɵpureFunction8': ɵɵpureFunction8,
  'ɵɵpureFunctionV': ɵɵpureFunctionV,
  'ɵɵgetCurrentView': ɵɵgetCurrentView,
  'ɵɵrestoreView': ɵɵrestoreView,
  'ɵɵlistener': ɵɵlistener,
  'ɵɵprojection': ɵɵprojection,
  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,
  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,
  'ɵɵpipeBind1': ɵɵpipeBind1,
  'ɵɵpipeBind2': ɵɵpipeBind2,
  'ɵɵpipeBind3': ɵɵpipeBind3,
  'ɵɵpipeBind4': ɵɵpipeBind4,
  'ɵɵpipeBindV': ɵɵpipeBindV,
  'ɵɵprojectionDef': ɵɵprojectionDef,
  'ɵɵhostProperty': ɵɵhostProperty,
  'ɵɵproperty': ɵɵproperty,
  'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,
  'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,
  'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,
  'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,
  'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,
  'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,
  'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,
  'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,
  'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,
  'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,
  'ɵɵpipe': ɵɵpipe,
  'ɵɵqueryRefresh': ɵɵqueryRefresh,
  'ɵɵviewQuery': ɵɵviewQuery,
  'ɵɵloadQuery': ɵɵloadQuery,
  'ɵɵcontentQuery': ɵɵcontentQuery,
  'ɵɵreference': ɵɵreference,
  'ɵɵclassMap': ɵɵclassMap,
  'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,
  'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,
  'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,
  'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,
  'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,
  'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,
  'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,
  'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,
  'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,
  'ɵɵstyleMap': ɵɵstyleMap,
  'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,
  'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,
  'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,
  'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,
  'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,
  'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,
  'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,
  'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,
  'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,
  'ɵɵstyleProp': ɵɵstyleProp,
  'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,
  'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,
  'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,
  'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,
  'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,
  'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,
  'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,
  'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,
  'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,
  'ɵɵclassProp': ɵɵclassProp,
  'ɵɵadvance': ɵɵadvance,
  'ɵɵtemplate': ɵɵtemplate,
  'ɵɵtext': ɵɵtext,
  'ɵɵtextInterpolate': ɵɵtextInterpolate,
  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,
  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,
  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,
  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,
  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,
  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,
  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,
  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,
  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,
  'ɵɵi18n': ɵɵi18n,
  'ɵɵi18nAttributes': ɵɵi18nAttributes,
  'ɵɵi18nExp': ɵɵi18nExp,
  'ɵɵi18nStart': ɵɵi18nStart,
  'ɵɵi18nEnd': ɵɵi18nEnd,
  'ɵɵi18nApply': ɵɵi18nApply,
  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,
  'ɵɵresolveWindow': ɵɵresolveWindow,
  'ɵɵresolveDocument': ɵɵresolveDocument,
  'ɵɵresolveBody': ɵɵresolveBody,
  'ɵɵsetComponentScope': ɵɵsetComponentScope,
  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,
  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,
  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,
  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,
  'ɵɵsanitizeScript': ɵɵsanitizeScript,
  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,
  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,
  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,
  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,
  'forwardRef': forwardRef,
  'resolveForwardRef': resolveForwardRef
}))();

let jitOptions = null;

function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
      return;
    }

    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
      return;
    }
  }

  jitOptions = options;
}

function getJitOptions() {
  return jitOptions;
}

function resetJitOptions() {
  jitOptions = null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const moduleQueue = [];
/**
 * Enqueues moduleDef to be checked later to see if scope can be set on its
 * component declarations.
 */

function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({
    moduleType,
    ngModule
  });
}

let flushingModuleQueue = false;
/**
 * Loops over queued module definitions, if a given module definition has all of its
 * declarations resolved, it dequeues that module definition and sets the scope on
 * its declarations.
 */

function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;

    try {
      for (let i = moduleQueue.length - 1; i >= 0; i--) {
        const {
          moduleType,
          ngModule
        } = moduleQueue[i];

        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          // dequeue
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
/**
 * Returns truthy if a declaration has resolved. If the declaration happens to be
 * an array of declarations, it will recurse to check each declaration in that array
 * (which may also be arrays).
 */


function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }

  return !!resolveForwardRef(declaration);
}
/**
 * Compiles a module in JIT mode.
 *
 * This function automatically gets called when a class has a `@NgModule` decorator.
 */


function compileNgModule(moduleType, ngModule = {}) {
  compileNgModuleDefs(moduleType, ngModule); // Because we don't know if all declarations have resolved yet at the moment the
  // NgModule decorator is executing, we're enqueueing the setting of module scope
  // on its declarations to be run at a later time when all declarations for the module,
  // including forward refs, have resolved.

  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
/**
 * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.
 *
 * It's possible to compile a module via this API which will allow duplicate declarations in its
 * root.
 */


function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
  ngDevMode && assertDefined(moduleType, 'Required value moduleType');
  ngDevMode && assertDefined(ngModule, 'Required value ngModule');
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  let ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: () => {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          // We need to assert this immediately, because allowing it to continue will cause it to
          // go into an infinite loop before we've reached the point where we throw all the errors.
          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
        }

        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
        // should verify that there are no unknown elements in a template. In AOT mode, that check
        // happens at compile time and `schemas` information is not present on Component and Module
        // defs after compilation (so the check doesn't happen the second time at runtime).

        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }

      return ngModuleDef;
    }
  });
  let ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  let ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: () => {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        const meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]
        };
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'NgModule',
          type: moduleType
        });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);
      }

      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType)) return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  let ngModuleDef;

  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);

    if (!ngModuleDef) {
      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  } else {
    ngModuleDef = getNgModuleDef(moduleType, true);
  }

  const errors = [];
  const declarations = maybeUnwrapFn(ngModuleDef.declarations);
  const imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(mod => {
    verifySemanticsOfNgModuleImport(mod, moduleType);
    verifySemanticsOfNgModuleDef(mod, false, moduleType);
  });
  const exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
  const ngModule = getAnnotation(moduleType, 'NgModule');

  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
    ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
  } // Throw Error if any errors were detected.


  if (errors.length) {
    throw new Error(errors.join('\n'));
  } ////////////////////////////////////////////////////////////////////////////////////////////////


  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);

    if (!def) {
      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
    }
  }

  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    const def = getDirectiveDef(type);

    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
    }
  }

  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';

    if (kind) {
      // only checked if we are declared as Component, Directive, or Pipe
      // Modules don't need to be declared or imported.
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        // We are exporting something which we don't explicitly declare or import.
        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
      }
    }
  }

  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);

    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        const modules = [existingModule, moduleType].map(stringifyForError).sort();
        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);
      }
    } else {
      // Mark type as having owner.
      ownerNgModule.set(type, moduleType);
    }
  }

  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);

    if (!existingModule) {
      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
    }
  }

  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);

    if (!getComponentDef(type)) {
      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
    }
  }

  function verifyComponentEntryComponentsIsPartOfNgModule(type) {
    type = resolveForwardRef(type);

    if (getComponentDef(type)) {
      // We know we are component
      const component = getAnnotation(type, 'Component');

      if (component && component.entryComponents) {
        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
      }
    }
  }

  function verifySemanticsOfNgModuleImport(type, importingModule) {
    type = resolveForwardRef(type);

    if (getComponentDef(type) || getDirectiveDef(type)) {
      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }

    if (getPipeDef$1(type)) {
      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  }
}

function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}

function getAnnotation(type, name) {
  let annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;

  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }

  function readAnnotation(decorator) {
    if (!annotation) {
      const proto = Object.getPrototypeOf(decorator);

      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        const proto = Object.getPrototypeOf(decorator.type);

        if (proto.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
/**
 * Keep track of compiled components. This is needed because in tests we often want to compile the
 * same component with more than one NgModule. This would cause an error unless we reset which
 * NgModule the component belongs to. We keep the list of compiled components here so that the
 * TestBed can reset it later.
 */


let ownerNgModule = /*#__PURE__*/new WeakMap();
let verifiedNgModule = /*#__PURE__*/new WeakMap();

function resetCompiledComponents() {
  ownerNgModule = new WeakMap();
  verifiedNgModule = new WeakMap();
  moduleQueue.length = 0;
}
/**
 * Computes the combined declarations of explicit declarations, as well as declarations inherited by
 * traversing the exports of imported modules.
 * @param type
 */


function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  const ngModuleDef = getNgModuleDef(type, true);
  return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map(type => {
    const ngModuleDef = getNgModuleDef(type);

    if (ngModuleDef) {
      verifySemanticsOfNgModuleDef(type, false);
      return computeCombinedExports(type);
    } else {
      return type;
    }
  }))];
}
/**
 * Some declared components may be compiled asynchronously, and thus may not have their
 * ɵcmp set yet. If this is the case, then a reference to the module is written into
 * the `ngSelectorScope` property of the declared type.
 */


function setScopeOnDeclaredComponents(moduleType, ngModule) {
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  const transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach(declaration => {
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      // A `ɵcmp` field exists - go ahead and patch the component directly.
      const component = declaration;
      const componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      // Set `ngSelectorScope` for future reference when the component compilation finishes.
      declaration.ngSelectorScope = moduleType;
    }
  });
}
/**
 * Patch the definition of a component with directives and pipes from the compilation scope of
 * a given module.
 */


function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter(def => !!def);

  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));

  componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
  // may face a problem where previously compiled defs available to a given Component/Directive
  // are cached in TView and may become stale (in case any of these defs gets recompiled). In
  // order to avoid this problem, we force fresh TView to be created.

  componentDef.tView = null;
}
/**
 * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
 *
 * This operation is memoized and the result is cached on the module's definition. This function can
 * be called on modules with components that have not fully compiled yet, but the result should not
 * be used until they have.
 *
 * @param moduleType module that transitive scope should be calculated for.
 */


function transitiveScopesFor(moduleType) {
  if (!isNgModule(moduleType)) {
    throw new Error(`${moduleType.name} does not have a module def (ɵmod property)`);
  }

  const def = getNgModuleDef(moduleType);

  if (def.transitiveCompileScopes !== null) {
    return def.transitiveCompileScopes;
  }

  const scopes = {
    schemas: def.schemas || null,
    compilation: {
      directives: new Set(),
      pipes: new Set()
    },
    exported: {
      directives: new Set(),
      pipes: new Set()
    }
  };
  maybeUnwrapFn(def.imports).forEach(imported => {
    const importedType = imported;

    if (!isNgModule(importedType)) {
      throw new Error(`Importing ${importedType.name} which does not have a ɵmod property`);
    } // When this module imports another, the imported module's exported directives and pipes are
    // added to the compilation scope of this module.


    const importedScope = transitiveScopesFor(importedType);
    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));
    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));
  });
  maybeUnwrapFn(def.declarations).forEach(declared => {
    const declaredWithDefs = declared;

    if (getPipeDef$1(declaredWithDefs)) {
      scopes.compilation.pipes.add(declared);
    } else {
      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
      // had its template compiled yet. In either case, it gets added to the compilation's
      // directives.
      scopes.compilation.directives.add(declared);
    }
  });
  maybeUnwrapFn(def.exports).forEach(exported => {
    const exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a
    // ɵcmp as it might be compiled asynchronously).

    if (isNgModule(exportedType)) {
      // When this module exports another, the exported module's exported directives and pipes are
      // added to both the compilation and exported scopes of this module.
      const exportedScope = transitiveScopesFor(exportedType);
      exportedScope.exported.directives.forEach(entry => {
        scopes.compilation.directives.add(entry);
        scopes.exported.directives.add(entry);
      });
      exportedScope.exported.pipes.forEach(entry => {
        scopes.compilation.pipes.add(entry);
        scopes.exported.pipes.add(entry);
      });
    } else if (getPipeDef$1(exportedType)) {
      scopes.exported.pipes.add(exportedType);
    } else {
      scopes.exported.directives.add(exportedType);
    }
  });
  def.transitiveCompileScopes = scopes;
  return scopes;
}

function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }

  return value;
}

function isModuleWithProviders(value) {
  return value.ngModule !== undefined;
}

function isNgModule(value) {
  return !!getNgModuleDef(value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
 * matters in the following scenario:
 *
 * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
 * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
 * potentially triggering compilation of 'B'. If this nested compilation were to trigger
 * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
 * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
 * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
 * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
 * all compilations have finished.
 */


let compilationDepth = 0;
/**
 * Compile an Angular component according to its decorator metadata, and patch the resulting
 * component def (ɵcmp) onto the component type.
 *
 * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
 * other resources, for example). In the event that compilation is not immediate, `compileComponent`
 * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
 * until the global queue has been resolved with a call to `resolveComponentResources`.
 */

function compileComponent(type, metadata) {
  // Initialize ngDevMode. This must be the first statement in compileComponent.
  // See the `initNgDevMode` docstring for more information.
  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
  let ngComponentDef = null; // Metadata may have resources which need to be resolved.

  maybeQueueResolutionOfComponentResources(type, metadata); // Note that we're using the same function as `Directive`, because that's only subset of metadata
  // that we need to create the ngFactoryDef. We're avoiding using the component metadata
  // because we'd have to resolve the asynchronous templates.

  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: () => {
      if (ngComponentDef === null) {
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'component',
          type: type
        });

        if (componentNeedsResolution(metadata)) {
          const error = [`Component '${type.name}' is not resolved:`];

          if (metadata.templateUrl) {
            error.push(` - templateUrl: ${metadata.templateUrl}`);
          }

          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
          }

          error.push(`Did you run and wait for 'resolveComponentResources()'?`);
          throw new Error(error.join('\n'));
        } // This const was called `jitOptions` previously but had to be renamed to `options` because
        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.


        const options = getJitOptions();
        let preserveWhitespaces = metadata.preserveWhitespaces;

        if (preserveWhitespaces === undefined) {
          if (options !== null && options.preserveWhitespaces !== undefined) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }

        let encapsulation = metadata.encapsulation;

        if (encapsulation === undefined) {
          if (options !== null && options.defaultEncapsulation !== undefined) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation$1.Emulated;
          }
        }

        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
        const meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), {
          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
          template: metadata.template || '',
          preserveWhitespaces,
          styles: metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          directives: [],
          changeDetection: metadata.changeDetection,
          pipes: new Map(),
          encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null
        });
        compilationDepth++;

        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }

          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
        } finally {
          // Ensure that the compilation depth is decremented even when the compilation failed.
          compilationDepth--;
        }

        if (compilationDepth === 0) {
          // When NgModule decorator executed, we enqueued the module definition such that
          // it would only dequeue and add itself as module scope to all of its declarations,
          // but only if  if all of its declarations had resolved. This call runs the check
          // to see if any modules that are in the queue can be dequeued and add scope to
          // their declarations.
          flushModuleScopingQueueAsMuchAsPossible();
        } // If component compilation is async, then the @NgModule annotation which declares the
        // component may execute and set an ngSelectorScope property on the component type. This
        // allows the component to patch itself with directiveDefs from the module after it
        // finishes compiling.


        if (hasSelectorScope(type)) {
          const scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
      }

      return ngComponentDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function hasSelectorScope(component) {
  return component.ngSelectorScope !== undefined;
}
/**
 * Compile an Angular directive according to its decorator metadata, and patch the resulting
 * directive def onto the component type.
 *
 * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
 * will resolve when compilation completes and the directive becomes usable.
 */


function compileDirective(type, directive) {
  let ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: () => {
      if (ngDirectiveDef === null) {
        // `directive` can be null in the case of abstract directives as a base class
        // that use `@Directive()` with no selector. In that case, pass empty object to the
        // `directiveMetadata` function instead of null.
        const meta = getDirectiveMetadata(type, directive || {});
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'directive',
          type
        });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }

      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function getDirectiveMetadata(type, metadata) {
  const name = type && type.name;
  const sourceMapUrl = `ng:///${name}/ɵdir.js`;
  const compiler = getCompilerFacade({
    usage: 0
    /* Decorator */
    ,
    kind: 'directive',
    type
  });
  const facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);

  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }

  return {
    metadata: facade,
    sourceMapUrl
  };
}

function addDirectiveFactoryDef(type, metadata) {
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const meta = getDirectiveMetadata(type, metadata);
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'directive',
          type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
/**
 * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
 * `Component`).
 */


function directiveMetadata(type, metadata) {
  // Reflect inputs and outputs.
  const reflect = getReflect();
  const propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type: type,
    selector: metadata.selector !== undefined ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata: propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: {
      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')
    },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
  };
}
/**
 * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
 */


function addDirectiveDefToUndecoratedParents(type) {
  const objPrototype = Object.prototype;
  let parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

  while (parent && parent !== objPrototype) {
    // Since inheritance works if the class was annotated already, we only need to add
    // the def if there are no annotations and the def hasn't been created already.
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }

    parent = Object.getPrototypeOf(parent);
  }
}

function convertToR3QueryPredicate(selector) {
  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
}

function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName: propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly
  };
}

function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  const queriesMeta = [];

  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      const annotations = propMetadata[field];
      annotations.forEach(ann => {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error(`Can't construct a query for the property "${field}" of ` + `"${stringifyForError(type)}" since the query selector wasn't defined.`);
          }

          if (annotations.some(isInputAnnotation)) {
            throw new Error(`Cannot combine @Input decorators with query decorators`);
          }

          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  }

  return queriesMeta;
}

function extractExportAs(exportAs) {
  return exportAs === undefined ? null : splitByComma(exportAs);
}

function isContentQuery(value) {
  const name = value.ngMetadataName;
  return name === 'ContentChild' || name === 'ContentChildren';
}

function isViewQuery(value) {
  const name = value.ngMetadataName;
  return name === 'ViewChild' || name === 'ViewChildren';
}

function isInputAnnotation(value) {
  return value.ngMetadataName === 'Input';
}

function splitByComma(value) {
  return value.split(',').map(piece => piece.trim());
}

const LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];

function shouldAddAbstractDirective(type) {
  const reflect = getReflect();

  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {
    return true;
  }

  const propMetadata = reflect.propMetadata(type);

  for (const field in propMetadata) {
    const annotations = propMetadata[field];

    for (let i = 0; i < annotations.length; i++) {
      const current = annotations[i];
      const metadataName = current.ngMetadataName;

      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {
        return true;
      }
    }
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function compilePipe(type, meta) {
  let ngPipeDef = null;
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'pipe',
          type: metadata.type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }

      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: () => {
      if (ngPipeDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0
          /* Decorator */
          ,
          kind: 'pipe',
          type: metadata.type
        });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);
      }

      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}

function getPipeMetadata(type, meta) {
  return {
    type: type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== undefined ? meta.pure : true
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Type of the Directive metadata.
 *
 * @publicApi
 */


const Directive = /*#__PURE__*/makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));
/**
 * Component decorator and metadata.
 *
 * @Annotation
 * @publicApi
 */

const Component = /*#__PURE__*/makeDecorator('Component', (c = {}) => Object.assign({
  changeDetection: ChangeDetectionStrategy.Default
}, c), Directive, undefined, (type, meta) => compileComponent(type, meta));
/**
 * @Annotation
 * @publicApi
 */

const Pipe = /*#__PURE__*/makeDecorator('Pipe', p => Object.assign({
  pure: true
}, p), undefined, undefined, (type, meta) => compilePipe(type, meta));
/**
 * @Annotation
 * @publicApi
 */

const Input = /*#__PURE__*/makePropDecorator('Input', bindingPropertyName => ({
  bindingPropertyName
}));
/**
 * @Annotation
 * @publicApi
 */

const Output = /*#__PURE__*/makePropDecorator('Output', bindingPropertyName => ({
  bindingPropertyName
}));
/**
 * @Annotation
 * @publicApi
 */

const HostBinding = /*#__PURE__*/makePropDecorator('HostBinding', hostPropertyName => ({
  hostPropertyName
}));
/**
 * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
 * Angular invokes the supplied handler method when the host element emits the specified event,
 * and updates the bound element with the result.
 *
 * If the handler method returns false, applies `preventDefault` on the bound element.
 *
 * @usageNotes
 *
 * The following example declares a directive
 * that attaches a click listener to a button and counts clicks.
 *
 * ```ts
 * @Directive({selector: 'button[counting]'})
 * class CountClicks {
 *   numberOfClicks = 0;
 *
 *   @HostListener('click', ['$event.target'])
 *   onClick(btn) {
 *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
 *   }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: '<button counting>Increment</button>',
 * })
 * class App {}
 *
 * ```
 *
 * The following example registers another DOM event handler that listens for `Enter` key-press
 * events on the global `window`.
 * ``` ts
 * import { HostListener, Component } from "@angular/core";
 *
 * @Component({
 *   selector: 'app',
 *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key
 * to increment the counter.
 *   <button (click)="resetCounter()">Reset Counter</button>`
 * })
 * class AppComponent {
 *   counter = 0;
 *   @HostListener('window:keydown.enter', ['$event'])
 *   handleKeyDown(event: KeyboardEvent) {
 *     this.counter++;
 *   }
 *   resetCounter() {
 *     this.counter = 0;
 *   }
 * }
 * ```
 * The list of valid key names for `keydown` and `keyup` events
 * can be found here:
 * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values
 *
 * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.
 *
 * The global target names that can be used to prefix an event name are
 * `document:`, `window:` and `body:`.
 *
 * @Annotation
 * @publicApi
 */

const HostListener = /*#__PURE__*/makePropDecorator('HostListener', (eventName, args) => ({
  eventName,
  args
}));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @Annotation
 * @publicApi
 */

const NgModule = /*#__PURE__*/makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,
/**
 * Decorator that marks the following class as an NgModule, and supplies
 * configuration metadata for it.
 *
 * * The `declarations` and `entryComponents` options configure the compiler
 * with information about what belongs to the NgModule.
 * * The `providers` options configures the NgModule's injector to provide
 * dependencies the NgModule members.
 * * The `imports` and `exports` options bring in members from other modules, and make
 * this module's members available to others.
 */
(type, meta) => compileNgModule(type, meta));
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

function noop(...args) {// Do nothing.
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The existence of this constant (in this particular file) informs the Angular compiler that the
 * current program is actually @angular/core, which needs to be compiled specially.
 */


const ITS_JUST_ANGULAR = true;
/**
 * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
 * one or more initialization functions.
 *
 * The provided functions are injected at application startup and executed during
 * app initialization. If any of these functions returns a Promise or an Observable, initialization
 * does not complete until the Promise is resolved or the Observable is completed.
 *
 * You can, for example, create a factory function that loads language data
 * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
 * The function is executed during the application bootstrap process,
 * and the needed data is available on startup.
 *
 * @see `ApplicationInitStatus`
 *
 * @usageNotes
 *
 * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token
 * and a function returning a promise.
 *
 * ```
 *  function initializeApp(): Promise<any> {
 *    return new Promise((resolve, reject) => {
 *      // Do some asynchronous stuff
 *      resolve();
 *    });
 *  }
 *
 *  @NgModule({
 *   imports: [BrowserModule],
 *   declarations: [AppComponent],
 *   bootstrap: [AppComponent],
 *   providers: [{
 *     provide: APP_INITIALIZER,
 *     useFactory: () => initializeApp,
 *     multi: true
 *    }]
 *   })
 *  export class AppModule {}
 * ```
 *
 * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function
 * returning an observable, see an example below. Note: the `HttpClient` in this example is used for
 * demo purposes to illustrate how the factory function can work with other providers available
 * through DI.
 *
 * ```
 *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {
 *   return () => httpClient.get("https://someUrl.com/api/user")
 *     .pipe(
 *        tap(user => { ... })
 *     );
 *  }
 *
 *  @NgModule({
 *    imports: [BrowserModule, HttpClientModule],
 *    declarations: [AppComponent],
 *    bootstrap: [AppComponent],
 *    providers: [{
 *      provide: APP_INITIALIZER,
 *      useFactory: initializeAppFactory,
 *      deps: [HttpClient],
 *      multi: true
 *    }]
 *  })
 *  export class AppModule {}
 * ```
 *
 * @publicApi
 */

const APP_INITIALIZER = /*#__PURE__*/new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {@link APP_INITIALIZER} functions.
 *
 * @publicApi
 */

let ApplicationInitStatus = /*#__PURE__*/(() => {
  class ApplicationInitStatus {
    constructor(appInits) {
      this.appInits = appInits;
      this.resolve = noop;
      this.reject = noop;
      this.initialized = false;
      this.done = false;
      this.donePromise = new Promise((res, rej) => {
        this.resolve = res;
        this.reject = rej;
      });
    }
    /** @internal */


    runInitializers() {
      if (this.initialized) {
        return;
      }

      const asyncInitPromises = [];

      const complete = () => {
        this.done = true;
        this.resolve();
      };

      if (this.appInits) {
        for (let i = 0; i < this.appInits.length; i++) {
          const initResult = this.appInits[i]();

          if (isPromise(initResult)) {
            asyncInitPromises.push(initResult);
          } else if (isObservable(initResult)) {
            const observableAsPromise = new Promise((resolve, reject) => {
              initResult.subscribe({
                complete: resolve,
                error: reject
              });
            });
            asyncInitPromises.push(observableAsPromise);
          }
        }
      }

      Promise.all(asyncInitPromises).then(() => {
        complete();
      }).catch(e => {
        this.reject(e);
      });

      if (asyncInitPromises.length === 0) {
        complete();
      }

      this.initialized = true;
    }

  }

  ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {
    return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));
  };

  ApplicationInitStatus.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: ApplicationInitStatus,
    factory: ApplicationInitStatus.ɵfac,
    providedIn: 'root'
  });
  return ApplicationInitStatus;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
    type: Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: Inject,
        args: [APP_INITIALIZER]
      }, {
        type: Optional
      }]
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
 *
 * BY default, the value is randomly generated and assigned to the application by Angular.
 * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
 * the root {@link Injector} that uses this token.
 *
 * @publicApi
 */


const APP_ID = /*#__PURE__*/new InjectionToken('AppId', {
  providedIn: 'root',
  factory: _appIdRandomProviderFactory
});

function _appIdRandomProviderFactory() {
  return `${_randomChar()}${_randomChar()}${_randomChar()}`;
}
/**
 * Providers that generate a random `APP_ID_TOKEN`.
 * @publicApi
 */


const APP_ID_RANDOM_PROVIDER = {
  provide: APP_ID,
  useFactory: _appIdRandomProviderFactory,
  deps: []
};

function _randomChar() {
  return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that is executed when a platform is initialized.
 * @publicApi
 */


const PLATFORM_INITIALIZER = /*#__PURE__*/new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform ID.
 * @publicApi
 */

const PLATFORM_ID = /*#__PURE__*/new InjectionToken('Platform ID', {
  providedIn: 'platform',
  factory: () => 'unknown' // set a default platform name, when none set explicitly

});
/**
 * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
 * be called for every component that is bootstrapped.
 *
 * Each callback must take a `ComponentRef` instance and return nothing.
 *
 * `(componentRef: ComponentRef) => void`
 *
 * @publicApi
 */

const APP_BOOTSTRAP_LISTENER = /*#__PURE__*/new InjectionToken('appBootstrapListener');
/**
 * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
 * the application
 * @publicApi
 */

const PACKAGE_ROOT_URL = /*#__PURE__*/new InjectionToken('Application Packages Root URL');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let Console = /*#__PURE__*/(() => {
  class Console {
    log(message) {
      // tslint:disable-next-line:no-console
      console.log(message);
    } // Note: for reporting errors use `DOM.logError()` as it is platform specific


    warn(message) {
      // tslint:disable-next-line:no-console
      console.warn(message);
    }

  }

  Console.ɵfac = function Console_Factory(t) {
    return new (t || Console)();
  };

  Console.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: Console,
    factory: Console.ɵfac,
    providedIn: 'platform'
  });
  return Console;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
    type: Injectable,
    args: [{
      providedIn: 'platform'
    }]
  }], null, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Work out the locale from the potential global properties.
 *
 * * Closure Compiler: use `goog.LOCALE`.
 * * Ivy enabled: use `$localize.locale`
 */


function getGlobalLocale() {
  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
    // * In order to preserve backwards compatibility, we use Angular default value over
    //   Closure Compiler's one.
    return goog.LOCALE;
  } else {
    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
    // COMPILE-TIME INLINER.
    //
    // * During compile time inlining of translations the expression will be replaced
    //   with a string literal that is the current locale. Other forms of this expression are not
    //   guaranteed to be replaced.
    //
    // * During runtime translation evaluation, the developer is required to set `$localize.locale`
    //   if required, or just to provide their own `LOCALE_ID` provider.
    return typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;
  }
}
/**
 * Provide this token to set the locale of your application.
 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
 * DecimalPipe and PercentPipe) and by ICU expressions.
 *
 * See the [i18n guide](guide/i18n-common-locale-id) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { LOCALE_ID } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
 * });
 * ```
 *
 * @publicApi
 */


const LOCALE_ID = /*#__PURE__*/new InjectionToken('LocaleId', {
  providedIn: 'root',
  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()
});
/**
 * Provide this token to set the default currency code your application uses for
 * CurrencyPipe when there is no currency code passed into it. This is only used by
 * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
 *
 * See the [i18n guide](guide/i18n-common-locale-id) for more information.
 *
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v10 the default currency code will be taken from the current locale.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
 * });
 * ```
 *
 * @publicApi
 */

const DEFAULT_CURRENCY_CODE = /*#__PURE__*/new InjectionToken('DefaultCurrencyCode', {
  providedIn: 'root',
  factory: () => USD_CURRENCY_CODE
});
/**
 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
 * `xlf` or `xlf2`) when you want to translate your application in another language.
 *
 * See the [i18n guide](guide/i18n-common-merge) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * // content of your translation file
 * const translations = '....';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
 * });
 * ```
 *
 * @publicApi
 */

const TRANSLATIONS = /*#__PURE__*/new InjectionToken('Translations');
/**
 * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
 * `xlf` or `xlf2`.
 *
 * See the [i18n guide](guide/i18n-common-merge) for more information.
 *
 * @usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS_FORMAT } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
 * });
 * ```
 *
 * @publicApi
 */

const TRANSLATIONS_FORMAT = /*#__PURE__*/new InjectionToken('TranslationsFormat');
/**
 * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
 * that the compiler should use in case of missing translations:
 * - Error: throw if you have missing translations.
 * - Warning (default): show a warning in the console and/or shell.
 * - Ignore: do nothing.
 *
 * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.
 *
 * @usageNotes
 * ### Example
 * ```typescript
 * import { MissingTranslationStrategy } from '@angular/core';
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   missingTranslation: MissingTranslationStrategy.Error
 * });
 * ```
 *
 * @publicApi
 */

var MissingTranslationStrategy = /*#__PURE__*/(() => {
  MissingTranslationStrategy = MissingTranslationStrategy || {};
  MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
  MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
  MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
  return MissingTranslationStrategy;
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Combination of NgModuleFactory and ComponentFactories.
 *
 * @publicApi
 *
 * @deprecated
 * Ivy JIT mode doesn't require accessing this symbol.
 * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
 * additional context.
 */
class ModuleWithComponentFactories {
  constructor(ngModuleFactory, componentFactories) {
    this.ngModuleFactory = ngModuleFactory;
    this.componentFactories = componentFactories;
  }

}
/**
 * Low-level service for running the angular compiler during runtime
 * to create {@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 *
 * @publicApi
 *
 * @deprecated
 * Ivy JIT mode doesn't require accessing this symbol.
 * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
 * additional context.
 */


let Compiler = /*#__PURE__*/(() => {
  class Compiler {
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     */
    compileModuleSync(moduleType) {
      return new NgModuleFactory(moduleType);
    }
    /**
     * Compiles the given NgModule and all of its components
     */


    compileModuleAsync(moduleType) {
      return Promise.resolve(this.compileModuleSync(moduleType));
    }
    /**
     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
     */


    compileModuleAndAllComponentsSync(moduleType) {
      const ngModuleFactory = this.compileModuleSync(moduleType);
      const moduleDef = getNgModuleDef(moduleType);
      const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
        const componentDef = getComponentDef(declaration);
        componentDef && factories.push(new ComponentFactory(componentDef));
        return factories;
      }, []);
      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
    }
    /**
     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
     */


    compileModuleAndAllComponentsAsync(moduleType) {
      return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
    }
    /**
     * Clears all caches.
     */


    clearCache() {}
    /**
     * Clears the cache for the given component/ngModule.
     */


    clearCacheFor(type) {}
    /**
     * Returns the id for a given NgModule, if one is defined and known to the compiler.
     */


    getModuleId(moduleType) {
      return undefined;
    }

  }

  Compiler.ɵfac = function Compiler_Factory(t) {
    return new (t || Compiler)();
  };

  Compiler.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: Compiler,
    factory: Compiler.ɵfac,
    providedIn: 'root'
  });
  return Compiler;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
    type: Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * @publicApi
 */


const COMPILER_OPTIONS = /*#__PURE__*/new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 *
 * @deprecated
 * Ivy JIT mode doesn't require accessing this symbol.
 * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
 * additional context.
 */

class CompilerFactory {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const promise = /*#__PURE__*/(() => Promise.resolve(0))();

function scheduleMicroTask(fn) {
  if (typeof Zone === 'undefined') {
    // use promise to schedule microTask instead of use Zone
    promise.then(() => {
      fn && fn.apply(null, null);
    });
  } else {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function getNativeRequestAnimationFrame() {
  let nativeRequestAnimationFrame = _global['requestAnimationFrame'];
  let nativeCancelAnimationFrame = _global['cancelAnimationFrame'];

  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
    // use unpatched version of requestAnimationFrame(native delegate) if possible
    // to avoid another Change detection
    const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];

    if (unpatchedRequestAnimationFrame) {
      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
    }

    const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];

    if (unpatchedCancelAnimationFrame) {
      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
    }
  }

  return {
    nativeRequestAnimationFrame,
    nativeCancelAnimationFrame
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '@angular/core';
 * import {NgIf} from '@angular/common';
 *
 * @Component({
 *   selector: 'ng-zone-demo',
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *         // reenter the Angular zone and display done
 *         this._ngZone.run(() => { console.log('Outside Done!'); });
 *       });
 *     });
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * @publicApi
 */


class NgZone {
  constructor({
    enableLongStackTrace = false,
    shouldCoalesceEventChangeDetection = false,
    shouldCoalesceRunChangeDetection = false
  }) {
    this.hasPendingMacrotasks = false;
    this.hasPendingMicrotasks = false;
    /**
     * Whether there are no outstanding microtasks or macrotasks.
     */

    this.isStable = true;
    /**
     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
     */

    this.onUnstable = new EventEmitter(false);
    /**
     * Notifies when there is no more microtasks enqueued in the current VM Turn.
     * This is a hint for Angular to do change detection, which may enqueue more microtasks.
     * For this reason this event can fire multiple times per VM Turn.
     */

    this.onMicrotaskEmpty = new EventEmitter(false);
    /**
     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
     * implies we are about to relinquish VM turn.
     * This event gets called just once.
     */

    this.onStable = new EventEmitter(false);
    /**
     * Notifies that an error has been delivered.
     */

    this.onError = new EventEmitter(false);

    if (typeof Zone == 'undefined') {
      throw new Error(`In this configuration Angular requires Zone.js`);
    }

    Zone.assertZonePatched();
    const self = this;
    self._nesting = 0;
    self._outer = self._inner = Zone.current;

    if (Zone['TaskTrackingZoneSpec']) {
      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());
    }

    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
    } // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be
    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.


    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
    self.lastRequestAnimationFrameId = -1;
    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
    forkInnerZoneWithAngularBehavior(self);
  }

  static isInAngularZone() {
    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.
    return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;
  }

  static assertInAngularZone() {
    if (!NgZone.isInAngularZone()) {
      throw new Error('Expected to be in Angular Zone, but it is not!');
    }
  }

  static assertNotInAngularZone() {
    if (NgZone.isInAngularZone()) {
      throw new Error('Expected to not be in Angular Zone, but it is!');
    }
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone and returns value returned by
   * the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */


  run(fn, applyThis, applyArgs) {
    return this._inner.run(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone as a task and returns value
   * returned by the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */


  runTask(fn, applyThis, applyArgs, name) {
    const zone = this._inner;
    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);

    try {
      return zone.runTask(task, applyThis, applyArgs);
    } finally {
      zone.cancelTask(task);
    }
  }
  /**
   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
   * rethrown.
   */


  runGuarded(fn, applyThis, applyArgs) {
    return this._inner.runGuarded(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
   * the function.
   *
   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
   * work that
   * doesn't trigger Angular change-detection or is subject to Angular's error handling.
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * outside of the Angular zone.
   *
   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
   */


  runOutsideAngular(fn) {
    return this._outer.run(fn);
  }

}

const EMPTY_PAYLOAD = {};

function checkStable(zone) {
  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent
  // re-entry. The case is:
  //
  // @Component({...})
  // export class AppComponent {
  // constructor(private ngZone: NgZone) {
  //   this.ngZone.onStable.subscribe(() => {
  //     this.ngZone.run(() => console.log('stable'););
  //   });
  // }
  //
  // The onStable subscriber run another function inside ngZone
  // which causes `checkStable()` re-entry.
  // But this fix causes some issues in g3, so this fix will be
  // launched in another PR.
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;

      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(() => zone.onStable.emit(null));
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}

function delayChangeDetectionForEvents(zone) {
  /**
   * We also need to check _nesting here
   * Consider the following case with shouldCoalesceRunChangeDetection = true
   *
   * ngZone.run(() => {});
   * ngZone.run(() => {});
   *
   * We want the two `ngZone.run()` only trigger one change detection
   * when shouldCoalesceRunChangeDetection is true.
   * And because in this case, change detection run in async way(requestAnimationFrame),
   * so we also need to check the _nesting here to prevent multiple
   * change detections.
   */
  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
    return;
  }

  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {
    // This is a work around for https://github.com/angular/angular/issues/36839.
    // The core issue is that when event coalescing is enabled it is possible for microtasks
    // to get flushed too early (As is the case with `Promise.then`) between the
    // coalescing eventTasks.
    //
    // To workaround this we schedule a "fake" eventTask before we process the
    // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
    //  will prevent the microtasks queue from getting drained in between the coalescing
    // eventTask execution.
    if (!zone.fakeTopEventTask) {
      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {
        zone.lastRequestAnimationFrameId = -1;
        updateMicroTaskStatus(zone);
        zone.isCheckStableRunning = true;
        checkStable(zone);
        zone.isCheckStableRunning = false;
      }, undefined, () => {}, () => {});
    }

    zone.fakeTopEventTask.invoke();
  });
  updateMicroTaskStatus(zone);
}

function forkInnerZoneWithAngularBehavior(zone) {
  const delayChangeDetectionForEventsDelegate = () => {
    delayChangeDetectionForEvents(zone);
  };

  zone._inner = zone._inner.fork({
    name: 'angular',
    properties: {
      'isAngularZone': true
    },
    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }

        onLeave(zone);
      }
    },
    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }

        onLeave(zone);
      }
    },
    onHasTask: (delegate, current, target, hasTaskState) => {
      delegate.hasTask(target, hasTaskState);

      if (current === target) {
        // We are only interested in hasTask events which originate from our zone
        // (A child hasTask event is not interesting to us)
        if (hasTaskState.change == 'microTask') {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == 'macroTask') {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: (delegate, current, target, error) => {
      delegate.handleError(target, error);
      zone.runOutsideAngular(() => zone.onError.emit(error));
      return false;
    }
  });
}

function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}

function onEnter(zone) {
  zone._nesting++;

  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}

function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
/**
 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
 * to framework to perform rendering.
 */


class NoopNgZone {
  constructor() {
    this.hasPendingMicrotasks = false;
    this.hasPendingMacrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter();
    this.onMicrotaskEmpty = new EventEmitter();
    this.onStable = new EventEmitter();
    this.onError = new EventEmitter();
  }

  run(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }

  runGuarded(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }

  runOutsideAngular(fn) {
    return fn();
  }

  runTask(fn, applyThis, applyArgs, name) {
    return fn.apply(applyThis, applyArgs);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser. Each bootstrapped Angular application on the page will have
 * an instance of Testability.
 * @publicApi
 */


let Testability = /*#__PURE__*/(() => {
  class Testability {
    constructor(_ngZone) {
      this._ngZone = _ngZone;
      this._pendingCount = 0;
      this._isZoneStable = true;
      /**
       * Whether any work was done since the last 'whenStable' callback. This is
       * useful to detect if this could have potentially destabilized another
       * component while it is stabilizing.
       * @internal
       */

      this._didWork = false;
      this._callbacks = [];
      this.taskTrackingZone = null;

      this._watchAngularEvents();

      _ngZone.run(() => {
        this.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
      });
    }

    _watchAngularEvents() {
      this._ngZone.onUnstable.subscribe({
        next: () => {
          this._didWork = true;
          this._isZoneStable = false;
        }
      });

      this._ngZone.runOutsideAngular(() => {
        this._ngZone.onStable.subscribe({
          next: () => {
            NgZone.assertNotInAngularZone();
            scheduleMicroTask(() => {
              this._isZoneStable = true;

              this._runCallbacksIfReady();
            });
          }
        });
      });
    }
    /**
     * Increases the number of pending request
     * @deprecated pending requests are now tracked with zones.
     */


    increasePendingRequestCount() {
      this._pendingCount += 1;
      this._didWork = true;
      return this._pendingCount;
    }
    /**
     * Decreases the number of pending request
     * @deprecated pending requests are now tracked with zones
     */


    decreasePendingRequestCount() {
      this._pendingCount -= 1;

      if (this._pendingCount < 0) {
        throw new Error('pending async requests below zero');
      }

      this._runCallbacksIfReady();

      return this._pendingCount;
    }
    /**
     * Whether an associated application is stable
     */


    isStable() {
      return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
    }

    _runCallbacksIfReady() {
      if (this.isStable()) {
        // Schedules the call backs in a new frame so that it is always async.
        scheduleMicroTask(() => {
          while (this._callbacks.length !== 0) {
            let cb = this._callbacks.pop();

            clearTimeout(cb.timeoutId);
            cb.doneCb(this._didWork);
          }

          this._didWork = false;
        });
      } else {
        // Still not stable, send updates.
        let pending = this.getPendingTasks();
        this._callbacks = this._callbacks.filter(cb => {
          if (cb.updateCb && cb.updateCb(pending)) {
            clearTimeout(cb.timeoutId);
            return false;
          }

          return true;
        });
        this._didWork = true;
      }
    }

    getPendingTasks() {
      if (!this.taskTrackingZone) {
        return [];
      } // Copy the tasks data so that we don't leak tasks.


      return this.taskTrackingZone.macroTasks.map(t => {
        return {
          source: t.source,
          // From TaskTrackingZone:
          // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
          creationLocation: t.creationLocation,
          data: t.data
        };
      });
    }

    addCallback(cb, timeout, updateCb) {
      let timeoutId = -1;

      if (timeout && timeout > 0) {
        timeoutId = setTimeout(() => {
          this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);
          cb(this._didWork, this.getPendingTasks());
        }, timeout);
      }

      this._callbacks.push({
        doneCb: cb,
        timeoutId: timeoutId,
        updateCb: updateCb
      });
    }
    /**
     * Wait for the application to be stable with a timeout. If the timeout is reached before that
     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
     *
     * @param doneCb The callback to invoke when Angular is stable or the timeout expires
     *    whichever comes first.
     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
     *    specified, whenStable() will wait forever.
     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
     *    and no further updates will be issued.
     */


    whenStable(doneCb, timeout, updateCb) {
      if (updateCb && !this.taskTrackingZone) {
        throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
      } // These arguments are 'Function' above to keep the public API simple.


      this.addCallback(doneCb, timeout, updateCb);

      this._runCallbacksIfReady();
    }
    /**
     * Get the number of pending requests
     * @deprecated pending requests are now tracked with zones
     */


    getPendingRequestCount() {
      return this._pendingCount;
    }
    /**
     * Find providers by name
     * @param using The root element to search from
     * @param provider The name of binding variable
     * @param exactMatch Whether using exactMatch
     */


    findProviders(using, provider, exactMatch) {
      // TODO(juliemr): implement.
      return [];
    }

  }

  Testability.ɵfac = function Testability_Factory(t) {
    return new (t || Testability)(ɵɵinject(NgZone));
  };

  Testability.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: Testability,
    factory: Testability.ɵfac
  });
  return Testability;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
    type: Injectable
  }], function () {
    return [{
      type: NgZone
    }];
  }, null);
})();
/**
 * A global registry of {@link Testability} instances for specific elements.
 * @publicApi
 */


let TestabilityRegistry = /*#__PURE__*/(() => {
  class TestabilityRegistry {
    constructor() {
      /** @internal */
      this._applications = new Map();

      _testabilityGetter.addToWindow(this);
    }
    /**
     * Registers an application with a testability hook so that it can be tracked
     * @param token token of application, root element
     * @param testability Testability hook
     */


    registerApplication(token, testability) {
      this._applications.set(token, testability);
    }
    /**
     * Unregisters an application.
     * @param token token of application, root element
     */


    unregisterApplication(token) {
      this._applications.delete(token);
    }
    /**
     * Unregisters all applications
     */


    unregisterAllApplications() {
      this._applications.clear();
    }
    /**
     * Get a testability hook associated with the application
     * @param elem root element
     */


    getTestability(elem) {
      return this._applications.get(elem) || null;
    }
    /**
     * Get all registered testabilities
     */


    getAllTestabilities() {
      return Array.from(this._applications.values());
    }
    /**
     * Get all registered applications(root elements)
     */


    getAllRootElements() {
      return Array.from(this._applications.keys());
    }
    /**
     * Find testability of a node in the Tree
     * @param elem node
     * @param findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     */


    findTestabilityInTree(elem, findInAncestors = true) {
      return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }

  }

  TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {
    return new (t || TestabilityRegistry)();
  };

  TestabilityRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: TestabilityRegistry,
    factory: TestabilityRegistry.ɵfac,
    providedIn: 'platform'
  });
  return TestabilityRegistry;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
    type: Injectable,
    args: [{
      providedIn: 'platform'
    }]
  }], function () {
    return [];
  }, null);
})();

class _NoopGetTestability {
  addToWindow(registry) {}

  findTestabilityInTree(registry, elem, findInAncestors) {
    return null;
  }

}
/**
 * Set the {@link GetTestability} implementation used by the Angular testing framework.
 * @publicApi
 */


function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}

let _testabilityGetter = /*#__PURE__*/new _NoopGetTestability();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let _platformInjector = null;
/**
 * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only
 * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.
 */

const ALLOW_MULTIPLE_PLATFORMS = /*#__PURE__*/new InjectionToken('AllowMultipleToken');
/**
 * Internal token that allows to register extra callbacks that should be invoked during the
 * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the
 * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the
 * entire class tree-shakeable.
 */

const PLATFORM_ON_DESTROY = /*#__PURE__*/new InjectionToken('PlatformOnDestroy');

function compileNgModuleFactory(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  const moduleFactory = new NgModuleFactory(moduleType); // All of the logic below is irrelevant for AOT-compiled code.

  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
    return Promise.resolve(moduleFactory);
  }

  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options); // Configure the compiler to use the provided options. This call may fail when multiple modules
  // are bootstrapped with incompatible options, as a component can only be compiled according to
  // a single set of options.

  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),
    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces))
  });

  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }

  const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers)); // In case there are no compiler providers, we just return the module factory as
  // there won't be any resource loader. This can happen with Ivy, because AOT compiled
  // modules can be still passed through "bootstrapModule". In that case we shouldn't
  // unnecessarily require the JIT compiler.


  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }

  const compiler = getCompilerFacade({
    usage: 0
    /* Decorator */
    ,
    kind: 'NgModule',
    type: moduleType
  });
  const compilerInjector = Injector.create({
    providers: compilerProviders
  });
  const resourceLoader = compilerInjector.get(compiler.ResourceLoader); // The resource loader can also return a string while the "resolveComponentResources"
  // always expects a promise. Therefore we need to wrap the returned value in a promise.

  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
}

function publishDefaultGlobalUtils() {
  ngDevMode && publishDefaultGlobalUtils$1();
}

function isBoundToModule(cf) {
  return cf.isBoundToModule;
}
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * @publicApi
 */


class NgProbeToken {
  constructor(name, token) {
    this.name = name;
    this.token = token;
  }

}
/**
 * Creates a platform.
 * Platforms must be created on launch using this function.
 *
 * @publicApi
 */


function createPlatform(injector) {
  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'There can be only one platform. Destroy the previous one to create a new one.' : '';
    throw new RuntimeError(400
    /* MULTIPLE_PLATFORMS */
    , errorMessage);
  }

  publishDefaultGlobalUtils();
  _platformInjector = injector;
  const platform = injector.get(PlatformRef);
  const inits = injector.get(PLATFORM_INITIALIZER, null);
  if (inits) inits.forEach(initFn => initFn());
  return platform;
}
/**
 * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
 * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
 * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
 * to build up configurations that might be required by different libraries or parts of the
 * application.
 * @param name Identifies the new platform factory.
 * @param providers A set of dependency providers for platforms created with the new factory.
 *
 * @publicApi
 */


function createPlatformFactory(parentPlatformFactory, name, providers = []) {
  const desc = `Platform: ${name}`;
  const marker = new InjectionToken(desc);
  return (extraProviders = []) => {
    let platform = getPlatform();

    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      const platformProviders = [...providers, ...extraProviders, {
        provide: marker,
        useValue: true
      }];

      if (parentPlatformFactory) {
        parentPlatformFactory(platformProviders);
      } else {
        createPlatform(createPlatformInjector(platformProviders, desc));
      }
    }

    return assertPlatform(marker);
  };
}
/**
 * Checks that there is currently a platform that contains the given token as a provider.
 *
 * @publicApi
 */


function assertPlatform(requiredToken) {
  const platform = getPlatform();

  if (!platform) {
    const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'No platform exists!' : '';
    throw new RuntimeError(401
    /* PLATFORM_NOT_FOUND */
    , errorMessage);
  }

  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !platform.injector.get(requiredToken, null)) {
    throw new RuntimeError(400
    /* MULTIPLE_PLATFORMS */
    , 'A platform with a different configuration has been created. Please destroy it first.');
  }

  return platform;
}
/**
 * Helper function to create an instance of a platform injector (that maintains the 'platform'
 * scope).
 */


function createPlatformInjector(providers = [], name) {
  return Injector.create({
    name,
    providers: [{
      provide: INJECTOR_SCOPE,
      useValue: 'platform'
    }, {
      provide: PLATFORM_ON_DESTROY,
      useValue: () => _platformInjector = null
    }, ...providers]
  });
}
/**
 * Destroys the current Angular platform and all Angular applications on the page.
 * Destroys all modules and listeners registered with the platform.
 *
 * @publicApi
 */


function destroyPlatform() {
  var _a;

  (_a = getPlatform()) === null || _a === void 0 ? void 0 : _a.destroy();
}
/**
 * Returns the current platform.
 *
 * @publicApi
 */


function getPlatform() {
  var _a;

  return (_a = _platformInjector === null || _platformInjector === void 0 ? void 0 : _platformInjector.get(PlatformRef)) !== null && _a !== void 0 ? _a : null;
}
/**
 * The Angular platform is the entry point for Angular on a web page.
 * Each page has exactly one platform. Services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 * A page's platform is initialized implicitly when a platform is created using a platform
 * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.
 *
 * @publicApi
 */


let PlatformRef = /*#__PURE__*/(() => {
  class PlatformRef {
    /** @internal */
    constructor(_injector) {
      this._injector = _injector;
      this._modules = [];
      this._destroyListeners = [];
      this._destroyed = false;
    }
    /**
     * Creates an instance of an `@NgModule` for the given platform.
     *
     * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
     *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
     */


    bootstrapModuleFactory(moduleFactory, options) {
      // Note: We need to create the NgZone _before_ we instantiate the module,
      // as instantiating the module creates some providers eagerly.
      // So we create a mini parent injector that just contains the new NgZone and
      // pass that as parent to the NgModuleFactory.
      const ngZoneOption = options ? options.ngZone : undefined;
      const ngZoneEventCoalescing = options && options.ngZoneEventCoalescing || false;
      const ngZoneRunCoalescing = options && options.ngZoneRunCoalescing || false;
      const ngZone = getNgZone(ngZoneOption, {
        ngZoneEventCoalescing,
        ngZoneRunCoalescing
      });
      const providers = [{
        provide: NgZone,
        useValue: ngZone
      }]; // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are
      // created within the Angular zone
      // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be
      // created outside of the Angular zone.

      return ngZone.run(() => {
        const ngZoneInjector = Injector.create({
          providers: providers,
          parent: this.injector,
          name: moduleFactory.moduleType.name
        });
        const moduleRef = moduleFactory.create(ngZoneInjector);
        const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);

        if (!exceptionHandler) {
          const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'No ErrorHandler. Is platform module (BrowserModule) included?' : '';
          throw new RuntimeError(402
          /* ERROR_HANDLER_NOT_FOUND */
          , errorMessage);
        }

        ngZone.runOutsideAngular(() => {
          const subscription = ngZone.onError.subscribe({
            next: error => {
              exceptionHandler.handleError(error);
            }
          });
          moduleRef.onDestroy(() => {
            remove(this._modules, moduleRef);
            subscription.unsubscribe();
          });
        });
        return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
          const initStatus = moduleRef.injector.get(ApplicationInitStatus);
          initStatus.runInitializers();
          return initStatus.donePromise.then(() => {
            // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
            const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
            setLocaleId(localeId || DEFAULT_LOCALE_ID);

            this._moduleDoBootstrap(moduleRef);

            return moduleRef;
          });
        });
      });
    }
    /**
     * Creates an instance of an `@NgModule` for a given platform.
     *
     * @usageNotes
     * ### Simple Example
     *
     * ```typescript
     * @NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     *
     */


    bootstrapModule(moduleType, compilerOptions = []) {
      const options = optionsReducer({}, compilerOptions);
      return compileNgModuleFactory(this.injector, options, moduleType).then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));
    }

    _moduleDoBootstrap(moduleRef) {
      const appRef = moduleRef.injector.get(ApplicationRef);

      if (moduleRef._bootstrapComponents.length > 0) {
        moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));
      } else if (moduleRef.instance.ngDoBootstrap) {
        moduleRef.instance.ngDoBootstrap(appRef);
      } else {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` + `but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ` + `Please define one of these.` : '';
        throw new RuntimeError(403
        /* BOOTSTRAP_COMPONENTS_NOT_FOUND */
        , errorMessage);
      }

      this._modules.push(moduleRef);
    }
    /**
     * Registers a listener to be called when the platform is destroyed.
     */


    onDestroy(callback) {
      this._destroyListeners.push(callback);
    }
    /**
     * Retrieves the platform {@link Injector}, which is the parent injector for
     * every Angular application on the page and provides singleton providers.
     */


    get injector() {
      return this._injector;
    }
    /**
     * Destroys the current Angular platform and all Angular applications on the page.
     * Destroys all modules and listeners registered with the platform.
     */


    destroy() {
      if (this._destroyed) {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'The platform has already been destroyed!' : '';
        throw new RuntimeError(404
        /* ALREADY_DESTROYED_PLATFORM */
        , errorMessage);
      }

      this._modules.slice().forEach(module => module.destroy());

      this._destroyListeners.forEach(listener => listener());

      const destroyListener = this._injector.get(PLATFORM_ON_DESTROY, null);

      destroyListener === null || destroyListener === void 0 ? void 0 : destroyListener();
      this._destroyed = true;
    }

    get destroyed() {
      return this._destroyed;
    }

  }

  PlatformRef.ɵfac = function PlatformRef_Factory(t) {
    return new (t || PlatformRef)(ɵɵinject(Injector));
  };

  PlatformRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: PlatformRef,
    factory: PlatformRef.ɵfac,
    providedIn: 'platform'
  });
  return PlatformRef;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
    type: Injectable,
    args: [{
      providedIn: 'platform'
    }]
  }], function () {
    return [{
      type: Injector
    }];
  }, null);
})();

function getNgZone(ngZoneOption, extra) {
  let ngZone;

  if (ngZoneOption === 'noop') {
    ngZone = new NoopNgZone();
  } else {
    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
      enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,
      shouldCoalesceEventChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneEventCoalescing),
      shouldCoalesceRunChangeDetection: !!(extra === null || extra === void 0 ? void 0 : extra.ngZoneRunCoalescing)
    });
  }

  return ngZone;
}

function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
  try {
    const result = callback();

    if (isPromise(result)) {
      return result.catch(e => {
        ngZone.runOutsideAngular(() => errorHandler.handleError(e)); // rethrow as the exception handler might not do it

        throw e;
      });
    }

    return result;
  } catch (e) {
    ngZone.runOutsideAngular(() => errorHandler.handleError(e)); // rethrow as the exception handler might not do it

    throw e;
  }
}

function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    dst = objs.reduce(optionsReducer, dst);
  } else {
    dst = Object.assign(Object.assign({}, dst), objs);
  }

  return dst;
}
/**
 * A reference to an Angular application running on a page.
 *
 * @usageNotes
 *
 * {@a is-stable-examples}
 * ### isStable examples and caveats
 *
 * Note two important points about `isStable`, demonstrated in the examples below:
 * - the application will never be stable if you start any kind
 * of recurrent asynchronous task when the application starts
 * (for example for a polling process, started with a `setInterval`, a `setTimeout`
 * or using RxJS operators like `interval`);
 * - the `isStable` Observable runs outside of the Angular zone.
 *
 * Let's imagine that you start a recurrent task
 * (here incrementing a counter, using RxJS `interval`),
 * and at the same time subscribe to `isStable`.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *      filter(stable => stable)
 *   ).subscribe(() => console.log('App is stable now');
 *   interval(1000).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, `isStable` will never emit `true`,
 * and the trace "App is stable now" will never get logged.
 *
 * If you want to execute something when the app is stable,
 * you have to wait for the application to be stable
 * before starting your polling process.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     tap(stable => console.log('App is stable now')),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, the trace "App is stable now" will be logged
 * and then the counter starts incrementing every second.
 *
 * Note also that this Observable runs outside of the Angular zone,
 * which means that the code in the subscription
 * to this Observable will not trigger the change detection.
 *
 * Let's imagine that instead of logging the counter value,
 * you update a field of your component
 * and display it in its template.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => this.value = counter);
 * }
 * ```
 * As the `isStable` Observable runs outside the zone,
 * the `value` field will be updated properly,
 * but the template will not be refreshed!
 *
 * You'll have to manually trigger the change detection to update the template.
 *
 * ```
 * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => {
 *     this.value = counter;
 *     cd.detectChanges();
 *   });
 * }
 * ```
 *
 * Or make the subscription callback run inside the zone.
 *
 * ```
 * constructor(appRef: ApplicationRef, zone: NgZone) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => zone.run(() => this.value = counter));
 * }
 * ```
 *
 * @publicApi
 */


let ApplicationRef = /*#__PURE__*/(() => {
  class ApplicationRef {
    /** @internal */
    constructor(_zone, _injector, _exceptionHandler, _initStatus) {
      this._zone = _zone;
      this._injector = _injector;
      this._exceptionHandler = _exceptionHandler;
      this._initStatus = _initStatus;
      /** @internal */

      this._bootstrapListeners = [];
      this._views = [];
      this._runningTick = false;
      this._stable = true;
      /**
       * Get a list of component types registered to this application.
       * This list is populated even before the component is created.
       */

      this.componentTypes = [];
      /**
       * Get a list of components registered to this application.
       */

      this.components = [];
      this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
        next: () => {
          this._zone.run(() => {
            this.tick();
          });
        }
      });
      const isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
        this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks;

        this._zone.runOutsideAngular(() => {
          observer.next(this._stable);
          observer.complete();
        });
      });
      const isStable = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
        // Create the subscription to onStable outside the Angular Zone so that
        // the callback is run outside the Angular Zone.
        let stableSub;

        this._zone.runOutsideAngular(() => {
          stableSub = this._zone.onStable.subscribe(() => {
            NgZone.assertNotInAngularZone(); // Check whether there are no pending macro/micro tasks in the next tick
            // to allow for NgZone to update the state.

            scheduleMicroTask(() => {
              if (!this._stable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks) {
                this._stable = true;
                observer.next(true);
              }
            });
          });
        });

        const unstableSub = this._zone.onUnstable.subscribe(() => {
          NgZone.assertInAngularZone();

          if (this._stable) {
            this._stable = false;

            this._zone.runOutsideAngular(() => {
              observer.next(false);
            });
          }
        });

        return () => {
          stableSub.unsubscribe();
          unstableSub.unsubscribe();
        };
      });
      this.isStable = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.merge)(isCurrentlyStable, isStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.share)()));
    }
    /**
     * Bootstrap a component onto the element identified by its selector or, optionally, to a
     * specified element.
     *
     * @usageNotes
     * ### Bootstrap process
     *
     * When bootstrapping a component, Angular mounts it onto a target DOM element
     * and kicks off automatic change detection. The target DOM element can be
     * provided using the `rootSelectorOrNode` argument.
     *
     * If the target DOM element is not provided, Angular tries to find one on a page
     * using the `selector` of the component that is being bootstrapped
     * (first matched element is used).
     *
     * ### Example
     *
     * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
     * but it requires us to know the component while writing the application code.
     *
     * Imagine a situation where we have to wait for an API call to decide about the component to
     * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
     * dynamically bootstrap a component.
     *
     * {@example core/ts/platform/platform.ts region='componentSelector'}
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * selector of the bootstrapped component.
     *
     * In the following example, we are providing a CSS selector to match the target element.
     *
     * {@example core/ts/platform/platform.ts region='cssSelector'}
     *
     * While in this example, we are providing reference to a DOM node.
     *
     * {@example core/ts/platform/platform.ts region='domNode'}
     */


    bootstrap(componentOrFactory, rootSelectorOrNode) {
      if (!this._initStatus.done) {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'Cannot bootstrap as there are still asynchronous initializers running. ' + 'Bootstrap components in the `ngDoBootstrap` method of the root module.' : '';
        throw new RuntimeError(405
        /* ASYNC_INITIALIZERS_STILL_RUNNING */
        , errorMessage);
      }

      let componentFactory;

      if (componentOrFactory instanceof ComponentFactory$1) {
        componentFactory = componentOrFactory;
      } else {
        const resolver = this._injector.get(ComponentFactoryResolver$1);

        componentFactory = resolver.resolveComponentFactory(componentOrFactory);
      }

      this.componentTypes.push(componentFactory.componentType); // Create a factory associated with the current module if it's not bound to some other

      const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);
      const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
      const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
      const nativeElement = compRef.location.nativeElement;
      const testability = compRef.injector.get(Testability, null);
      const testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);

      if (testability && testabilityRegistry) {
        testabilityRegistry.registerApplication(nativeElement, testability);
      }

      compRef.onDestroy(() => {
        this.detachView(compRef.hostView);
        remove(this.components, compRef);

        if (testabilityRegistry) {
          testabilityRegistry.unregisterApplication(nativeElement);
        }
      });

      this._loadComponent(compRef);

      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        const _console = this._injector.get(Console);

        _console.log(`Angular is running in development mode. Call enableProdMode() to enable production mode.`);
      }

      return compRef;
    }
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     */


    tick() {
      if (this._runningTick) {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? 'ApplicationRef.tick is called recursively' : '';
        throw new RuntimeError(101
        /* RECURSIVE_APPLICATION_REF_TICK */
        , errorMessage);
      }

      try {
        this._runningTick = true;

        for (let view of this._views) {
          view.detectChanges();
        }

        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          for (let view of this._views) {
            view.checkNoChanges();
          }
        }
      } catch (e) {
        // Attention: Don't rethrow as it could cancel subscriptions to Observables!
        this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));
      } finally {
        this._runningTick = false;
      }
    }
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     */


    attachView(viewRef) {
      const view = viewRef;

      this._views.push(view);

      view.attachToAppRef(this);
    }
    /**
     * Detaches a view from dirty checking again.
     */


    detachView(viewRef) {
      const view = viewRef;
      remove(this._views, view);
      view.detachFromAppRef();
    }

    _loadComponent(componentRef) {
      this.attachView(componentRef.hostView);
      this.tick();
      this.components.push(componentRef); // Get the listeners lazily to prevent DI cycles.

      const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);

      listeners.forEach(listener => listener(componentRef));
    }
    /** @internal */


    ngOnDestroy() {
      this._views.slice().forEach(view => view.destroy());

      this._onMicrotaskEmptySubscription.unsubscribe();
    }
    /**
     * Returns the number of attached views.
     */


    get viewCount() {
      return this._views.length;
    }

  }

  ApplicationRef.ɵfac = function ApplicationRef_Factory(t) {
    return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ApplicationInitStatus));
  };

  ApplicationRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
    token: ApplicationRef,
    factory: ApplicationRef.ɵfac,
    providedIn: 'root'
  });
  return ApplicationRef;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
    type: Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: NgZone
    }, {
      type: Injector
    }, {
      type: ErrorHandler
    }, {
      type: ApplicationInitStatus
    }];
  }, null);
})();

function remove(list, el) {
  const index = list.indexOf(el);

  if (index > -1) {
    list.splice(index, 1);
  }
}

function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== undefined) {
      return args[i];
    }
  }

  return undefined;
}

function _mergeArrays(parts) {
  const result = [];
  parts.forEach(part => part && result.push(...part));
  return result;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
 *
 * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
 * please see [BAZEL.md](./docs/BAZEL.md).
 */


let _devMode = true;
let _runModeLocked = false;
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * @publicApi
 */

function isDevMode() {
  _runModeLocked = true;
  return _devMode;
}
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * @publicApi
 */


function enableProdMode() {
  if (_runModeLocked) {
    throw new Error('Cannot enable prod mode after platform setup.');
  } // The below check is there so when ngDevMode is set via terser
  // `global['ngDevMode'] = false;` is also dropped.


  if (typeof ngDevMode === undefined || !!ngDevMode) {
    _global['ngDevMode'] = false;
  }

  _devMode = false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns the NgModuleFactory with the given id (specified using [@NgModule.id
 * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do
 * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.
 * @publicApi
 * @deprecated Use `getNgModuleById` instead.
 */


function getModuleFactory(id) {
  const type = getRegisteredNgModuleType(id);
  if (!type) throw noModuleError(id);
  return new NgModuleFactory(type);
}
/**
 * Returns the NgModule class with the given id (specified using [@NgModule.id
 * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do
 * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.
 * @publicApi
 */


function getNgModuleById(id) {
  const type = getRegisteredNgModuleType(id);
  if (!type) throw noModuleError(id);
  return type;
}

function noModuleError(id) {
  return new Error(`No module with ID ${id} loaded`);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Base class that provides change detection functionality.
 * A change-detection tree collects all views that are to be checked for changes.
 * Use the methods to add and remove views from the tree, initiate change-detection,
 * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.
 *
 * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)
 * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)
 *
 * @usageNotes
 *
 * The following examples demonstrate how to modify default change-detection behavior
 * to perform explicit detection when needed.
 *
 * ### Use `markForCheck()` with `CheckOnce` strategy
 *
 * The following example sets the `OnPush` change-detection strategy for a component
 * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
 * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).
 *
 * <code-example path="core/ts/change_detect/change-detection.ts"
 * region="mark-for-check"></code-example>
 *
 * ### Detach change detector to limit how often check occurs
 *
 * The following example defines a component with a large list of read-only data
 * that is expected to change constantly, many times per second.
 * To improve performance, we want to check and update the list
 * less often than the changes actually occur. To do that, we detach
 * the component's change detector and perform an explicit local check every five seconds.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
 *
 *
 * ### Reattaching a detached component
 *
 * The following example creates a component displaying live data.
 * The component detaches its change detector from the main change detector tree
 * when the `live` property is set to false, and reattaches it when the property
 * becomes true.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
 *
 * @publicApi
 */


let ChangeDetectorRef = /*#__PURE__*/(() => {
  class ChangeDetectorRef {}

  /**
   * @internal
   * @nocollapse
   */
  ChangeDetectorRef.__NG_ELEMENT_ID__ = injectChangeDetectorRef;
  /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */

  return ChangeDetectorRef;
})();

function injectChangeDetectorRef(flags) {
  return createViewRef(getCurrentTNode(), getLView(), (flags & 16
  /* ForPipe */
  ) === 16
  /* ForPipe */
  );
}
/**
 * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
 *
 * @param tNode The node that is requesting a ChangeDetectorRef
 * @param lView The view to which the node belongs
 * @param isPipe Whether the view is being injected into a pipe.
 * @returns The ChangeDetectorRef to use
 */


function createViewRef(tNode, lView, isPipe) {
  if (isComponentHost(tNode) && !isPipe) {
    // The LView represents the location where the component is declared.
    // Instead we want the LView for the component View and so we need to look it up.
    const componentView = getComponentLViewByIndex(tNode.index, lView); // look down

    return new ViewRef$1(componentView, componentView);
  } else if (tNode.type & (3
  /* AnyRNode */
  | 12
  /* AnyContainer */
  | 32
  /* Icu */
  )) {
    // The LView represents the location where the injection is requested from.
    // We need to locate the containing LView (in case where the `lView` is an embedded view)
    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up

    return new ViewRef$1(hostComponentView, lView);
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents an Angular [view](guide/glossary#view "Definition").
 *
 * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
 *
 * @publicApi
 */


class ViewRef extends ChangeDetectorRef {}
/**
 * Represents an Angular [view](guide/glossary#view) in a view container.
 * An [embedded view](guide/glossary#view-tree) can be referenced from a component
 * other than the hosting component whose template defines it, or it can be defined
 * independently by a `TemplateRef`.
 *
 * Properties of elements in a view can change, but the structure (number and order) of elements in
 * a view cannot. Change the structure of elements by inserting, moving, or
 * removing nested views in a view container.
 *
 * @see `ViewContainerRef`
 *
 * @usageNotes
 *
 * The following template breaks down into two separate `TemplateRef` instances,
 * an outer one and an inner one.
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * This is the outer `TemplateRef`:
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * This is the inner `TemplateRef`:
 *
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * The outer and inner `TemplateRef` instances are assembled into views as follows:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * @publicApi
 */


class EmbeddedViewRef extends ViewRef {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file exists for easily patching NgModuleFactoryLoader in g3


var ng_module_factory_loader_impl = {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */

class DebugEventListener {
  constructor(name, callback) {
    this.name = name;
    this.callback = callback;
  }

}
/**
 * @publicApi
 */


function asNativeElements(debugEls) {
  return debugEls.map(el => el.nativeElement);
}
/**
 * @publicApi
 */


class DebugNode {
  constructor(nativeNode) {
    this.nativeNode = nativeNode;
  }
  /**
   * The `DebugElement` parent. Will be `null` if this is the root element.
   */


  get parent() {
    const parent = this.nativeNode.parentNode;
    return parent ? new DebugElement(parent) : null;
  }
  /**
   * The host dependency injector. For example, the root element's component instance injector.
   */


  get injector() {
    return getInjector(this.nativeNode);
  }
  /**
   * The element's own component instance, if it has one.
   */


  get componentInstance() {
    const nativeElement = this.nativeNode;
    return nativeElement && (getComponent$1(nativeElement) || getOwningComponent(nativeElement));
  }
  /**
   * An object that provides parent context for this element. Often an ancestor component instance
   * that governs this element.
   *
   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`
   * property is the value of the row instance value. For example, the `hero` in `*ngFor="let hero
   * of heroes"`.
   */


  get context() {
    return getComponent$1(this.nativeNode) || getContext(this.nativeNode);
  }
  /**
   * The callbacks attached to the component's @Output properties and/or the element's event
   * properties.
   */


  get listeners() {
    return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');
  }
  /**
   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local
   * variable name.
   */


  get references() {
    return getLocalRefs(this.nativeNode);
  }
  /**
   * This component's injector lookup tokens. Includes the component itself plus the tokens that the
   * component lists in its providers metadata.
   */


  get providerTokens() {
    return getInjectionTokens(this.nativeNode);
  }

}
/**
 * @publicApi
 *
 * @see [Component testing scenarios](guide/testing-components-scenarios)
 * @see [Basics of testing components](guide/testing-components-basics)
 * @see [Testing utility APIs](guide/testing-utility-apis)
 */


class DebugElement extends DebugNode {
  constructor(nativeNode) {
    ngDevMode && assertDomNode(nativeNode);
    super(nativeNode);
  }
  /**
   * The underlying DOM element at the root of the component.
   */


  get nativeElement() {
    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
  }
  /**
   * The element tag name, if it is an element.
   */


  get name() {
    const context = getLContext(this.nativeNode);

    if (context !== null) {
      const lView = context.lView;
      const tData = lView[TVIEW].data;
      const tNode = tData[context.nodeIndex];
      return tNode.value;
    } else {
      return this.nativeNode.nodeName;
    }
  }
  /**
   *  Gets a map of property names to property values for an element.
   *
   *  This map includes:
   *  - Regular property bindings (e.g. `[id]="id"`)
   *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
   *  - Interpolated property bindings (e.g. `id="{{ value }}")
   *
   *  It does not include:
   *  - input property bindings (e.g. `[myCustomInput]="value"`)
   *  - attribute bindings (e.g. `[attr.role]="menu"`)
   */


  get properties() {
    const context = getLContext(this.nativeNode);

    if (context === null) {
      return {};
    }

    const lView = context.lView;
    const tData = lView[TVIEW].data;
    const tNode = tData[context.nodeIndex];
    const properties = {}; // Collect properties from the DOM.

    copyDomProperties(this.nativeElement, properties); // Collect properties from the bindings. This is needed for animation renderer which has
    // synthetic properties which don't get reflected into the DOM.

    collectPropertyBindings(properties, tNode, lView, tData);
    return properties;
  }
  /**
   *  A map of attribute names to attribute values for an element.
   */


  get attributes() {
    const attributes = {};
    const element = this.nativeElement;

    if (!element) {
      return attributes;
    }

    const context = getLContext(element);

    if (context === null) {
      return {};
    }

    const lView = context.lView;
    const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
    const lowercaseTNodeAttrs = []; // For debug nodes we take the element's attribute directly from the DOM since it allows us
    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
    // however since we have the attributes already on the TNode, we can preserve the case by going
    // through them once, adding them to the `attributes` map and putting their lower-cased name
    // into an array. Afterwards when we're going through the native DOM attributes, we can check
    // whether we haven't run into an attribute already through the TNode.

    if (tNodeAttrs) {
      let i = 0;

      while (i < tNodeAttrs.length) {
        const attrName = tNodeAttrs[i]; // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
        // else will be handled below when we read the final attributes off the DOM.

        if (typeof attrName !== 'string') break;
        const attrValue = tNodeAttrs[i + 1];
        attributes[attrName] = attrValue;
        lowercaseTNodeAttrs.push(attrName.toLowerCase());
        i += 2;
      }
    }

    const eAttrs = element.attributes;

    for (let i = 0; i < eAttrs.length; i++) {
      const attr = eAttrs[i];
      const lowercaseName = attr.name.toLowerCase(); // Make sure that we don't assign the same attribute both in its
      // case-sensitive form and the lower-cased one from the browser.

      if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
        // Save the lowercase name to align the behavior between browsers.
        // IE preserves the case, while all other browser convert it to lower case.
        attributes[lowercaseName] = attr.value;
      }
    }

    return attributes;
  }
  /**
   * The inline styles of the DOM element.
   *
   * Will be `null` if there is no `style` property on the underlying DOM element.
   *
   * @see [ElementCSSInlineStyle](https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style)
   */


  get styles() {
    if (this.nativeElement && this.nativeElement.style) {
      return this.nativeElement.style;
    }

    return {};
  }
  /**
   * A map containing the class names on the element as keys.
   *
   * This map is derived from the `className` property of the DOM element.
   *
   * Note: The values of this object will always be `true`. The class key will not appear in the KV
   * object if it does not exist on the element.
   *
   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
   */


  get classes() {
    const result = {};
    const element = this.nativeElement; // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.

    const className = element.className;
    const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
    classes.forEach(value => result[value] = true);
    return result;
  }
  /**
   * The `childNodes` of the DOM element as a `DebugNode` array.
   *
   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)
   */


  get childNodes() {
    const childNodes = this.nativeNode.childNodes;
    const children = [];

    for (let i = 0; i < childNodes.length; i++) {
      const element = childNodes[i];
      children.push(getDebugNode(element));
    }

    return children;
  }
  /**
   * The immediate `DebugElement` children. Walk the tree by descending through `children`.
   */


  get children() {
    const nativeElement = this.nativeElement;
    if (!nativeElement) return [];
    const childNodes = nativeElement.children;
    const children = [];

    for (let i = 0; i < childNodes.length; i++) {
      const element = childNodes[i];
      children.push(getDebugNode(element));
    }

    return children;
  }
  /**
   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.
   */


  query(predicate) {
    const results = this.queryAll(predicate);
    return results[0] || null;
  }
  /**
   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.
   */


  queryAll(predicate) {
    const matches = [];

    _queryAll(this, predicate, matches, true);

    return matches;
  }
  /**
   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.
   */


  queryAllNodes(predicate) {
    const matches = [];

    _queryAll(this, predicate, matches, false);

    return matches;
  }
  /**
   * Triggers the event by its name if there is a corresponding listener in the element's
   * `listeners` collection.
   *
   * If the event lacks a listener or there's some other problem, consider
   * calling `nativeElement.dispatchEvent(eventObject)`.
   *
   * @param eventName The name of the event to trigger
   * @param eventObj The _event object_ expected by the handler
   *
   * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)
   */


  triggerEventHandler(eventName, eventObj) {
    const node = this.nativeNode;
    const invokedListeners = [];
    this.listeners.forEach(listener => {
      if (listener.name === eventName) {
        const callback = listener.callback;
        callback.call(node, eventObj);
        invokedListeners.push(callback);
      }
    }); // We need to check whether `eventListeners` exists, because it's something
    // that Zone.js only adds to `EventTarget` in browser environments.

    if (typeof node.eventListeners === 'function') {
      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
      // listener.
      node.eventListeners(eventName).forEach(listener => {
        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
        // use `toString` on the listener and see if it contains the token. We use this approach to
        // ensure that it still worked with compiled code since it cannot remove or rename string
        // literals. We also considered using a special function name (i.e. if(listener.name ===
        // special)) but that was more cumbersome and we were also concerned the compiled code could
        // strip the name, turning the condition in to ("" === "") and always returning true.
        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
          const unwrappedListener = listener('__ngUnwrap__');
          return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
        }
      });
    }
  }

}

function copyDomProperties(element, properties) {
  if (element) {
    // Skip own properties (as those are patched)
    let obj = Object.getPrototypeOf(element);
    const NodePrototype = Node.prototype;

    while (obj !== null && obj !== NodePrototype) {
      const descriptors = Object.getOwnPropertyDescriptors(obj);

      for (let key in descriptors) {
        if (!key.startsWith('__') && !key.startsWith('on')) {
          // don't include properties starting with `__` and `on`.
          // `__` are patched values which should not be included.
          // `on` are listeners which also should not be included.
          const value = element[key];

          if (isPrimitiveValue(value)) {
            properties[key] = value;
          }
        }
      }

      obj = Object.getPrototypeOf(obj);
    }
  }
}

function isPrimitiveValue(value) {
  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;
}

function _queryAll(parentElement, predicate, matches, elementsOnly) {
  const context = getLContext(parentElement.nativeNode);

  if (context !== null) {
    const parentTNode = context.lView[TVIEW].data[context.nodeIndex];

    _queryNodeChildren(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
  } else {
    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
    // APIs.
    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
  }
}
/**
 * Recursively match the current TNode against the predicate, and goes on with the next ones.
 *
 * @param tNode the current TNode
 * @param lView the LView of this TNode
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  const nativeNode = getNativeByTNodeOrNull(tNode, lView); // For each type of TNode, specific logic is executed.

  if (tNode.type & (3
  /* AnyRNode */
  | 8
  /* ElementContainer */
  )) {
    // Case 1: the TNode is an element
    // The native node has to be checked.
    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);

    if (isComponentHost(tNode)) {
      // If the element is the host of a component, then all nodes in its view have to be processed.
      // Note: the component's content (tNode.child) will be processed from the insertion points.
      const componentView = getComponentLViewByIndex(tNode.index, lView);

      if (componentView && componentView[TVIEW].firstChild) {
        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
      }
    } else {
      if (tNode.child) {
        // Otherwise, its children have to be processed.
        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
      } // We also have to query the DOM directly in order to catch elements inserted through
      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
      // times. ViewEngine could do it more efficiently, because all the insertions go through
      // Renderer2, however that's not the case in Ivy. This approach is being used because:
      // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
      // 2. We would have to make `Renderer3` "know" about debug nodes.
      // 3. It allows us to capture nodes that were inserted directly via the DOM.


      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
    } // In all cases, if a dynamic container exists for this node, each view inside it has to be
    // processed.


    const nodeOrContainer = lView[tNode.index];

    if (isLContainer(nodeOrContainer)) {
      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.type & 4
  /* Container */
  ) {
    // Case 2: the TNode is a container
    // The native node has to be checked.
    const lContainer = lView[tNode.index];

    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode); // Each view inside the container has to be processed.


    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);
  } else if (tNode.type & 16
  /* Projection */
  ) {
    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
    // The nodes projected at this location all need to be processed.
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const head = componentHost.projection[tNode.projection];

    if (Array.isArray(head)) {
      for (let nativeNode of head) {
        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
      }
    } else if (head) {
      const nextLView = componentView[PARENT];
      const nextTNode = nextLView[TVIEW].data[head.index];

      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
    }
  } else if (tNode.child) {
    // Case 4: the TNode is a view.
    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
  } // We don't want to go to the next sibling of the root node.


  if (rootNativeNode !== nativeNode) {
    // To determine the next node to be processed, we need to use the next or the projectionNext
    // link, depending on whether the current node has been projected.
    const nextTNode = tNode.flags & 4
    /* isProjected */
    ? tNode.projectionNext : tNode.next;

    if (nextTNode) {
      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
/**
 * Process all TNodes in a given container.
 *
 * @param lContainer the container to be processed
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const childView = lContainer[i];
    const firstChild = childView[TVIEW].firstChild;

    if (firstChild) {
      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
    }
  }
}
/**
 * Match the current native node against the predicate.
 *
 * @param nativeNode the current native node
 * @param predicate the predicate to match
 * @param matches the list of positive matches
 * @param elementsOnly whether only elements should be searched
 * @param rootNativeNode the root native node on which predicate should not be matched
 */


function _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
  if (rootNativeNode !== nativeNode) {
    const debugNode = getDebugNode(nativeNode);

    if (!debugNode) {
      return;
    } // Type of the "predicate and "matches" array are set based on the value of
    // the "elementsOnly" parameter. TypeScript is not able to properly infer these
    // types with generics, so we manually cast the parameters accordingly.


    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
      matches.push(debugNode);
    }
  }
}
/**
 * Match all the descendants of a DOM node against a predicate.
 *
 * @param nativeNode the current native node
 * @param predicate the predicate to match
 * @param matches the list where matches are stored
 * @param elementsOnly whether only elements should be searched
 */


function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
  const nodes = parentNode.childNodes;
  const length = nodes.length;

  for (let i = 0; i < length; i++) {
    const node = nodes[i];
    const debugNode = getDebugNode(node);

    if (debugNode) {
      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
        matches.push(debugNode);
      }

      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
    }
  }
}
/**
 * Iterates through the property bindings for a given node and generates
 * a map of property names to values. This map only contains property bindings
 * defined in templates, not in host bindings.
 */


function collectPropertyBindings(properties, tNode, lView, tData) {
  let bindingIndexes = tNode.propertyBindings;

  if (bindingIndexes !== null) {
    for (let i = 0; i < bindingIndexes.length; i++) {
      const bindingIndex = bindingIndexes[i];
      const propMetadata = tData[bindingIndex];
      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
      const propertyName = metadataParts[0];

      if (metadataParts.length > 1) {
        let value = metadataParts[1];

        for (let j = 1; j < metadataParts.length - 1; j++) {
          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
        }

        properties[propertyName] = value;
      } else {
        properties[propertyName] = lView[bindingIndex];
      }
    }
  }
} // Need to keep the nodes in a global Map so that multiple angular apps are supported.


const _nativeNodeToDebugNode = /*#__PURE__*/new Map();

const NG_DEBUG_PROPERTY = '__ng_debug__';
/**
 * @publicApi
 */

function getDebugNode(nativeNode) {
  if (nativeNode instanceof Node) {
    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);
    }

    return nativeNode[NG_DEBUG_PROPERTY];
  }

  return null;
} // TODO: cleanup all references to this function and remove it.


function getDebugNodeR2(_nativeNode) {
  return null;
}

function getAllDebugNodes() {
  return Array.from(_nativeNodeToDebugNode.values());
}

function indexDebugNode(node) {
  _nativeNodeToDebugNode.set(node.nativeNode, node);
}

function removeDebugNodeFromIndex(node) {
  _nativeNodeToDebugNode.delete(node.nativeNode);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class DefaultIterableDifferFactory {
  constructor() {}

  supports(obj) {
    return isListLikeIterable(obj);
  }

  create(trackByFn) {
    return new DefaultIterableDiffer(trackByFn);
  }

}

const trackByIdentity = (index, item) => item;
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 * @publicApi
 */


class DefaultIterableDiffer {
  constructor(trackByFn) {
    this.length = 0; // Keeps track of the used records at any point in time (during & across `_check()` calls)

    this._linkedRecords = null; // Keeps track of the removed records at any point in time during `_check()` calls.

    this._unlinkedRecords = null;
    this._previousItHead = null;
    this._itHead = null;
    this._itTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._movesHead = null;
    this._movesTail = null;
    this._removalsHead = null;
    this._removalsTail = null; // Keeps track of records where custom track by is the same, but item identity has changed

    this._identityChangesHead = null;
    this._identityChangesTail = null;
    this._trackByFn = trackByFn || trackByIdentity;
  }

  forEachItem(fn) {
    let record;

    for (record = this._itHead; record !== null; record = record._next) {
      fn(record);
    }
  }

  forEachOperation(fn) {
    let nextIt = this._itHead;
    let nextRemove = this._removalsHead;
    let addRemoveOffset = 0;
    let moveOffsets = null;

    while (nextIt || nextRemove) {
      // Figure out which is the next record to process
      // Order: remove, add, move
      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
      const currentIndex = record.currentIndex; // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary

      if (record === nextRemove) {
        addRemoveOffset--;
        nextRemove = nextRemove._nextRemoved;
      } else {
        nextIt = nextIt._next;

        if (record.previousIndex == null) {
          addRemoveOffset++;
        } else {
          // INVARIANT:  currentIndex < previousIndex
          if (!moveOffsets) moveOffsets = [];
          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
          const localCurrentIndex = currentIndex - addRemoveOffset;

          if (localMovePreviousIndex != localCurrentIndex) {
            for (let i = 0; i < localMovePreviousIndex; i++) {
              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
              const index = offset + i;

              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                moveOffsets[i] = offset + 1;
              }
            }

            const previousIndex = record.previousIndex;
            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
          }
        }
      }

      if (adjPreviousIndex !== currentIndex) {
        fn(record, adjPreviousIndex, currentIndex);
      }
    }
  }

  forEachPreviousItem(fn) {
    let record;

    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }

  forEachAddedItem(fn) {
    let record;

    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }

  forEachMovedItem(fn) {
    let record;

    for (record = this._movesHead; record !== null; record = record._nextMoved) {
      fn(record);
    }
  }

  forEachRemovedItem(fn) {
    let record;

    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }

  forEachIdentityChange(fn) {
    let record;

    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
      fn(record);
    }
  }

  diff(collection) {
    if (collection == null) collection = [];

    if (!isListLikeIterable(collection)) {
      const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed` : '';
      throw new RuntimeError(900
      /* INVALID_DIFFER_INPUT */
      , errorMessage);
    }

    if (this.check(collection)) {
      return this;
    } else {
      return null;
    }
  }

  onDestroy() {}

  check(collection) {
    this._reset();

    let record = this._itHead;
    let mayBeDirty = false;
    let index;
    let item;
    let itemTrackBy;

    if (Array.isArray(collection)) {
      this.length = collection.length;

      for (let index = 0; index < this.length; index++) {
        item = collection[index];
        itemTrackBy = this._trackByFn(index, item);

        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item, itemTrackBy, index);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            // TODO(misko): can we limit this to duplicates only?
            record = this._verifyReinsertion(record, item, itemTrackBy, index);
          }

          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        }

        record = record._next;
      }
    } else {
      index = 0;
      iterateListLike(collection, item => {
        itemTrackBy = this._trackByFn(index, item);

        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item, itemTrackBy, index);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            // TODO(misko): can we limit this to duplicates only?
            record = this._verifyReinsertion(record, item, itemTrackBy, index);
          }

          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        }

        record = record._next;
        index++;
      });
      this.length = index;
    }

    this._truncate(record);

    this.collection = collection;
    return this.isDirty;
  }
  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
   * changes.
   */


  get isDirty() {
    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
  }
  /**
   * Reset the state of the change objects to show no changes. This means set previousKey to
   * currentKey, and clear all of the queues (additions, moves, removals).
   * Set the previousIndexes of moved and added items to their currentIndexes
   * Reset the list of additions, moves and removals
   *
   * @internal
   */


  _reset() {
    if (this.isDirty) {
      let record;

      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }

      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        record.previousIndex = record.currentIndex;
      }

      this._additionsHead = this._additionsTail = null;

      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        record.previousIndex = record.currentIndex;
      }

      this._movesHead = this._movesTail = null;
      this._removalsHead = this._removalsTail = null;
      this._identityChangesHead = this._identityChangesTail = null; // TODO(vicb): when assert gets supported
      // assert(!this.isDirty);
    }
  }
  /**
   * This is the core function which handles differences between collections.
   *
   * - `record` is the record which we saw at this position last time. If null then it is a new
   *   item.
   * - `item` is the current item in the collection
   * - `index` is the position of the item in the collection
   *
   * @internal
   */


  _mismatch(record, item, itemTrackBy, index) {
    // The previous record after which we will append the current one.
    let previousRecord;

    if (record === null) {
      previousRecord = this._itTail;
    } else {
      previousRecord = record._prev; // Remove the record from the collection since we know it does not match the item.

      this._remove(record);
    } // See if we have evicted the item, which used to be at some anterior position of _itHead list.


    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

    if (record !== null) {
      // It is an item which we have evicted earlier: reinsert it back into the list.
      // But first we need to check if identity changed, so we can update in view if necessary.
      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

      this._reinsertAfter(record, previousRecord, index);
    } else {
      // Attempt to see if the item is at some posterior position of _itHead list.
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);

      if (record !== null) {
        // We have the item in _itHead at/after `index` position. We need to move it forward in the
        // collection.
        // But first we need to check if identity changed, so we can update in view if necessary.
        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

        this._moveAfter(record, previousRecord, index);
      } else {
        // It is a new item: add it.
        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
      }
    }

    return record;
  }
  /**
   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
   *
   * Use case: `[a, a]` => `[b, a, a]`
   *
   * If we did not have this check then the insertion of `b` would:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) leave `a` at index `1` as is. <-- this is wrong!
   *   3) reinsert `a` at index 2. <-- this is wrong!
   *
   * The correct behavior is:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) reinsert `a` at index 1.
   *   3) move `a` at from `1` to `2`.
   *
   *
   * Double check that we have not evicted a duplicate item. We need to check if the item type may
   * have already been removed:
   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
   * at the end.
   *
   * @internal
   */


  _verifyReinsertion(record, item, itemTrackBy, index) {
    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

    if (reinsertRecord !== null) {
      record = this._reinsertAfter(reinsertRecord, record._prev, index);
    } else if (record.currentIndex != index) {
      record.currentIndex = index;

      this._addToMoves(record, index);
    }

    return record;
  }
  /**
   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
   *
   * - `record` The first excess {@link IterableChangeRecord_}.
   *
   * @internal
   */


  _truncate(record) {
    // Anything after that needs to be removed;
    while (record !== null) {
      const nextRecord = record._next;

      this._addToRemovals(this._unlink(record));

      record = nextRecord;
    }

    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.clear();
    }

    if (this._additionsTail !== null) {
      this._additionsTail._nextAdded = null;
    }

    if (this._movesTail !== null) {
      this._movesTail._nextMoved = null;
    }

    if (this._itTail !== null) {
      this._itTail._next = null;
    }

    if (this._removalsTail !== null) {
      this._removalsTail._nextRemoved = null;
    }

    if (this._identityChangesTail !== null) {
      this._identityChangesTail._nextIdentityChange = null;
    }
  }
  /** @internal */


  _reinsertAfter(record, prevRecord, index) {
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.remove(record);
    }

    const prev = record._prevRemoved;
    const next = record._nextRemoved;

    if (prev === null) {
      this._removalsHead = next;
    } else {
      prev._nextRemoved = next;
    }

    if (next === null) {
      this._removalsTail = prev;
    } else {
      next._prevRemoved = prev;
    }

    this._insertAfter(record, prevRecord, index);

    this._addToMoves(record, index);

    return record;
  }
  /** @internal */


  _moveAfter(record, prevRecord, index) {
    this._unlink(record);

    this._insertAfter(record, prevRecord, index);

    this._addToMoves(record, index);

    return record;
  }
  /** @internal */


  _addAfter(record, prevRecord, index) {
    this._insertAfter(record, prevRecord, index);

    if (this._additionsTail === null) {
      // TODO(vicb):
      // assert(this._additionsHead === null);
      this._additionsTail = this._additionsHead = record;
    } else {
      // TODO(vicb):
      // assert(_additionsTail._nextAdded === null);
      // assert(record._nextAdded === null);
      this._additionsTail = this._additionsTail._nextAdded = record;
    }

    return record;
  }
  /** @internal */


  _insertAfter(record, prevRecord, index) {
    // TODO(vicb):
    // assert(record != prevRecord);
    // assert(record._next === null);
    // assert(record._prev === null);
    const next = prevRecord === null ? this._itHead : prevRecord._next; // TODO(vicb):
    // assert(next != record);
    // assert(prevRecord != record);

    record._next = next;
    record._prev = prevRecord;

    if (next === null) {
      this._itTail = record;
    } else {
      next._prev = record;
    }

    if (prevRecord === null) {
      this._itHead = record;
    } else {
      prevRecord._next = record;
    }

    if (this._linkedRecords === null) {
      this._linkedRecords = new _DuplicateMap();
    }

    this._linkedRecords.put(record);

    record.currentIndex = index;
    return record;
  }
  /** @internal */


  _remove(record) {
    return this._addToRemovals(this._unlink(record));
  }
  /** @internal */


  _unlink(record) {
    if (this._linkedRecords !== null) {
      this._linkedRecords.remove(record);
    }

    const prev = record._prev;
    const next = record._next; // TODO(vicb):
    // assert((record._prev = null) === null);
    // assert((record._next = null) === null);

    if (prev === null) {
      this._itHead = next;
    } else {
      prev._next = next;
    }

    if (next === null) {
      this._itTail = prev;
    } else {
      next._prev = prev;
    }

    return record;
  }
  /** @internal */


  _addToMoves(record, toIndex) {
    // TODO(vicb):
    // assert(record._nextMoved === null);
    if (record.previousIndex === toIndex) {
      return record;
    }

    if (this._movesTail === null) {
      // TODO(vicb):
      // assert(_movesHead === null);
      this._movesTail = this._movesHead = record;
    } else {
      // TODO(vicb):
      // assert(_movesTail._nextMoved === null);
      this._movesTail = this._movesTail._nextMoved = record;
    }

    return record;
  }

  _addToRemovals(record) {
    if (this._unlinkedRecords === null) {
      this._unlinkedRecords = new _DuplicateMap();
    }

    this._unlinkedRecords.put(record);

    record.currentIndex = null;
    record._nextRemoved = null;

    if (this._removalsTail === null) {
      // TODO(vicb):
      // assert(_removalsHead === null);
      this._removalsTail = this._removalsHead = record;
      record._prevRemoved = null;
    } else {
      // TODO(vicb):
      // assert(_removalsTail._nextRemoved === null);
      // assert(record._nextRemoved === null);
      record._prevRemoved = this._removalsTail;
      this._removalsTail = this._removalsTail._nextRemoved = record;
    }

    return record;
  }
  /** @internal */


  _addIdentityChange(record, item) {
    record.item = item;

    if (this._identityChangesTail === null) {
      this._identityChangesTail = this._identityChangesHead = record;
    } else {
      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
    }

    return record;
  }

}

class IterableChangeRecord_ {
  constructor(item, trackById) {
    this.item = item;
    this.trackById = trackById;
    this.currentIndex = null;
    this.previousIndex = null;
    /** @internal */

    this._nextPrevious = null;
    /** @internal */

    this._prev = null;
    /** @internal */

    this._next = null;
    /** @internal */

    this._prevDup = null;
    /** @internal */

    this._nextDup = null;
    /** @internal */

    this._prevRemoved = null;
    /** @internal */

    this._nextRemoved = null;
    /** @internal */

    this._nextAdded = null;
    /** @internal */

    this._nextMoved = null;
    /** @internal */

    this._nextIdentityChange = null;
  }

} // A linked list of IterableChangeRecords with the same IterableChangeRecord_.item


class _DuplicateItemRecordList {
  constructor() {
    /** @internal */
    this._head = null;
    /** @internal */

    this._tail = null;
  }
  /**
   * Append the record to the list of duplicates.
   *
   * Note: by design all records in the list of duplicates hold the same value in record.item.
   */


  add(record) {
    if (this._head === null) {
      this._head = this._tail = record;
      record._nextDup = null;
      record._prevDup = null;
    } else {
      // TODO(vicb):
      // assert(record.item ==  _head.item ||
      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
      this._tail._nextDup = record;
      record._prevDup = this._tail;
      record._nextDup = null;
      this._tail = record;
    }
  } // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
  // IterableChangeRecord_.currentIndex >= atOrAfterIndex


  get(trackById, atOrAfterIndex) {
    let record;

    for (record = this._head; record !== null; record = record._nextDup) {
      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
        return record;
      }
    }

    return null;
  }
  /**
   * Remove one {@link IterableChangeRecord_} from the list of duplicates.
   *
   * Returns whether the list of duplicates is empty.
   */


  remove(record) {
    // TODO(vicb):
    // assert(() {
    //  // verify that the record being removed is in the list.
    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
    //    if (identical(cursor, record)) return true;
    //  }
    //  return false;
    //});
    const prev = record._prevDup;
    const next = record._nextDup;

    if (prev === null) {
      this._head = next;
    } else {
      prev._nextDup = next;
    }

    if (next === null) {
      this._tail = prev;
    } else {
      next._prevDup = prev;
    }

    return this._head === null;
  }

}

class _DuplicateMap {
  constructor() {
    this.map = new Map();
  }

  put(record) {
    const key = record.trackById;
    let duplicates = this.map.get(key);

    if (!duplicates) {
      duplicates = new _DuplicateItemRecordList();
      this.map.set(key, duplicates);
    }

    duplicates.add(record);
  }
  /**
   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
   *
   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
   * have any more `a`s needs to return the second `a`.
   */


  get(trackById, atOrAfterIndex) {
    const key = trackById;
    const recordList = this.map.get(key);
    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
  }
  /**
   * Removes a {@link IterableChangeRecord_} from the list of duplicates.
   *
   * The list of duplicates also is removed from the map if it gets empty.
   */


  remove(record) {
    const key = record.trackById;
    const recordList = this.map.get(key); // Remove the list of duplicates when it gets empty

    if (recordList.remove(record)) {
      this.map.delete(key);
    }

    return record;
  }

  get isEmpty() {
    return this.map.size === 0;
  }

  clear() {
    this.map.clear();
  }

}

function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  const previousIndex = item.previousIndex;
  if (previousIndex === null) return previousIndex;
  let moveOffset = 0;

  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }

  return previousIndex + addRemoveOffset + moveOffset;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class DefaultKeyValueDifferFactory {
  constructor() {}

  supports(obj) {
    return obj instanceof Map || isJsObject(obj);
  }

  create() {
    return new DefaultKeyValueDiffer();
  }

}

class DefaultKeyValueDiffer {
  constructor() {
    this._records = new Map();
    this._mapHead = null; // _appendAfter is used in the check loop

    this._appendAfter = null;
    this._previousMapHead = null;
    this._changesHead = null;
    this._changesTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
  }

  get isDirty() {
    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
  }

  forEachItem(fn) {
    let record;

    for (record = this._mapHead; record !== null; record = record._next) {
      fn(record);
    }
  }

  forEachPreviousItem(fn) {
    let record;

    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }

  forEachChangedItem(fn) {
    let record;

    for (record = this._changesHead; record !== null; record = record._nextChanged) {
      fn(record);
    }
  }

  forEachAddedItem(fn) {
    let record;

    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }

  forEachRemovedItem(fn) {
    let record;

    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }

  diff(map) {
    if (!map) {
      map = new Map();
    } else if (!(map instanceof Map || isJsObject(map))) {
      const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed` : '';
      throw new RuntimeError(900
      /* INVALID_DIFFER_INPUT */
      , errorMessage);
    }

    return this.check(map) ? this : null;
  }

  onDestroy() {}
  /**
   * Check the current state of the map vs the previous.
   * The algorithm is optimised for when the keys do no change.
   */


  check(map) {
    this._reset();

    let insertBefore = this._mapHead;
    this._appendAfter = null;

    this._forEach(map, (value, key) => {
      if (insertBefore && insertBefore.key === key) {
        this._maybeAddToChanges(insertBefore, value);

        this._appendAfter = insertBefore;
        insertBefore = insertBefore._next;
      } else {
        const record = this._getOrCreateRecordForKey(key, value);

        insertBefore = this._insertBeforeOrAppend(insertBefore, record);
      }
    }); // Items remaining at the end of the list have been deleted


    if (insertBefore) {
      if (insertBefore._prev) {
        insertBefore._prev._next = null;
      }

      this._removalsHead = insertBefore;

      for (let record = insertBefore; record !== null; record = record._nextRemoved) {
        if (record === this._mapHead) {
          this._mapHead = null;
        }

        this._records.delete(record.key);

        record._nextRemoved = record._next;
        record.previousValue = record.currentValue;
        record.currentValue = null;
        record._prev = null;
        record._next = null;
      }
    } // Make sure tails have no next records from previous runs


    if (this._changesTail) this._changesTail._nextChanged = null;
    if (this._additionsTail) this._additionsTail._nextAdded = null;
    return this.isDirty;
  }
  /**
   * Inserts a record before `before` or append at the end of the list when `before` is null.
   *
   * Notes:
   * - This method appends at `this._appendAfter`,
   * - This method updates `this._appendAfter`,
   * - The return value is the new value for the insertion pointer.
   */


  _insertBeforeOrAppend(before, record) {
    if (before) {
      const prev = before._prev;
      record._next = before;
      record._prev = prev;
      before._prev = record;

      if (prev) {
        prev._next = record;
      }

      if (before === this._mapHead) {
        this._mapHead = record;
      }

      this._appendAfter = before;
      return before;
    }

    if (this._appendAfter) {
      this._appendAfter._next = record;
      record._prev = this._appendAfter;
    } else {
      this._mapHead = record;
    }

    this._appendAfter = record;
    return null;
  }

  _getOrCreateRecordForKey(key, value) {
    if (this._records.has(key)) {
      const record = this._records.get(key);

      this._maybeAddToChanges(record, value);

      const prev = record._prev;
      const next = record._next;

      if (prev) {
        prev._next = next;
      }

      if (next) {
        next._prev = prev;
      }

      record._next = null;
      record._prev = null;
      return record;
    }

    const record = new KeyValueChangeRecord_(key);

    this._records.set(key, record);

    record.currentValue = value;

    this._addToAdditions(record);

    return record;
  }
  /** @internal */


  _reset() {
    if (this.isDirty) {
      let record; // let `_previousMapHead` contain the state of the map before the changes

      this._previousMapHead = this._mapHead;

      for (record = this._previousMapHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      } // Update `record.previousValue` with the value of the item before the changes
      // We need to update all changed items (that's those which have been added and changed)


      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        record.previousValue = record.currentValue;
      }

      for (record = this._additionsHead; record != null; record = record._nextAdded) {
        record.previousValue = record.currentValue;
      }

      this._changesHead = this._changesTail = null;
      this._additionsHead = this._additionsTail = null;
      this._removalsHead = null;
    }
  } // Add the record or a given key to the list of changes only when the value has actually changed


  _maybeAddToChanges(record, newValue) {
    if (!Object.is(newValue, record.currentValue)) {
      record.previousValue = record.currentValue;
      record.currentValue = newValue;

      this._addToChanges(record);
    }
  }

  _addToAdditions(record) {
    if (this._additionsHead === null) {
      this._additionsHead = this._additionsTail = record;
    } else {
      this._additionsTail._nextAdded = record;
      this._additionsTail = record;
    }
  }

  _addToChanges(record) {
    if (this._changesHead === null) {
      this._changesHead = this._changesTail = record;
    } else {
      this._changesTail._nextChanged = record;
      this._changesTail = record;
    }
  }
  /** @internal */


  _forEach(obj, fn) {
    if (obj instanceof Map) {
      obj.forEach(fn);
    } else {
      Object.keys(obj).forEach(k => fn(obj[k], k));
    }
  }

}

class KeyValueChangeRecord_ {
  constructor(key) {
    this.key = key;
    this.previousValue = null;
    this.currentValue = null;
    /** @internal */

    this._nextPrevious = null;
    /** @internal */

    this._next = null;
    /** @internal */

    this._prev = null;
    /** @internal */

    this._nextAdded = null;
    /** @internal */

    this._nextRemoved = null;
    /** @internal */

    this._nextChanged = null;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 *
 * @publicApi
 */


let IterableDiffers = /*#__PURE__*/(() => {
  class IterableDiffers {
    constructor(factories) {
      this.factories = factories;
    }

    static create(factories, parent) {
      if (parent != null) {
        const copied = parent.factories.slice();
        factories = factories.concat(copied);
      }

      return new IterableDiffers(factories);
    }
    /**
     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {@link IterableDiffers} instance with the provided factories and return a new
     * {@link IterableDiffers} instance.
     *
     * @usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link IterableDiffer} available.
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     */


    static extend(factories) {
      return {
        provide: IterableDiffers,
        useFactory: parent => {
          // if parent is null, it means that we are in the root injector and we have just overridden
          // the default injection mechanism for IterableDiffers, in such a case just assume
          // `defaultIterableDiffersFactory`.
          return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
        },
        // Dependency technically isn't optional, but we can provide a better error message this way.
        deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
      };
    }

    find(iterable) {
      const factory = this.factories.find(f => f.supports(iterable));

      if (factory != null) {
        return factory;
      } else {
        const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'` : '';
        throw new RuntimeError(901
        /* NO_SUPPORTING_DIFFER_FACTORY */
        , errorMessage);
      }
    }

  }

  /** @nocollapse */
  IterableDiffers.ɵprov = ɵɵdefineInjectable({
    token: IterableDiffers,
    providedIn: 'root',
    factory: defaultIterableDiffersFactory
  });
  return IterableDiffers;
})();

function getTypeNameForDebugging(type) {
  return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 *
 * @publicApi
 */


let KeyValueDiffers = /*#__PURE__*/(() => {
  class KeyValueDiffers {
    constructor(factories) {
      this.factories = factories;
    }

    static create(factories, parent) {
      if (parent) {
        const copied = parent.factories.slice();
        factories = factories.concat(copied);
      }

      return new KeyValueDiffers(factories);
    }
    /**
     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
     * {@link KeyValueDiffers} instance.
     *
     * @usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {@link KeyValueDiffer} available.
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     */


    static extend(factories) {
      return {
        provide: KeyValueDiffers,
        useFactory: parent => {
          // if parent is null, it means that we are in the root injector and we have just overridden
          // the default injection mechanism for KeyValueDiffers, in such a case just assume
          // `defaultKeyValueDiffersFactory`.
          return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
        },
        // Dependency technically isn't optional, but we can provide a better error message this way.
        deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
      };
    }

    find(kv) {
      const factory = this.factories.find(f => f.supports(kv));

      if (factory) {
        return factory;
      }

      const errorMessage = typeof ngDevMode === 'undefined' || ngDevMode ? `Cannot find a differ supporting object '${kv}'` : '';
      throw new RuntimeError(901
      /* NO_SUPPORTING_DIFFER_FACTORY */
      , errorMessage);
    }

  }

  /** @nocollapse */
  KeyValueDiffers.ɵprov = ɵɵdefineInjectable({
    token: KeyValueDiffers,
    providedIn: 'root',
    factory: defaultKeyValueDiffersFactory
  });
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */

  /**
   * Structural diffing for `Object`s and `Map`s.
   */

  return KeyValueDiffers;
})();
const keyValDiff = [/*#__PURE__*/new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */

const iterableDiff = [/*#__PURE__*/new DefaultIterableDifferFactory()];
const defaultIterableDiffers = /*#__PURE__*/new IterableDiffers(iterableDiff);
const defaultKeyValueDiffers = /*#__PURE__*/new KeyValueDiffers(keyValDiff);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This platform has to be included in any other platform
 *
 * @publicApi
 */

const platformCore = /*#__PURE__*/createPlatformFactory(null, 'core', []);
/**
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects
 * `ApplicationRef` to instantiate it.
 *
 * @publicApi
 */

let ApplicationModule = /*#__PURE__*/(() => {
  class ApplicationModule {
    // Inject ApplicationRef to make it eager...
    constructor(appRef) {}

  }

  ApplicationModule.ɵfac = function ApplicationModule_Factory(t) {
    return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));
  };

  ApplicationModule.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({
    type: ApplicationModule
  });
  ApplicationModule.ɵinj = /*@__PURE__*/ɵɵdefineInjector({});
  return ApplicationModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
    type: NgModule
  }], function () {
    return [{
      type: ApplicationRef
    }];
  }, null);
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO(alxhub): allows tests to compile, can be removed when tests have been updated.


const ɵivyEnabled = true;
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Compiles a partial directive declaration object into a full directive definition object.
 *
 * @codeGenApi
 */

function ɵɵngDeclareDirective(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'directive',
    type: decl.type
  });
  return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);
}
/**
 * Evaluates the class metadata declaration.
 *
 * @codeGenApi
 */


function ɵɵngDeclareClassMetadata(decl) {
  var _a, _b;

  setClassMetadata(decl.type, decl.decorators, (_a = decl.ctorParameters) !== null && _a !== void 0 ? _a : null, (_b = decl.propDecorators) !== null && _b !== void 0 ? _b : null);
}
/**
 * Compiles a partial component declaration object into a full component definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareComponent(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'component',
    type: decl.type
  });
  return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);
}
/**
 * Compiles a partial pipe declaration object into a full pipe definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareFactory(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: getFactoryKind(decl.target),
    type: decl.type
  });
  return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);
}

function getFactoryKind(target) {
  switch (target) {
    case FactoryTarget.Directive:
      return 'directive';

    case FactoryTarget.Component:
      return 'component';

    case FactoryTarget.Injectable:
      return 'injectable';

    case FactoryTarget.Pipe:
      return 'pipe';

    case FactoryTarget.NgModule:
      return 'NgModule';
  }
}
/**
 * Compiles a partial injectable declaration object into a full injectable definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareInjectable(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'injectable',
    type: decl.type
  });
  return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);
}
/**
 * Compiles a partial injector declaration object into a full injector definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareInjector(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'NgModule',
    type: decl.type
  });
  return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);
}
/**
 * Compiles a partial NgModule declaration object into a full NgModule definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclareNgModule(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'NgModule',
    type: decl.type
  });
  return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);
}
/**
 * Compiles a partial pipe declaration object into a full pipe definition object.
 *
 * @codeGenApi
 */


function ɵɵngDeclarePipe(decl) {
  const compiler = getCompilerFacade({
    usage: 1
    /* PartialDeclaration */
    ,
    kind: 'pipe',
    type: decl.type
  });
  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// clang-format on

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


if (typeof ngDevMode !== 'undefined' && ngDevMode) {
  // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
  // installed `@angular/localize` in their app.
  // tslint:disable-next-line: no-toplevel-property-access
  _global.$localize = _global.$localize || function () {
    throw new Error('It looks like your application or one of its dependencies is using i18n.\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\n' + '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=core.mjs.map

/***/ }),

/***/ 1729:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/material/fesm2015/core.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationCurves": () => (/* binding */ AnimationCurves),
/* harmony export */   "AnimationDurations": () => (/* binding */ AnimationDurations),
/* harmony export */   "DateAdapter": () => (/* binding */ DateAdapter),
/* harmony export */   "ErrorStateMatcher": () => (/* binding */ ErrorStateMatcher),
/* harmony export */   "MATERIAL_SANITY_CHECKS": () => (/* binding */ MATERIAL_SANITY_CHECKS),
/* harmony export */   "MAT_DATE_FORMATS": () => (/* binding */ MAT_DATE_FORMATS),
/* harmony export */   "MAT_DATE_LOCALE": () => (/* binding */ MAT_DATE_LOCALE),
/* harmony export */   "MAT_DATE_LOCALE_FACTORY": () => (/* binding */ MAT_DATE_LOCALE_FACTORY),
/* harmony export */   "MAT_NATIVE_DATE_FORMATS": () => (/* binding */ MAT_NATIVE_DATE_FORMATS),
/* harmony export */   "MAT_OPTGROUP": () => (/* binding */ MAT_OPTGROUP),
/* harmony export */   "MAT_OPTION_PARENT_COMPONENT": () => (/* binding */ MAT_OPTION_PARENT_COMPONENT),
/* harmony export */   "MAT_RIPPLE_GLOBAL_OPTIONS": () => (/* binding */ MAT_RIPPLE_GLOBAL_OPTIONS),
/* harmony export */   "MatCommonModule": () => (/* binding */ MatCommonModule),
/* harmony export */   "MatLine": () => (/* binding */ MatLine),
/* harmony export */   "MatLineModule": () => (/* binding */ MatLineModule),
/* harmony export */   "MatNativeDateModule": () => (/* binding */ MatNativeDateModule),
/* harmony export */   "MatOptgroup": () => (/* binding */ MatOptgroup),
/* harmony export */   "MatOption": () => (/* binding */ MatOption),
/* harmony export */   "MatOptionModule": () => (/* binding */ MatOptionModule),
/* harmony export */   "MatOptionSelectionChange": () => (/* binding */ MatOptionSelectionChange),
/* harmony export */   "MatPseudoCheckbox": () => (/* binding */ MatPseudoCheckbox),
/* harmony export */   "MatPseudoCheckboxModule": () => (/* binding */ MatPseudoCheckboxModule),
/* harmony export */   "MatRipple": () => (/* binding */ MatRipple),
/* harmony export */   "MatRippleModule": () => (/* binding */ MatRippleModule),
/* harmony export */   "NativeDateAdapter": () => (/* binding */ NativeDateAdapter),
/* harmony export */   "NativeDateModule": () => (/* binding */ NativeDateModule),
/* harmony export */   "RippleRef": () => (/* binding */ RippleRef),
/* harmony export */   "RippleRenderer": () => (/* binding */ RippleRenderer),
/* harmony export */   "ShowOnDirtyErrorStateMatcher": () => (/* binding */ ShowOnDirtyErrorStateMatcher),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "_MatOptgroupBase": () => (/* binding */ _MatOptgroupBase),
/* harmony export */   "_MatOptionBase": () => (/* binding */ _MatOptionBase),
/* harmony export */   "_countGroupLabelsBeforeOption": () => (/* binding */ _countGroupLabelsBeforeOption),
/* harmony export */   "_getOptionScrollPosition": () => (/* binding */ _getOptionScrollPosition),
/* harmony export */   "defaultRippleAnimationConfig": () => (/* binding */ defaultRippleAnimationConfig),
/* harmony export */   "mixinColor": () => (/* binding */ mixinColor),
/* harmony export */   "mixinDisableRipple": () => (/* binding */ mixinDisableRipple),
/* harmony export */   "mixinDisabled": () => (/* binding */ mixinDisabled),
/* harmony export */   "mixinErrorState": () => (/* binding */ mixinErrorState),
/* harmony export */   "mixinInitialized": () => (/* binding */ mixinInitialized),
/* harmony export */   "mixinTabIndex": () => (/* binding */ mixinTabIndex),
/* harmony export */   "setLines": () => (/* binding */ setLines)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ 226);
/* harmony import */ var _angular_cdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk */ 9277);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ 925);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/a11y */ 5664);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ 3191);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 9751);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 8675);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser/animations */ 3646);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/keycodes */ 1159);















/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Current version of Angular Material. */

const _c0 = ["*", [["mat-option"], ["ng-container"]]];
const _c1 = ["*", "mat-option, ng-container"];

function MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "mat-pseudo-checkbox", 4);
  }

  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("state", ctx_r0.selected ? "checked" : "unchecked")("disabled", ctx_r0.disabled);
  }
}

function MatOption_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("(", ctx_r1.group.label, ")");
  }
}

const _c2 = ["*"];
const VERSION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** @docs-private */

let AnimationCurves = /*#__PURE__*/(() => {
  class AnimationCurves {}

  AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
  AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
  AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
  AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
  /** @docs-private */

  return AnimationCurves;
})();
let AnimationDurations = /*#__PURE__*/(() => {
  class AnimationDurations {}

  AnimationDurations.COMPLEX = '375ms';
  AnimationDurations.ENTERING = '225ms';
  AnimationDurations.EXITING = '195ms';
  /** @docs-private */

  return AnimationDurations;
})();

function MATERIAL_SANITY_CHECKS_FACTORY() {
  return true;
}
/** Injection token that configures whether the Material sanity checks are enabled. */


const MATERIAL_SANITY_CHECKS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-sanity-checks', {
  providedIn: 'root',
  factory: MATERIAL_SANITY_CHECKS_FACTORY
});
/**
 * Module that captures anything that should be loaded and/or run for *all* Angular Material
 * components. This includes Bidi, etc.
 *
 * This module should be imported to each top-level component module (e.g., MatTabsModule).
 */

let MatCommonModule = /*#__PURE__*/(() => {
  class MatCommonModule {
    constructor(highContrastModeDetector, _sanityChecks, _document) {
      this._sanityChecks = _sanityChecks;
      this._document = _document;
      /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */

      this._hasDoneGlobalChecks = false; // While A11yModule also does this, we repeat it here to avoid importing A11yModule
      // in MatCommonModule.

      highContrastModeDetector._applyBodyHighContrastModeCssClasses();

      if (!this._hasDoneGlobalChecks) {
        this._hasDoneGlobalChecks = true;

        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (this._checkIsEnabled('doctype')) {
            _checkDoctypeIsDefined(this._document);
          }

          if (this._checkIsEnabled('theme')) {
            _checkThemeIsPresent(this._document);
          }

          if (this._checkIsEnabled('version')) {
            _checkCdkVersionMatch();
          }
        }
      }
    }
    /** Gets whether a specific sanity check is enabled. */


    _checkIsEnabled(name) {
      if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__._isTestEnvironment)()) {
        return false;
      }

      if (typeof this._sanityChecks === 'boolean') {
        return this._sanityChecks;
      }

      return !!this._sanityChecks[name];
    }

  }

  MatCommonModule.ɵfac = function MatCommonModule_Factory(t) {
    return new (t || MatCommonModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.HighContrastModeDetector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MATERIAL_SANITY_CHECKS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__.DOCUMENT));
  };

  MatCommonModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatCommonModule
  });
  MatCommonModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__.BidiModule]
  });
  return MatCommonModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** Checks that the page has a doctype. */


function _checkDoctypeIsDefined(doc) {
  if (!doc.doctype) {
    console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');
  }
}
/** Checks that a theme has been included. */


function _checkThemeIsPresent(doc) {
  // We need to assert that the `body` is defined, because these checks run very early
  // and the `body` won't be defined if the consumer put their scripts in the `head`.
  if (!doc.body || typeof getComputedStyle !== 'function') {
    return;
  }

  const testElement = doc.createElement('div');
  testElement.classList.add('mat-theme-loaded-marker');
  doc.body.appendChild(testElement);
  const computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in
  // Firefox, the computed style is null if an application is running inside of a hidden iframe.
  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

  if (computedStyle && computedStyle.display !== 'none') {
    console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');
  }

  testElement.remove();
}
/** Checks whether the Material version matches the CDK version. */


function _checkCdkVersionMatch() {
  if (VERSION.full !== _angular_cdk__WEBPACK_IMPORTED_MODULE_5__.VERSION.full) {
    console.warn('The Angular Material version (' + VERSION.full + ') does not match ' + 'the Angular CDK version (' + _angular_cdk__WEBPACK_IMPORTED_MODULE_5__.VERSION.full + ').\n' + 'Please ensure the versions of these two packages exactly match.');
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function mixinDisabled(base) {
  return class extends base {
    constructor(...args) {
      super(...args);
      this._disabled = false;
    }

    get disabled() {
      return this._disabled;
    }

    set disabled(value) {
      this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceBooleanProperty)(value);
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function mixinColor(base, defaultColor) {
  return class extends base {
    constructor(...args) {
      super(...args);
      this.defaultColor = defaultColor; // Set the default color that can be specified from the mixin.

      this.color = defaultColor;
    }

    get color() {
      return this._color;
    }

    set color(value) {
      const colorPalette = value || this.defaultColor;

      if (colorPalette !== this._color) {
        if (this._color) {
          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);
        }

        if (colorPalette) {
          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);
        }

        this._color = colorPalette;
      }
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function mixinDisableRipple(base) {
  return class extends base {
    constructor(...args) {
      super(...args);
      this._disableRipple = false;
    }
    /** Whether the ripple effect is disabled or not. */


    get disableRipple() {
      return this._disableRipple;
    }

    set disableRipple(value) {
      this._disableRipple = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceBooleanProperty)(value);
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function mixinTabIndex(base, defaultTabIndex = 0) {
  return class extends base {
    constructor(...args) {
      super(...args);
      this._tabIndex = defaultTabIndex;
      this.defaultTabIndex = defaultTabIndex;
    }

    get tabIndex() {
      return this.disabled ? -1 : this._tabIndex;
    }

    set tabIndex(value) {
      // If the specified tabIndex value is null or undefined, fall back to the default value.
      this._tabIndex = value != null ? (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceNumberProperty)(value) : this.defaultTabIndex;
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function mixinErrorState(base) {
  return class extends base {
    constructor(...args) {
      super(...args); // This class member exists as an interop with `MatFormFieldControl` which expects
      // a public `stateChanges` observable to emit whenever the form field should be updated.
      // The description is not specifically mentioning the error state, as classes using this
      // mixin can/should emit an event in other cases too.

      /** Emits whenever the component state changes. */

      this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();
      /** Whether the component is in an error state. */

      this.errorState = false;
    }
    /** Updates the error state based on the provided error state matcher. */


    updateErrorState() {
      const oldState = this.errorState;
      const parent = this._parentFormGroup || this._parentForm;
      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
      const control = this.ngControl ? this.ngControl.control : null;
      const newState = matcher.isErrorState(control, parent);

      if (newState !== oldState) {
        this.errorState = newState;
        this.stateChanges.next();
      }
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */


function mixinInitialized(base) {
  return class extends base {
    constructor(...args) {
      super(...args);
      /** Whether this directive has been marked as initialized. */

      this._isInitialized = false;
      /**
       * List of subscribers that subscribed before the directive was initialized. Should be notified
       * during _markInitialized. Set to null after pending subscribers are notified, and should
       * not expect to be populated after.
       */

      this._pendingSubscribers = [];
      /**
       * Observable stream that emits when the directive initializes. If already initialized, the
       * subscriber is stored to be notified once _markInitialized is called.
       */

      this.initialized = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable(subscriber => {
        // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
        // when _markInitialized is called.
        if (this._isInitialized) {
          this._notifySubscriber(subscriber);
        } else {
          this._pendingSubscribers.push(subscriber);
        }
      });
    }
    /**
     * Marks the state as initialized and notifies pending subscribers. Should be called at the end
     * of ngOnInit.
     * @docs-private
     */


    _markInitialized() {
      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');
      }

      this._isInitialized = true;

      this._pendingSubscribers.forEach(this._notifySubscriber);

      this._pendingSubscribers = null;
    }
    /** Emits and completes the subscriber stream (should only emit once). */


    _notifySubscriber(subscriber) {
      subscriber.next();
      subscriber.complete();
    }

  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** InjectionToken for datepicker that can be used to override default locale code. */


const MAT_DATE_LOCALE = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_DATE_LOCALE', {
  providedIn: 'root',
  factory: MAT_DATE_LOCALE_FACTORY
});
/** @docs-private */

function MAT_DATE_LOCALE_FACTORY() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID);
}
/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */


class DateAdapter {
  constructor() {
    this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();
    /** A stream that emits when the locale changes. */

    this.localeChanges = this._localeChanges;
  }
  /**
   * Given a potential date object, returns that same date object if it is
   * a valid date, or `null` if it's not a valid date.
   * @param obj The object to check.
   * @returns A date or `null`.
   */


  getValidDateOrNull(obj) {
    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;
  }
  /**
   * Attempts to deserialize a value to a valid date object. This is different from parsing in that
   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
   * string). The default implementation does not allow any deserialization, it simply checks that
   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
   * method on all of its `@Input()` properties that accept dates. It is therefore possible to
   * support passing values from your backend directly to these properties by overriding this method
   * to also deserialize the format used by your backend.
   * @param value The value to be deserialized into a date object.
   * @returns The deserialized date object, either a valid date, null if the value can be
   *     deserialized into a null date (e.g. the empty string), or an invalid date.
   */


  deserialize(value) {
    if (value == null || this.isDateInstance(value) && this.isValid(value)) {
      return value;
    }

    return this.invalid();
  }
  /**
   * Sets the locale used for all dates.
   * @param locale The new locale.
   */


  setLocale(locale) {
    this.locale = locale;

    this._localeChanges.next();
  }
  /**
   * Compares two dates.
   * @param first The first date to compare.
   * @param second The second date to compare.
   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
   *     a number greater than 0 if the first date is later.
   */


  compareDate(first, second) {
    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
  }
  /**
   * Checks if two dates are equal.
   * @param first The first date to check.
   * @param second The second date to check.
   * @returns Whether the two dates are equal.
   *     Null dates are considered equal to other null dates.
   */


  sameDate(first, second) {
    if (first && second) {
      let firstValid = this.isValid(first);
      let secondValid = this.isValid(second);

      if (firstValid && secondValid) {
        return !this.compareDate(first, second);
      }

      return firstValid == secondValid;
    }

    return first == second;
  }
  /**
   * Clamp the given date between min and max dates.
   * @param date The date to clamp.
   * @param min The minimum value to allow. If null or omitted no min is enforced.
   * @param max The maximum value to allow. If null or omitted no max is enforced.
   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
   *     otherwise `date`.
   */


  clampDate(date, min, max) {
    if (min && this.compareDate(date, min) < 0) {
      return min;
    }

    if (max && this.compareDate(date, max) > 0) {
      return max;
    }

    return date;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const MAT_DATE_FORMATS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-date-formats');
/**
 * Matches strings that have the form of a valid RFC 3339 string
 * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
 * because the regex will match strings an with out of bounds month, date, etc.
 */

const ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
/** Creates an array and fills it with values. */

function range(length, valueFunction) {
  const valuesArray = Array(length);

  for (let i = 0; i < length; i++) {
    valuesArray[i] = valueFunction(i);
  }

  return valuesArray;
}
/** Adapts the native JS Date for use with cdk-based components that work with dates. */


let NativeDateAdapter = /*#__PURE__*/(() => {
  class NativeDateAdapter extends DateAdapter {
    constructor(matDateLocale,
    /**
     * @deprecated No longer being used. To be removed.
     * @breaking-change 14.0.0
     */
    _platform) {
      super();
      /**
       * @deprecated No longer being used. To be removed.
       * @breaking-change 14.0.0
       */

      this.useUtcForDisplay = false;
      super.setLocale(matDateLocale);
    }

    getYear(date) {
      return date.getFullYear();
    }

    getMonth(date) {
      return date.getMonth();
    }

    getDate(date) {
      return date.getDate();
    }

    getDayOfWeek(date) {
      return date.getDay();
    }

    getMonthNames(style) {
      const dtf = new Intl.DateTimeFormat(this.locale, {
        month: style,
        timeZone: 'utc'
      });
      return range(12, i => this._format(dtf, new Date(2017, i, 1)));
    }

    getDateNames() {
      const dtf = new Intl.DateTimeFormat(this.locale, {
        day: 'numeric',
        timeZone: 'utc'
      });
      return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));
    }

    getDayOfWeekNames(style) {
      const dtf = new Intl.DateTimeFormat(this.locale, {
        weekday: style,
        timeZone: 'utc'
      });
      return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));
    }

    getYearName(date) {
      const dtf = new Intl.DateTimeFormat(this.locale, {
        year: 'numeric',
        timeZone: 'utc'
      });
      return this._format(dtf, date);
    }

    getFirstDayOfWeek() {
      // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
      return 0;
    }

    getNumDaysInMonth(date) {
      return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
    }

    clone(date) {
      return new Date(date.getTime());
    }

    createDate(year, month, date) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        // Check for invalid month and date (except upper bound on date which we have to check after
        // creating the Date).
        if (month < 0 || month > 11) {
          throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }

        if (date < 1) {
          throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
      }

      let result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow


      if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error(`Invalid date "${date}" for month with index "${month}".`);
      }

      return result;
    }

    today() {
      return new Date();
    }

    parse(value) {
      // We have no way using the native JS Date to set the parse format or locale, so we ignore these
      // parameters.
      if (typeof value == 'number') {
        return new Date(value);
      }

      return value ? new Date(Date.parse(value)) : null;
    }

    format(date, displayFormat) {
      if (!this.isValid(date)) {
        throw Error('NativeDateAdapter: Cannot format invalid date.');
      }

      const dtf = new Intl.DateTimeFormat(this.locale, Object.assign(Object.assign({}, displayFormat), {
        timeZone: 'utc'
      }));
      return this._format(dtf, date);
    }

    addCalendarYears(date, years) {
      return this.addCalendarMonths(date, years * 12);
    }

    addCalendarMonths(date, months) {
      let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new
      // month. In this case we want to go to the last day of the desired month.
      // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
      // guarantee this.


      if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
      }

      return newDate;
    }

    addCalendarDays(date, days) {
      return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
    }

    toIso8601(date) {
      return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
    }
    /**
     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
     * invalid date for all other values.
     */


    deserialize(value) {
      if (typeof value === 'string') {
        if (!value) {
          return null;
        } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
        // string is the right format first.


        if (ISO_8601_REGEX.test(value)) {
          let date = new Date(value);

          if (this.isValid(date)) {
            return date;
          }
        }
      }

      return super.deserialize(value);
    }

    isDateInstance(obj) {
      return obj instanceof Date;
    }

    isValid(date) {
      return !isNaN(date.getTime());
    }

    invalid() {
      return new Date(NaN);
    }
    /** Creates a date but allows the month and date to overflow. */


    _createDateWithOverflow(year, month, date) {
      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.
      // To work around this we use `setFullYear` and `setHours` instead.
      const d = new Date();
      d.setFullYear(year, month, date);
      d.setHours(0, 0, 0, 0);
      return d;
    }
    /**
     * Pads a number to make it two digits.
     * @param n The number to pad.
     * @returns The padded number.
     */


    _2digit(n) {
      return ('00' + n).slice(-2);
    }
    /**
     * When converting Date object to string, javascript built-in functions may return wrong
     * results because it applies its internal DST rules. The DST rules around the world change
     * very frequently, and the current valid rule is not always valid in previous years though.
     * We work around this problem building a new Date object which has its internal UTC
     * representation with the local date and time.
     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have
     *    timeZone set to 'utc' to work fine.
     * @param date Date from which we want to get the string representation according to dtf
     * @returns A Date object with its UTC representation based on the passed in date info
     */


    _format(dtf, date) {
      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.
      // To work around this we use `setUTCFullYear` and `setUTCHours` instead.
      const d = new Date();
      d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
      return dtf.format(d);
    }

  }

  NativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) {
    return new (t || NativeDateAdapter)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MAT_DATE_LOCALE, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
  };

  NativeDateAdapter.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: NativeDateAdapter,
    factory: NativeDateAdapter.ɵfac
  });
  return NativeDateAdapter;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const MAT_NATIVE_DATE_FORMATS = {
  parse: {
    dateInput: null
  },
  display: {
    dateInput: {
      year: 'numeric',
      month: 'numeric',
      day: 'numeric'
    },
    monthYearLabel: {
      year: 'numeric',
      month: 'short'
    },
    dateA11yLabel: {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    },
    monthYearA11yLabel: {
      year: 'numeric',
      month: 'long'
    }
  }
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let NativeDateModule = /*#__PURE__*/(() => {
  class NativeDateModule {}

  NativeDateModule.ɵfac = function NativeDateModule_Factory(t) {
    return new (t || NativeDateModule)();
  };

  NativeDateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: NativeDateModule
  });
  NativeDateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    providers: [{
      provide: DateAdapter,
      useClass: NativeDateAdapter
    }]
  });
  return NativeDateModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let MatNativeDateModule = /*#__PURE__*/(() => {
  class MatNativeDateModule {}

  MatNativeDateModule.ɵfac = function MatNativeDateModule_Factory(t) {
    return new (t || MatNativeDateModule)();
  };

  MatNativeDateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatNativeDateModule
  });
  MatNativeDateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    providers: [{
      provide: MAT_DATE_FORMATS,
      useValue: MAT_NATIVE_DATE_FORMATS
    }],
    imports: [[NativeDateModule]]
  });
  return MatNativeDateModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/** Error state matcher that matches when a control is invalid and dirty. */


let ShowOnDirtyErrorStateMatcher = /*#__PURE__*/(() => {
  class ShowOnDirtyErrorStateMatcher {
    isErrorState(control, form) {
      return !!(control && control.invalid && (control.dirty || form && form.submitted));
    }

  }

  ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) {
    return new (t || ShowOnDirtyErrorStateMatcher)();
  };

  ShowOnDirtyErrorStateMatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: ShowOnDirtyErrorStateMatcher,
    factory: ShowOnDirtyErrorStateMatcher.ɵfac
  });
  return ShowOnDirtyErrorStateMatcher;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** Provider that defines how form controls behave with regards to displaying error messages. */


let ErrorStateMatcher = /*#__PURE__*/(() => {
  class ErrorStateMatcher {
    isErrorState(control, form) {
      return !!(control && control.invalid && (control.touched || form && form.submitted));
    }

  }

  ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {
    return new (t || ErrorStateMatcher)();
  };

  ErrorStateMatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: ErrorStateMatcher,
    factory: ErrorStateMatcher.ɵfac,
    providedIn: 'root'
  });
  return ErrorStateMatcher;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Shared directive to count lines inside a text area, such as a list item.
 * Line elements can be extracted with a @ContentChildren(MatLine) query, then
 * counted by checking the query list's length.
 */


let MatLine = /*#__PURE__*/(() => {
  class MatLine {}

  MatLine.ɵfac = function MatLine_Factory(t) {
    return new (t || MatLine)();
  };

  MatLine.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: MatLine,
    selectors: [["", "mat-line", ""], ["", "matLine", ""]],
    hostAttrs: [1, "mat-line"]
  });
  return MatLine;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Helper that takes a query list of lines and sets the correct class on the host.
 * @docs-private
 */


function setLines(lines, element, prefix = 'mat') {
  // Note: doesn't need to unsubscribe, because `changes`
  // gets completed by Angular when the view is destroyed.
  lines.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.startWith)(lines)).subscribe(({
    length
  }) => {
    setClass(element, `${prefix}-2-line`, false);
    setClass(element, `${prefix}-3-line`, false);
    setClass(element, `${prefix}-multi-line`, false);

    if (length === 2 || length === 3) {
      setClass(element, `${prefix}-${length}-line`, true);
    } else if (length > 3) {
      setClass(element, `${prefix}-multi-line`, true);
    }
  });
}
/** Adds or removes a class from an element. */


function setClass(element, className, isAdd) {
  element.nativeElement.classList.toggle(className, isAdd);
}

let MatLineModule = /*#__PURE__*/(() => {
  class MatLineModule {}

  MatLineModule.ɵfac = function MatLineModule_Factory(t) {
    return new (t || MatLineModule)();
  };

  MatLineModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatLineModule
  });
  MatLineModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[MatCommonModule], MatCommonModule]
  });
  return MatLineModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Reference to a previously launched ripple element.
 */


class RippleRef {
  constructor(_renderer,
  /** Reference to the ripple HTML element. */
  element,
  /** Ripple configuration used for the ripple. */
  config) {
    this._renderer = _renderer;
    this.element = element;
    this.config = config;
    /** Current state of the ripple. */

    this.state = 3
    /* HIDDEN */
    ;
  }
  /** Fades out the ripple element. */


  fadeOut() {
    this._renderer.fadeOutRipple(this);
  }

} // TODO: import these values from `@material/ripple` eventually.

/**
 * Default ripple animation configuration for ripples without an explicit
 * animation config specified.
 */


const defaultRippleAnimationConfig = {
  enterDuration: 225,
  exitDuration: 150
};
/**
 * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
 * events to avoid synthetic mouse events.
 */

const ignoreMouseEventsTimeout = 800;
/** Options that apply to all the event listeners that are bound by the ripple renderer. */

const passiveEventOptions = /*#__PURE__*/(0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.normalizePassiveListenerOptions)({
  passive: true
});
/** Events that signal that the pointer is down. */

const pointerDownEvents = ['mousedown', 'touchstart'];
/** Events that signal that the pointer is up. */

const pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
/**
 * Helper service that performs DOM manipulations. Not intended to be used outside this module.
 * The constructor takes a reference to the ripple directive's host element and a map of DOM
 * event handlers to be installed on the element that triggers ripple animations.
 * This will eventually become a custom renderer once Angular support exists.
 * @docs-private
 */

class RippleRenderer {
  constructor(_target, _ngZone, elementOrElementRef, platform) {
    this._target = _target;
    this._ngZone = _ngZone;
    /** Whether the pointer is currently down or not. */

    this._isPointerDown = false;
    /** Set of currently active ripple references. */

    this._activeRipples = new Set();
    /** Whether pointer-up event listeners have been registered. */

    this._pointerUpEventsRegistered = false; // Only do anything if we're on the browser.

    if (platform.isBrowser) {
      this._containerElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceElement)(elementOrElementRef);
    }
  }
  /**
   * Fades in a ripple at the given coordinates.
   * @param x Coordinate within the element, along the X axis at which to start the ripple.
   * @param y Coordinate within the element, along the Y axis at which to start the ripple.
   * @param config Extra ripple options.
   */


  fadeInRipple(x, y, config = {}) {
    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();

    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);

    if (config.centered) {
      x = containerRect.left + containerRect.width / 2;
      y = containerRect.top + containerRect.height / 2;
    }

    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
    const offsetX = x - containerRect.left;
    const offsetY = y - containerRect.top;
    const duration = animationConfig.enterDuration;
    const ripple = document.createElement('div');
    ripple.classList.add('mat-ripple-element');
    ripple.style.left = `${offsetX - radius}px`;
    ripple.style.top = `${offsetY - radius}px`;
    ripple.style.height = `${radius * 2}px`;
    ripple.style.width = `${radius * 2}px`; // If a custom color has been specified, set it as inline style. If no color is
    // set, the default color will be applied through the ripple theme styles.

    if (config.color != null) {
      ripple.style.backgroundColor = config.color;
    }

    ripple.style.transitionDuration = `${duration}ms`;

    this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created
    // ripple elements. This is critical because then the `scale` would not animate properly.


    enforceStyleRecalculation(ripple);
    ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.

    const rippleRef = new RippleRef(this, ripple, config);
    rippleRef.state = 0
    /* FADING_IN */
    ; // Add the ripple reference to the list of all active ripples.

    this._activeRipples.add(rippleRef);

    if (!config.persistent) {
      this._mostRecentTransientRipple = rippleRef;
    } // Wait for the ripple element to be completely faded in.
    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.


    this._runTimeoutOutsideZone(() => {
      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;
      rippleRef.state = 1
      /* VISIBLE */
      ; // When the timer runs out while the user has kept their pointer down, we want to
      // keep only the persistent ripples and the latest transient ripple. We do this,
      // because we don't want stacked transient ripples to appear after their enter
      // animation has finished.

      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {
        rippleRef.fadeOut();
      }
    }, duration);

    return rippleRef;
  }
  /** Fades out a ripple reference. */


  fadeOutRipple(rippleRef) {
    const wasActive = this._activeRipples.delete(rippleRef);

    if (rippleRef === this._mostRecentTransientRipple) {
      this._mostRecentTransientRipple = null;
    } // Clear out the cached bounding rect if we have no more ripples.


    if (!this._activeRipples.size) {
      this._containerRect = null;
    } // For ripples that are not active anymore, don't re-run the fade-out animation.


    if (!wasActive) {
      return;
    }

    const rippleEl = rippleRef.element;
    const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);
    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;
    rippleEl.style.opacity = '0';
    rippleRef.state = 2
    /* FADING_OUT */
    ; // Once the ripple faded out, the ripple can be safely removed from the DOM.

    this._runTimeoutOutsideZone(() => {
      rippleRef.state = 3
      /* HIDDEN */
      ;
      rippleEl.remove();
    }, animationConfig.exitDuration);
  }
  /** Fades out all currently active ripples. */


  fadeOutAll() {
    this._activeRipples.forEach(ripple => ripple.fadeOut());
  }
  /** Fades out all currently active non-persistent ripples. */


  fadeOutAllNonPersistent() {
    this._activeRipples.forEach(ripple => {
      if (!ripple.config.persistent) {
        ripple.fadeOut();
      }
    });
  }
  /** Sets up the trigger event listeners */


  setupTriggerEvents(elementOrElementRef) {
    const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceElement)(elementOrElementRef);

    if (!element || element === this._triggerElement) {
      return;
    } // Remove all previously registered event listeners from the trigger element.


    this._removeTriggerEvents();

    this._triggerElement = element;

    this._registerEvents(pointerDownEvents);
  }
  /**
   * Handles all registered events.
   * @docs-private
   */


  handleEvent(event) {
    if (event.type === 'mousedown') {
      this._onMousedown(event);
    } else if (event.type === 'touchstart') {
      this._onTouchStart(event);
    } else {
      this._onPointerUp();
    } // If pointer-up events haven't been registered yet, do so now.
    // We do this on-demand in order to reduce the total number of event listeners
    // registered by the ripples, which speeds up the rendering time for large UIs.


    if (!this._pointerUpEventsRegistered) {
      this._registerEvents(pointerUpEvents);

      this._pointerUpEventsRegistered = true;
    }
  }
  /** Function being called whenever the trigger is being pressed using mouse. */


  _onMousedown(event) {
    // Screen readers will fire fake mouse events for space/enter. Skip launching a
    // ripple in this case for consistency with the non-screen-reader experience.
    const isFakeMousedown = (0,_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.isFakeMousedownFromScreenReader)(event);
    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;

    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
      this._isPointerDown = true;
      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
    }
  }
  /** Function being called whenever the trigger is being pressed using touch. */


  _onTouchStart(event) {
    if (!this._target.rippleDisabled && !(0,_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__.isFakeTouchstartFromScreenReader)(event)) {
      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
      // events will launch a second ripple if we don't ignore mouse events for a specific
      // time after a touchstart event.
      this._lastTouchStartEvent = Date.now();
      this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put
      // their finger down, but used another finger to tap the element again.

      const touches = event.changedTouches;

      for (let i = 0; i < touches.length; i++) {
        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
      }
    }
  }
  /** Function being called whenever the trigger is being released. */


  _onPointerUp() {
    if (!this._isPointerDown) {
      return;
    }

    this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.

    this._activeRipples.forEach(ripple => {
      // By default, only ripples that are completely visible will fade out on pointer release.
      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.
      const isVisible = ripple.state === 1
      /* VISIBLE */
      || ripple.config.terminateOnPointerUp && ripple.state === 0
      /* FADING_IN */
      ;

      if (!ripple.config.persistent && isVisible) {
        ripple.fadeOut();
      }
    });
  }
  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */


  _runTimeoutOutsideZone(fn, delay = 0) {
    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));
  }
  /** Registers event listeners for a given list of events. */


  _registerEvents(eventTypes) {
    this._ngZone.runOutsideAngular(() => {
      eventTypes.forEach(type => {
        this._triggerElement.addEventListener(type, this, passiveEventOptions);
      });
    });
  }
  /** Removes previously registered event listeners from the trigger element. */


  _removeTriggerEvents() {
    if (this._triggerElement) {
      pointerDownEvents.forEach(type => {
        this._triggerElement.removeEventListener(type, this, passiveEventOptions);
      });

      if (this._pointerUpEventsRegistered) {
        pointerUpEvents.forEach(type => {
          this._triggerElement.removeEventListener(type, this, passiveEventOptions);
        });
      }
    }
  }

}
/** Enforces a style recalculation of a DOM element by computing its styles. */


function enforceStyleRecalculation(element) {
  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
  window.getComputedStyle(element).getPropertyValue('opacity');
}
/**
 * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
 */


function distanceToFurthestCorner(x, y, rect) {
  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
  return Math.sqrt(distX * distX + distY * distY);
}
/** Injection token that can be used to specify the global ripple options. */


const MAT_RIPPLE_GLOBAL_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-ripple-global-options');
let MatRipple = /*#__PURE__*/(() => {
  class MatRipple {
    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {
      this._elementRef = _elementRef;
      this._animationMode = _animationMode;
      /**
       * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
       * will be the distance from the center of the ripple to the furthest corner of the host element's
       * bounding rectangle.
       */

      this.radius = 0;
      this._disabled = false;
      /** Whether ripple directive is initialized and the input bindings are set. */

      this._isInitialized = false;
      this._globalOptions = globalOptions || {};
      this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);
    }
    /**
     * Whether click events will not trigger the ripple. Ripples can be still launched manually
     * by using the `launch()` method.
     */


    get disabled() {
      return this._disabled;
    }

    set disabled(value) {
      if (value) {
        this.fadeOutAllNonPersistent();
      }

      this._disabled = value;

      this._setupTriggerEventsIfEnabled();
    }
    /**
     * The element that triggers the ripple when click events are received.
     * Defaults to the directive's host element.
     */


    get trigger() {
      return this._trigger || this._elementRef.nativeElement;
    }

    set trigger(trigger) {
      this._trigger = trigger;

      this._setupTriggerEventsIfEnabled();
    }

    ngOnInit() {
      this._isInitialized = true;

      this._setupTriggerEventsIfEnabled();
    }

    ngOnDestroy() {
      this._rippleRenderer._removeTriggerEvents();
    }
    /** Fades out all currently showing ripple elements. */


    fadeOutAll() {
      this._rippleRenderer.fadeOutAll();
    }
    /** Fades out all currently showing non-persistent ripple elements. */


    fadeOutAllNonPersistent() {
      this._rippleRenderer.fadeOutAllNonPersistent();
    }
    /**
     * Ripple configuration from the directive's input values.
     * @docs-private Implemented as part of RippleTarget
     */


    get rippleConfig() {
      return {
        centered: this.centered,
        radius: this.radius,
        color: this.color,
        animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), this._animationMode === 'NoopAnimations' ? {
          enterDuration: 0,
          exitDuration: 0
        } : {}), this.animation),
        terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
      };
    }
    /**
     * Whether ripples on pointer-down are disabled or not.
     * @docs-private Implemented as part of RippleTarget
     */


    get rippleDisabled() {
      return this.disabled || !!this._globalOptions.disabled;
    }
    /** Sets up the trigger event listeners if ripples are enabled. */


    _setupTriggerEventsIfEnabled() {
      if (!this.disabled && this._isInitialized) {
        this._rippleRenderer.setupTriggerEvents(this.trigger);
      }
    }
    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */


    launch(configOrX, y = 0, config) {
      if (typeof configOrX === 'number') {
        return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));
      } else {
        return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));
      }
    }

  }

  MatRipple.ɵfac = function MatRipple_Factory(t) {
    return new (t || MatRipple)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_RIPPLE_GLOBAL_OPTIONS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.ANIMATION_MODULE_TYPE, 8));
  };

  MatRipple.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: MatRipple,
    selectors: [["", "mat-ripple", ""], ["", "matRipple", ""]],
    hostAttrs: [1, "mat-ripple"],
    hostVars: 2,
    hostBindings: function MatRipple_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-ripple-unbounded", ctx.unbounded);
      }
    },
    inputs: {
      color: ["matRippleColor", "color"],
      unbounded: ["matRippleUnbounded", "unbounded"],
      centered: ["matRippleCentered", "centered"],
      radius: ["matRippleRadius", "radius"],
      animation: ["matRippleAnimation", "animation"],
      disabled: ["matRippleDisabled", "disabled"],
      trigger: ["matRippleTrigger", "trigger"]
    },
    exportAs: ["matRipple"]
  });
  return MatRipple;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let MatRippleModule = /*#__PURE__*/(() => {
  class MatRippleModule {}

  MatRippleModule.ɵfac = function MatRippleModule_Factory(t) {
    return new (t || MatRippleModule)();
  };

  MatRippleModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatRippleModule
  });
  MatRippleModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[MatCommonModule], MatCommonModule]
  });
  return MatRippleModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
 * Meant to be used when the checkbox is purely decorative and a large number of them will be
 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
 * Note that theming is meant to be handled by the parent element, e.g.
 * `mat-primary .mat-pseudo-checkbox`.
 *
 * Note that this component will be completely invisible to screen-reader users. This is *not*
 * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
 * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
 * of more complex components that appropriately handle selected / checked state.
 * @docs-private
 */


let MatPseudoCheckbox = /*#__PURE__*/(() => {
  class MatPseudoCheckbox {
    constructor(_animationMode) {
      this._animationMode = _animationMode;
      /** Display state of the checkbox. */

      this.state = 'unchecked';
      /** Whether the checkbox is disabled. */

      this.disabled = false;
    }

  }

  MatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) {
    return new (t || MatPseudoCheckbox)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.ANIMATION_MODULE_TYPE, 8));
  };

  MatPseudoCheckbox.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MatPseudoCheckbox,
    selectors: [["mat-pseudo-checkbox"]],
    hostAttrs: [1, "mat-pseudo-checkbox"],
    hostVars: 8,
    hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-pseudo-checkbox-indeterminate", ctx.state === "indeterminate")("mat-pseudo-checkbox-checked", ctx.state === "checked")("mat-pseudo-checkbox-disabled", ctx.disabled)("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
      }
    },
    inputs: {
      state: "state",
      disabled: "disabled"
    },
    decls: 0,
    vars: 0,
    template: function MatPseudoCheckbox_Template(rf, ctx) {},
    styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return MatPseudoCheckbox;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let MatPseudoCheckboxModule = /*#__PURE__*/(() => {
  class MatPseudoCheckboxModule {}

  MatPseudoCheckboxModule.ɵfac = function MatPseudoCheckboxModule_Factory(t) {
    return new (t || MatPseudoCheckboxModule)();
  };

  MatPseudoCheckboxModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatPseudoCheckboxModule
  });
  MatPseudoCheckboxModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[MatCommonModule]]
  });
  return MatPseudoCheckboxModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Injection token used to provide the parent component to options.
 */


const MAT_OPTION_PARENT_COMPONENT = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_OPTION_PARENT_COMPONENT');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Notes on the accessibility pattern used for `mat-optgroup`.
// The option group has two different "modes": regular and inert. The regular mode uses the
// recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete
// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
// VoiceOver on Safari won't read it out.
// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are
// removed from the group, and we get the screen reader to read out the group label by mirroring it
// inside an invisible element in the option. This is sub-optimal, because the screen reader will
// repeat the group label on each navigation, whereas the default pattern only reads the group when
// the user enters a new group. The following alternate approaches were considered:
// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
//    when the text will be read out so sometimes it comes in too late or never if the user
//    navigates quickly.
// 2. `<mat-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
//    won't read out the description at all.
// 3. `<mat-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
//     doesn't read out the text at all. Furthermore, on
// Boilerplate for applying mixins to MatOptgroup.

/** @docs-private */

const _MatOptgroupMixinBase = /*#__PURE__*/mixinDisabled(class {}); // Counter for unique group ids.


let _uniqueOptgroupIdCounter = 0;

let _MatOptgroupBase = /*#__PURE__*/(() => {
  class _MatOptgroupBase extends _MatOptgroupMixinBase {
    constructor(parent) {
      var _a;

      super();
      /** Unique id for the underlying label. */

      this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;
      this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;
    }

  }

  _MatOptgroupBase.ɵfac = function _MatOptgroupBase_Factory(t) {
    return new (t || _MatOptgroupBase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTION_PARENT_COMPONENT, 8));
  };

  _MatOptgroupBase.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: _MatOptgroupBase,
    inputs: {
      label: "label"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
  });
  return _MatOptgroupBase;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Injection token that can be used to reference instances of `MatOptgroup`. It serves as
 * alternative token to the actual `MatOptgroup` class which could cause unnecessary
 * retention of the class and its component metadata.
 */


const MAT_OPTGROUP = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MatOptgroup');
/**
 * Component that is used to group instances of `mat-option`.
 */

let MatOptgroup = /*#__PURE__*/(() => {
  class MatOptgroup extends _MatOptgroupBase {}

  MatOptgroup.ɵfac = /* @__PURE__ */function () {
    let ɵMatOptgroup_BaseFactory;
    return function MatOptgroup_Factory(t) {
      return (ɵMatOptgroup_BaseFactory || (ɵMatOptgroup_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatOptgroup)))(t || MatOptgroup);
    };
  }();

  MatOptgroup.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MatOptgroup,
    selectors: [["mat-optgroup"]],
    hostAttrs: [1, "mat-optgroup"],
    hostVars: 5,
    hostBindings: function MatOptgroup_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", ctx._inert ? null : "group")("aria-disabled", ctx._inert ? null : ctx.disabled.toString())("aria-labelledby", ctx._inert ? null : ctx._labelId);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-optgroup-disabled", ctx.disabled);
      }
    },
    inputs: {
      disabled: "disabled"
    },
    exportAs: ["matOptgroup"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
      provide: MAT_OPTGROUP,
      useExisting: MatOptgroup
    }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: _c1,
    decls: 4,
    vars: 2,
    consts: [["aria-hidden", "true", 1, "mat-optgroup-label", 3, "id"]],
    template: function MatOptgroup_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 1);
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx._labelId);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx.label, " ");
      }
    },
    styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return MatOptgroup;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */


let _uniqueIdCounter = 0;
/** Event object emitted by MatOption when selected or deselected. */

class MatOptionSelectionChange {
  constructor(
  /** Reference to the option that emitted the event. */
  source,
  /** Whether the change in the option's value was a result of a user action. */
  isUserInput = false) {
    this.source = source;
    this.isUserInput = isUserInput;
  }

}

let _MatOptionBase = /*#__PURE__*/(() => {
  class _MatOptionBase {
    constructor(_element, _changeDetectorRef, _parent, group) {
      this._element = _element;
      this._changeDetectorRef = _changeDetectorRef;
      this._parent = _parent;
      this.group = group;
      this._selected = false;
      this._active = false;
      this._disabled = false;
      this._mostRecentViewValue = '';
      /** The unique ID of the option. */

      this.id = `mat-option-${_uniqueIdCounter++}`;
      /** Event emitted when the option is selected or deselected. */
      // tslint:disable-next-line:no-output-on-prefix

      this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      /** Emits when the state of the option changes and any parents have to be notified. */

      this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();
    }
    /** Whether the wrapping component is in multiple selection mode. */


    get multiple() {
      return this._parent && this._parent.multiple;
    }
    /** Whether or not the option is currently selected. */


    get selected() {
      return this._selected;
    }
    /** Whether the option is disabled. */


    get disabled() {
      return this.group && this.group.disabled || this._disabled;
    }

    set disabled(value) {
      this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__.coerceBooleanProperty)(value);
    }
    /** Whether ripples for the option are disabled. */


    get disableRipple() {
      return !!(this._parent && this._parent.disableRipple);
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */


    get active() {
      return this._active;
    }
    /**
     * The displayed value of the option. It is necessary to show the selected option in the
     * select's trigger.
     */


    get viewValue() {
      // TODO(kara): Add input property alternative for node envs.
      return (this._getHostElement().textContent || '').trim();
    }
    /** Selects the option. */


    select() {
      if (!this._selected) {
        this._selected = true;

        this._changeDetectorRef.markForCheck();

        this._emitSelectionChangeEvent();
      }
    }
    /** Deselects the option. */


    deselect() {
      if (this._selected) {
        this._selected = false;

        this._changeDetectorRef.markForCheck();

        this._emitSelectionChangeEvent();
      }
    }
    /** Sets focus onto this option. */


    focus(_origin, options) {
      // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
      // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
      const element = this._getHostElement();

      if (typeof element.focus === 'function') {
        element.focus(options);
      }
    }
    /**
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */


    setActiveStyles() {
      if (!this._active) {
        this._active = true;

        this._changeDetectorRef.markForCheck();
      }
    }
    /**
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */


    setInactiveStyles() {
      if (this._active) {
        this._active = false;

        this._changeDetectorRef.markForCheck();
      }
    }
    /** Gets the label to be used when determining whether the option should be focused. */


    getLabel() {
      return this.viewValue;
    }
    /** Ensures the option is selected when activated from the keyboard. */


    _handleKeydown(event) {
      if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__.ENTER || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__.SPACE) && !(0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_11__.hasModifierKey)(event)) {
        this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.


        event.preventDefault();
      }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */


    _selectViaInteraction() {
      if (!this.disabled) {
        this._selected = this.multiple ? !this._selected : true;

        this._changeDetectorRef.markForCheck();

        this._emitSelectionChangeEvent(true);
      }
    }
    /**
     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
     * attribute from single-selection, unselected options. Including the `aria-selected="false"`
     * attributes adds a significant amount of noise to screen-reader users without providing useful
     * information.
     */


    _getAriaSelected() {
      return this.selected || (this.multiple ? false : null);
    }
    /** Returns the correct tabindex for the option depending on disabled state. */


    _getTabIndex() {
      return this.disabled ? '-1' : '0';
    }
    /** Gets the host DOM element. */


    _getHostElement() {
      return this._element.nativeElement;
    }

    ngAfterViewChecked() {
      // Since parent components could be using the option's label to display the selected values
      // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
      // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
      // relatively cheap, however we still limit them only to selected options in order to avoid
      // hitting the DOM too often.
      if (this._selected) {
        const viewValue = this.viewValue;

        if (viewValue !== this._mostRecentViewValue) {
          this._mostRecentViewValue = viewValue;

          this._stateChanges.next();
        }
      }
    }

    ngOnDestroy() {
      this._stateChanges.complete();
    }
    /** Emits the selection change event. */


    _emitSelectionChangeEvent(isUserInput = false) {
      this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
    }

  }

  _MatOptionBase.ɵfac = function _MatOptionBase_Factory(t) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinvalidFactory"]();
  };

  _MatOptionBase.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: _MatOptionBase,
    inputs: {
      value: "value",
      id: "id",
      disabled: "disabled"
    },
    outputs: {
      onSelectionChange: "onSelectionChange"
    }
  });
  return _MatOptionBase;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Single option inside of a `<mat-select>` element.
 */


let MatOption = /*#__PURE__*/(() => {
  class MatOption extends _MatOptionBase {
    constructor(element, changeDetectorRef, parent, group) {
      super(element, changeDetectorRef, parent, group);
    }

  }

  MatOption.ɵfac = function MatOption_Factory(t) {
    return new (t || MatOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTION_PARENT_COMPONENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_OPTGROUP, 8));
  };

  MatOption.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MatOption,
    selectors: [["mat-option"]],
    hostAttrs: ["role", "option", 1, "mat-option", "mat-focus-indicator"],
    hostVars: 12,
    hostBindings: function MatOption_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MatOption_click_HostBindingHandler() {
          return ctx._selectViaInteraction();
        })("keydown", function MatOption_keydown_HostBindingHandler($event) {
          return ctx._handleKeydown($event);
        });
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("id", ctx.id);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx._getTabIndex())("aria-selected", ctx._getAriaSelected())("aria-disabled", ctx.disabled.toString());
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-selected", ctx.selected)("mat-option-multiple", ctx.multiple)("mat-active", ctx.active)("mat-option-disabled", ctx.disabled);
      }
    },
    exportAs: ["matOption"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: _c2,
    decls: 5,
    vars: 4,
    consts: [["class", "mat-option-pseudo-checkbox", 3, "state", "disabled", 4, "ngIf"], [1, "mat-option-text"], ["class", "cdk-visually-hidden", 4, "ngIf"], ["mat-ripple", "", 1, "mat-option-ripple", 3, "matRippleTrigger", "matRippleDisabled"], [1, "mat-option-pseudo-checkbox", 3, "state", "disabled"], [1, "cdk-visually-hidden"]],
    template: function MatOption_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, "mat-pseudo-checkbox", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, MatOption_span_3_Template, 2, 1, "span", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 3);
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.multiple);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.group && ctx.group._inert);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matRippleTrigger", ctx._getHostElement())("matRippleDisabled", ctx.disabled || ctx.disableRipple);
      }
    },
    directives: [MatPseudoCheckbox, _angular_common__WEBPACK_IMPORTED_MODULE_3__.NgIf, MatRipple],
    styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return MatOption;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Counts the amount of option group labels that precede the specified option.
 * @param optionIndex Index of the option at which to start counting.
 * @param options Flat list of all of the options.
 * @param optionGroups Flat list of all of the option groups.
 * @docs-private
 */


function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
  if (optionGroups.length) {
    let optionsArray = options.toArray();
    let groups = optionGroups.toArray();
    let groupCounter = 0;

    for (let i = 0; i < optionIndex + 1; i++) {
      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
        groupCounter++;
      }
    }

    return groupCounter;
  }

  return 0;
}
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionOffset Offset of the option from the top of the panel.
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */


function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
  if (optionOffset < currentScrollPosition) {
    return optionOffset;
  }

  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
    return Math.max(0, optionOffset - panelHeight + optionHeight);
  }

  return currentScrollPosition;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let MatOptionModule = /*#__PURE__*/(() => {
  class MatOptionModule {}

  MatOptionModule.ɵfac = function MatOptionModule_Factory(t) {
    return new (t || MatOptionModule)();
  };

  MatOptionModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatOptionModule
  });
  MatOptionModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, MatCommonModule, MatPseudoCheckboxModule]]
  });
  return MatOptionModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=core.mjs.map

/***/ }),

/***/ 5245:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/material/fesm2015/icon.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ICON_REGISTRY_PROVIDER": () => (/* binding */ ICON_REGISTRY_PROVIDER),
/* harmony export */   "ICON_REGISTRY_PROVIDER_FACTORY": () => (/* binding */ ICON_REGISTRY_PROVIDER_FACTORY),
/* harmony export */   "MAT_ICON_LOCATION": () => (/* binding */ MAT_ICON_LOCATION),
/* harmony export */   "MAT_ICON_LOCATION_FACTORY": () => (/* binding */ MAT_ICON_LOCATION_FACTORY),
/* harmony export */   "MatIcon": () => (/* binding */ MatIcon),
/* harmony export */   "MatIconModule": () => (/* binding */ MatIconModule),
/* harmony export */   "MatIconRegistry": () => (/* binding */ MatIconRegistry),
/* harmony export */   "getMatIconFailedToSanitizeLiteralError": () => (/* binding */ getMatIconFailedToSanitizeLiteralError),
/* harmony export */   "getMatIconFailedToSanitizeUrlError": () => (/* binding */ getMatIconFailedToSanitizeUrlError),
/* harmony export */   "getMatIconNameNotFoundError": () => (/* binding */ getMatIconNameNotFoundError),
/* harmony export */   "getMatIconNoHttpProviderError": () => (/* binding */ getMatIconNoHttpProviderError)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/core */ 1729);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/cdk/coercion */ 3191);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 9646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 2843);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 4128);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 6921);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 8505);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 4004);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 262);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 8746);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 3099);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 5698);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common/http */ 520);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser */ 2313);











/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */

const _c0 = ["*"];
let policy;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */

function getPolicy() {
  if (policy === undefined) {
    policy = null;

    if (typeof window !== 'undefined') {
      const ttWindow = window;

      if (ttWindow.trustedTypes !== undefined) {
        policy = ttWindow.trustedTypes.createPolicy('angular#components', {
          createHTML: s => s
        });
      }
    }
  }

  return policy;
}
/**
 * Unsafely promote a string to a TrustedHTML, falling back to strings when
 * Trusted Types are not available.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that the
 * provided string will never cause an XSS vulnerability if used in a context
 * that will be interpreted as HTML by a browser, e.g. when assigning to
 * element.innerHTML.
 */


function trustedHTMLFromString(html) {
  var _a;

  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Returns an exception to be thrown in the case when attempting to
 * load an icon with a name that cannot be found.
 * @docs-private
 */


function getMatIconNameNotFoundError(iconName) {
  return Error(`Unable to find icon with the name "${iconName}"`);
}
/**
 * Returns an exception to be thrown when the consumer attempts to use
 * `<mat-icon>` without including @angular/common/http.
 * @docs-private
 */


function getMatIconNoHttpProviderError() {
  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');
}
/**
 * Returns an exception to be thrown when a URL couldn't be sanitized.
 * @param url URL that was attempted to be sanitized.
 * @docs-private
 */


function getMatIconFailedToSanitizeUrlError(url) {
  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was "${url}".`);
}
/**
 * Returns an exception to be thrown when a HTML string couldn't be sanitized.
 * @param literal HTML that was attempted to be sanitized.
 * @docs-private
 */


function getMatIconFailedToSanitizeLiteralError(literal) {
  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was "${literal}".`);
}
/**
 * Configuration for an icon, including the URL and possibly the cached SVG element.
 * @docs-private
 */


class SvgIconConfig {
  constructor(url, svgText, options) {
    this.url = url;
    this.svgText = svgText;
    this.options = options;
  }

}
/**
 * Service to register and display icons used by the `<mat-icon>` component.
 * - Registers icon URLs by namespace and name.
 * - Registers icon set URLs by namespace.
 * - Registers aliases for CSS classes, for use with icon fonts.
 * - Loads icons from URLs and extracts individual icons from icon sets.
 */


let MatIconRegistry = /*#__PURE__*/(() => {
  class MatIconRegistry {
    constructor(_httpClient, _sanitizer, document, _errorHandler) {
      this._httpClient = _httpClient;
      this._sanitizer = _sanitizer;
      this._errorHandler = _errorHandler;
      /**
       * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
       */

      this._svgIconConfigs = new Map();
      /**
       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
       * Multiple icon sets can be registered under the same namespace.
       */

      this._iconSetConfigs = new Map();
      /** Cache for icons loaded by direct URLs. */

      this._cachedIconsByUrl = new Map();
      /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */

      this._inProgressUrlFetches = new Map();
      /** Map from font identifiers to their CSS class names. Used for icon fonts. */

      this._fontCssClassesByAlias = new Map();
      /** Registered icon resolver functions. */

      this._resolvers = [];
      /**
       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.
       * The default 'material-icons' value assumes that the material icon font has been loaded as
       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
       */

      this._defaultFontSetClass = 'material-icons';
      this._document = document;
    }
    /**
     * Registers an icon by URL in the default namespace.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */


    addSvgIcon(iconName, url, options) {
      return this.addSvgIconInNamespace('', iconName, url, options);
    }
    /**
     * Registers an icon using an HTML string in the default namespace.
     * @param iconName Name under which the icon should be registered.
     * @param literal SVG source of the icon.
     */


    addSvgIconLiteral(iconName, literal, options) {
      return this.addSvgIconLiteralInNamespace('', iconName, literal, options);
    }
    /**
     * Registers an icon by URL in the specified namespace.
     * @param namespace Namespace in which the icon should be registered.
     * @param iconName Name under which the icon should be registered.
     * @param url
     */


    addSvgIconInNamespace(namespace, iconName, url, options) {
      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));
    }
    /**
     * Registers an icon resolver function with the registry. The function will be invoked with the
     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch
     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,
     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers
     * will be invoked in the order in which they have been registered.
     * @param resolver Resolver function to be registered.
     */


    addSvgIconResolver(resolver) {
      this._resolvers.push(resolver);

      return this;
    }
    /**
     * Registers an icon using an HTML string in the specified namespace.
     * @param namespace Namespace in which the icon should be registered.
     * @param iconName Name under which the icon should be registered.
     * @param literal SVG source of the icon.
     */


    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {
      const cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, literal); // TODO: add an ngDevMode check


      if (!cleanLiteral) {
        throw getMatIconFailedToSanitizeLiteralError(literal);
      } // Security: The literal is passed in as SafeHtml, and is thus trusted.


      const trustedLiteral = trustedHTMLFromString(cleanLiteral);
      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));
    }
    /**
     * Registers an icon set by URL in the default namespace.
     * @param url
     */


    addSvgIconSet(url, options) {
      return this.addSvgIconSetInNamespace('', url, options);
    }
    /**
     * Registers an icon set using an HTML string in the default namespace.
     * @param literal SVG source of the icon set.
     */


    addSvgIconSetLiteral(literal, options) {
      return this.addSvgIconSetLiteralInNamespace('', literal, options);
    }
    /**
     * Registers an icon set by URL in the specified namespace.
     * @param namespace Namespace in which to register the icon set.
     * @param url
     */


    addSvgIconSetInNamespace(namespace, url, options) {
      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));
    }
    /**
     * Registers an icon set using an HTML string in the specified namespace.
     * @param namespace Namespace in which to register the icon set.
     * @param literal SVG source of the icon set.
     */


    addSvgIconSetLiteralInNamespace(namespace, literal, options) {
      const cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, literal);

      if (!cleanLiteral) {
        throw getMatIconFailedToSanitizeLiteralError(literal);
      } // Security: The literal is passed in as SafeHtml, and is thus trusted.


      const trustedLiteral = trustedHTMLFromString(cleanLiteral);
      return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));
    }
    /**
     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon
     * component with the alias as the fontSet input will cause the class name to be applied
     * to the `<mat-icon>` element.
     *
     * @param alias Alias for the font.
     * @param className Class name override to be used instead of the alias.
     */


    registerFontClassAlias(alias, className = alias) {
      this._fontCssClassesByAlias.set(alias, className);

      return this;
    }
    /**
     * Returns the CSS class name associated with the alias by a previous call to
     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
     */


    classNameForFontAlias(alias) {
      return this._fontCssClassesByAlias.get(alias) || alias;
    }
    /**
     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
     * have a fontSet input value, and is not loading an icon by name or URL.
     *
     * @param className
     */


    setDefaultFontSetClass(className) {
      this._defaultFontSetClass = className;
      return this;
    }
    /**
     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
     * have a fontSet input value, and is not loading an icon by name or URL.
     */


    getDefaultFontSetClass() {
      return this._defaultFontSetClass;
    }
    /**
     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.
     * The response from the URL may be cached so this will not always cause an HTTP request, but
     * the produced element will always be a new copy of the originally fetched icon. (That is,
     * it will not contain any modifications made to elements previously returned).
     *
     * @param safeUrl URL from which to fetch the SVG icon.
     */


    getSvgIconFromUrl(safeUrl) {
      const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, safeUrl);

      if (!url) {
        throw getMatIconFailedToSanitizeUrlError(safeUrl);
      }

      const cachedIcon = this._cachedIconsByUrl.get(url);

      if (cachedIcon) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(cloneSvg(cachedIcon));
      }

      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(svg => this._cachedIconsByUrl.set(url, svg)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(svg => cloneSvg(svg)));
    }
    /**
     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name
     * and namespace. The icon must have been previously registered with addIcon or addIconSet;
     * if not, the Observable will throw an error.
     *
     * @param name Name of the icon to be retrieved.
     * @param namespace Namespace in which to look for the icon.
     */


    getNamedSvgIcon(name, namespace = '') {
      const key = iconKey(namespace, name);

      let config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.


      if (config) {
        return this._getSvgFromConfig(config);
      } // Otherwise try to resolve the config from one of the resolver functions.


      config = this._getIconConfigFromResolvers(namespace, name);

      if (config) {
        this._svgIconConfigs.set(key, config);

        return this._getSvgFromConfig(config);
      } // See if we have any icon sets registered for the namespace.


      const iconSetConfigs = this._iconSetConfigs.get(namespace);

      if (iconSetConfigs) {
        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.throwError)(getMatIconNameNotFoundError(key));
    }

    ngOnDestroy() {
      this._resolvers = [];

      this._svgIconConfigs.clear();

      this._iconSetConfigs.clear();

      this._cachedIconsByUrl.clear();
    }
    /**
     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
     */


    _getSvgFromConfig(config) {
      if (config.svgText) {
        // We already have the SVG element for this icon, return a copy.
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(cloneSvg(this._svgElementFromConfig(config)));
      } else {
        // Fetch the icon from the config's URL, cache it, and return a copy.
        return this._loadSvgIconFromConfig(config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(svg => cloneSvg(svg)));
      }
    }
    /**
     * Attempts to find an icon with the specified name in any of the SVG icon sets.
     * First searches the available cached icons for a nested element with a matching name, and
     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets
     * that have not been cached, and searches again after all fetches are completed.
     * The returned Observable produces the SVG element if possible, and throws
     * an error if no icon with the specified name can be found.
     */


    _getSvgFromIconSetConfigs(name, iconSetConfigs) {
      // For all the icon set SVG elements we've fetched, see if any contain an icon with the
      // requested name.
      const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);

      if (namedIcon) {
        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
        // time anyway, there's probably not much advantage compared to just always extracting
        // it from the icon set.
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(namedIcon);
      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
      // fetched, fetch them now and look for iconName in the results.


      const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgText).map(iconSetConfig => {
        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(err => {
          const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the
          // combined Observable won't necessarily fail.


          const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;

          this._errorHandler.handleError(new Error(errorMessage));

          return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(null);
        }));
      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
      // cached SVG element (unless the request failed), and we can check again for the icon.

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.forkJoin)(iconSetFetchRequests).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
        const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check


        if (!foundIcon) {
          throw getMatIconNameNotFoundError(name);
        }

        return foundIcon;
      }));
    }
    /**
     * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
     * tag matches the specified name. If found, copies the nested element to a new SVG element and
     * returns it. Returns null if no matching element is found.
     */


    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {
      // Iterate backwards, so icon sets added later have precedence.
      for (let i = iconSetConfigs.length - 1; i >= 0; i--) {
        const config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of
        // the parsing by doing a quick check using `indexOf` to see if there's any chance for the
        // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least
        // some of the parsing.

        if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {
          const svg = this._svgElementFromConfig(config);

          const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);

          if (foundIcon) {
            return foundIcon;
          }
        }
      }

      return null;
    }
    /**
     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
     * from it.
     */


    _loadSvgIconFromConfig(config) {
      return this._fetchIcon(config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(svgText => config.svgText = svgText), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => this._svgElementFromConfig(config)));
    }
    /**
     * Loads the content of the icon set URL specified in the
     * SvgIconConfig and attaches it to the config.
     */


    _loadSvgIconSetFromConfig(config) {
      if (config.svgText) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.of)(null);
      }

      return this._fetchIcon(config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.tap)(svgText => config.svgText = svgText));
    }
    /**
     * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
     * tag matches the specified name. If found, copies the nested element to a new SVG element and
     * returns it. Returns null if no matching element is found.
     */


    _extractSvgIconFromSet(iconSet, iconName, options) {
      // Use the `id="iconName"` syntax in order to escape special
      // characters in the ID (versus using the #iconName syntax).
      const iconSource = iconSet.querySelector(`[id="${iconName}"]`);

      if (!iconSource) {
        return null;
      } // Clone the element and remove the ID to prevent multiple elements from being added
      // to the page with the same ID.


      const iconElement = iconSource.cloneNode(true);
      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
      // the content of a new <svg> node.

      if (iconElement.nodeName.toLowerCase() === 'svg') {
        return this._setSvgAttributes(iconElement, options);
      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note
      // that the same could be achieved by referring to it via <use href="#id">, however the <use>
      // tag is problematic on Firefox, because it needs to include the current page path.


      if (iconElement.nodeName.toLowerCase() === 'symbol') {
        return this._setSvgAttributes(this._toSvgElement(iconElement), options);
      } // createElement('SVG') doesn't work as expected; the DOM ends up with
      // the correct nodes, but the SVG content doesn't render. Instead we
      // have to create an empty SVG node using innerHTML and append its content.
      // Elements created using DOMParser.parseFromString have the same problem.
      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display


      const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>')); // Clone the node so we don't remove it from the parent icon set element.


      svg.appendChild(iconElement);
      return this._setSvgAttributes(svg, options);
    }
    /**
     * Creates a DOM element from the given SVG string.
     */


    _svgElementFromString(str) {
      const div = this._document.createElement('DIV');

      div.innerHTML = str;
      const svg = div.querySelector('svg'); // TODO: add an ngDevMode check

      if (!svg) {
        throw Error('<svg> tag not found');
      }

      return svg;
    }
    /**
     * Converts an element into an SVG node by cloning all of its children.
     */


    _toSvgElement(element) {
      const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));

      const attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.

      for (let i = 0; i < attributes.length; i++) {
        const {
          name,
          value
        } = attributes[i];

        if (name !== 'id') {
          svg.setAttribute(name, value);
        }
      }

      for (let i = 0; i < element.childNodes.length; i++) {
        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {
          svg.appendChild(element.childNodes[i].cloneNode(true));
        }
      }

      return svg;
    }
    /**
     * Sets the default attributes for an SVG element to be used as an icon.
     */


    _setSvgAttributes(svg, options) {
      svg.setAttribute('fit', '');
      svg.setAttribute('height', '100%');
      svg.setAttribute('width', '100%');
      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.

      if (options && options.viewBox) {
        svg.setAttribute('viewBox', options.viewBox);
      }

      return svg;
    }
    /**
     * Returns an Observable which produces the string contents of the given icon. Results may be
     * cached, so future calls with the same URL may not cause another HTTP request.
     */


    _fetchIcon(iconConfig) {
      var _a;

      const {
        url: safeUrl,
        options
      } = iconConfig;
      const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;

      if (!this._httpClient) {
        throw getMatIconNoHttpProviderError();
      } // TODO: add an ngDevMode check


      if (safeUrl == null) {
        throw Error(`Cannot fetch icon from URL "${safeUrl}".`);
      }

      const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check


      if (!url) {
        throw getMatIconFailedToSanitizeUrlError(safeUrl);
      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
      // already a request in progress for that URL. It's necessary to call share() on the
      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.


      const inProgressFetch = this._inProgressUrlFetches.get(url);

      if (inProgressFetch) {
        return inProgressFetch;
      }

      const req = this._httpClient.get(url, {
        responseType: 'text',
        withCredentials
      }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(svg => {
        // Security: This SVG is fetched from a SafeResourceUrl, and is thus
        // trusted HTML.
        return trustedHTMLFromString(svg);
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.finalize)(() => this._inProgressUrlFetches.delete(url)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.share)());

      this._inProgressUrlFetches.set(url, req);

      return req;
    }
    /**
     * Registers an icon config by name in the specified namespace.
     * @param namespace Namespace in which to register the icon config.
     * @param iconName Name under which to register the config.
     * @param config Config to be registered.
     */


    _addSvgIconConfig(namespace, iconName, config) {
      this._svgIconConfigs.set(iconKey(namespace, iconName), config);

      return this;
    }
    /**
     * Registers an icon set config in the specified namespace.
     * @param namespace Namespace in which to register the icon config.
     * @param config Config to be registered.
     */


    _addSvgIconSetConfig(namespace, config) {
      const configNamespace = this._iconSetConfigs.get(namespace);

      if (configNamespace) {
        configNamespace.push(config);
      } else {
        this._iconSetConfigs.set(namespace, [config]);
      }

      return this;
    }
    /** Parses a config's text into an SVG element. */


    _svgElementFromConfig(config) {
      if (!config.svgElement) {
        const svg = this._svgElementFromString(config.svgText);

        this._setSvgAttributes(svg, config.options);

        config.svgElement = svg;
      }

      return config.svgElement;
    }
    /** Tries to create an icon config through the registered resolver functions. */


    _getIconConfigFromResolvers(namespace, name) {
      for (let i = 0; i < this._resolvers.length; i++) {
        const result = this._resolvers[i](name, namespace);

        if (result) {
          return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);
        }
      }

      return undefined;
    }

  }

  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {
    return new (t || MatIconRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClient, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__.DomSanitizer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler));
  };

  MatIconRegistry.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: MatIconRegistry,
    factory: MatIconRegistry.ɵfac,
    providedIn: 'root'
  });
  return MatIconRegistry;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/** @docs-private */


function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {
  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);
}
/** @docs-private */


const ICON_REGISTRY_PROVIDER = {
  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.
  provide: MatIconRegistry,
  deps: [[/*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), MatIconRegistry], [/*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClient], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__.DomSanitizer, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler, [/*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]],
  useFactory: ICON_REGISTRY_PROVIDER_FACTORY
};
/** Clones an SVGElement while preserving type information. */

function cloneSvg(svg) {
  return svg.cloneNode(true);
}
/** Returns the cache key to use for an icon namespace and name. */


function iconKey(namespace, name) {
  return namespace + ':' + name;
}

function isSafeUrlWithOptions(value) {
  return !!(value.url && value.options);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Boilerplate for applying mixins to MatIcon.

/** @docs-private */


const _MatIconBase = /*#__PURE__*/(0,_angular_material_core__WEBPACK_IMPORTED_MODULE_12__.mixinColor)(class {
  constructor(_elementRef) {
    this._elementRef = _elementRef;
  }

});
/**
 * Injection token used to provide the current location to `MatIcon`.
 * Used to handle server-side rendering and to stub out during unit tests.
 * @docs-private
 */


const MAT_ICON_LOCATION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('mat-icon-location', {
  providedIn: 'root',
  factory: MAT_ICON_LOCATION_FACTORY
});
/** @docs-private */

function MAT_ICON_LOCATION_FACTORY() {
  const _document = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT);

  const _location = _document ? _document.location : null;

  return {
    // Note that this needs to be a function, rather than a property, because Angular
    // will only resolve it once, but we want the current path on each call.
    getPathname: () => _location ? _location.pathname + _location.search : ''
  };
}
/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */


const funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];
/** Selector that can be used to find all elements that are using a `FuncIRI`. */

const funcIriAttributeSelector = /*#__PURE__*/ /*#__PURE__*/funcIriAttributes.map(attr => `[${attr}]`).join(', ');
/** Regex that can be used to extract the id out of a FuncIRI. */

const funcIriPattern = /^url\(['"]?#(.*?)['"]?\)$/;
/**
 * Component to display an icon. It can be used in the following ways:
 *
 * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
 *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
 *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
 *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
 *   Examples:
 *     `<mat-icon svgIcon="left-arrow"></mat-icon>
 *     <mat-icon svgIcon="animals:cat"></mat-icon>`
 *
 * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`
 *   component. By default the Material icons font is used as described at
 *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
 *   alternate font by setting the fontSet input to either the CSS class to apply to use the
 *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.
 *   Examples:
 *     `<mat-icon>home</mat-icon>
 *     <mat-icon fontSet="myfont">sun</mat-icon>`
 *
 * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
 *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
 *   CSS class which causes the glyph to be displayed via a :before selector, as in
 *   https://fortawesome.github.io/Font-Awesome/examples/
 *   Example:
 *     `<mat-icon fontSet="fa" fontIcon="alarm"></mat-icon>`
 */

let MatIcon = /*#__PURE__*/(() => {
  class MatIcon extends _MatIconBase {
    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {
      super(elementRef);
      this._iconRegistry = _iconRegistry;
      this._location = _location;
      this._errorHandler = _errorHandler;
      this._inline = false;
      /** Subscription to the current in-progress SVG icon request. */

      this._currentIconFetch = rxjs__WEBPACK_IMPORTED_MODULE_13__.Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is
      // the right thing to do for the majority of icon use-cases.

      if (!ariaHidden) {
        elementRef.nativeElement.setAttribute('aria-hidden', 'true');
      }
    }
    /**
     * Whether the icon should be inlined, automatically sizing the icon to match the font size of
     * the element the icon is contained in.
     */


    get inline() {
      return this._inline;
    }

    set inline(inline) {
      this._inline = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(inline);
    }
    /** Name of the icon in the SVG icon set. */


    get svgIcon() {
      return this._svgIcon;
    }

    set svgIcon(value) {
      if (value !== this._svgIcon) {
        if (value) {
          this._updateSvgIcon(value);
        } else if (this._svgIcon) {
          this._clearSvgElement();
        }

        this._svgIcon = value;
      }
    }
    /** Font set that the icon is a part of. */


    get fontSet() {
      return this._fontSet;
    }

    set fontSet(value) {
      const newValue = this._cleanupFontValue(value);

      if (newValue !== this._fontSet) {
        this._fontSet = newValue;

        this._updateFontIconClasses();
      }
    }
    /** Name of an icon within a font set. */


    get fontIcon() {
      return this._fontIcon;
    }

    set fontIcon(value) {
      const newValue = this._cleanupFontValue(value);

      if (newValue !== this._fontIcon) {
        this._fontIcon = newValue;

        this._updateFontIconClasses();
      }
    }
    /**
     * Splits an svgIcon binding value into its icon set and icon name components.
     * Returns a 2-element array of [(icon set), (icon name)].
     * The separator for the two fields is ':'. If there is no separator, an empty
     * string is returned for the icon set and the entire value is returned for
     * the icon name. If the argument is falsy, returns an array of two empty strings.
     * Throws an error if the name contains two or more ':' separators.
     * Examples:
     *   `'social:cake' -> ['social', 'cake']
     *   'penguin' -> ['', 'penguin']
     *   null -> ['', '']
     *   'a:b:c' -> (throws Error)`
     */


    _splitIconName(iconName) {
      if (!iconName) {
        return ['', ''];
      }

      const parts = iconName.split(':');

      switch (parts.length) {
        case 1:
          return ['', parts[0]];
        // Use default namespace.

        case 2:
          return parts;

        default:
          throw Error(`Invalid icon name: "${iconName}"`);
        // TODO: add an ngDevMode check
      }
    }

    ngOnInit() {
      // Update font classes because ngOnChanges won't be called if none of the inputs are present,
      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.
      this._updateFontIconClasses();
    }

    ngAfterViewChecked() {
      const cachedElements = this._elementsWithExternalReferences;

      if (cachedElements && cachedElements.size) {
        const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since
        // the browser doesn't have an API that will let us react on link clicks and
        // we can't depend on the Angular router. The references need to be updated,
        // because while most browsers don't care whether the URL is correct after
        // the first render, Safari will break if the user navigates to a different
        // page and the SVG isn't re-rendered.


        if (newPath !== this._previousPath) {
          this._previousPath = newPath;

          this._prependPathToReferences(newPath);
        }
      }
    }

    ngOnDestroy() {
      this._currentIconFetch.unsubscribe();

      if (this._elementsWithExternalReferences) {
        this._elementsWithExternalReferences.clear();
      }
    }

    _usingFontIcon() {
      return !this.svgIcon;
    }

    _setSvgElement(svg) {
      this._clearSvgElement(); // Note: we do this fix here, rather than the icon registry, because the
      // references have to point to the URL at the time that the icon was created.


      const path = this._location.getPathname();

      this._previousPath = path;

      this._cacheChildrenWithExternalReferences(svg);

      this._prependPathToReferences(path);

      this._elementRef.nativeElement.appendChild(svg);
    }

    _clearSvgElement() {
      const layoutElement = this._elementRef.nativeElement;
      let childCount = layoutElement.childNodes.length;

      if (this._elementsWithExternalReferences) {
        this._elementsWithExternalReferences.clear();
      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
      // we can't use innerHTML, because IE will throw if the element has a data binding.


      while (childCount--) {
        const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.

        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
          child.remove();
        }
      }
    }

    _updateFontIconClasses() {
      if (!this._usingFontIcon()) {
        return;
      }

      const elem = this._elementRef.nativeElement;
      const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();

      if (fontSetClass != this._previousFontSetClass) {
        if (this._previousFontSetClass) {
          elem.classList.remove(this._previousFontSetClass);
        }

        if (fontSetClass) {
          elem.classList.add(fontSetClass);
        }

        this._previousFontSetClass = fontSetClass;
      }

      if (this.fontIcon != this._previousFontIconClass) {
        if (this._previousFontIconClass) {
          elem.classList.remove(this._previousFontIconClass);
        }

        if (this.fontIcon) {
          elem.classList.add(this.fontIcon);
        }

        this._previousFontIconClass = this.fontIcon;
      }
    }
    /**
     * Cleans up a value to be used as a fontIcon or fontSet.
     * Since the value ends up being assigned as a CSS class, we
     * have to trim the value and omit space-separated values.
     */


    _cleanupFontValue(value) {
      return typeof value === 'string' ? value.trim().split(' ')[0] : value;
    }
    /**
     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`
     * reference. This is required because WebKit browsers require references to be prefixed with
     * the current path, if the page has a `base` tag.
     */


    _prependPathToReferences(path) {
      const elements = this._elementsWithExternalReferences;

      if (elements) {
        elements.forEach((attrs, element) => {
          attrs.forEach(attr => {
            element.setAttribute(attr.name, `url('${path}#${attr.value}')`);
          });
        });
      }
    }
    /**
     * Caches the children of an SVG element that have `url()`
     * references that we need to prefix with the current path.
     */


    _cacheChildrenWithExternalReferences(element) {
      const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);
      const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();

      for (let i = 0; i < elementsWithFuncIri.length; i++) {
        funcIriAttributes.forEach(attr => {
          const elementWithReference = elementsWithFuncIri[i];
          const value = elementWithReference.getAttribute(attr);
          const match = value ? value.match(funcIriPattern) : null;

          if (match) {
            let attributes = elements.get(elementWithReference);

            if (!attributes) {
              attributes = [];
              elements.set(elementWithReference, attributes);
            }

            attributes.push({
              name: attr,
              value: match[1]
            });
          }
        });
      }
    }
    /** Sets a new SVG icon with a particular name. */


    _updateSvgIcon(rawName) {
      this._svgNamespace = null;
      this._svgName = null;

      this._currentIconFetch.unsubscribe();

      if (rawName) {
        const [namespace, iconName] = this._splitIconName(rawName);

        if (namespace) {
          this._svgNamespace = namespace;
        }

        if (iconName) {
          this._svgName = iconName;
        }

        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.take)(1)).subscribe(svg => this._setSvgElement(svg), err => {
          const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;

          this._errorHandler.handleError(new Error(errorMessage));
        });
      }
    }

  }

  MatIcon.ɵfac = function MatIcon_Factory(t) {
    return new (t || MatIcon)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MatIconRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('aria-hidden'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](MAT_ICON_LOCATION), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ErrorHandler));
  };

  MatIcon.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: MatIcon,
    selectors: [["mat-icon"]],
    hostAttrs: ["role", "img", 1, "mat-icon", "notranslate"],
    hostVars: 7,
    hostBindings: function MatIcon_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-mat-icon-type", ctx._usingFontIcon() ? "font" : "svg")("data-mat-icon-name", ctx._svgName || ctx.fontIcon)("data-mat-icon-namespace", ctx._svgNamespace || ctx.fontSet);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-icon-inline", ctx.inline)("mat-icon-no-color", ctx.color !== "primary" && ctx.color !== "accent" && ctx.color !== "warn");
      }
    },
    inputs: {
      color: "color",
      inline: "inline",
      svgIcon: "svgIcon",
      fontSet: "fontSet",
      fontIcon: "fontIcon"
    },
    exportAs: ["matIcon"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function MatIcon_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
      }
    },
    styles: [".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return MatIcon;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let MatIconModule = /*#__PURE__*/(() => {
  class MatIconModule {}

  MatIconModule.ɵfac = function MatIconModule_Factory(t) {
    return new (t || MatIconModule)();
  };

  MatIconModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: MatIconModule
  });
  MatIconModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule], _angular_material_core__WEBPACK_IMPORTED_MODULE_12__.MatCommonModule]
  });
  return MatIconModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=icon.mjs.map

/***/ }),

/***/ 3646:
/*!************************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/fesm2015/animations.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ANIMATION_MODULE_TYPE": () => (/* binding */ ANIMATION_MODULE_TYPE),
/* harmony export */   "BrowserAnimationsModule": () => (/* binding */ BrowserAnimationsModule),
/* harmony export */   "NoopAnimationsModule": () => (/* binding */ NoopAnimationsModule),
/* harmony export */   "ɵAnimationRenderer": () => (/* binding */ AnimationRenderer),
/* harmony export */   "ɵAnimationRendererFactory": () => (/* binding */ AnimationRendererFactory),
/* harmony export */   "ɵBrowserAnimationBuilder": () => (/* binding */ BrowserAnimationBuilder),
/* harmony export */   "ɵBrowserAnimationFactory": () => (/* binding */ BrowserAnimationFactory),
/* harmony export */   "ɵInjectableAnimationEngine": () => (/* binding */ InjectableAnimationEngine)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser */ 2313);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ 1777);
/* harmony import */ var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/animations/browser */ 4117);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 9808);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */







/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

let BrowserAnimationBuilder = /*#__PURE__*/(() => {
  class BrowserAnimationBuilder extends _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationBuilder {
    constructor(rootRenderer, doc) {
      super();
      this._nextAnimationId = 0;
      const typeData = {
        id: '0',
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.None,
        styles: [],
        data: {
          animation: []
        }
      };
      this._renderer = rootRenderer.createRenderer(doc.body, typeData);
    }

    build(animation) {
      const id = this._nextAnimationId.toString();

      this._nextAnimationId++;
      const entry = Array.isArray(animation) ? (0,_angular_animations__WEBPACK_IMPORTED_MODULE_0__.sequence)(animation) : animation;
      issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
      return new BrowserAnimationFactory(id, this._renderer);
    }

  }

  BrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) {
    return new (t || BrowserAnimationBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT));
  };

  BrowserAnimationBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: BrowserAnimationBuilder,
    factory: BrowserAnimationBuilder.ɵfac
  });
  return BrowserAnimationBuilder;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

class BrowserAnimationFactory extends _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationFactory {
  constructor(_id, _renderer) {
    super();
    this._id = _id;
    this._renderer = _renderer;
  }

  create(element, options) {
    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
  }

}

class RendererAnimationPlayer {
  constructor(id, element, options, _renderer) {
    this.id = id;
    this.element = element;
    this._renderer = _renderer;
    this.parentPlayer = null;
    this._started = false;
    this.totalTime = 0;

    this._command('create', options);
  }

  _listen(eventName, callback) {
    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);
  }

  _command(command, ...args) {
    return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
  }

  onDone(fn) {
    this._listen('done', fn);
  }

  onStart(fn) {
    this._listen('start', fn);
  }

  onDestroy(fn) {
    this._listen('destroy', fn);
  }

  init() {
    this._command('init');
  }

  hasStarted() {
    return this._started;
  }

  play() {
    this._command('play');

    this._started = true;
  }

  pause() {
    this._command('pause');
  }

  restart() {
    this._command('restart');
  }

  finish() {
    this._command('finish');
  }

  destroy() {
    this._command('destroy');
  }

  reset() {
    this._command('reset');

    this._started = false;
  }

  setPosition(p) {
    this._command('setPosition', p);
  }

  getPosition() {
    var _a, _b;

    return (_b = (_a = this._renderer.engine.players[+this.id]) === null || _a === void 0 ? void 0 : _a.getPosition()) !== null && _b !== void 0 ? _b : 0;
  }

}

function issueAnimationCommand(renderer, element, id, command, args) {
  return renderer.setProperty(element, `@@${id}:${command}`, args);
}

const ANIMATION_PREFIX = '@';
const DISABLE_ANIMATIONS_FLAG = '@.disabled';
let AnimationRendererFactory = /*#__PURE__*/(() => {
  class AnimationRendererFactory {
    constructor(delegate, engine, _zone) {
      this.delegate = delegate;
      this.engine = engine;
      this._zone = _zone;
      this._currentId = 0;
      this._microtaskId = 1;
      this._animationCallbacksBuffer = [];
      this._rendererCache = new Map();
      this._cdRecurDepth = 0;
      this.promise = Promise.resolve(0);

      engine.onRemovalComplete = (element, delegate) => {
        // Note: if a component element has a leave animation, and a host leave animation,
        // the view engine will call `removeChild` for the parent
        // component renderer as well as for the child component renderer.
        // Therefore, we need to check if we already removed the element.
        const parentNode = delegate === null || delegate === void 0 ? void 0 : delegate.parentNode(element);

        if (parentNode) {
          delegate.removeChild(parentNode, element);
        }
      };
    }

    createRenderer(hostElement, type) {
      const EMPTY_NAMESPACE_ID = ''; // cache the delegates to find out which cached delegate can
      // be used by which cached renderer

      const delegate = this.delegate.createRenderer(hostElement, type);

      if (!hostElement || !type || !type.data || !type.data['animation']) {
        let renderer = this._rendererCache.get(delegate);

        if (!renderer) {
          renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine); // only cache this result when the base renderer is used

          this._rendererCache.set(delegate, renderer);
        }

        return renderer;
      }

      const componentId = type.id;
      const namespaceId = type.id + '-' + this._currentId;
      this._currentId++;
      this.engine.register(namespaceId, hostElement);

      const registerTrigger = trigger => {
        if (Array.isArray(trigger)) {
          trigger.forEach(registerTrigger);
        } else {
          this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
        }
      };

      const animationTriggers = type.data['animation'];
      animationTriggers.forEach(registerTrigger);
      return new AnimationRenderer(this, namespaceId, delegate, this.engine);
    }

    begin() {
      this._cdRecurDepth++;

      if (this.delegate.begin) {
        this.delegate.begin();
      }
    }

    _scheduleCountTask() {
      // always use promise to schedule microtask instead of use Zone
      this.promise.then(() => {
        this._microtaskId++;
      });
    }
    /** @internal */


    scheduleListenerCallback(count, fn, data) {
      if (count >= 0 && count < this._microtaskId) {
        this._zone.run(() => fn(data));

        return;
      }

      if (this._animationCallbacksBuffer.length == 0) {
        Promise.resolve(null).then(() => {
          this._zone.run(() => {
            this._animationCallbacksBuffer.forEach(tuple => {
              const [fn, data] = tuple;
              fn(data);
            });

            this._animationCallbacksBuffer = [];
          });
        });
      }

      this._animationCallbacksBuffer.push([fn, data]);
    }

    end() {
      this._cdRecurDepth--; // this is to prevent animations from running twice when an inner
      // component does CD when a parent component instead has inserted it

      if (this._cdRecurDepth == 0) {
        this._zone.runOutsideAngular(() => {
          this._scheduleCountTask();

          this.engine.flush(this._microtaskId);
        });
      }

      if (this.delegate.end) {
        this.delegate.end();
      }
    }

    whenRenderingDone() {
      return this.engine.whenRenderingDone();
    }

  }

  AnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) {
    return new (t || AnimationRendererFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone));
  };

  AnimationRendererFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: AnimationRendererFactory,
    factory: AnimationRendererFactory.ɵfac
  });
  return AnimationRendererFactory;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

class BaseAnimationRenderer {
  constructor(namespaceId, delegate, engine) {
    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this.destroyNode = this.delegate.destroyNode ? n => delegate.destroyNode(n) : null;
  }

  get data() {
    return this.delegate.data;
  }

  destroy() {
    this.engine.destroy(this.namespaceId, this.delegate);
    this.delegate.destroy();
  }

  createElement(name, namespace) {
    return this.delegate.createElement(name, namespace);
  }

  createComment(value) {
    return this.delegate.createComment(value);
  }

  createText(value) {
    return this.delegate.createText(value);
  }

  appendChild(parent, newChild) {
    this.delegate.appendChild(parent, newChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, false);
  }

  insertBefore(parent, newChild, refChild, isMove = true) {
    this.delegate.insertBefore(parent, newChild, refChild); // If `isMove` true than we should animate this insert.

    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
  }

  removeChild(parent, oldChild, isHostElement) {
    this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
  }

  selectRootElement(selectorOrNode, preserveContent) {
    return this.delegate.selectRootElement(selectorOrNode, preserveContent);
  }

  parentNode(node) {
    return this.delegate.parentNode(node);
  }

  nextSibling(node) {
    return this.delegate.nextSibling(node);
  }

  setAttribute(el, name, value, namespace) {
    this.delegate.setAttribute(el, name, value, namespace);
  }

  removeAttribute(el, name, namespace) {
    this.delegate.removeAttribute(el, name, namespace);
  }

  addClass(el, name) {
    this.delegate.addClass(el, name);
  }

  removeClass(el, name) {
    this.delegate.removeClass(el, name);
  }

  setStyle(el, style, value, flags) {
    this.delegate.setStyle(el, style, value, flags);
  }

  removeStyle(el, style, flags) {
    this.delegate.removeStyle(el, style, flags);
  }

  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
      this.disableAnimations(el, !!value);
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }

  setValue(node, value) {
    this.delegate.setValue(node, value);
  }

  listen(target, eventName, callback) {
    return this.delegate.listen(target, eventName, callback);
  }

  disableAnimations(element, value) {
    this.engine.disableAnimations(element, value);
  }

}

class AnimationRenderer extends BaseAnimationRenderer {
  constructor(factory, namespaceId, delegate, engine) {
    super(namespaceId, delegate, engine);
    this.factory = factory;
    this.namespaceId = namespaceId;
  }

  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX) {
      if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
        value = value === undefined ? true : !!value;
        this.disableAnimations(el, value);
      } else {
        this.engine.process(this.namespaceId, el, name.substr(1), value);
      }
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }

  listen(target, eventName, callback) {
    if (eventName.charAt(0) == ANIMATION_PREFIX) {
      const element = resolveElementFromTarget(target);
      let name = eventName.substr(1);
      let phase = ''; // @listener.phase is for trigger animation callbacks
      // @@listener is for animation builder callbacks

      if (name.charAt(0) != ANIMATION_PREFIX) {
        [name, phase] = parseTriggerCallbackName(name);
      }

      return this.engine.listen(this.namespaceId, element, name, phase, event => {
        const countId = event['_data'] || -1;
        this.factory.scheduleListenerCallback(countId, callback, event);
      });
    }

    return this.delegate.listen(target, eventName, callback);
  }

}

function resolveElementFromTarget(target) {
  switch (target) {
    case 'body':
      return document.body;

    case 'document':
      return document;

    case 'window':
      return window;

    default:
      return target;
  }
}

function parseTriggerCallbackName(triggerName) {
  const dotIndex = triggerName.indexOf('.');
  const trigger = triggerName.substring(0, dotIndex);
  const phase = triggerName.substr(dotIndex + 1);
  return [trigger, phase];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let InjectableAnimationEngine = /*#__PURE__*/(() => {
  class InjectableAnimationEngine extends _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"] {
    constructor(doc, driver, normalizer) {
      super(doc.body, driver, normalizer);
    }

    ngOnDestroy() {
      this.flush();
    }

  }

  InjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) {
    return new (t || InjectableAnimationEngine)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"]));
  };

  InjectableAnimationEngine.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: InjectableAnimationEngine,
    factory: InjectableAnimationEngine.ɵfac
  });
  return InjectableAnimationEngine;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function instantiateDefaultStyleNormalizer() {
  return new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsStyleNormalizer"]();
}

function instantiateRendererFactory(renderer, engine, zone) {
  return new AnimationRendererFactory(renderer, engine, zone);
}
/**
 * @publicApi
 */


const ANIMATION_MODULE_TYPE = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('AnimationModuleType');
const SHARED_ANIMATION_PROVIDERS = [{
  provide: _angular_animations__WEBPACK_IMPORTED_MODULE_0__.AnimationBuilder,
  useClass: BrowserAnimationBuilder
}, {
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"],
  useFactory: instantiateDefaultStyleNormalizer
}, {
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"],
  useClass: InjectableAnimationEngine
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2,
  useFactory: instantiateRendererFactory,
  deps: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__["ɵDomRendererFactory2"], _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
}];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */

const BROWSER_ANIMATIONS_PROVIDERS = [{
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver,
  useFactory: () => new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsDriver"]()
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: 'BrowserAnimations'
}, ...SHARED_ANIMATION_PROVIDERS];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */

const BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
  provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__.AnimationDriver,
  useClass: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵNoopAnimationDriver"]
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: 'NoopAnimations'
}, ...SHARED_ANIMATION_PROVIDERS];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
 * for use with animations. See [Animations](guide/animations).
 * @publicApi
 */

let BrowserAnimationsModule = /*#__PURE__*/(() => {
  class BrowserAnimationsModule {
    /**
     * Configures the module based on the specified object.
     *
     * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
     * @see `BrowserAnimationsModuleConfig`
     *
     * @usageNotes
     * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
     * function as follows:
     * ```
     * @NgModule({
     *   imports: [BrowserAnimationsModule.withConfig(config)]
     * })
     * class MyNgModule {}
     * ```
     */
    static withConfig(config) {
      return {
        ngModule: BrowserAnimationsModule,
        providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
      };
    }

  }

  BrowserAnimationsModule.ɵfac = function BrowserAnimationsModule_Factory(t) {
    return new (t || BrowserAnimationsModule)();
  };

  BrowserAnimationsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: BrowserAnimationsModule
  });
  BrowserAnimationsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    providers: BROWSER_ANIMATIONS_PROVIDERS,
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule]
  });
  return BrowserAnimationsModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * A null player that must be imported to allow disabling of animations.
 * @publicApi
 */


let NoopAnimationsModule = /*#__PURE__*/(() => {
  class NoopAnimationsModule {}

  NoopAnimationsModule.ɵfac = function NoopAnimationsModule_Factory(t) {
    return new (t || NoopAnimationsModule)();
  };

  NoopAnimationsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: NoopAnimationsModule
  });
  NoopAnimationsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__.BrowserModule]
  });
  return NoopAnimationsModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=animations.mjs.map

/***/ }),

/***/ 2313:
/*!******************************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/fesm2015/platform-browser.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserModule": () => (/* binding */ BrowserModule),
/* harmony export */   "BrowserTransferStateModule": () => (/* binding */ BrowserTransferStateModule),
/* harmony export */   "By": () => (/* binding */ By),
/* harmony export */   "DomSanitizer": () => (/* binding */ DomSanitizer),
/* harmony export */   "EVENT_MANAGER_PLUGINS": () => (/* binding */ EVENT_MANAGER_PLUGINS),
/* harmony export */   "EventManager": () => (/* binding */ EventManager),
/* harmony export */   "HAMMER_GESTURE_CONFIG": () => (/* binding */ HAMMER_GESTURE_CONFIG),
/* harmony export */   "HAMMER_LOADER": () => (/* binding */ HAMMER_LOADER),
/* harmony export */   "HammerGestureConfig": () => (/* binding */ HammerGestureConfig),
/* harmony export */   "HammerModule": () => (/* binding */ HammerModule),
/* harmony export */   "Meta": () => (/* binding */ Meta),
/* harmony export */   "Title": () => (/* binding */ Title),
/* harmony export */   "TransferState": () => (/* binding */ TransferState),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "disableDebugTools": () => (/* binding */ disableDebugTools),
/* harmony export */   "enableDebugTools": () => (/* binding */ enableDebugTools),
/* harmony export */   "makeStateKey": () => (/* binding */ makeStateKey),
/* harmony export */   "platformBrowser": () => (/* binding */ platformBrowser),
/* harmony export */   "ɵBrowserDomAdapter": () => (/* binding */ BrowserDomAdapter),
/* harmony export */   "ɵBrowserGetTestability": () => (/* binding */ BrowserGetTestability),
/* harmony export */   "ɵDomEventsPlugin": () => (/* binding */ DomEventsPlugin),
/* harmony export */   "ɵDomRendererFactory2": () => (/* binding */ DomRendererFactory2),
/* harmony export */   "ɵDomSanitizerImpl": () => (/* binding */ DomSanitizerImpl),
/* harmony export */   "ɵDomSharedStylesHost": () => (/* binding */ DomSharedStylesHost),
/* harmony export */   "ɵHammerGesturesPlugin": () => (/* binding */ HammerGesturesPlugin),
/* harmony export */   "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS": () => (/* binding */ INTERNAL_BROWSER_PLATFORM_PROVIDERS),
/* harmony export */   "ɵKeyEventsPlugin": () => (/* binding */ KeyEventsPlugin),
/* harmony export */   "ɵNAMESPACE_URIS": () => (/* binding */ NAMESPACE_URIS),
/* harmony export */   "ɵSharedStylesHost": () => (/* binding */ SharedStylesHost),
/* harmony export */   "ɵTRANSITION_ID": () => (/* binding */ TRANSITION_ID),
/* harmony export */   "ɵescapeHtml": () => (/* binding */ escapeHtml),
/* harmony export */   "ɵflattenStyles": () => (/* binding */ flattenStyles),
/* harmony export */   "ɵgetDOM": () => (/* reexport safe */ _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"]),
/* harmony export */   "ɵinitDomAdapter": () => (/* binding */ initDomAdapter),
/* harmony export */   "ɵshimContentAttribute": () => (/* binding */ shimContentAttribute),
/* harmony export */   "ɵshimHostAttribute": () => (/* binding */ shimHostAttribute)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 5000);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Provides DOM operations in any browser environment.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */

class GenericBrowserDomAdapter extends _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵDomAdapter"] {
  constructor() {
    super(...arguments);
    this.supportsDOMEvents = true;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * A `DomAdapter` powered by full browser DOM APIs.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */

/* tslint:disable:requireParameterType no-console */


class BrowserDomAdapter extends GenericBrowserDomAdapter {
  static makeCurrent() {
    (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new BrowserDomAdapter());
  }

  onAndCancel(el, evt, listener) {
    el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of
    // https://code.google.com/p/dart/issues/detail?id=17406

    return () => {
      el.removeEventListener(evt, listener, false);
    };
  }

  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
  }

  remove(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }

  createElement(tagName, doc) {
    doc = doc || this.getDefaultDocument();
    return doc.createElement(tagName);
  }

  createHtmlDocument() {
    return document.implementation.createHTMLDocument('fakeTitle');
  }

  getDefaultDocument() {
    return document;
  }

  isElementNode(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  }

  isShadowRoot(node) {
    return node instanceof DocumentFragment;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */


  getGlobalEventTarget(doc, target) {
    if (target === 'window') {
      return window;
    }

    if (target === 'document') {
      return doc;
    }

    if (target === 'body') {
      return doc.body;
    }

    return null;
  }

  getBaseHref(doc) {
    const href = getBaseElementHref();
    return href == null ? null : relativePath(href);
  }

  resetBaseElement() {
    baseElement = null;
  }

  getUserAgent() {
    return window.navigator.userAgent;
  }

  getCookie(name) {
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵparseCookieValue"])(document.cookie, name);
  }

}

let baseElement = null;

function getBaseElementHref() {
  baseElement = baseElement || document.querySelector('base');
  return baseElement ? baseElement.getAttribute('href') : null;
} // based on urlUtils.js in AngularJS 1


let urlParsingNode;

function relativePath(url) {
  urlParsingNode = urlParsingNode || document.createElement('a');
  urlParsingNode.setAttribute('href', url);
  const pathName = urlParsingNode.pathname;
  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */


const TRANSITION_ID = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('TRANSITION_ID');

function appInitializerFactory(transitionId, document, injector) {
  return () => {
    // Wait for all application initializers to be completed before removing the styles set by
    // the server.
    injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationInitStatus).donePromise.then(() => {
      const dom = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
      const styles = document.querySelectorAll(`style[ng-transition="${transitionId}"]`);

      for (let i = 0; i < styles.length; i++) {
        dom.remove(styles[i]);
      }
    });
  };
}

const SERVER_TRANSITION_PROVIDERS = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_INITIALIZER,
  useFactory: appInitializerFactory,
  deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector],
  multi: true
}];
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

class BrowserGetTestability {
  static init() {
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.setTestabilityGetter)(new BrowserGetTestability());
  }

  addToWindow(registry) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAngularTestability = (elem, findInAncestors = true) => {
      const testability = registry.findTestabilityInTree(elem, findInAncestors);

      if (testability == null) {
        throw new Error('Could not find testability for element.');
      }

      return testability;
    };

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularTestabilities = () => registry.getAllTestabilities();

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularRootElements = () => registry.getAllRootElements();

    const whenAllStable = (callback
    /** TODO #9100 */
    ) => {
      const testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].getAllAngularTestabilities();
      let count = testabilities.length;
      let didWork = false;

      const decrement = function (didWork_
      /** TODO #9100 */
      ) {
        didWork = didWork || didWork_;
        count--;

        if (count == 0) {
          callback(didWork);
        }
      };

      testabilities.forEach(function (testability
      /** TODO #9100 */
      ) {
        testability.whenStable(decrement);
      });
    };

    if (!_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers = [];
    }

    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].frameworkStabilizers.push(whenAllStable);
  }

  findTestabilityInTree(registry, elem, findInAncestors) {
    if (elem == null) {
      return null;
    }

    const t = registry.getTestability(elem);

    if (t != null) {
      return t;
    } else if (!findInAncestors) {
      return null;
    }

    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isShadowRoot(elem)) {
      return this.findTestabilityInTree(registry, elem.host, true);
    }

    return this.findTestabilityInTree(registry, elem.parentElement, true);
  }

}
/**
 * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
 */


let BrowserXhr = /*#__PURE__*/(() => {
  class BrowserXhr {
    build() {
      return new XMLHttpRequest();
    }

  }

  BrowserXhr.ɵfac = function BrowserXhr_Factory(t) {
    return new (t || BrowserXhr)();
  };

  BrowserXhr.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: BrowserXhr,
    factory: BrowserXhr.ɵfac
  });
  return BrowserXhr;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The injection token for the event-manager plug-in service.
 *
 * @publicApi
 */


const EVENT_MANAGER_PLUGINS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('EventManagerPlugins');
/**
 * An injectable service that provides event management for Angular
 * through a browser plug-in.
 *
 * @publicApi
 */

let EventManager = /*#__PURE__*/(() => {
  class EventManager {
    /**
     * Initializes an instance of the event-manager service.
     */
    constructor(plugins, _zone) {
      this._zone = _zone;
      this._eventNameToPlugin = new Map();
      plugins.forEach(p => p.manager = this);
      this._plugins = plugins.slice().reverse();
    }
    /**
     * Registers a handler for a specific element and event.
     *
     * @param element The HTML element to receive event notifications.
     * @param eventName The name of the event to listen for.
     * @param handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @returns  A callback function that can be used to remove the handler.
     */


    addEventListener(element, eventName, handler) {
      const plugin = this._findPluginFor(eventName);

      return plugin.addEventListener(element, eventName, handler);
    }
    /**
     * Registers a global handler for an event in a target view.
     *
     * @param target A target for global event notifications. One of "window", "document", or "body".
     * @param eventName The name of the event to listen for.
     * @param handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @returns A callback function that can be used to remove the handler.
     * @deprecated No longer being used in Ivy code. To be removed in version 14.
     */


    addGlobalEventListener(target, eventName, handler) {
      const plugin = this._findPluginFor(eventName);

      return plugin.addGlobalEventListener(target, eventName, handler);
    }
    /**
     * Retrieves the compilation zone in which event listeners are registered.
     */


    getZone() {
      return this._zone;
    }
    /** @internal */


    _findPluginFor(eventName) {
      const plugin = this._eventNameToPlugin.get(eventName);

      if (plugin) {
        return plugin;
      }

      const plugins = this._plugins;

      for (let i = 0; i < plugins.length; i++) {
        const plugin = plugins[i];

        if (plugin.supports(eventName)) {
          this._eventNameToPlugin.set(eventName, plugin);

          return plugin;
        }
      }

      throw new Error(`No event manager plugin found for event ${eventName}`);
    }

  }

  EventManager.ɵfac = function EventManager_Factory(t) {
    return new (t || EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone));
  };

  EventManager.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: EventManager,
    factory: EventManager.ɵfac
  });
  return EventManager;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

class EventManagerPlugin {
  constructor(_doc) {
    this._doc = _doc;
  }

  addGlobalEventListener(element, eventName, handler) {
    const target = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);

    if (!target) {
      throw new Error(`Unsupported event target ${target} for event ${eventName}`);
    }

    return this.addEventListener(target, eventName, handler);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let SharedStylesHost = /*#__PURE__*/(() => {
  class SharedStylesHost {
    constructor() {
      /** @internal */
      this._stylesSet = new Set();
    }

    addStyles(styles) {
      const additions = new Set();
      styles.forEach(style => {
        if (!this._stylesSet.has(style)) {
          this._stylesSet.add(style);

          additions.add(style);
        }
      });
      this.onStylesAdded(additions);
    }

    onStylesAdded(additions) {}

    getAllStyles() {
      return Array.from(this._stylesSet);
    }

  }

  SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {
    return new (t || SharedStylesHost)();
  };

  SharedStylesHost.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: SharedStylesHost,
    factory: SharedStylesHost.ɵfac
  });
  return SharedStylesHost;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let DomSharedStylesHost = /*#__PURE__*/(() => {
  class DomSharedStylesHost extends SharedStylesHost {
    constructor(_doc) {
      super();
      this._doc = _doc; // Maps all registered host nodes to a list of style nodes that have been added to the host node.

      this._hostNodes = new Map();

      this._hostNodes.set(_doc.head, []);
    }

    _addStylesToHost(styles, host, styleNodes) {
      styles.forEach(style => {
        const styleEl = this._doc.createElement('style');

        styleEl.textContent = style;
        styleNodes.push(host.appendChild(styleEl));
      });
    }

    addHost(hostNode) {
      const styleNodes = [];

      this._addStylesToHost(this._stylesSet, hostNode, styleNodes);

      this._hostNodes.set(hostNode, styleNodes);
    }

    removeHost(hostNode) {
      const styleNodes = this._hostNodes.get(hostNode);

      if (styleNodes) {
        styleNodes.forEach(removeStyle);
      }

      this._hostNodes.delete(hostNode);
    }

    onStylesAdded(additions) {
      this._hostNodes.forEach((styleNodes, hostNode) => {
        this._addStylesToHost(additions, hostNode, styleNodes);
      });
    }

    ngOnDestroy() {
      this._hostNodes.forEach(styleNodes => styleNodes.forEach(removeStyle));
    }

  }

  DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {
    return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  DomSharedStylesHost.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: DomSharedStylesHost,
    factory: DomSharedStylesHost.ɵfac
  });
  return DomSharedStylesHost;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function removeStyle(styleNode) {
  (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().remove(styleNode);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const NAMESPACE_URIS = {
  'svg': 'http://www.w3.org/2000/svg',
  'xhtml': 'http://www.w3.org/1999/xhtml',
  'xlink': 'http://www.w3.org/1999/xlink',
  'xml': 'http://www.w3.org/XML/1998/namespace',
  'xmlns': 'http://www.w3.org/2000/xmlns/',
  'math': 'http://www.w3.org/1998/MathML/'
};
const COMPONENT_REGEX = /%COMP%/g;
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
const COMPONENT_VARIABLE = '%COMP%';
const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;

function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}

function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}

function flattenStyles(compId, styles, target) {
  for (let i = 0; i < styles.length; i++) {
    let style = styles[i];

    if (Array.isArray(style)) {
      flattenStyles(compId, style, target);
    } else {
      style = style.replace(COMPONENT_REGEX, compId);
      target.push(style);
    }
  }

  return target;
}

function decoratePreventDefault(eventHandler) {
  // `DebugNode.triggerEventHandler` needs to know if the listener was created with
  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
  // the listener (see below).
  return event => {
    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
    // can inspect the listener toString contents for the existence of this special token. Because
    // the token is a string literal, it is ensured to not be modified by compiled code.
    if (event === '__ngUnwrap__') {
      return eventHandler;
    }

    const allowDefaultBehavior = eventHandler(event);

    if (allowDefaultBehavior === false) {
      // TODO(tbosch): move preventDefault into event plugins...
      event.preventDefault();
      event.returnValue = false;
    }

    return undefined;
  };
}

let hasLoggedNativeEncapsulationWarning = false;
let DomRendererFactory2 = /*#__PURE__*/(() => {
  class DomRendererFactory2 {
    constructor(eventManager, sharedStylesHost, appId) {
      this.eventManager = eventManager;
      this.sharedStylesHost = sharedStylesHost;
      this.appId = appId;
      this.rendererByCompId = new Map();
      this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }

    createRenderer(element, type) {
      if (!element || !type) {
        return this.defaultRenderer;
      }

      switch (type.encapsulation) {
        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.Emulated:
          {
            let renderer = this.rendererByCompId.get(type.id);

            if (!renderer) {
              renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
              this.rendererByCompId.set(type.id, renderer);
            }

            renderer.applyToHost(element);
            return renderer;
          }
        // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an enum
        // value that is not known (but previously was the value for ViewEncapsulation.Native)

        case 1:
        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.ShadowDom:
          // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.
          if ((typeof ngDevMode === 'undefined' || ngDevMode) && // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an
          // enum value that is not known (but previously was the value for
          // ViewEncapsulation.Native)
          !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {
            hasLoggedNativeEncapsulationWarning = true;
            console.warn('ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');
          }

          return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

        default:
          {
            if (!this.rendererByCompId.has(type.id)) {
              const styles = flattenStyles(type.id, type.styles, []);
              this.sharedStylesHost.addStyles(styles);
              this.rendererByCompId.set(type.id, this.defaultRenderer);
            }

            return this.defaultRenderer;
          }
      }
    }

    begin() {}

    end() {}

  }

  DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {
    return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID));
  };

  DomRendererFactory2.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: DomRendererFactory2,
    factory: DomRendererFactory2.ɵfac
  });
  return DomRendererFactory2;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

class DefaultDomRenderer2 {
  constructor(eventManager) {
    this.eventManager = eventManager;
    this.data = Object.create(null);
    this.destroyNode = null;
  }

  destroy() {}

  createElement(name, namespace) {
    if (namespace) {
      // TODO: `|| namespace` was added in
      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to
      // support how Ivy passed around the namespace URI rather than short name at the time. It did
      // not, however extend the support to other parts of the system (setAttribute, setAttribute,
      // and the ServerRenderer). We should decide what exactly the semantics for dealing with
      // namespaces should be and make it consistent.
      // Related issues:
      // https://github.com/angular/angular/issues/44028
      // https://github.com/angular/angular/issues/44883
      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
    }

    return document.createElement(name);
  }

  createComment(value) {
    return document.createComment(value);
  }

  createText(value) {
    return document.createTextNode(value);
  }

  appendChild(parent, newChild) {
    parent.appendChild(newChild);
  }

  insertBefore(parent, newChild, refChild) {
    if (parent) {
      parent.insertBefore(newChild, refChild);
    }
  }

  removeChild(parent, oldChild) {
    if (parent) {
      parent.removeChild(oldChild);
    }
  }

  selectRootElement(selectorOrNode, preserveContent) {
    let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;

    if (!el) {
      throw new Error(`The selector "${selectorOrNode}" did not match any elements`);
    }

    if (!preserveContent) {
      el.textContent = '';
    }

    return el;
  }

  parentNode(node) {
    return node.parentNode;
  }

  nextSibling(node) {
    return node.nextSibling;
  }

  setAttribute(el, name, value, namespace) {
    if (namespace) {
      name = namespace + ':' + name;
      const namespaceUri = NAMESPACE_URIS[namespace];

      if (namespaceUri) {
        el.setAttributeNS(namespaceUri, name, value);
      } else {
        el.setAttribute(name, value);
      }
    } else {
      el.setAttribute(name, value);
    }
  }

  removeAttribute(el, name, namespace) {
    if (namespace) {
      const namespaceUri = NAMESPACE_URIS[namespace];

      if (namespaceUri) {
        el.removeAttributeNS(namespaceUri, name);
      } else {
        el.removeAttribute(`${namespace}:${name}`);
      }
    } else {
      el.removeAttribute(name);
    }
  }

  addClass(el, name) {
    el.classList.add(name);
  }

  removeClass(el, name) {
    el.classList.remove(name);
  }

  setStyle(el, style, value, flags) {
    if (flags & (_angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.DashCase | _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.Important)) {
      el.style.setProperty(style, value, flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.Important ? 'important' : '');
    } else {
      el.style[style] = value;
    }
  }

  removeStyle(el, style, flags) {
    if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.DashCase) {
      el.style.removeProperty(style);
    } else {
      // IE requires '' instead of null
      // see https://github.com/angular/angular/issues/7916
      el.style[style] = '';
    }
  }

  setProperty(el, name, value) {
    NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
    el[name] = value;
  }

  setValue(node, value) {
    node.nodeValue = value;
  }

  listen(target, event, callback) {
    NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');

    if (typeof target === 'string') {
      return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
    }

    return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
  }

}

const AT_CHARCODE = /*#__PURE__*/(() => '@'.charCodeAt(0))();

function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Either \`BrowserAnimationsModule\` or \`NoopAnimationsModule\` are imported in your application.
  - There is corresponding configuration for the animation named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.io/api/core/Component#animations).`);
  }
}

class EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, component, appId) {
    super(eventManager);
    this.component = component;
    const styles = flattenStyles(appId + '-' + component.id, component.styles, []);
    sharedStylesHost.addStyles(styles);
    this.contentAttr = shimContentAttribute(appId + '-' + component.id);
    this.hostAttr = shimHostAttribute(appId + '-' + component.id);
  }

  applyToHost(element) {
    super.setAttribute(element, this.hostAttr, '');
  }

  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, '');
    return el;
  }

}

class ShadowDomRenderer extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, hostEl, component) {
    super(eventManager);
    this.sharedStylesHost = sharedStylesHost;
    this.hostEl = hostEl;
    this.shadowRoot = hostEl.attachShadow({
      mode: 'open'
    });
    this.sharedStylesHost.addHost(this.shadowRoot);
    const styles = flattenStyles(component.id, component.styles, []);

    for (let i = 0; i < styles.length; i++) {
      const styleEl = document.createElement('style');
      styleEl.textContent = styles[i];
      this.shadowRoot.appendChild(styleEl);
    }
  }

  nodeOrShadowRoot(node) {
    return node === this.hostEl ? this.shadowRoot : node;
  }

  destroy() {
    this.sharedStylesHost.removeHost(this.shadowRoot);
  }

  appendChild(parent, newChild) {
    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
  }

  insertBefore(parent, newChild, refChild) {
    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
  }

  removeChild(parent, oldChild) {
    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);
  }

  parentNode(node) {
    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


let DomEventsPlugin = /*#__PURE__*/(() => {
  class DomEventsPlugin extends EventManagerPlugin {
    constructor(doc) {
      super(doc);
    } // This plugin should come last in the list of plugins, because it accepts all
    // events.


    supports(eventName) {
      return true;
    }

    addEventListener(element, eventName, handler) {
      element.addEventListener(eventName, handler, false);
      return () => this.removeEventListener(element, eventName, handler);
    }

    removeEventListener(target, eventName, callback) {
      return target.removeEventListener(eventName, callback);
    }

  }

  DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {
    return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  DomEventsPlugin.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: DomEventsPlugin,
    factory: DomEventsPlugin.ɵfac
  });
  return DomEventsPlugin;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Defines supported modifiers for key events.
 */


const MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
const DOM_KEY_LOCATION_NUMPAD = 3; // Map to convert some key or keyIdentifier values to what will be returned by getEventKey

const _keyMap = {
  // The following values are here for cross-browser compatibility and to match the W3C standard
  // cf https://www.w3.org/TR/DOM-Level-3-Events-key/
  '\b': 'Backspace',
  '\t': 'Tab',
  '\x7F': 'Delete',
  '\x1B': 'Escape',
  'Del': 'Delete',
  'Esc': 'Escape',
  'Left': 'ArrowLeft',
  'Right': 'ArrowRight',
  'Up': 'ArrowUp',
  'Down': 'ArrowDown',
  'Menu': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'Win': 'OS'
}; // There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...

const _chromeNumKeyPadMap = {
  'A': '1',
  'B': '2',
  'C': '3',
  'D': '4',
  'E': '5',
  'F': '6',
  'G': '7',
  'H': '8',
  'I': '9',
  'J': '*',
  'K': '+',
  'M': '-',
  'N': '.',
  'O': '/',
  '\x60': '0',
  '\x90': 'NumLock'
};
/**
 * Retrieves modifiers from key-event objects.
 */

const MODIFIER_KEY_GETTERS = {
  'alt': event => event.altKey,
  'control': event => event.ctrlKey,
  'meta': event => event.metaKey,
  'shift': event => event.shiftKey
};
/**
 * @publicApi
 * A browser plug-in that provides support for handling of key events in Angular.
 */

let KeyEventsPlugin = /*#__PURE__*/(() => {
  class KeyEventsPlugin extends EventManagerPlugin {
    /**
     * Initializes an instance of the browser plug-in.
     * @param doc The document in which key events will be detected.
     */
    constructor(doc) {
      super(doc);
    }
    /**
     * Reports whether a named key event is supported.
     * @param eventName The event name to query.
     * @return True if the named key event is supported.
     */


    supports(eventName) {
      return KeyEventsPlugin.parseEventName(eventName) != null;
    }
    /**
     * Registers a handler for a specific element and key event.
     * @param element The HTML element to receive event notifications.
     * @param eventName The name of the key event to listen for.
     * @param handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @returns The key event that was registered.
     */


    addEventListener(element, eventName, handler) {
      const parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(() => {
        return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
      });
    }

    static parseEventName(eventName) {
      const parts = eventName.toLowerCase().split('.');
      const domEventName = parts.shift();

      if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
        return null;
      }

      const key = KeyEventsPlugin._normalizeKey(parts.pop());

      let fullKey = '';
      MODIFIER_KEYS.forEach(modifierName => {
        const index = parts.indexOf(modifierName);

        if (index > -1) {
          parts.splice(index, 1);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;

      if (parts.length != 0 || key.length === 0) {
        // returning null instead of throwing to let another plugin process the event
        return null;
      } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.
      //       The code must remain in the `result['domEventName']` form.
      // return {domEventName, fullKey};


      const result = {};
      result['domEventName'] = domEventName;
      result['fullKey'] = fullKey;
      return result;
    }

    static getEventFullKey(event) {
      let fullKey = '';
      let key = getEventKey(event);
      key = key.toLowerCase();

      if (key === ' ') {
        key = 'space'; // for readability
      } else if (key === '.') {
        key = 'dot'; // because '.' is used as a separator in event names
      }

      MODIFIER_KEYS.forEach(modifierName => {
        if (modifierName != key) {
          const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];

          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    }
    /**
     * Configures a handler callback for a key event.
     * @param fullKey The event name that combines all simultaneous keystrokes.
     * @param handler The function that responds to the key event.
     * @param zone The zone in which the event occurred.
     * @returns A callback function.
     */


    static eventCallback(fullKey, handler, zone) {
      return (event
      /** TODO #9100 */
      ) => {
        if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
          zone.runGuarded(() => handler(event));
        }
      };
    }
    /** @internal */


    static _normalizeKey(keyName) {
      // TODO: switch to a Map if the mapping grows too much
      switch (keyName) {
        case 'esc':
          return 'escape';

        default:
          return keyName;
      }
    }

  }

  KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {
    return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  KeyEventsPlugin.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: KeyEventsPlugin,
    factory: KeyEventsPlugin.ɵfac
  });
  return KeyEventsPlugin;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function getEventKey(event) {
  let key = event.key;

  if (key == null) {
    key = event.keyIdentifier; // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
    // Safari cf
    // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces

    if (key == null) {
      return 'Unidentified';
    }

    if (key.startsWith('U+')) {
      key = String.fromCharCode(parseInt(key.substring(2), 16));

      if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
        // There is a bug in Chrome for numeric keypad keys:
        // https://code.google.com/p/chromium/issues/detail?id=155654
        // 1, 2, 3 ... are reported as A, B, C ...
        key = _chromeNumKeyPadMap[key];
      }
    }
  }

  return _keyMap[key] || key;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
  BrowserGetTestability.init();
}

function errorHandler() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler();
}

function _document() {
  // Tell ivy about the global document
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
  return document;
}

const INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID,
  useValue: _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_BROWSER_ID"]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT,
  useFactory: _document,
  deps: []
}];
/**
 * A factory function that returns a `PlatformRef` instance associated with browser service
 * providers.
 *
 * @publicApi
 */

const platformBrowser = /*#__PURE__*/(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.createPlatformFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
const BROWSER_MODULE_PROVIDERS = [{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵINJECTOR_SCOPE"],
  useValue: 'root'
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ErrorHandler,
  useFactory: errorHandler,
  deps: []
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone, _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
}, {
  provide: DomRendererFactory2,
  useClass: DomRendererFactory2,
  deps: [EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: SharedStylesHost,
  useExisting: DomSharedStylesHost
}, {
  provide: DomSharedStylesHost,
  useClass: DomSharedStylesHost,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
  useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
  deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
}, {
  provide: EventManager,
  useClass: EventManager,
  deps: [EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
}, {
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.XhrFactory,
  useClass: BrowserXhr,
  deps: []
}];
/**
 * Exports required infrastructure for all Angular apps.
 * Included by default in all Angular apps created with the CLI
 * `new` command.
 * Re-exports `CommonModule` and `ApplicationModule`, making their
 * exports and providers available to all apps.
 *
 * @publicApi
 */

let BrowserModule = /*#__PURE__*/(() => {
  class BrowserModule {
    constructor(parentModule) {
      if (parentModule) {
        throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
      }
    }
    /**
     * Configures a browser-based app to transition from a server-rendered app, if
     * one is present on the page.
     *
     * @param params An object containing an identifier for the app to transition.
     * The ID must match between the client and server versions of the app.
     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
     */


    static withServerTransition(params) {
      return {
        ngModule: BrowserModule,
        providers: [{
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID,
          useValue: params.appId
        }, {
          provide: TRANSITION_ID,
          useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID
        }, SERVER_TRANSITION_PROVIDERS]
      };
    }

  }

  BrowserModule.ɵfac = function BrowserModule_Factory(t) {
    return new (t || BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](BrowserModule, 12));
  };

  BrowserModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: BrowserModule
  });
  BrowserModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    providers: BROWSER_MODULE_PROVIDERS,
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationModule]
  });
  return BrowserModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Factory to create a `Meta` service instance for the current DOM document.
 */


function createMeta() {
  return new Meta((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
}
/**
 * A service for managing HTML `<meta>` tags.
 *
 * Properties of the `MetaDefinition` object match the attributes of the
 * HTML `<meta>` tag. These tags define document metadata that is important for
 * things like configuring a Content Security Policy, defining browser compatibility
 * and security settings, setting HTTP Headers, defining rich content for social sharing,
 * and Search Engine Optimization (SEO).
 *
 * To identify specific `<meta>` tags in a document, use an attribute selection
 * string in the format `"tag_attribute='value string'"`.
 * For example, an `attrSelector` value of `"name='description'"` matches a tag
 * whose `name` attribute has the value `"description"`.
 * Selectors are used with the `querySelector()` Document method,
 * in the format `meta[{attrSelector}]`.
 *
 * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)
 * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
 *
 *
 * @publicApi
 */


let Meta = /*#__PURE__*/(() => {
  class Meta {
    constructor(_doc) {
      this._doc = _doc;
      this._dom = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
    }
    /**
     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
     * values in the provided tag definition, and verifies that all other attribute values are equal.
     * If an existing element is found, it is returned and is not modified in any way.
     * @param tag The definition of a `<meta>` element to match or create.
     * @param forceCreation True to create a new element without checking whether one already exists.
     * @returns The existing element with the same attributes and values if found,
     * the new element if no match is found, or `null` if the tag parameter is not defined.
     */


    addTag(tag, forceCreation = false) {
      if (!tag) return null;
      return this._getOrCreateElement(tag, forceCreation);
    }
    /**
     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
     * values in the provided tag definition, and verifies that all other attribute values are equal.
     * @param tags An array of tag definitions to match or create.
     * @param forceCreation True to create new elements without checking whether they already exist.
     * @returns The matching elements if found, or the new elements.
     */


    addTags(tags, forceCreation = false) {
      if (!tags) return [];
      return tags.reduce((result, tag) => {
        if (tag) {
          result.push(this._getOrCreateElement(tag, forceCreation));
        }

        return result;
      }, []);
    }
    /**
     * Retrieves a `<meta>` tag element in the current HTML document.
     * @param attrSelector The tag attribute and value to match against, in the format
     * `"tag_attribute='value string'"`.
     * @returns The matching element, if any.
     */


    getTag(attrSelector) {
      if (!attrSelector) return null;
      return this._doc.querySelector(`meta[${attrSelector}]`) || null;
    }
    /**
     * Retrieves a set of `<meta>` tag elements in the current HTML document.
     * @param attrSelector The tag attribute and value to match against, in the format
     * `"tag_attribute='value string'"`.
     * @returns The matching elements, if any.
     */


    getTags(attrSelector) {
      if (!attrSelector) return [];

      const list
      /*NodeList*/
      = this._doc.querySelectorAll(`meta[${attrSelector}]`);

      return list ? [].slice.call(list) : [];
    }
    /**
     * Modifies an existing `<meta>` tag element in the current HTML document.
     * @param tag The tag description with which to replace the existing tag content.
     * @param selector A tag attribute and value to match against, to identify
     * an existing tag. A string in the format `"tag_attribute=`value string`"`.
     * If not supplied, matches a tag with the same `name` or `property` attribute value as the
     * replacement tag.
     * @return The modified element.
     */


    updateTag(tag, selector) {
      if (!tag) return null;
      selector = selector || this._parseSelector(tag);
      const meta = this.getTag(selector);

      if (meta) {
        return this._setMetaElementAttributes(tag, meta);
      }

      return this._getOrCreateElement(tag, true);
    }
    /**
     * Removes an existing `<meta>` tag element from the current HTML document.
     * @param attrSelector A tag attribute and value to match against, to identify
     * an existing tag. A string in the format `"tag_attribute=`value string`"`.
     */


    removeTag(attrSelector) {
      this.removeTagElement(this.getTag(attrSelector));
    }
    /**
     * Removes an existing `<meta>` tag element from the current HTML document.
     * @param meta The tag definition to match against to identify an existing tag.
     */


    removeTagElement(meta) {
      if (meta) {
        this._dom.remove(meta);
      }
    }

    _getOrCreateElement(meta, forceCreation = false) {
      if (!forceCreation) {
        const selector = this._parseSelector(meta); // It's allowed to have multiple elements with the same name so it's not enough to
        // just check that element with the same name already present on the page. We also need to
        // check if element has tag attributes


        const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];
        if (elem !== undefined) return elem;
      }

      const element = this._dom.createElement('meta');

      this._setMetaElementAttributes(meta, element);

      const head = this._doc.getElementsByTagName('head')[0];

      head.appendChild(element);
      return element;
    }

    _setMetaElementAttributes(tag, el) {
      Object.keys(tag).forEach(prop => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
      return el;
    }

    _parseSelector(tag) {
      const attr = tag.name ? 'name' : 'property';
      return `${attr}="${tag[attr]}"`;
    }

    _containsAttributes(tag, elem) {
      return Object.keys(tag).every(key => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
    }

    _getMetaKeyMap(prop) {
      return META_KEYS_MAP[prop] || prop;
    }

  }

  Meta.ɵfac = function Meta_Factory(t) {
    return new (t || Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  Meta.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: Meta,
    factory: function Meta_Factory(t) {
      let r = null;

      if (t) {
        r = new t();
      } else {
        r = createMeta();
      }

      return r;
    },
    providedIn: 'root'
  });
  return Meta;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Mapping for MetaDefinition properties with their correct meta attribute names
 */


const META_KEYS_MAP = {
  httpEquiv: 'http-equiv'
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Factory to create Title service.
 */

function createTitle() {
  return new Title((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
}
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * @publicApi
 */


let Title = /*#__PURE__*/(() => {
  class Title {
    constructor(_doc) {
      this._doc = _doc;
    }
    /**
     * Get the title of the current HTML document.
     */


    getTitle() {
      return this._doc.title;
    }
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */


    setTitle(newTitle) {
      this._doc.title = newTitle || '';
    }

  }

  Title.ɵfac = function Title_Factory(t) {
    return new (t || Title)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  Title.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: Title,
    factory: function Title_Factory(t) {
      let r = null;

      if (t) {
        r = new t();
      } else {
        r = createTitle();
      }

      return r;
    },
    providedIn: 'root'
  });
  return Title;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const CAMEL_CASE_REGEXP = /([A-Z])/g;
const DASH_CASE_REGEXP = /-([a-z])/g;

function camelCaseToDashCase(input) {
  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());
}

function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
/**
 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
 * `name` is `'probe'`.
 * @param name Name under which it will be exported. Keep in mind this will be a property of the
 * global `ng` object.
 * @param value The value to export.
 */


function exportNgVar(name, value) {
  if (typeof COMPILED === 'undefined' || !COMPILED) {
    // Note: we can't export `ng` when using closure enhanced optimization as:
    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
    // - we can't declare a closure extern as the namespace `ng` is already used within Google
    //   for typings for angularJS (via `goog.provide('ng....')`).
    const ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"].ng || {};
    ng[name] = value;
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const win = typeof window !== 'undefined' && window || {};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

class ChangeDetectionPerfRecord {
  constructor(msPerTick, numTicks) {
    this.msPerTick = msPerTick;
    this.numTicks = numTicks;
  }

}
/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */


class AngularProfiler {
  constructor(ref) {
    this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationRef);
  } // tslint:disable:no-console

  /**
   * Exercises change detection in a loop and then prints the average amount of
   * time in milliseconds how long a single round of change detection takes for
   * the current state of the UI. It runs a minimum of 5 rounds for a minimum
   * of 500 milliseconds.
   *
   * Optionally, a user may pass a `config` parameter containing a map of
   * options. Supported options are:
   *
   * `record` (boolean) - causes the profiler to record a CPU profile while
   * it exercises the change detector. Example:
   *
   * ```
   * ng.profiler.timeChangeDetection({record: true})
   * ```
   */


  timeChangeDetection(config) {
    const record = config && config['record'];
    const profileName = 'Change Detection'; // Profiler is not available in Android browsers without dev tools opened

    const isProfilerAvailable = win.console.profile != null;

    if (record && isProfilerAvailable) {
      win.console.profile(profileName);
    }

    const start = performanceNow();
    let numTicks = 0;

    while (numTicks < 5 || performanceNow() - start < 500) {
      this.appRef.tick();
      numTicks++;
    }

    const end = performanceNow();

    if (record && isProfilerAvailable) {
      win.console.profileEnd(profileName);
    }

    const msPerTick = (end - start) / numTicks;
    win.console.log(`ran ${numTicks} change detection cycles`);
    win.console.log(`${msPerTick.toFixed(2)} ms per check`);
    return new ChangeDetectionPerfRecord(msPerTick, numTicks);
  }

}

function performanceNow() {
  return win.performance && win.performance.now ? win.performance.now() : new Date().getTime();
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const PROFILER_GLOBAL_NAME = 'profiler';
/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * @publicApi
 */

function enableDebugTools(ref) {
  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
  return ref;
}
/**
 * Disables Angular tools.
 *
 * @publicApi
 */


function disableDebugTools() {
  exportNgVar(PROFILER_GLOBAL_NAME, null);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function escapeHtml(text) {
  const escapedText = {
    '&': '&a;',
    '"': '&q;',
    '\'': '&s;',
    '<': '&l;',
    '>': '&g;'
  };
  return text.replace(/[&"'<>]/g, s => escapedText[s]);
}

function unescapeHtml(text) {
  const unescapedText = {
    '&a;': '&',
    '&q;': '"',
    '&s;': '\'',
    '&l;': '<',
    '&g;': '>'
  };
  return text.replace(/&[^;]+;/g, s => unescapedText[s]);
}
/**
 * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
 *
 * Example:
 *
 * ```
 * const COUNTER_KEY = makeStateKey<number>('counter');
 * let value = 10;
 *
 * transferState.set(COUNTER_KEY, value);
 * ```
 *
 * @publicApi
 */


function makeStateKey(key) {
  return key;
}
/**
 * A key value store that is transferred from the application on the server side to the application
 * on the client side.
 *
 * `TransferState` will be available as an injectable token. To use it import
 * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
 *
 * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
 * boolean, number, string, null and non-class objects will be serialized and deserialized in a
 * non-lossy manner.
 *
 * @publicApi
 */


let TransferState = /*#__PURE__*/(() => {
  class TransferState {
    constructor() {
      this.store = {};
      this.onSerializeCallbacks = {};
    }
    /** @internal */


    static init(initState) {
      const transferState = new TransferState();
      transferState.store = initState;
      return transferState;
    }
    /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     */


    get(key, defaultValue) {
      return this.store[key] !== undefined ? this.store[key] : defaultValue;
    }
    /**
     * Set the value corresponding to a key.
     */


    set(key, value) {
      this.store[key] = value;
    }
    /**
     * Remove a key from the store.
     */


    remove(key) {
      delete this.store[key];
    }
    /**
     * Test whether a key exists in the store.
     */


    hasKey(key) {
      return this.store.hasOwnProperty(key);
    }
    /**
     * Register a callback to provide the value for a key when `toJson` is called.
     */


    onSerialize(key, callback) {
      this.onSerializeCallbacks[key] = callback;
    }
    /**
     * Serialize the current state of the store to JSON.
     */


    toJson() {
      // Call the onSerialize callbacks and put those values into the store.
      for (const key in this.onSerializeCallbacks) {
        if (this.onSerializeCallbacks.hasOwnProperty(key)) {
          try {
            this.store[key] = this.onSerializeCallbacks[key]();
          } catch (e) {
            console.warn('Exception in onSerialize callback: ', e);
          }
        }
      }

      return JSON.stringify(this.store);
    }

  }

  TransferState.ɵfac = function TransferState_Factory(t) {
    return new (t || TransferState)();
  };

  TransferState.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: TransferState,
    factory: TransferState.ɵfac
  });
  return TransferState;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function initTransferState(doc, appId) {
  // Locate the script tag with the JSON data transferred from the server.
  // The id of the script tag is set to the Angular appId + 'state'.
  const script = doc.getElementById(appId + '-state');
  let initialState = {};

  if (script && script.textContent) {
    try {
      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).
      initialState = JSON.parse(unescapeHtml(script.textContent));
    } catch (e) {
      console.warn('Exception while restoring TransferState for app ' + appId, e);
    }
  }

  return TransferState.init(initialState);
}
/**
 * NgModule to install on the client side while using the `TransferState` to transfer state from
 * server to client.
 *
 * @publicApi
 */


let BrowserTransferStateModule = /*#__PURE__*/(() => {
  class BrowserTransferStateModule {}

  BrowserTransferStateModule.ɵfac = function BrowserTransferStateModule_Factory(t) {
    return new (t || BrowserTransferStateModule)();
  };

  BrowserTransferStateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: BrowserTransferStateModule
  });
  BrowserTransferStateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    providers: [{
      provide: TransferState,
      useFactory: initTransferState,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID]
    }]
  });
  return BrowserTransferStateModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Predicates for use with {@link DebugElement}'s query functions.
 *
 * @publicApi
 */


class By {
  /**
   * Match all nodes.
   *
   * @usageNotes
   * ### Example
   *
   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
   */
  static all() {
    return () => true;
  }
  /**
   * Match elements by the given CSS selector.
   *
   * @usageNotes
   * ### Example
   *
   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
   */


  static css(selector) {
    return debugElement => {
      return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;
    };
  }
  /**
   * Match nodes that have the given directive present.
   *
   * @usageNotes
   * ### Example
   *
   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
   */


  static directive(type) {
    return debugNode => debugNode.providerTokens.indexOf(type) !== -1;
  }

}

function elementMatches(n, selector) {
  if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isElementNode(n)) {
    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
  }

  return false;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Supported HammerJS recognizer event names.
 */


const EVENT_NAMES = {
  // pan
  'pan': true,
  'panstart': true,
  'panmove': true,
  'panend': true,
  'pancancel': true,
  'panleft': true,
  'panright': true,
  'panup': true,
  'pandown': true,
  // pinch
  'pinch': true,
  'pinchstart': true,
  'pinchmove': true,
  'pinchend': true,
  'pinchcancel': true,
  'pinchin': true,
  'pinchout': true,
  // press
  'press': true,
  'pressup': true,
  // rotate
  'rotate': true,
  'rotatestart': true,
  'rotatemove': true,
  'rotateend': true,
  'rotatecancel': true,
  // swipe
  'swipe': true,
  'swipeleft': true,
  'swiperight': true,
  'swipeup': true,
  'swipedown': true,
  // tap
  'tap': true,
  'doubletap': true
};
/**
 * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.
 * @see `HammerGestureConfig`
 *
 * @ngModule HammerModule
 * @publicApi
 */

const HAMMER_GESTURE_CONFIG = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('HammerGestureConfig');
/**
 * Injection token used to provide a {@link HammerLoader} to Angular.
 *
 * @publicApi
 */

const HAMMER_LOADER = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('HammerLoader');
/**
 * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
 * for gesture recognition. Configures specific event recognition.
 * @publicApi
 */

let HammerGestureConfig = /*#__PURE__*/(() => {
  class HammerGestureConfig {
    constructor() {
      /**
       * A set of supported event names for gestures to be used in Angular.
       * Angular supports all built-in recognizers, as listed in
       * [HammerJS documentation](https://hammerjs.github.io/).
       */
      this.events = [];
      /**
       * Maps gesture event names to a set of configuration options
       * that specify overrides to the default values for specific properties.
       *
       * The key is a supported event name to be configured,
       * and the options object contains a set of properties, with override values
       * to be applied to the named recognizer event.
       * For example, to disable recognition of the rotate event, specify
       *  `{"rotate": {"enable": false}}`.
       *
       * Properties that are not present take the HammerJS default values.
       * For information about which properties are supported for which events,
       * and their allowed and default values, see
       * [HammerJS documentation](https://hammerjs.github.io/).
       *
       */

      this.overrides = {};
    }
    /**
     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
     * and attaches it to a given HTML element.
     * @param element The element that will recognize gestures.
     * @returns A HammerJS event-manager object.
     */


    buildHammer(element) {
      const mc = new Hammer(element, this.options);
      mc.get('pinch').set({
        enable: true
      });
      mc.get('rotate').set({
        enable: true
      });

      for (const eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }

      return mc;
    }

  }

  HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {
    return new (t || HammerGestureConfig)();
  };

  HammerGestureConfig.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: HammerGestureConfig,
    factory: HammerGestureConfig.ɵfac
  });
  return HammerGestureConfig;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Event plugin that adds Hammer support to an application.
 *
 * @ngModule HammerModule
 */


let HammerGesturesPlugin = /*#__PURE__*/(() => {
  class HammerGesturesPlugin extends EventManagerPlugin {
    constructor(doc, _config, console, loader) {
      super(doc);
      this._config = _config;
      this.console = console;
      this.loader = loader;
      this._loaderPromise = null;
    }

    supports(eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
        return false;
      }

      if (!window.Hammer && !this.loader) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          this.console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);
        }

        return false;
      }

      return true;
    }

    addEventListener(element, eventName, handler) {
      const zone = this.manager.getZone();
      eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener
      // until Hammer is loaded.

      if (!window.Hammer && this.loader) {
        this._loaderPromise = this._loaderPromise || this.loader(); // This `addEventListener` method returns a function to remove the added listener.
        // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
        // than remove anything.

        let cancelRegistration = false;

        let deregister = () => {
          cancelRegistration = true;
        };

        this._loaderPromise.then(() => {
          // If Hammer isn't actually loaded when the custom loader resolves, give up.
          if (!window.Hammer) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
              this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
            }

            deregister = () => {};

            return;
          }

          if (!cancelRegistration) {
            // Now that Hammer is loaded and the listener is being loaded for real,
            // the deregistration function changes from canceling registration to removal.
            deregister = this.addEventListener(element, eventName, handler);
          }
        }).catch(() => {
          if (typeof ngDevMode === 'undefined' || ngDevMode) {
            this.console.warn(`The "${eventName}" event cannot be bound because the custom ` + `Hammer.JS loader failed.`);
          }

          deregister = () => {};
        }); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
        // can change the behavior of `deregister` once the listener is added. Using a closure in
        // this way allows us to avoid any additional data structures to track listener removal.


        return () => {
          deregister();
        };
      }

      return zone.runOutsideAngular(() => {
        // Creating the manager bind events, must be done outside of angular
        const mc = this._config.buildHammer(element);

        const callback = function (eventObj) {
          zone.runGuarded(function () {
            handler(eventObj);
          });
        };

        mc.on(eventName, callback);
        return () => {
          mc.off(eventName, callback); // destroy mc to prevent memory leak

          if (typeof mc.destroy === 'function') {
            mc.destroy();
          }
        };
      });
    }

    isCustomEvent(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }

  }

  HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {
    return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_LOADER, 8));
  };

  HammerGesturesPlugin.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: HammerGesturesPlugin,
    factory: HammerGesturesPlugin.ɵfac
  });
  return HammerGesturesPlugin;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Adds support for HammerJS.
 *
 * Import this module at the root of your application so that Angular can work with
 * HammerJS to detect gesture events.
 *
 * Note that applications still need to include the HammerJS script itself. This module
 * simply sets up the coordination layer between HammerJS and Angular's EventManager.
 *
 * @publicApi
 */


let HammerModule = /*#__PURE__*/(() => {
  class HammerModule {}

  HammerModule.ɵfac = function HammerModule_Factory(t) {
    return new (t || HammerModule)();
  };

  HammerModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: HammerModule
  });
  HammerModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    providers: [{
      provide: EVENT_MANAGER_PLUGINS,
      useClass: HammerGesturesPlugin,
      multi: true,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional(), HAMMER_LOADER]]
    }, {
      provide: HAMMER_GESTURE_CONFIG,
      useClass: HammerGestureConfig,
      deps: []
    }]
  });
  return HammerModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](https://g.co/ng/security).
 *
 * @publicApi
 */


let DomSanitizer = /*#__PURE__*/(() => {
  class DomSanitizer {}

  DomSanitizer.ɵfac = function DomSanitizer_Factory(t) {
    return new (t || DomSanitizer)();
  };

  DomSanitizer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: DomSanitizer,
    factory: function DomSanitizer_Factory(t) {
      let r = null;

      if (t) {
        r = new (t || DomSanitizer)();
      } else {
        r = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSanitizerImpl);
      }

      return r;
    },
    providedIn: 'root'
  });
  return DomSanitizer;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function domSanitizerImplFactory(injector) {
  return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
}

let DomSanitizerImpl = /*#__PURE__*/(() => {
  class DomSanitizerImpl extends DomSanitizer {
    constructor(_doc) {
      super();
      this._doc = _doc;
    }

    sanitize(ctx, value) {
      if (value == null) return null;

      switch (ctx) {
        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.NONE:
          return value;

        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.HTML:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "HTML"
          /* Html */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
          }

          return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeHtml"])(this._doc, String(value)).toString();

        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.STYLE:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Style"
          /* Style */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
          }

          return value;

        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.SCRIPT:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Script"
          /* Script */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
          }

          throw new Error('unsafe value used in a script context');

        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.URL:
          const type = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetSanitizationBypassType"])(value);

          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "URL"
          /* Url */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
          }

          return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeUrl"])(String(value));

        case _angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.RESOURCE_URL:
          if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL"
          /* ResourceUrl */
          )) {
            return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
          }

          throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');

        default:
          throw new Error(`Unexpected SecurityContext ${ctx} (see https://g.co/ng/security#xss)`);
      }
    }

    bypassSecurityTrustHtml(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustHtml"])(value);
    }

    bypassSecurityTrustStyle(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustStyle"])(value);
    }

    bypassSecurityTrustScript(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustScript"])(value);
    }

    bypassSecurityTrustUrl(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustUrl"])(value);
    }

    bypassSecurityTrustResourceUrl(value) {
      return (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustResourceUrl"])(value);
    }

  }

  DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {
    return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
  };

  DomSanitizerImpl.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
    token: DomSanitizerImpl,
    factory: function DomSanitizerImpl_Factory(t) {
      let r = null;

      if (t) {
        r = new t();
      } else {
        r = domSanitizerImplFactory(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector));
      }

      return r;
    },
    providedIn: 'root'
  });
  return DomSanitizerImpl;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


const VERSION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */

 //# sourceMappingURL=platform-browser.mjs.map

/***/ }),

/***/ 4202:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/router/fesm2015/router.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActivatedRoute": () => (/* binding */ ActivatedRoute),
/* harmony export */   "ActivatedRouteSnapshot": () => (/* binding */ ActivatedRouteSnapshot),
/* harmony export */   "ActivationEnd": () => (/* binding */ ActivationEnd),
/* harmony export */   "ActivationStart": () => (/* binding */ ActivationStart),
/* harmony export */   "BaseRouteReuseStrategy": () => (/* binding */ BaseRouteReuseStrategy),
/* harmony export */   "ChildActivationEnd": () => (/* binding */ ChildActivationEnd),
/* harmony export */   "ChildActivationStart": () => (/* binding */ ChildActivationStart),
/* harmony export */   "ChildrenOutletContexts": () => (/* binding */ ChildrenOutletContexts),
/* harmony export */   "DefaultUrlSerializer": () => (/* binding */ DefaultUrlSerializer),
/* harmony export */   "GuardsCheckEnd": () => (/* binding */ GuardsCheckEnd),
/* harmony export */   "GuardsCheckStart": () => (/* binding */ GuardsCheckStart),
/* harmony export */   "NavigationCancel": () => (/* binding */ NavigationCancel),
/* harmony export */   "NavigationEnd": () => (/* binding */ NavigationEnd),
/* harmony export */   "NavigationError": () => (/* binding */ NavigationError),
/* harmony export */   "NavigationStart": () => (/* binding */ NavigationStart),
/* harmony export */   "NoPreloading": () => (/* binding */ NoPreloading),
/* harmony export */   "OutletContext": () => (/* binding */ OutletContext),
/* harmony export */   "PRIMARY_OUTLET": () => (/* binding */ PRIMARY_OUTLET),
/* harmony export */   "PreloadAllModules": () => (/* binding */ PreloadAllModules),
/* harmony export */   "PreloadingStrategy": () => (/* binding */ PreloadingStrategy),
/* harmony export */   "ROUTER_CONFIGURATION": () => (/* binding */ ROUTER_CONFIGURATION),
/* harmony export */   "ROUTER_INITIALIZER": () => (/* binding */ ROUTER_INITIALIZER),
/* harmony export */   "ROUTES": () => (/* binding */ ROUTES),
/* harmony export */   "ResolveEnd": () => (/* binding */ ResolveEnd),
/* harmony export */   "ResolveStart": () => (/* binding */ ResolveStart),
/* harmony export */   "RouteConfigLoadEnd": () => (/* binding */ RouteConfigLoadEnd),
/* harmony export */   "RouteConfigLoadStart": () => (/* binding */ RouteConfigLoadStart),
/* harmony export */   "RouteReuseStrategy": () => (/* binding */ RouteReuseStrategy),
/* harmony export */   "Router": () => (/* binding */ Router),
/* harmony export */   "RouterEvent": () => (/* binding */ RouterEvent),
/* harmony export */   "RouterLink": () => (/* binding */ RouterLink),
/* harmony export */   "RouterLinkActive": () => (/* binding */ RouterLinkActive),
/* harmony export */   "RouterLinkWithHref": () => (/* binding */ RouterLinkWithHref),
/* harmony export */   "RouterModule": () => (/* binding */ RouterModule),
/* harmony export */   "RouterOutlet": () => (/* binding */ RouterOutlet),
/* harmony export */   "RouterPreloader": () => (/* binding */ RouterPreloader),
/* harmony export */   "RouterState": () => (/* binding */ RouterState),
/* harmony export */   "RouterStateSnapshot": () => (/* binding */ RouterStateSnapshot),
/* harmony export */   "RoutesRecognized": () => (/* binding */ RoutesRecognized),
/* harmony export */   "Scroll": () => (/* binding */ Scroll),
/* harmony export */   "UrlHandlingStrategy": () => (/* binding */ UrlHandlingStrategy),
/* harmony export */   "UrlSegment": () => (/* binding */ UrlSegment),
/* harmony export */   "UrlSegmentGroup": () => (/* binding */ UrlSegmentGroup),
/* harmony export */   "UrlSerializer": () => (/* binding */ UrlSerializer),
/* harmony export */   "UrlTree": () => (/* binding */ UrlTree),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "convertToParamMap": () => (/* binding */ convertToParamMap),
/* harmony export */   "provideRoutes": () => (/* binding */ provideRoutes),
/* harmony export */   "ɵEmptyOutletComponent": () => (/* binding */ ɵEmptyOutletComponent),
/* harmony export */   "ɵROUTER_PROVIDERS": () => (/* binding */ ROUTER_PROVIDERS),
/* harmony export */   "ɵassignExtraOptionsToRouter": () => (/* binding */ assignExtraOptionsToRouter),
/* harmony export */   "ɵflatten": () => (/* binding */ flatten)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 188);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 9646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 1135);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 9841);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ 2843);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 6805);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ 1350);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ 9770);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs */ 9751);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs */ 515);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs */ 4033);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 4004);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 3900);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 5698);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 8675);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 2940);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 9300);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 262);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 4351);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 3103);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 590);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 6099);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ 8505);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rxjs/operators */ 2035);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 8343);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs/operators */ 8746);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! rxjs/operators */ 8189);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/common */ 9808);
/**
 * @license Angular v13.3.7
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Base for events the router goes through, as opposed to events tied to a specific
 * route. Fired one time for any given navigation.
 *
 * The following code shows how a class subscribes to router events.
 *
 * ```ts
 * import {Event, RouterEvent, Router} from '@angular/router';
 *
 * class MyService {
 *   constructor(public router: Router) {
 *     router.events.pipe(
 *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)
 *     ).subscribe((e: RouterEvent) => {
 *       // Do something
 *     });
 *   }
 * }
 * ```
 *
 * @see `Event`
 * @see [Router events summary](guide/router-reference#router-events)
 * @publicApi
 */

class RouterEvent {
  constructor(
  /** A unique ID that the router assigns to every router navigation. */
  id,
  /** The URL that is the destination for this navigation. */
  url) {
    this.id = id;
    this.url = url;
  }

}
/**
 * An event triggered when a navigation starts.
 *
 * @publicApi
 */


class NavigationStart extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  navigationTrigger = 'imperative',
  /** @docsNotRequired */
  restoredState = null) {
    super(id, url);
    this.navigationTrigger = navigationTrigger;
    this.restoredState = restoredState;
  }
  /** @docsNotRequired */


  toString() {
    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
  }

}
/**
 * An event triggered when a navigation ends successfully.
 *
 * @see `NavigationStart`
 * @see `NavigationCancel`
 * @see `NavigationError`
 *
 * @publicApi
 */


class NavigationEnd extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
  }
  /** @docsNotRequired */


  toString() {
    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
  }

}
/**
 * An event triggered when a navigation is canceled, directly or indirectly.
 * This can happen for several reasons including when a route guard
 * returns `false` or initiates a redirect by returning a `UrlTree`.
 *
 * @see `NavigationStart`
 * @see `NavigationEnd`
 * @see `NavigationError`
 *
 * @publicApi
 */


class NavigationCancel extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  reason) {
    super(id, url);
    this.reason = reason;
  }
  /** @docsNotRequired */


  toString() {
    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
  }

}
/**
 * An event triggered when a navigation fails due to an unexpected error.
 *
 * @see `NavigationStart`
 * @see `NavigationEnd`
 * @see `NavigationCancel`
 *
 * @publicApi
 */


class NavigationError extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  error) {
    super(id, url);
    this.error = error;
  }
  /** @docsNotRequired */


  toString() {
    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
  }

}
/**
 * An event triggered when routes are recognized.
 *
 * @publicApi
 */


class RoutesRecognized extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  /** @docsNotRequired */


  toString() {
    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }

}
/**
 * An event triggered at the start of the Guard phase of routing.
 *
 * @see `GuardsCheckEnd`
 *
 * @publicApi
 */


class GuardsCheckStart extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }

  toString() {
    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }

}
/**
 * An event triggered at the end of the Guard phase of routing.
 *
 * @see `GuardsCheckStart`
 *
 * @publicApi
 */


class GuardsCheckEnd extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state,
  /** @docsNotRequired */
  shouldActivate) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.shouldActivate = shouldActivate;
  }

  toString() {
    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
  }

}
/**
 * An event triggered at the start of the Resolve phase of routing.
 *
 * Runs in the "resolve" phase whether or not there is anything to resolve.
 * In future, may change to only run when there are things to be resolved.
 *
 * @see `ResolveEnd`
 *
 * @publicApi
 */


class ResolveStart extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }

  toString() {
    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }

}
/**
 * An event triggered at the end of the Resolve phase of routing.
 * @see `ResolveStart`.
 *
 * @publicApi
 */


class ResolveEnd extends RouterEvent {
  constructor(
  /** @docsNotRequired */
  id,
  /** @docsNotRequired */
  url,
  /** @docsNotRequired */
  urlAfterRedirects,
  /** @docsNotRequired */
  state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }

  toString() {
    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }

}
/**
 * An event triggered before lazy loading a route configuration.
 *
 * @see `RouteConfigLoadEnd`
 *
 * @publicApi
 */


class RouteConfigLoadStart {
  constructor(
  /** @docsNotRequired */
  route) {
    this.route = route;
  }

  toString() {
    return `RouteConfigLoadStart(path: ${this.route.path})`;
  }

}
/**
 * An event triggered when a route has been lazy loaded.
 *
 * @see `RouteConfigLoadStart`
 *
 * @publicApi
 */


class RouteConfigLoadEnd {
  constructor(
  /** @docsNotRequired */
  route) {
    this.route = route;
  }

  toString() {
    return `RouteConfigLoadEnd(path: ${this.route.path})`;
  }

}
/**
 * An event triggered at the start of the child-activation
 * part of the Resolve phase of routing.
 * @see  `ChildActivationEnd`
 * @see `ResolveStart`
 *
 * @publicApi
 */


class ChildActivationStart {
  constructor(
  /** @docsNotRequired */
  snapshot) {
    this.snapshot = snapshot;
  }

  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
    return `ChildActivationStart(path: '${path}')`;
  }

}
/**
 * An event triggered at the end of the child-activation part
 * of the Resolve phase of routing.
 * @see `ChildActivationStart`
 * @see `ResolveStart`
 * @publicApi
 */


class ChildActivationEnd {
  constructor(
  /** @docsNotRequired */
  snapshot) {
    this.snapshot = snapshot;
  }

  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
    return `ChildActivationEnd(path: '${path}')`;
  }

}
/**
 * An event triggered at the start of the activation part
 * of the Resolve phase of routing.
 * @see `ActivationEnd`
 * @see `ResolveStart`
 *
 * @publicApi
 */


class ActivationStart {
  constructor(
  /** @docsNotRequired */
  snapshot) {
    this.snapshot = snapshot;
  }

  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
    return `ActivationStart(path: '${path}')`;
  }

}
/**
 * An event triggered at the end of the activation part
 * of the Resolve phase of routing.
 * @see `ActivationStart`
 * @see `ResolveStart`
 *
 * @publicApi
 */


class ActivationEnd {
  constructor(
  /** @docsNotRequired */
  snapshot) {
    this.snapshot = snapshot;
  }

  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
    return `ActivationEnd(path: '${path}')`;
  }

}
/**
 * An event triggered by scrolling.
 *
 * @publicApi
 */


class Scroll {
  constructor(
  /** @docsNotRequired */
  routerEvent,
  /** @docsNotRequired */
  position,
  /** @docsNotRequired */
  anchor) {
    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
  }

  toString() {
    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The primary routing outlet.
 *
 * @publicApi
 */


const PRIMARY_OUTLET = 'primary';

class ParamsAsMap {
  constructor(params) {
    this.params = params || {};
  }

  has(name) {
    return Object.prototype.hasOwnProperty.call(this.params, name);
  }

  get(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v[0] : v;
    }

    return null;
  }

  getAll(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v : [v];
    }

    return [];
  }

  get keys() {
    return Object.keys(this.params);
  }

}
/**
 * Converts a `Params` instance to a `ParamMap`.
 * @param params The instance to convert.
 * @returns The new map instance.
 *
 * @publicApi
 */


function convertToParamMap(params) {
  return new ParamsAsMap(params);
}

const NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';

function navigationCancelingError(message) {
  const error = Error('NavigationCancelingError: ' + message);
  error[NAVIGATION_CANCELING_ERROR] = true;
  return error;
}

function isNavigationCancelingError(error) {
  return error && error[NAVIGATION_CANCELING_ERROR];
} // Matches the route configuration (`route`) against the actual URL (`segments`).


function defaultUrlMatcher(segments, segmentGroup, route) {
  const parts = route.path.split('/');

  if (parts.length > segments.length) {
    // The actual URL is shorter than the config, no match
    return null;
  }

  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    // The config is longer than the actual URL but we are looking for a full match, return null
    return null;
  }

  const posParams = {}; // Check each config part against the actual URL

  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const segment = segments[index];
    const isParameter = part.startsWith(':');

    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      // The actual URL part does not match the config, no match
      return null;
    }
  }

  return {
    consumed: segments.slice(0, parts.length),
    posParams
  };
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function shallowEqualArrays(a, b) {
  if (a.length !== b.length) return false;

  for (let i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i])) return false;
  }

  return true;
}

function shallowEqual(a, b) {
  // While `undefined` should never be possible, it would sometimes be the case in IE 11
  // and pre-chromium Edge. The check below accounts for this edge case.
  const k1 = a ? Object.keys(a) : undefined;
  const k2 = b ? Object.keys(b) : undefined;

  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }

  let key;

  for (let i = 0; i < k1.length; i++) {
    key = k1[i];

    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }

  return true;
}
/**
 * Test equality for arrays of strings or a string.
 */


function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    const aSorted = [...a].sort();
    const bSorted = [...b].sort();
    return aSorted.every((val, index) => bSorted[index] === val);
  } else {
    return a === b;
  }
}
/**
 * Flattens single-level nested arrays.
 */


function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}
/**
 * Return the last element of an array.
 */


function last(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
/**
 * Verifys all booleans in an array are `true`.
 */


function and(bools) {
  return !bools.some(v => !v);
}

function forEach(map, callback) {
  for (const prop in map) {
    if (map.hasOwnProperty(prop)) {
      callback(map[prop], prop);
    }
  }
}

function wrapIntoObservable(value) {
  if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(value)) {
    return value;
  }

  if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(value)) {
    // Use `Promise.resolve()` to wrap promise-like instances.
    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
    // change detection.
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(Promise.resolve(value));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(value);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function createEmptyUrlTree() {
  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}

const pathCompareMap = {
  'exact': equalSegmentGroups,
  'subset': containsSegmentGroup
};
const paramCompareMap = {
  'exact': equalParams,
  'subset': containsParams,
  'ignored': () => true
};

function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === 'exact' && container.fragment !== containee.fragment);
}

function equalParams(container, containee) {
  // TODO: This does not handle array params correctly.
  return shallowEqual(container, containee);
}

function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments)) return false;

  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }

  if (container.numberOfChildren !== containee.numberOfChildren) return false;

  for (const c in containee.children) {
    if (!container.children[c]) return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
  }

  return true;
}

function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));
}

function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}

function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    const current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths)) return false;
    if (containee.hasChildren()) return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths)) return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;

    for (const c in containee.children) {
      if (!container.children[c]) return false;

      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }

    return true;
  } else {
    const current = containeePaths.slice(0, container.segments.length);
    const next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, current)) return false;
    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;
    if (!container.children[PRIMARY_OUTLET]) return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}

function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every((containeeSegment, i) => {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
/**
 * @description
 *
 * Represents the parsed URL.
 *
 * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
 * serialized tree.
 * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree =
 *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
 *     const f = tree.fragment; // return 'fragment'
 *     const q = tree.queryParams; // returns {debug: 'true'}
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
 *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
 *     g.children['support'].segments; // return 1 segment 'help'
 *   }
 * }
 * ```
 *
 * @publicApi
 */


class UrlTree {
  /** @internal */
  constructor(
  /** The root segment group of the URL tree */
  root,
  /** The query params of the URL */
  queryParams,
  /** The fragment of the URL */
  fragment) {
    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
  }

  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = convertToParamMap(this.queryParams);
    }

    return this._queryParamMap;
  }
  /** @docsNotRequired */


  toString() {
    return DEFAULT_SERIALIZER.serialize(this);
  }

}
/**
 * @description
 *
 * Represents the parsed URL segment group.
 *
 * See `UrlTree` for more information.
 *
 * @publicApi
 */


class UrlSegmentGroup {
  constructor(
  /** The URL segments of this group. See `UrlSegment` for more information */
  segments,
  /** The list of children of this group */
  children) {
    this.segments = segments;
    this.children = children;
    /** The parent node in the url tree */

    this.parent = null;
    forEach(children, (v, k) => v.parent = this);
  }
  /** Whether the segment has child segments */


  hasChildren() {
    return this.numberOfChildren > 0;
  }
  /** Number of child segments */


  get numberOfChildren() {
    return Object.keys(this.children).length;
  }
  /** @docsNotRequired */


  toString() {
    return serializePaths(this);
  }

}
/**
 * @description
 *
 * Represents a single URL segment.
 *
 * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
 * parameters associated with the segment.
 *
 * @usageNotes
 * ### Example
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree = router.parseUrl('/team;id=33');
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments;
 *     s[0].path; // returns 'team'
 *     s[0].parameters; // returns {id: 33}
 *   }
 * }
 * ```
 *
 * @publicApi
 */


class UrlSegment {
  constructor(
  /** The path part of a URL segment */
  path,
  /** The matrix parameters associated with a segment */
  parameters) {
    this.path = path;
    this.parameters = parameters;
  }

  get parameterMap() {
    if (!this._parameterMap) {
      this._parameterMap = convertToParamMap(this.parameters);
    }

    return this._parameterMap;
  }
  /** @docsNotRequired */


  toString() {
    return serializePath(this);
  }

}

function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
}

function equalPath(as, bs) {
  if (as.length !== bs.length) return false;
  return as.every((a, i) => a.path === bs[i].path);
}

function mapChildrenIntoArray(segment, fn) {
  let res = [];
  forEach(segment.children, (child, childOutlet) => {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  forEach(segment.children, (child, childOutlet) => {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  return res;
}
/**
 * @description
 *
 * Serializes and deserializes a URL string into a URL tree.
 *
 * The url serialization strategy is customizable. You can
 * make all URLs case insensitive by providing a custom UrlSerializer.
 *
 * See `DefaultUrlSerializer` for an example of a URL serializer.
 *
 * @publicApi
 */


class UrlSerializer {}
/**
 * @description
 *
 * A default implementation of the `UrlSerializer`.
 *
 * Example URLs:
 *
 * ```
 * /inbox/33(popup:compose)
 * /inbox/33;open=true/messages/44
 * ```
 *
 * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
 * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
 * specify route specific parameters.
 *
 * @publicApi
 */


class DefaultUrlSerializer {
  /** Parses a url into a `UrlTree` */
  parse(url) {
    const p = new UrlParser(url);
    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
  }
  /** Converts a `UrlTree` into a url */


  serialize(tree) {
    const segment = `/${serializeSegment(tree.root, true)}`;
    const query = serializeQueryParams(tree.queryParams);
    const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';
    return `${segment}${query}${fragment}`;
  }

}

const DEFAULT_SERIALIZER = /*#__PURE__*/new DefaultUrlSerializer();

function serializePaths(segment) {
  return segment.segments.map(p => serializePath(p)).join('/');
}

function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }

  if (root) {
    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
    const children = [];
    forEach(segment.children, (v, k) => {
      if (k !== PRIMARY_OUTLET) {
        children.push(`${k}:${serializeSegment(v, false)}`);
      }
    });
    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;
  } else {
    const children = mapChildrenIntoArray(segment, (v, k) => {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }

      return [`${k}:${serializeSegment(v, false)}`];
    }); // use no parenthesis if the only child is a primary outlet route

    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return `${serializePaths(segment)}/${children[0]}`;
    }

    return `${serializePaths(segment)}/(${children.join('//')})`;
  }
}
/**
 * Encodes a URI string with the default encoding. This function will only ever be called from
 * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need
 * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't
 * have to be encoded per https://url.spec.whatwg.org.
 */


function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');
}
/**
 * This function should be used to encode both keys and values in a query string key/value. In
 * the following URL, you need to call encodeUriQuery on "k" and "v":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ';');
}
/**
 * This function should be used to encode a URL fragment. In the following URL, you need to call
 * encodeUriFragment on "f":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriFragment(s) {
  return encodeURI(s);
}
/**
 * This function should be run on any URI segment as well as the key and value in a key/value
 * pair for matrix params. In the following URL, you need to call encodeUriSegment on "html",
 * "mk", and "mv":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 */


function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%26/gi, '&');
}

function decode(s) {
  return decodeURIComponent(s);
} // Query keys/values should have the "+" replaced first, as "+" in a query string is " ".
// decodeURIComponent function will not decode "+" as a space.


function decodeQuery(s) {
  return decode(s.replace(/\+/g, '%20'));
}

function serializePath(path) {
  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
}

function serializeMatrixParams(params) {
  return Object.keys(params).map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`).join('');
}

function serializeQueryParams(params) {
  const strParams = Object.keys(params).map(name => {
    const value = params[name];
    return Array.isArray(value) ? value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
  }).filter(s => !!s);
  return strParams.length ? `?${strParams.join('&')}` : '';
}

const SEGMENT_RE = /^[^\/()?;=#]+/;

function matchSegments(str) {
  const match = str.match(SEGMENT_RE);
  return match ? match[0] : '';
}

const QUERY_PARAM_RE = /^[^=?&#]+/; // Return the name of the query param at the start of the string or an empty string

function matchQueryParams(str) {
  const match = str.match(QUERY_PARAM_RE);
  return match ? match[0] : '';
}

const QUERY_PARAM_VALUE_RE = /^[^&#]+/; // Return the value of the query param at the start of the string or an empty string

function matchUrlQueryParamValue(str) {
  const match = str.match(QUERY_PARAM_VALUE_RE);
  return match ? match[0] : '';
}

class UrlParser {
  constructor(url) {
    this.url = url;
    this.remaining = url;
  }

  parseRootSegment() {
    this.consumeOptional('/');

    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
      return new UrlSegmentGroup([], {});
    } // The root segment group never has segments


    return new UrlSegmentGroup([], this.parseChildren());
  }

  parseQueryParams() {
    const params = {};

    if (this.consumeOptional('?')) {
      do {
        this.parseQueryParam(params);
      } while (this.consumeOptional('&'));
    }

    return params;
  }

  parseFragment() {
    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
  }

  parseChildren() {
    if (this.remaining === '') {
      return {};
    }

    this.consumeOptional('/');
    const segments = [];

    if (!this.peekStartsWith('(')) {
      segments.push(this.parseSegment());
    }

    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
      this.capture('/');
      segments.push(this.parseSegment());
    }

    let children = {};

    if (this.peekStartsWith('/(')) {
      this.capture('/');
      children = this.parseParens(true);
    }

    let res = {};

    if (this.peekStartsWith('(')) {
      res = this.parseParens(false);
    }

    if (segments.length > 0 || Object.keys(children).length > 0) {
      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
    }

    return res;
  } // parse a segment with its matrix parameters
  // ie `name;k1=v1;k2`


  parseSegment() {
    const path = matchSegments(this.remaining);

    if (path === '' && this.peekStartsWith(';')) {
      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);
    }

    this.capture(path);
    return new UrlSegment(decode(path), this.parseMatrixParams());
  }

  parseMatrixParams() {
    const params = {};

    while (this.consumeOptional(';')) {
      this.parseParam(params);
    }

    return params;
  }

  parseParam(params) {
    const key = matchSegments(this.remaining);

    if (!key) {
      return;
    }

    this.capture(key);
    let value = '';

    if (this.consumeOptional('=')) {
      const valueMatch = matchSegments(this.remaining);

      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }

    params[decode(key)] = decode(value);
  } // Parse a single query parameter `name[=value]`


  parseQueryParam(params) {
    const key = matchQueryParams(this.remaining);

    if (!key) {
      return;
    }

    this.capture(key);
    let value = '';

    if (this.consumeOptional('=')) {
      const valueMatch = matchUrlQueryParamValue(this.remaining);

      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }

    const decodedKey = decodeQuery(key);
    const decodedVal = decodeQuery(value);

    if (params.hasOwnProperty(decodedKey)) {
      // Append to existing values
      let currentVal = params[decodedKey];

      if (!Array.isArray(currentVal)) {
        currentVal = [currentVal];
        params[decodedKey] = currentVal;
      }

      currentVal.push(decodedVal);
    } else {
      // Create a new value
      params[decodedKey] = decodedVal;
    }
  } // parse `(a/b//outlet_name:c/d)`


  parseParens(allowPrimary) {
    const segments = {};
    this.capture('(');

    while (!this.consumeOptional(')') && this.remaining.length > 0) {
      const path = matchSegments(this.remaining);
      const next = this.remaining[path.length]; // if is is not one of these characters, then the segment was unescaped
      // or the group was not closed

      if (next !== '/' && next !== ')' && next !== ';') {
        throw new Error(`Cannot parse url '${this.url}'`);
      }

      let outletName = undefined;

      if (path.indexOf(':') > -1) {
        outletName = path.substr(0, path.indexOf(':'));
        this.capture(outletName);
        this.capture(':');
      } else if (allowPrimary) {
        outletName = PRIMARY_OUTLET;
      }

      const children = this.parseChildren();
      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
      this.consumeOptional('//');
    }

    return segments;
  }

  peekStartsWith(str) {
    return this.remaining.startsWith(str);
  } // Consumes the prefix when it is present and returns whether it has been consumed


  consumeOptional(str) {
    if (this.peekStartsWith(str)) {
      this.remaining = this.remaining.substring(str.length);
      return true;
    }

    return false;
  }

  capture(str) {
    if (!this.consumeOptional(str)) {
      throw new Error(`Expected "${str}".`);
    }
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class Tree {
  constructor(root) {
    this._root = root;
  }

  get root() {
    return this._root.value;
  }
  /**
   * @internal
   */


  parent(t) {
    const p = this.pathFromRoot(t);
    return p.length > 1 ? p[p.length - 2] : null;
  }
  /**
   * @internal
   */


  children(t) {
    const n = findNode(t, this._root);
    return n ? n.children.map(t => t.value) : [];
  }
  /**
   * @internal
   */


  firstChild(t) {
    const n = findNode(t, this._root);
    return n && n.children.length > 0 ? n.children[0].value : null;
  }
  /**
   * @internal
   */


  siblings(t) {
    const p = findPath(t, this._root);
    if (p.length < 2) return [];
    const c = p[p.length - 2].children.map(c => c.value);
    return c.filter(cc => cc !== t);
  }
  /**
   * @internal
   */


  pathFromRoot(t) {
    return findPath(t, this._root).map(s => s.value);
  }

} // DFS for the node matching the value


function findNode(value, node) {
  if (value === node.value) return node;

  for (const child of node.children) {
    const node = findNode(value, child);
    if (node) return node;
  }

  return null;
} // Return the path to the node with the given value using DFS


function findPath(value, node) {
  if (value === node.value) return [node];

  for (const child of node.children) {
    const path = findPath(value, child);

    if (path.length) {
      path.unshift(node);
      return path;
    }
  }

  return [];
}

class TreeNode {
  constructor(value, children) {
    this.value = value;
    this.children = children;
  }

  toString() {
    return `TreeNode(${this.value})`;
  }

} // Return the list of T indexed by outlet name


function nodeChildrenAsMap(node) {
  const map = {};

  if (node) {
    node.children.forEach(child => map[child.value.outlet] = child);
  }

  return map;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Represents the state of the router as a tree of activated routes.
 *
 * @usageNotes
 *
 * Every node in the route tree is an `ActivatedRoute` instance
 * that knows about the "consumed" URL segments, the extracted parameters,
 * and the resolved data.
 * Use the `ActivatedRoute` properties to traverse the tree from any node.
 *
 * The following fragment shows how a component gets the root node
 * of the current state to establish its own route tree:
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const root: ActivatedRoute = state.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * @see `ActivatedRoute`
 * @see [Getting route information](guide/router#getting-route-information)
 *
 * @publicApi
 */


class RouterState extends Tree {
  /** @internal */
  constructor(root,
  /** The current snapshot of the router state */
  snapshot) {
    super(root);
    this.snapshot = snapshot;
    setRouterState(this, root);
  }

  toString() {
    return this.snapshot.toString();
  }

}

function createEmptyState(urlTree, rootComponent) {
  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
  const emptyUrl = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject([new UrlSegment('', {})]);
  const emptyParams = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
  const emptyData = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
  const emptyQueryParams = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
  const fragment = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject('');
  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}

function createEmptyStateSnapshot(urlTree, rootComponent) {
  const emptyParams = {};
  const emptyData = {};
  const emptyQueryParams = {};
  const fragment = '';
  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
  return new RouterStateSnapshot('', new TreeNode(activated, []));
}
/**
 * Provides access to information about a route associated with a component
 * that is loaded in an outlet.
 * Use to traverse the `RouterState` tree and extract information from nodes.
 *
 * The following example shows how to construct a component using information from a
 * currently activated route.
 *
 * Note: the observables in this class only emit when the current and previous values differ based
 * on shallow equality. For example, changing deeply nested properties in resolved `data` will not
 * cause the `ActivatedRoute.data` `Observable` to emit a new value.
 *
 * {@example router/activated-route/module.ts region="activated-route"
 *     header="activated-route.component.ts"}
 *
 * @see [Getting route information](guide/router#getting-route-information)
 *
 * @publicApi
 */


class ActivatedRoute {
  /** @internal */
  constructor(
  /** An observable of the URL segments matched by this route. */
  url,
  /** An observable of the matrix parameters scoped to this route. */
  params,
  /** An observable of the query parameters shared by all the routes. */
  queryParams,
  /** An observable of the URL fragment shared by all the routes. */
  fragment,
  /** An observable of the static and resolved data of this route. */
  data,
  /** The outlet name of the route, a constant. */
  outlet,
  /** The component of the route, a constant. */
  // TODO(vsavkin): remove |string
  component, futureSnapshot) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
  }
  /** The configuration used to match this route. */


  get routeConfig() {
    return this._futureSnapshot.routeConfig;
  }
  /** The root of the router state. */


  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree. */


  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree. */


  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree. */


  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route. */


  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  /**
   * An Observable that contains a map of the required and optional parameters
   * specific to the route.
   * The map supports retrieving single and multiple values from the same parameter.
   */


  get paramMap() {
    if (!this._paramMap) {
      this._paramMap = this.params.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(p => convertToParamMap(p)));
    }

    return this._paramMap;
  }
  /**
   * An Observable that contains a map of the query parameters available to all routes.
   * The map supports retrieving single and multiple values from the query parameter.
   */


  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = this.queryParams.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(p => convertToParamMap(p)));
    }

    return this._queryParamMap;
  }

  toString() {
    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
  }

}
/**
 * Returns the inherited params, data, and resolve for a given route.
 * By default, this only inherits values up to the nearest path-less or component-less route.
 * @internal
 */


function inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {
  const pathFromRoot = route.pathFromRoot;
  let inheritingStartingFrom = 0;

  if (paramsInheritanceStrategy !== 'always') {
    inheritingStartingFrom = pathFromRoot.length - 1;

    while (inheritingStartingFrom >= 1) {
      const current = pathFromRoot[inheritingStartingFrom];
      const parent = pathFromRoot[inheritingStartingFrom - 1]; // current route is an empty path => inherits its parent's params and data

      if (current.routeConfig && current.routeConfig.path === '') {
        inheritingStartingFrom--; // parent is componentless => current route should inherit its params and data
      } else if (!parent.component) {
        inheritingStartingFrom--;
      } else {
        break;
      }
    }
  }

  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));
}
/** @internal */


function flattenInherited(pathFromRoot) {
  return pathFromRoot.reduce((res, curr) => {
    const params = Object.assign(Object.assign({}, res.params), curr.params);
    const data = Object.assign(Object.assign({}, res.data), curr.data);
    const resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);
    return {
      params,
      data,
      resolve
    };
  }, {
    params: {},
    data: {},
    resolve: {}
  });
}
/**
 * @description
 *
 * Contains the information about a route associated with a component loaded in an
 * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to
 * traverse the router state tree.
 *
 * The following example initializes a component with route information extracted
 * from the snapshot of the root node at the time of creation.
 *
 * ```
 * @Component({templateUrl:'./my-component.html'})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: string = route.snapshot.params.id;
 *     const url: string = route.snapshot.url.join('');
 *     const user = route.snapshot.data.user;
 *   }
 * }
 * ```
 *
 * @publicApi
 */


class ActivatedRouteSnapshot {
  /** @internal */
  constructor(
  /** The URL segments matched by this route */
  url,
  /**
   *  The matrix parameters scoped to this route.
   *
   *  You can compute all params (or data) in the router state or to get params outside
   *  of an activated component by traversing the `RouterState` tree as in the following
   *  example:
   *  ```
   *  collectRouteParams(router: Router) {
   *    let params = {};
   *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];
   *    while (stack.length > 0) {
   *      const route = stack.pop()!;
   *      params = {...params, ...route.params};
   *      stack.push(...route.children);
   *    }
   *    return params;
   *  }
   *  ```
   */
  params,
  /** The query parameters shared by all the routes */
  queryParams,
  /** The URL fragment shared by all the routes */
  fragment,
  /** The static and resolved data of this route */
  data,
  /** The outlet name of the route */
  outlet,
  /** The component of the route */
  component, routeConfig, urlSegment, lastPathIndex, resolve) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._urlSegment = urlSegment;
    this._lastPathIndex = lastPathIndex;
    this._resolve = resolve;
  }
  /** The root of the router state */


  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree */


  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree */


  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree */


  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route */


  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }

  get paramMap() {
    if (!this._paramMap) {
      this._paramMap = convertToParamMap(this.params);
    }

    return this._paramMap;
  }

  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = convertToParamMap(this.queryParams);
    }

    return this._queryParamMap;
  }

  toString() {
    const url = this.url.map(segment => segment.toString()).join('/');
    const matched = this.routeConfig ? this.routeConfig.path : '';
    return `Route(url:'${url}', path:'${matched}')`;
  }

}
/**
 * @description
 *
 * Represents the state of the router at a moment in time.
 *
 * This is a tree of activated route snapshots. Every node in this tree knows about
 * the "consumed" URL segments, the extracted parameters, and the resolved data.
 *
 * The following example shows how a component is initialized with information
 * from the snapshot of the root node's state at the time of creation.
 *
 * ```
 * @Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const snapshot: RouterStateSnapshot = state.snapshot;
 *     const root: ActivatedRouteSnapshot = snapshot.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * @publicApi
 */


class RouterStateSnapshot extends Tree {
  /** @internal */
  constructor(
  /** The url from which this snapshot was created */
  url, root) {
    super(root);
    this.url = url;
    setRouterState(this, root);
  }

  toString() {
    return serializeNode(this._root);
  }

}

function setRouterState(state, node) {
  node.value._routerState = state;
  node.children.forEach(c => setRouterState(state, c));
}

function serializeNode(node) {
  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';
  return `${node.value}${c}`;
}
/**
 * The expectation is that the activate route is created with the right set of parameters.
 * So we push new values into the observables only when they are not the initial values.
 * And we detect that by checking if the snapshot field is set.
 */


function advanceActivatedRoute(route) {
  if (route.snapshot) {
    const currentSnapshot = route.snapshot;
    const nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;

    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParams.next(nextSnapshot.queryParams);
    }

    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragment.next(nextSnapshot.fragment);
    }

    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.params.next(nextSnapshot.params);
    }

    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.url.next(nextSnapshot.url);
    }

    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.data.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot; // this is for resolved data

    route.data.next(route._futureSnapshot.data);
  }
}

function equalParamsAndUrlSegments(a, b) {
  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  const parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function createRouterState(routeReuseStrategy, curr, prevState) {
  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
  return new RouterState(root, curr);
}

function createNode(routeReuseStrategy, curr, prevState) {
  // reuse an activated route that is currently displayed on the screen
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    const value = prevState.value;
    value._futureSnapshot = curr.value;
    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      // retrieve an activated route that is used to be displayed, but is not currently displayed
      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);

      if (detachedRouteHandle !== null) {
        const tree = detachedRouteHandle.route;
        tree.value._futureSnapshot = curr.value;
        tree.children = curr.children.map(c => createNode(routeReuseStrategy, c));
        return tree;
      }
    }

    const value = createActivatedRoute(curr.value);
    const children = curr.children.map(c => createNode(routeReuseStrategy, c));
    return new TreeNode(value, children);
  }
}

function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map(child => {
    for (const p of prevState.children) {
      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
        return createNode(routeReuseStrategy, child, p);
      }
    }

    return createNode(routeReuseStrategy, child);
  });
}

function createActivatedRoute(c) {
  return new ActivatedRoute(new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.url), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.params), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.queryParams), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.fragment), new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(c.data), c.outlet, c.component, c);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function createUrlTree(route, urlTree, commands, queryParams, fragment) {
  if (commands.length === 0) {
    return tree(urlTree.root, urlTree.root, urlTree.root, queryParams, fragment);
  }

  const nav = computeNavigation(commands);

  if (nav.toRoot()) {
    return tree(urlTree.root, urlTree.root, new UrlSegmentGroup([], {}), queryParams, fragment);
  }

  const startingPosition = findStartingPosition(nav, urlTree, route);
  const segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
  return tree(urlTree.root, startingPosition.segmentGroup, segmentGroup, queryParams, fragment);
}

function isMatrixParams(command) {
  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
}
/**
 * Determines if a given command has an `outlets` map. When we encounter a command
 * with an outlets k/v map, we need to apply each outlet individually to the existing segment.
 */


function isCommandWithOutlets(command) {
  return typeof command === 'object' && command != null && command.outlets;
}

function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
  let qp = {};

  if (queryParams) {
    forEach(queryParams, (value, name) => {
      qp[name] = Array.isArray(value) ? value.map(v => `${v}`) : `${value}`;
    });
  }

  if (oldRoot === oldSegmentGroup) {
    return new UrlTree(newSegmentGroup, qp, fragment);
  }

  const newRoot = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
  return new UrlTree(newRoot, qp, fragment);
}

function replaceSegment(current, oldSegment, newSegment) {
  const children = {};
  forEach(current.children, (c, outletName) => {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}

class Navigation {
  constructor(isAbsolute, numberOfDoubleDots, commands) {
    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;

    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new Error('Root segment cannot have matrix parameters');
    }

    const cmdWithOutlet = commands.find(isCommandWithOutlets);

    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {
      throw new Error('{outlets:{}} has to be the last command');
    }
  }

  toRoot() {
    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
  }

}
/** Transforms commands to a normalized `Navigation` */


function computeNavigation(commands) {
  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {
    return new Navigation(true, 0, commands);
  }

  let numberOfDoubleDots = 0;
  let isAbsolute = false;
  const res = commands.reduce((res, cmd, cmdIdx) => {
    if (typeof cmd === 'object' && cmd != null) {
      if (cmd.outlets) {
        const outlets = {};
        forEach(cmd.outlets, (commands, name) => {
          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;
        });
        return [...res, {
          outlets
        }];
      }

      if (cmd.segmentPath) {
        return [...res, cmd.segmentPath];
      }
    }

    if (!(typeof cmd === 'string')) {
      return [...res, cmd];
    }

    if (cmdIdx === 0) {
      cmd.split('/').forEach((urlPart, partIndex) => {
        if (partIndex == 0 && urlPart === '.') {// skip './a'
        } else if (partIndex == 0 && urlPart === '') {
          //  '/a'
          isAbsolute = true;
        } else if (urlPart === '..') {
          //  '../a'
          numberOfDoubleDots++;
        } else if (urlPart != '') {
          res.push(urlPart);
        }
      });
      return res;
    }

    return [...res, cmd];
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}

class Position {
  constructor(segmentGroup, processChildren, index) {
    this.segmentGroup = segmentGroup;
    this.processChildren = processChildren;
    this.index = index;
  }

}

function findStartingPosition(nav, tree, route) {
  if (nav.isAbsolute) {
    return new Position(tree.root, true, 0);
  }

  if (route.snapshot._lastPathIndex === -1) {
    const segmentGroup = route.snapshot._urlSegment; // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children
    // see issue #26224, #13011, #35687
    // However, if the ActivatedRoute is the root we should process children like above.

    const processChildren = segmentGroup === tree.root;
    return new Position(segmentGroup, processChildren, 0);
  }

  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  const index = route.snapshot._lastPathIndex + modifier;
  return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}

function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
  let g = group;
  let ci = index;
  let dd = numberOfDoubleDots;

  while (dd > ci) {
    dd -= ci;
    g = g.parent;

    if (!g) {
      throw new Error('Invalid number of \'../\'');
    }

    ci = g.segments.length;
  }

  return new Position(g, false, ci - dd);
}

function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }

  return {
    [PRIMARY_OUTLET]: commands
  };
}

function updateSegmentGroup(segmentGroup, startIndex, commands) {
  if (!segmentGroup) {
    segmentGroup = new UrlSegmentGroup([], {});
  }

  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }

  const m = prefixedWith(segmentGroup, startIndex, commands);
  const slicedCommands = commands.slice(m.commandIndex);

  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}

function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    const outlets = getOutlets(commands);
    const children = {};
    forEach(outlets, (commands, outlet) => {
      if (typeof commands === 'string') {
        commands = [commands];
      }

      if (commands !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
      }
    });
    forEach(segmentGroup.children, (child, childOutlet) => {
      if (outlets[childOutlet] === undefined) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}

function prefixedWith(segmentGroup, startIndex, commands) {
  let currentCommandIndex = 0;
  let currentPathIndex = startIndex;
  const noMatch = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };

  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length) return noMatch;
    const path = segmentGroup.segments[currentPathIndex];
    const command = commands[currentCommandIndex]; // Do not try to consume command as part of the prefixing if it has outlets because it can
    // contain outlets other than the one being processed. Consuming the outlets command would
    // result in other outlets being ignored.

    if (isCommandWithOutlets(command)) {
      break;
    }

    const curr = `${command}`;
    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === undefined) break;

    if (curr && next && typeof next === 'object' && next.outlets === undefined) {
      if (!compare(curr, next, path)) return noMatch;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path)) return noMatch;
      currentCommandIndex++;
    }

    currentPathIndex++;
  }

  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}

function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  const paths = segmentGroup.segments.slice(0, startIndex);
  let i = 0;

  while (i < commands.length) {
    const command = commands[i];

    if (isCommandWithOutlets(command)) {
      const children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    } // if we start with an object literal, we need to reuse the path part from the segment


    if (i === 0 && isMatrixParams(commands[0])) {
      const p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify(commands[0])));
      i++;
      continue;
    }

    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
    const next = i < commands.length - 1 ? commands[i + 1] : null;

    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }

  return new UrlSegmentGroup(paths, {});
}

function createNewSegmentChildren(outlets) {
  const children = {};
  forEach(outlets, (commands, outlet) => {
    if (typeof commands === 'string') {
      commands = [commands];
    }

    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}

function stringify(params) {
  const res = {};
  forEach(params, (v, k) => res[k] = `${v}`);
  return res;
}

function compare(path, params, segment) {
  return path == segment.path && shallowEqual(params, segment.parameters);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent) => (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(t => {
  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent).activate(rootContexts);
  return t;
});

class ActivateRoutes {
  constructor(routeReuseStrategy, futureState, currState, forwardEvent) {
    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
  }

  activate(parentContexts) {
    const futureRoot = this.futureState._root;
    const currRoot = this.currState ? this.currState._root : null;
    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
    advanceActivatedRoute(this.futureState.root);
    this.activateChildRoutes(futureRoot, currRoot, parentContexts);
  } // De-activate the child route that are not re-used for the future state


  deactivateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode); // Recurse on the routes active in the future state to de-activate deeper children

    futureNode.children.forEach(futureChild => {
      const childOutletName = futureChild.value.outlet;
      this.deactivateRoutes(futureChild, children[childOutletName], contexts);
      delete children[childOutletName];
    }); // De-activate the routes that will not be re-used

    forEach(children, (v, childName) => {
      this.deactivateRouteAndItsChildren(v, contexts);
    });
  }

  deactivateRoutes(futureNode, currNode, parentContext) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;

    if (future === curr) {
      // Reusing the node, check to see if the children need to be de-activated
      if (future.component) {
        // If we have a normal route, we need to go through an outlet.
        const context = parentContext.getContext(future.outlet);

        if (context) {
          this.deactivateChildRoutes(futureNode, currNode, context.children);
        }
      } else {
        // if we have a componentless route, we recurse but keep the same outlet map.
        this.deactivateChildRoutes(futureNode, currNode, parentContext);
      }
    } else {
      if (curr) {
        // Deactivate the current route which will not be re-used
        this.deactivateRouteAndItsChildren(currNode, parentContext);
      }
    }
  }

  deactivateRouteAndItsChildren(route, parentContexts) {
    // If there is no component, the Route is never attached to an outlet (because there is no
    // component to attach).
    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
      this.detachAndStoreRouteSubtree(route, parentContexts);
    } else {
      this.deactivateRouteAndOutlet(route, parentContexts);
    }
  }

  detachAndStoreRouteSubtree(route, parentContexts) {
    const context = parentContexts.getContext(route.value.outlet);
    const contexts = context && route.value.component ? context.children : parentContexts;
    const children = nodeChildrenAsMap(route);

    for (const childOutlet of Object.keys(children)) {
      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
    }

    if (context && context.outlet) {
      const componentRef = context.outlet.detach();
      const contexts = context.children.onOutletDeactivated();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef,
        route,
        contexts
      });
    }
  }

  deactivateRouteAndOutlet(route, parentContexts) {
    const context = parentContexts.getContext(route.value.outlet); // The context could be `null` if we are on a componentless route but there may still be
    // children that need deactivating.

    const contexts = context && route.value.component ? context.children : parentContexts;
    const children = nodeChildrenAsMap(route);

    for (const childOutlet of Object.keys(children)) {
      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
    }

    if (context && context.outlet) {
      // Destroy the component
      context.outlet.deactivate(); // Destroy the contexts for all the outlets that were in the component

      context.children.onOutletDeactivated(); // Clear the information about the attached component on the context but keep the reference to
      // the outlet.

      context.attachRef = null;
      context.resolver = null;
      context.route = null;
    }
  }

  activateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach(c => {
      this.activateRoutes(c, children[c.value.outlet], contexts);
      this.forwardEvent(new ActivationEnd(c.value.snapshot));
    });

    if (futureNode.children.length) {
      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
    }
  }

  activateRoutes(futureNode, currNode, parentContexts) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    advanceActivatedRoute(future); // reusing the node

    if (future === curr) {
      if (future.component) {
        // If we have a normal route, we need to go through an outlet.
        const context = parentContexts.getOrCreateContext(future.outlet);
        this.activateChildRoutes(futureNode, currNode, context.children);
      } else {
        // if we have a componentless route, we recurse but keep the same outlet map.
        this.activateChildRoutes(futureNode, currNode, parentContexts);
      }
    } else {
      if (future.component) {
        // if we have a normal route, we need to place the component into the outlet and recurse.
        const context = parentContexts.getOrCreateContext(future.outlet);

        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          const stored = this.routeReuseStrategy.retrieve(future.snapshot);
          this.routeReuseStrategy.store(future.snapshot, null);
          context.children.onOutletReAttached(stored.contexts);
          context.attachRef = stored.componentRef;
          context.route = stored.route.value;

          if (context.outlet) {
            // Attach right away when the outlet has already been instantiated
            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
            context.outlet.attach(stored.componentRef, stored.route.value);
          }

          advanceActivatedRoute(stored.route.value);
          this.activateChildRoutes(futureNode, null, context.children);
        } else {
          const config = parentLoadedConfig(future.snapshot);
          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
          context.attachRef = null;
          context.route = future;
          context.resolver = cmpFactoryResolver;

          if (context.outlet) {
            // Activate the outlet when it has already been instantiated
            // Otherwise it will get activated from its `ngOnInit` when instantiated
            context.outlet.activateWith(future, cmpFactoryResolver);
          }

          this.activateChildRoutes(futureNode, null, context.children);
        }
      } else {
        // if we have a componentless route, we recurse but keep the same outlet map.
        this.activateChildRoutes(futureNode, null, parentContexts);
      }
    }
  }

}

function parentLoadedConfig(snapshot) {
  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route && route._loadedConfig) return route._loadedConfig;
    if (route && route.component) return null;
  }

  return null;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class LoadedRouterConfig {
  constructor(routes, module) {
    this.routes = routes;
    this.module = module;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Simple function check, but generic so type inference will flow. Example:
 *
 * function product(a: number, b: number) {
 *   return a * b;
 * }
 *
 * if (isFunction<product>(fn)) {
 *   return fn(1, 2);
 * } else {
 *   throw "Must provide the `product` function";
 * }
 */


function isFunction(v) {
  return typeof v === 'function';
}

function isBoolean(v) {
  return typeof v === 'boolean';
}

function isUrlTree(v) {
  return v instanceof UrlTree;
}

function isCanLoad(guard) {
  return guard && isFunction(guard.canLoad);
}

function isCanActivate(guard) {
  return guard && isFunction(guard.canActivate);
}

function isCanActivateChild(guard) {
  return guard && isFunction(guard.canActivateChild);
}

function isCanDeactivate(guard) {
  return guard && isFunction(guard.canDeactivate);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const INITIAL_VALUE = /*#__PURE__*/Symbol('INITIAL_VALUE');

function prioritizedGuardValue() {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(obs => {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.combineLatest)(obs.map(o => o.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.startWith)(INITIAL_VALUE)))).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.scan)((acc, list) => {
      let isPending = false;
      return list.reduce((innerAcc, val, i) => {
        if (innerAcc !== INITIAL_VALUE) return innerAcc; // Toggle pending flag if any values haven't been set yet

        if (val === INITIAL_VALUE) isPending = true; // Any other return values are only valid if we haven't yet hit a pending
        // call. This guarantees that in the case of a guard at the bottom of the
        // tree that returns a redirect, we will wait for the higher priority
        // guard at the top to finish before performing the redirect.

        if (!isPending) {
          // Early return when we hit a `false` value as that should always
          // cancel navigation
          if (val === false) return val;

          if (i === list.length - 1 || isUrlTree(val)) {
            return val;
          }
        }

        return innerAcc;
      }, acc);
    }, INITIAL_VALUE), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(item => item !== INITIAL_VALUE), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(item => isUrlTree(item) ? item : item === true), //
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1));
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Store contextual information about a `RouterOutlet`
 *
 * @publicApi
 */


class OutletContext {
  constructor() {
    this.outlet = null;
    this.route = null;
    this.resolver = null;
    this.children = new ChildrenOutletContexts();
    this.attachRef = null;
  }

}
/**
 * Store contextual information about the children (= nested) `RouterOutlet`
 *
 * @publicApi
 */


class ChildrenOutletContexts {
  constructor() {
    // contexts for child outlets, by name.
    this.contexts = new Map();
  }
  /** Called when a `RouterOutlet` directive is instantiated */


  onChildOutletCreated(childName, outlet) {
    const context = this.getOrCreateContext(childName);
    context.outlet = outlet;
    this.contexts.set(childName, context);
  }
  /**
   * Called when a `RouterOutlet` directive is destroyed.
   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
   * re-created later.
   */


  onChildOutletDestroyed(childName) {
    const context = this.getContext(childName);

    if (context) {
      context.outlet = null;
      context.attachRef = null;
    }
  }
  /**
   * Called when the corresponding route is deactivated during navigation.
   * Because the component get destroyed, all children outlet are destroyed.
   */


  onOutletDeactivated() {
    const contexts = this.contexts;
    this.contexts = new Map();
    return contexts;
  }

  onOutletReAttached(contexts) {
    this.contexts = contexts;
  }

  getOrCreateContext(childName) {
    let context = this.getContext(childName);

    if (!context) {
      context = new OutletContext();
      this.contexts.set(childName, context);
    }

    return context;
  }

  getContext(childName) {
    return this.contexts.get(childName) || null;
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Acts as a placeholder that Angular dynamically fills based on the current router state.
 *
 * Each outlet can have a unique name, determined by the optional `name` attribute.
 * The name cannot be set or changed dynamically. If not set, default value is "primary".
 *
 * ```
 * <router-outlet></router-outlet>
 * <router-outlet name='left'></router-outlet>
 * <router-outlet name='right'></router-outlet>
 * ```
 *
 * Named outlets can be the targets of secondary routes.
 * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:
 *
 * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`
 *
 * Using named outlets and secondary routes, you can target multiple outlets in
 * the same `RouterLink` directive.
 *
 * The router keeps track of separate branches in a navigation tree for each named outlet and
 * generates a representation of that tree in the URL.
 * The URL for a secondary route uses the following syntax to specify both the primary and secondary
 * routes at the same time:
 *
 * `http://base-path/primary-route-path(outlet-name:route-path)`
 *
 * A router outlet emits an activate event when a new component is instantiated,
 * deactivate event when a component is destroyed.
 * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the
 * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to
 * detach the subtree.
 *
 * ```
 * <router-outlet
 *   (activate)='onActivate($event)'
 *   (deactivate)='onDeactivate($event)'
 *   (attach)='onAttach($event)'
 *   (detach)='onDetach($event)'></router-outlet>
 * ```
 *
 * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets "Example of a named
 * outlet and secondary route configuration").
 * @see `RouterLink`
 * @see `Route`
 * @ngModule RouterModule
 *
 * @publicApi
 */


let RouterOutlet = /*#__PURE__*/(() => {
  class RouterOutlet {
    constructor(parentContexts, location, resolver, name, changeDetector) {
      this.parentContexts = parentContexts;
      this.location = location;
      this.resolver = resolver;
      this.changeDetector = changeDetector;
      this.activated = null;
      this._activatedRoute = null;
      this.activateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this.deactivateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      /**
       * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a
       * previously detached subtree.
       **/

      this.attachEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      /**
       * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the
       * subtree.
       */

      this.detachEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this.name = name || PRIMARY_OUTLET;
      parentContexts.onChildOutletCreated(this.name, this);
    }
    /** @nodoc */


    ngOnDestroy() {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    /** @nodoc */


    ngOnInit() {
      if (!this.activated) {
        // If the outlet was not instantiated at the time the route got activated we need to populate
        // the outlet when it is initialized (ie inside a NgIf)
        const context = this.parentContexts.getContext(this.name);

        if (context && context.route) {
          if (context.attachRef) {
            // `attachRef` is populated when there is an existing component to mount
            this.attach(context.attachRef, context.route);
          } else {
            // otherwise the component defined in the configuration is created
            this.activateWith(context.route, context.resolver || null);
          }
        }
      }
    }

    get isActivated() {
      return !!this.activated;
    }
    /**
     * @returns The currently activated component instance.
     * @throws An error if the outlet is not activated.
     */


    get component() {
      if (!this.activated) throw new Error('Outlet is not activated');
      return this.activated.instance;
    }

    get activatedRoute() {
      if (!this.activated) throw new Error('Outlet is not activated');
      return this._activatedRoute;
    }

    get activatedRouteData() {
      if (this._activatedRoute) {
        return this._activatedRoute.snapshot.data;
      }

      return {};
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */


    detach() {
      if (!this.activated) throw new Error('Outlet is not activated');
      this.location.detach();
      const cmp = this.activated;
      this.activated = null;
      this._activatedRoute = null;
      this.detachEvents.emit(cmp.instance);
      return cmp;
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */


    attach(ref, activatedRoute) {
      this.activated = ref;
      this._activatedRoute = activatedRoute;
      this.location.insert(ref.hostView);
      this.attachEvents.emit(ref.instance);
    }

    deactivate() {
      if (this.activated) {
        const c = this.component;
        this.activated.destroy();
        this.activated = null;
        this._activatedRoute = null;
        this.deactivateEvents.emit(c);
      }
    }

    activateWith(activatedRoute, resolver) {
      if (this.isActivated) {
        throw new Error('Cannot activate an already activated outlet');
      }

      this._activatedRoute = activatedRoute;
      const snapshot = activatedRoute._futureSnapshot;
      const component = snapshot.routeConfig.component;
      resolver = resolver || this.resolver;
      const factory = resolver.resolveComponentFactory(component);
      const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
      const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
      this.activated = this.location.createComponent(factory, this.location.length, injector); // Calling `markForCheck` to make sure we will run the change detection when the
      // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.

      this.changeDetector.markForCheck();
      this.activateEvents.emit(this.activated.instance);
    }

  }

  RouterOutlet.ɵfac = function RouterOutlet_Factory(t) {
    return new (t || RouterOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('name'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
  };

  RouterOutlet.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: RouterOutlet,
    selectors: [["router-outlet"]],
    outputs: {
      activateEvents: "activate",
      deactivateEvents: "deactivate",
      attachEvents: "attach",
      detachEvents: "detach"
    },
    exportAs: ["outlet"]
  });
  return RouterOutlet;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

class OutletInjector {
  constructor(route, childContexts, parent) {
    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
  }

  get(token, notFoundValue) {
    if (token === ActivatedRoute) {
      return this.route;
    }

    if (token === ChildrenOutletContexts) {
      return this.childContexts;
    }

    return this.parent.get(token, notFoundValue);
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * This component is used internally within the router to be a placeholder when an empty
 * router-outlet is needed. For example, with a config such as:
 *
 * `{path: 'parent', outlet: 'nav', children: [...]}`
 *
 * In order to render, there needs to be a component on this config, which will default
 * to this `EmptyOutletComponent`.
 */


let ɵEmptyOutletComponent = /*#__PURE__*/(() => {
  class ɵEmptyOutletComponent {}

  ɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) {
    return new (t || ɵEmptyOutletComponent)();
  };

  ɵEmptyOutletComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: ɵEmptyOutletComponent,
    selectors: [["ng-component"]],
    decls: 1,
    vars: 0,
    template: function ɵEmptyOutletComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
      }
    },
    directives: [RouterOutlet],
    encapsulation: 2
  });
  return ɵEmptyOutletComponent;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function validateConfig(config, parentPath = '') {
  // forEach doesn't iterate undefined values
  for (let i = 0; i < config.length; i++) {
    const route = config[i];
    const fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath);
  }
}

function validateNode(route, fullPath) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (!route) {
      throw new Error(`
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }

    if (Array.isArray(route)) {
      throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }

    if (!route.component && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }

    if (route.redirectTo && route.children) {
      throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }

    if (route.redirectTo && route.loadChildren) {
      throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }

    if (route.children && route.loadChildren) {
      throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }

    if (route.redirectTo && route.component) {
      throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);
    }

    if (route.redirectTo && route.canActivate) {
      throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` + `so canActivate will never be executed.`);
    }

    if (route.path && route.matcher) {
      throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }

    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
      throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);
    }

    if (route.path === void 0 && route.matcher === void 0) {
      throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }

    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
      throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }

    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
      throw new Error(`Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }

    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
      throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);
    }
  }

  if (route.children) {
    validateConfig(route.children, fullPath);
  }
}

function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }

  if (!parentPath && !currentRoute.path) {
    return '';
  } else if (parentPath && !currentRoute.path) {
    return `${parentPath}/`;
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return `${parentPath}/${currentRoute.path}`;
  }
}
/**
 * Makes a copy of the config and adds any default required properties.
 */


function standardizeConfig(r) {
  const children = r.children && r.children.map(standardizeConfig);
  const c = children ? Object.assign(Object.assign({}, r), {
    children
  }) : Object.assign({}, r);

  if (!c.component && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = ɵEmptyOutletComponent;
  }

  return c;
}
/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */


function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
/**
 * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.
 * The order of the configs is otherwise preserved.
 */


function sortByMatchingOutlets(routes, outletName) {
  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);
  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));
  return sortedConfig;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


const noMatch$1 = {
  matched: false,
  consumedSegments: [],
  remainingSegments: [],
  parameters: {},
  positionalParamSegments: {}
};

function match(segmentGroup, route, segments) {
  var _a;

  if (route.path === '') {
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
      return Object.assign({}, noMatch$1);
    }

    return {
      matched: true,
      consumedSegments: [],
      remainingSegments: segments,
      parameters: {},
      positionalParamSegments: {}
    };
  }

  const matcher = route.matcher || defaultUrlMatcher;
  const res = matcher(segments, segmentGroup, route);
  if (!res) return Object.assign({}, noMatch$1);
  const posParams = {};
  forEach(res.posParams, (v, k) => {
    posParams[k] = v.path;
  });
  const parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    remainingSegments: segments.slice(res.consumed.length),
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters,
    positionalParamSegments: (_a = res.posParams) !== null && _a !== void 0 ? _a : {}
  };
}

function split(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution = 'corrected') {
  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
    s._sourceSegment = segmentGroup;
    s._segmentIndexShift = consumedSegments.length;
    return {
      segmentGroup: s,
      slicedSegments: []
    };
  }

  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));
    s._sourceSegment = segmentGroup;
    s._segmentIndexShift = consumedSegments.length;
    return {
      segmentGroup: s,
      slicedSegments
    };
  }

  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  s._sourceSegment = segmentGroup;
  s._segmentIndexShift = consumedSegments.length;
  return {
    segmentGroup: s,
    slicedSegments
  };
}

function addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {
  const res = {};

  for (const r of routes) {
    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
      const s = new UrlSegmentGroup([], {});
      s._sourceSegment = segmentGroup;

      if (relativeLinkResolution === 'legacy') {
        s._segmentIndexShift = segmentGroup.segments.length;
      } else {
        s._segmentIndexShift = consumedSegments.length;
      }

      res[getOutlet(r)] = s;
    }
  }

  return Object.assign(Object.assign({}, children), res);
}

function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
  const res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  primarySegment._sourceSegment = segmentGroup;
  primarySegment._segmentIndexShift = consumedSegments.length;

  for (const r of routes) {
    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
      const s = new UrlSegmentGroup([], {});
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      res[getOutlet(r)] = s;
    }
  }

  return res;
}

function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
}

function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));
}

function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
    return false;
  }

  return r.path === '';
}
/**
 * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without
 * verifying that its children are a full match for the remainder of the `rawSegment` children as
 * well.
 */


function isImmediateMatch(route, rawSegment, segments, outlet) {
  // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to
  // a config like
  // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`
  // or even
  // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`
  //
  // The exception here is when the segment outlet is for the primary outlet. This would
  // result in a match inside the named outlet because all children there are written as primary
  // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like
  // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`
  // This should only match if the url is `/(x:b)`.
  if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
    return false;
  }

  if (route.path === '**') {
    return true;
  }

  return match(rawSegment, route, segments).matched;
}

function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class NoMatch$1 {
  constructor(segmentGroup) {
    this.segmentGroup = segmentGroup || null;
  }

}

class AbsoluteRedirect {
  constructor(urlTree) {
    this.urlTree = urlTree;
  }

}

function noMatch(segmentGroup) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.throwError)(new NoMatch$1(segmentGroup));
}

function absoluteRedirect(newTree) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.throwError)(new AbsoluteRedirect(newTree));
}

function namedOutletsRedirect(redirectTo) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.throwError)(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
}

function canLoadFails(route) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.throwError)(navigationCancelingError(`Cannot load children because the guard of the route "path: '${route.path}'" returned false`));
}
/**
 * Returns the `UrlTree` with the redirection applied.
 *
 * Lazy modules are loaded along the way.
 */


function applyRedirects$1(moduleInjector, configLoader, urlSerializer, urlTree, config) {
  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
}

class ApplyRedirects {
  constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {
    this.configLoader = configLoader;
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
    this.config = config;
    this.allowRedirects = true;
    this.ngModule = moduleInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
  }

  apply() {
    const splitGroup = split(this.urlTree.root, [], [], this.config).segmentGroup; // TODO(atscott): creating a new segment removes the _sourceSegment _segmentIndexShift, which is
    // only necessary to prevent failures in tests which assert exact object matches. The `split` is
    // now shared between `applyRedirects` and `recognize` but only the `recognize` step needs these
    // properties. Before the implementations were merged, the `applyRedirects` would not assign
    // them. We should be able to remove this logic as a "breaking change" but should do some more
    // investigation into the failures first.

    const rootSegmentGroup = new UrlSegmentGroup(splitGroup.segments, splitGroup.children);
    const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, rootSegmentGroup, PRIMARY_OUTLET);
    const urlTrees$ = expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(rootSegmentGroup => {
      return this.createUrlTree(squashSegmentGroup(rootSegmentGroup), this.urlTree.queryParams, this.urlTree.fragment);
    }));
    return urlTrees$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(e => {
      if (e instanceof AbsoluteRedirect) {
        // After an absolute redirect we do not apply any more redirects!
        // If this implementation changes, update the documentation note in `redirectTo`.
        this.allowRedirects = false; // we need to run matching, so we can fetch all lazy-loaded modules

        return this.match(e.urlTree);
      }

      if (e instanceof NoMatch$1) {
        throw this.noMatchError(e);
      }

      throw e;
    }));
  }

  match(tree) {
    const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
    const mapped$ = expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(rootSegmentGroup => {
      return this.createUrlTree(squashSegmentGroup(rootSegmentGroup), tree.queryParams, tree.fragment);
    }));
    return mapped$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(e => {
      if (e instanceof NoMatch$1) {
        throw this.noMatchError(e);
      }

      throw e;
    }));
  }

  noMatchError(e) {
    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);
  }

  createUrlTree(rootCandidate, queryParams, fragment) {
    const root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {
      [PRIMARY_OUTLET]: rootCandidate
    }) : rootCandidate;
    return new UrlTree(root, queryParams, fragment);
  }

  expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.expandChildren(ngModule, routes, segmentGroup).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(children => new UrlSegmentGroup([], children)));
    }

    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
  } // Recursively expand segment groups for all the child outlets


  expandChildren(ngModule, routes, segmentGroup) {
    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way
    // because an absolute redirect from the primary outlet takes precedence.
    const childOutlets = [];

    for (const child of Object.keys(segmentGroup.children)) {
      if (child === 'primary') {
        childOutlets.unshift(child);
      } else {
        childOutlets.push(child);
      }
    }

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(childOutlets).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(childOutlet => {
      const child = segmentGroup.children[childOutlet]; // Sort the routes so routes with outlets that match the segment appear
      // first, followed by routes for other outlets, which might match if they have an
      // empty path.

      const sortedRoutes = sortByMatchingOutlets(routes, childOutlet);
      return this.expandSegmentGroup(ngModule, sortedRoutes, child, childOutlet).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(s => ({
        segment: s,
        outlet: childOutlet
      })));
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.scan)((children, expandedChild) => {
      children[expandedChild.outlet] = expandedChild.segment;
      return children;
    }, {}), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.last)());
  }

  expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(routes).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(r => {
      const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
      return expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(e => {
        if (e instanceof NoMatch$1) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
        }

        throw e;
      }));
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(s => !!s), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)((e, _) => {
      if (e instanceof rxjs__WEBPACK_IMPORTED_MODULE_16__.EmptyError || e.name === 'EmptyError') {
        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new UrlSegmentGroup([], {}));
        }

        return noMatch(segmentGroup);
      }

      throw e;
    }));
  }

  expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
    if (!isImmediateMatch(route, segmentGroup, paths, outlet)) {
      return noMatch(segmentGroup);
    }

    if (route.redirectTo === undefined) {
      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths, outlet);
    }

    if (allowRedirects && this.allowRedirects) {
      return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
    }

    return noMatch(segmentGroup);
  }

  expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
    if (route.path === '**') {
      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
    }

    return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
  }

  expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {
    const newTree = this.applyRedirectCommands([], route.redirectTo, {});

    if (route.redirectTo.startsWith('/')) {
      return absoluteRedirect(newTree);
    }

    return this.lineralizeSegments(route, newTree).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(newSegments => {
      const group = new UrlSegmentGroup(newSegments, {});
      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);
    }));
  }

  expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
    const {
      matched,
      consumedSegments,
      remainingSegments,
      positionalParamSegments
    } = match(segmentGroup, route, segments);
    if (!matched) return noMatch(segmentGroup);
    const newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);

    if (route.redirectTo.startsWith('/')) {
      return absoluteRedirect(newTree);
    }

    return this.lineralizeSegments(route, newTree).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(newSegments => {
      return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(remainingSegments), outlet, false);
    }));
  }

  matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments, outlet) {
    if (route.path === '**') {
      if (route.loadChildren) {
        const loaded$ = route._loadedConfig ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig) : this.configLoader.load(ngModule.injector, route);
        return loaded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(cfg => {
          route._loadedConfig = cfg;
          return new UrlSegmentGroup(segments, {});
        }));
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new UrlSegmentGroup(segments, {}));
    }

    const {
      matched,
      consumedSegments,
      remainingSegments
    } = match(rawSegmentGroup, route, segments);
    if (!matched) return noMatch(rawSegmentGroup);
    const childConfig$ = this.getChildConfig(ngModule, route, segments);
    return childConfig$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(routerConfig => {
      const childModule = routerConfig.module;
      const childConfig = routerConfig.routes;
      const {
        segmentGroup: splitSegmentGroup,
        slicedSegments
      } = split(rawSegmentGroup, consumedSegments, remainingSegments, childConfig); // See comment on the other call to `split` about why this is necessary.

      const segmentGroup = new UrlSegmentGroup(splitSegmentGroup.segments, splitSegmentGroup.children);

      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);
        return expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(children => new UrlSegmentGroup(consumedSegments, children)));
      }

      if (childConfig.length === 0 && slicedSegments.length === 0) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new UrlSegmentGroup(consumedSegments, {}));
      }

      const matchedOnOutlet = getOutlet(route) === outlet;
      const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true);
      return expanded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(cs => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));
    }));
  }

  getChildConfig(ngModule, route, segments) {
    if (route.children) {
      // The children belong to the same module
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new LoadedRouterConfig(route.children, ngModule));
    }

    if (route.loadChildren) {
      // lazy children belong to the loaded module
      if (route._loadedConfig !== undefined) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig);
      }

      return this.runCanLoadGuards(ngModule.injector, route, segments).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(shouldLoadResult => {
        if (shouldLoadResult) {
          return this.configLoader.load(ngModule.injector, route).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(cfg => {
            route._loadedConfig = cfg;
            return cfg;
          }));
        }

        return canLoadFails(route);
      }));
    }

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(new LoadedRouterConfig([], ngModule));
  }

  runCanLoadGuards(moduleInjector, route, segments) {
    const canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
    const canLoadObservables = canLoad.map(injectionToken => {
      const guard = moduleInjector.get(injectionToken);
      let guardVal;

      if (isCanLoad(guard)) {
        guardVal = guard.canLoad(route, segments);
      } else if (isFunction(guard)) {
        guardVal = guard(route, segments);
      } else {
        throw new Error('Invalid CanLoad guard');
      }

      return wrapIntoObservable(guardVal);
    });
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canLoadObservables).pipe(prioritizedGuardValue(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(result => {
      if (!isUrlTree(result)) return;
      const error = navigationCancelingError(`Redirecting to "${this.urlSerializer.serialize(result)}"`);
      error.url = result;
      throw error;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(result => result === true));
  }

  lineralizeSegments(route, urlTree) {
    let res = [];
    let c = urlTree.root;

    while (true) {
      res = res.concat(c.segments);

      if (c.numberOfChildren === 0) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(res);
      }

      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
        return namedOutletsRedirect(route.redirectTo);
      }

      c = c.children[PRIMARY_OUTLET];
    }
  }

  applyRedirectCommands(segments, redirectTo, posParams) {
    return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
  }

  applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {
    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
  }

  createQueryParams(redirectToParams, actualParams) {
    const res = {};
    forEach(redirectToParams, (v, k) => {
      const copySourceValue = typeof v === 'string' && v.startsWith(':');

      if (copySourceValue) {
        const sourceName = v.substring(1);
        res[k] = actualParams[sourceName];
      } else {
        res[k] = v;
      }
    });
    return res;
  }

  createSegmentGroup(redirectTo, group, segments, posParams) {
    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
    let children = {};
    forEach(group.children, (child, name) => {
      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
    });
    return new UrlSegmentGroup(updatedSegments, children);
  }

  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
    return redirectToSegments.map(s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
  }

  findPosParam(redirectTo, redirectToUrlSegment, posParams) {
    const pos = posParams[redirectToUrlSegment.path.substring(1)];
    if (!pos) throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
    return pos;
  }

  findOrReturn(redirectToUrlSegment, actualSegments) {
    let idx = 0;

    for (const s of actualSegments) {
      if (s.path === redirectToUrlSegment.path) {
        actualSegments.splice(idx);
        return s;
      }

      idx++;
    }

    return redirectToUrlSegment;
  }

}
/**
 * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.
 *
 * When a segment group has only one child which is a primary outlet, merges that child into the
 * parent. That is, the child segment group's segments are merged into the `s` and the child's
 * children become the children of `s`. Think of this like a 'squash', merging the child segment
 * group into the parent.
 */


function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    const c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }

  return s;
}
/**
 * Recursively merges primary segment children into their parents and also drops empty children
 * (those which have no segments and no children themselves). The latter prevents serializing a
 * group into something like `/a(aux:)`, where `aux` is an empty child segment.
 */


function squashSegmentGroup(segmentGroup) {
  const newChildren = {};

  for (const childOutlet of Object.keys(segmentGroup.children)) {
    const child = segmentGroup.children[childOutlet];
    const childCandidate = squashSegmentGroup(child); // don't add empty children

    if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }

  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function applyRedirects(moduleInjector, configLoader, urlSerializer, config) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(t => applyRedirects$1(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(urlAfterRedirects => Object.assign(Object.assign({}, t), {
    urlAfterRedirects
  }))));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class CanActivate {
  constructor(path) {
    this.path = path;
    this.route = this.path[this.path.length - 1];
  }

}

class CanDeactivate {
  constructor(component, route) {
    this.component = component;
    this.route = route;
  }

}

function getAllRouteGuards(future, curr, parentContexts) {
  const futureRoot = future._root;
  const currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}

function getCanActivateChild(p) {
  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0) return null;
  return {
    node: p,
    guards: canActivateChild
  };
}

function getToken(token, snapshot, moduleInjector) {
  const config = getClosestLoadedConfig(snapshot);
  const injector = config ? config.module.injector : moduleInjector;
  return injector.get(token);
}

function getClosestLoadedConfig(snapshot) {
  if (!snapshot) return null;

  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route && route._loadedConfig) return route._loadedConfig;
  }

  return null;
}

function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const prevChildren = nodeChildrenAsMap(currNode); // Process the children of the future route

  futureNode.children.forEach(c => {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  }); // Process any children left from the current route (not active for the future route)

  forEach(prevChildren, (v, k) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
  return checks;
}

function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const future = futureNode.value;
  const curr = currNode ? currNode.value : null;
  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null; // reusing the node

  if (curr && future.routeConfig === curr.routeConfig) {
    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);

    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      // we need to set the data
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    } // If we have a component, we need to go through an outlet.


    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }

    if (shouldRun && context && context.outlet && context.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context, checks);
    }

    checks.canActivateChecks.push(new CanActivate(futurePath)); // If we have a component, we need to go through an outlet.

    if (future.component) {
      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }

  return checks;
}

function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === 'function') {
    return mode(curr, future);
  }

  switch (mode) {
    case 'pathParamsChange':
      return !equalPath(curr.url, future.url);

    case 'pathParamsOrQueryParamsChange':
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);

    case 'always':
      return true;

    case 'paramsOrQueryParamsChange':
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);

    case 'paramsChange':
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}

function deactivateRouteAndItsChildren(route, context, checks) {
  const children = nodeChildrenAsMap(route);
  const r = route.value;
  forEach(children, (node, childName) => {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context, checks);
    } else if (context) {
      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });

  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context && context.outlet && context.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function checkGuards(moduleInjector, forwardEvent) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(t => {
    const {
      targetSnapshot,
      currentSnapshot,
      guards: {
        canActivateChecks,
        canDeactivateChecks
      }
    } = t;

    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(Object.assign(Object.assign({}, t), {
        guardsResult: true
      }));
    }

    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(canDeactivate => {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canDeactivate);
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(guardsResult => Object.assign(Object.assign({}, t), {
      guardsResult
    })));
  });
}

function runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(checks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(result => {
    return result !== true;
  }, true));
}

function runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(checks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(check => {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.concat)(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, moduleInjector), runCanActivate(futureSnapshot, check.route, moduleInjector));
  }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)(result => {
    return result !== true;
  }, true));
}
/**
 * This should fire off `ActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 */


function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
}
/**
 * This should fire off `ChildActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 */


function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }

  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
}

function runCanActivate(futureRSS, futureARS, moduleInjector) {
  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
  const canActivateObservables = canActivate.map(c => {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_20__.defer)(() => {
      const guard = getToken(c, futureARS, moduleInjector);
      let observable;

      if (isCanActivate(guard)) {
        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));
      } else if (isFunction(guard)) {
        observable = wrapIntoObservable(guard(futureARS, futureRSS));
      } else {
        throw new Error('Invalid CanActivate guard');
      }

      return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
    });
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canActivateObservables).pipe(prioritizedGuardValue());
}

function runCanActivateChild(futureRSS, path, moduleInjector) {
  const futureARS = path[path.length - 1];
  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(p => getCanActivateChild(p)).filter(_ => _ !== null);
  const canActivateChildGuardsMapped = canActivateChildGuards.map(d => {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_20__.defer)(() => {
      const guardsMapped = d.guards.map(c => {
        const guard = getToken(c, d.node, moduleInjector);
        let observable;

        if (isCanActivateChild(guard)) {
          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));
        } else if (isFunction(guard)) {
          observable = wrapIntoObservable(guard(futureARS, futureRSS));
        } else {
          throw new Error('Invalid CanActivateChild guard');
        }

        return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
      });
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}

function runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {
  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0) return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(true);
  const canDeactivateObservables = canDeactivate.map(c => {
    const guard = getToken(c, currARS, moduleInjector);
    let observable;

    if (isCanDeactivate(guard)) {
      observable = wrapIntoObservable(guard.canDeactivate(component, currARS, currRSS, futureRSS));
    } else if (isFunction(guard)) {
      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));
    } else {
      throw new Error('Invalid CanDeactivate guard');
    }

    return observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.first)());
  });
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(canDeactivateObservables).pipe(prioritizedGuardValue());
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


class NoMatch {}

function newObservableError(e) {
  // TODO(atscott): This pattern is used throughout the router code and can be `throwError` instead.
  return new rxjs__WEBPACK_IMPORTED_MODULE_21__.Observable(obs => obs.error(e));
}

function recognize$1(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {
  try {
    const result = new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution).recognize();

    if (result === null) {
      return newObservableError(new NoMatch());
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(result);
    }
  } catch (e) {
    // Catch the potential error from recognize due to duplicate outlet matches and return as an
    // `Observable` error instead.
    return newObservableError(e);
  }
}

class Recognizer {
  constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {
    this.rootComponentType = rootComponentType;
    this.config = config;
    this.urlTree = urlTree;
    this.url = url;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.relativeLinkResolution = relativeLinkResolution;
  }

  recognize() {
    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config.filter(c => c.redirectTo === undefined), this.relativeLinkResolution).segmentGroup;
    const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);

    if (children === null) {
      return null;
    } // Use Object.freeze to prevent readers of the Router state from modifying it outside of a
    // navigation, resulting in the router being out of sync with the browser.


    const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
    const rootNode = new TreeNode(root, children);
    const routeState = new RouterStateSnapshot(this.url, rootNode);
    this.inheritParamsAndData(routeState._root);
    return routeState;
  }

  inheritParamsAndData(routeNode) {
    const route = routeNode.value;
    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);
    route.params = Object.freeze(i.params);
    route.data = Object.freeze(i.data);
    routeNode.children.forEach(n => this.inheritParamsAndData(n));
  }

  processSegmentGroup(config, segmentGroup, outlet) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.processChildren(config, segmentGroup);
    }

    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
  }
  /**
   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
   * we cannot find a match for _any_ of the children.
   *
   * @param config - The `Routes` to match against
   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
   *     config.
   */


  processChildren(config, segmentGroup) {
    const children = [];

    for (const childOutlet of Object.keys(segmentGroup.children)) {
      const child = segmentGroup.children[childOutlet]; // Sort the config so that routes with outlets that match the one being activated appear
      // first, followed by routes for other outlets, which might match if they have an empty path.

      const sortedConfig = sortByMatchingOutlets(config, childOutlet);
      const outletChildren = this.processSegmentGroup(sortedConfig, child, childOutlet);

      if (outletChildren === null) {
        // Configs must match all segment children so because we did not find a match for this
        // outlet, return `null`.
        return null;
      }

      children.push(...outletChildren);
    } // Because we may have matched two outlets to the same empty path segment, we can have multiple
    // activated results for the same outlet. We should merge the children of these results so the
    // final return value is only one `TreeNode` per outlet.


    const mergedChildren = mergeEmptyPathMatches(children);

    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      // This should really never happen - we are only taking the first match for each outlet and
      // merge the empty path matches.
      checkOutletNameUniqueness(mergedChildren);
    }

    sortActivatedRouteSnapshots(mergedChildren);
    return mergedChildren;
  }

  processSegment(config, segmentGroup, segments, outlet) {
    for (const r of config) {
      const children = this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);

      if (children !== null) {
        return children;
      }
    }

    if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
      return [];
    }

    return null;
  }

  processSegmentAgainstRoute(route, rawSegment, segments, outlet) {
    if (route.redirectTo || !isImmediateMatch(route, rawSegment, segments, outlet)) return null;
    let snapshot;
    let consumedSegments = [];
    let remainingSegments = [];

    if (route.path === '**') {
      const params = segments.length > 0 ? last(segments).parameters : {};
      snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
    } else {
      const result = match(rawSegment, route, segments);

      if (!result.matched) {
        return null;
      }

      consumedSegments = result.consumedSegments;
      remainingSegments = result.remainingSegments;
      snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
    }

    const childConfig = getChildConfig(route);
    const {
      segmentGroup,
      slicedSegments
    } = split(rawSegment, consumedSegments, remainingSegments, // Filter out routes with redirectTo because we are trying to create activated route
    // snapshots and don't handle redirects here. That should have been done in
    // `applyRedirects`.
    childConfig.filter(c => c.redirectTo === undefined), this.relativeLinkResolution);

    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
      const children = this.processChildren(childConfig, segmentGroup);

      if (children === null) {
        return null;
      }

      return [new TreeNode(snapshot, children)];
    }

    if (childConfig.length === 0 && slicedSegments.length === 0) {
      return [new TreeNode(snapshot, [])];
    }

    const matchedOnOutlet = getOutlet(route) === outlet; // If we matched a config due to empty path match on a different outlet, we need to continue
    // passing the current outlet for the segment rather than switch to PRIMARY.
    // Note that we switch to primary when we have a match because outlet configs look like this:
    // {path: 'a', outlet: 'a', children: [
    //  {path: 'b', component: B},
    //  {path: 'c', component: C},
    // ]}
    // Notice that the children of the named outlet are configured with the primary outlet

    const children = this.processSegment(childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet);

    if (children === null) {
      return null;
    }

    return [new TreeNode(snapshot, children)];
  }

}

function sortActivatedRouteSnapshots(nodes) {
  nodes.sort((a, b) => {
    if (a.value.outlet === PRIMARY_OUTLET) return -1;
    if (b.value.outlet === PRIMARY_OUTLET) return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}

function getChildConfig(route) {
  if (route.children) {
    return route.children;
  }

  if (route.loadChildren) {
    return route._loadedConfig.routes;
  }

  return [];
}

function hasEmptyPathConfig(node) {
  const config = node.value.routeConfig;
  return config && config.path === '' && config.redirectTo === undefined;
}
/**
 * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with the
 * children from each duplicate. This is necessary because different outlets can match a single
 * empty path route config and the results need to then be merged.
 */


function mergeEmptyPathMatches(nodes) {
  const result = []; // The set of nodes which contain children that were merged from two duplicate empty path nodes.

  const mergedNodes = new Set();

  for (const node of nodes) {
    if (!hasEmptyPathConfig(node)) {
      result.push(node);
      continue;
    }

    const duplicateEmptyPathNode = result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);

    if (duplicateEmptyPathNode !== undefined) {
      duplicateEmptyPathNode.children.push(...node.children);
      mergedNodes.add(duplicateEmptyPathNode);
    } else {
      result.push(node);
    }
  } // For each node which has children from multiple sources, we need to recompute a new `TreeNode`
  // by also merging those children. This is necessary when there are multiple empty path configs in
  // a row. Put another way: whenever we combine children of two nodes, we need to also check if any
  // of those children can be combined into a single node as well.


  for (const mergedNode of mergedNodes) {
    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
    result.push(new TreeNode(mergedNode.value, mergedChildren));
  }

  return result.filter(n => !mergedNodes.has(n));
}

function checkOutletNameUniqueness(nodes) {
  const names = {};
  nodes.forEach(n => {
    const routeWithSameOutletName = names[n.value.outlet];

    if (routeWithSameOutletName) {
      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');
      const c = n.value.url.map(s => s.toString()).join('/');
      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
    }

    names[n.value.outlet] = n.value;
  });
}

function getSourceSegmentGroup(segmentGroup) {
  let s = segmentGroup;

  while (s._sourceSegment) {
    s = s._sourceSegment;
  }

  return s;
}

function getPathIndexShift(segmentGroup) {
  let s = segmentGroup;
  let res = s._segmentIndexShift ? s._segmentIndexShift : 0;

  while (s._sourceSegment) {
    s = s._sourceSegment;
    res += s._segmentIndexShift ? s._segmentIndexShift : 0;
  }

  return res - 1;
}

function getData(route) {
  return route.data || {};
}

function getResolve(route) {
  return route.resolve || {};
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function recognize(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(t => recognize$1(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(targetSnapshot => Object.assign(Object.assign({}, t), {
    targetSnapshot
  }))));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function resolveData(paramsInheritanceStrategy, moduleInjector) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(t => {
    const {
      targetSnapshot,
      guards: {
        canActivateChecks
      }
    } = t;

    if (!canActivateChecks.length) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t);
    }

    let canActivateChecksResolved = 0;
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(canActivateChecks).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(check => runResolve(check.route, targetSnapshot, paramsInheritanceStrategy, moduleInjector)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(() => canActivateChecksResolved++), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.takeLast)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(_ => canActivateChecksResolved === canActivateChecks.length ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t) : rxjs__WEBPACK_IMPORTED_MODULE_23__.EMPTY));
  });
}

function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {
  const resolve = futureARS._resolve;
  return resolveNode(resolve, futureARS, futureRSS, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(resolvedData => {
    futureARS._resolvedData = resolvedData;
    futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);
    return null;
  }));
}

function resolveNode(resolve, futureARS, futureRSS, moduleInjector) {
  const keys = getDataKeys(resolve);

  if (keys.length === 0) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)({});
  }

  const data = {};
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(keys).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(key => getResolver(resolve[key], futureARS, futureRSS, moduleInjector).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(value => {
    data[key] = value;
  }))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.takeLast)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(() => {
    // Ensure all resolvers returned values, otherwise don't emit any "next" and just complete
    // the chain which will cancel navigation
    if (getDataKeys(data).length === keys.length) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(data);
    }

    return rxjs__WEBPACK_IMPORTED_MODULE_23__.EMPTY;
  }));
}

function getDataKeys(obj) {
  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
}

function getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {
  const resolver = getToken(injectionToken, futureARS, moduleInjector);
  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) : wrapIntoObservable(resolver(futureARS, futureRSS));
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Perform a side effect through a switchMap for every emission on the source Observable,
 * but return an Observable that is identical to the source. It's essentially the same as
 * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,
 * it will wait before continuing with the original value.
 */


function switchTap(next) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(v => {
    const nextResult = next(v);

    if (nextResult) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(nextResult).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(() => v));
    }

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(v);
  });
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a way to customize when activated routes get reused.
 *
 * @publicApi
 */


class RouteReuseStrategy {}
/**
 * @description
 *
 * This base route reuse strategy only reuses routes when the matched router configs are
 * identical. This prevents components from being destroyed and recreated
 * when just the fragment or query parameters change
 * (that is, the existing component is _reused_).
 *
 * This strategy does not store any routes for later reuse.
 *
 * Angular uses this strategy by default.
 *
 *
 * It can be used as a base class for custom route reuse strategies, i.e. you can create your own
 * class that extends the `BaseRouteReuseStrategy` one.
 * @publicApi
 */


class BaseRouteReuseStrategy {
  /**
   * Whether the given route should detach for later reuse.
   * Always returns false for `BaseRouteReuseStrategy`.
   * */
  shouldDetach(route) {
    return false;
  }
  /**
   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
   */


  store(route, detachedTree) {}
  /** Returns `false`, meaning the route (and its subtree) is never reattached */


  shouldAttach(route) {
    return false;
  }
  /** Returns `null` because this strategy does not store routes for later re-use. */


  retrieve(route) {
    return null;
  }
  /**
   * Determines if a route should be reused.
   * This strategy returns `true` when the future route config and current route config are
   * identical.
   */


  shouldReuseRoute(future, curr) {
    return future.routeConfig === curr.routeConfig;
  }

}

class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The [DI token](guide/glossary/#di-token) for a router configuration.
 *
 * `ROUTES` is a low level API for router configuration via dependency injection.
 *
 * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,
 * `RouterModule.forChild()`, `provideRoutes`, or `Router.resetConfig()`.
 *
 * @publicApi
 */


const ROUTES = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTES');

class RouterConfigLoader {
  constructor(injector, compiler, onLoadStartListener, onLoadEndListener) {
    this.injector = injector;
    this.compiler = compiler;
    this.onLoadStartListener = onLoadStartListener;
    this.onLoadEndListener = onLoadEndListener;
  }

  load(parentInjector, route) {
    if (route._loader$) {
      return route._loader$;
    }

    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }

    const moduleFactory$ = this.loadModuleFactory(route.loadChildren);
    const loadRunner = moduleFactory$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(factory => {
      if (this.onLoadEndListener) {
        this.onLoadEndListener(route);
      }

      const module = factory.create(parentInjector); // When loading a module that doesn't provide `RouterModule.forChild()` preloader
      // will get stuck in an infinite loop. The child module's Injector will look to
      // its parent `Injector` when it doesn't find any ROUTES so it will return routes
      // for it's parent module instead.

      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES, undefined, _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectFlags.Self | _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectFlags.Optional)).map(standardizeConfig), module);
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(err => {
      route._loader$ = undefined;
      throw err;
    })); // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much

    route._loader$ = new rxjs__WEBPACK_IMPORTED_MODULE_24__.ConnectableObservable(loadRunner, () => new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.refCount)());
    return route._loader$;
  }

  loadModuleFactory(loadChildren) {
    return wrapIntoObservable(loadChildren()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(t => {
      if (t instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleFactory) {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t);
      } else {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(this.compiler.compileModuleAsync(t));
      }
    }));
  }

}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a way to migrate AngularJS applications to Angular.
 *
 * @publicApi
 */


class UrlHandlingStrategy {}
/**
 * @publicApi
 */


class DefaultUrlHandlingStrategy {
  shouldProcessUrl(url) {
    return true;
  }

  extract(url) {
    return url;
  }

  merge(newUrlPart, wholeUrl) {
    return newUrlPart;
  }

}

function defaultErrorHandler(error) {
  throw error;
}

function defaultMalformedUriErrorHandler(error, urlSerializer, url) {
  return urlSerializer.parse('/');
}
/**
 * @internal
 */


function defaultRouterHook(snapshot, runExtras) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
}
/**
 * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`
 * (exact = true).
 */


const exactMatchOptions = {
  paths: 'exact',
  fragment: 'ignored',
  matrixParams: 'ignored',
  queryParams: 'exact'
};
/**
 * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`
 * (exact = false).
 */

const subsetMatchOptions = {
  paths: 'subset',
  fragment: 'ignored',
  matrixParams: 'ignored',
  queryParams: 'subset'
};
/**
 * @description
 *
 * A service that provides navigation among views and URL manipulation capabilities.
 *
 * @see `Route`.
 * @see [Routing and Navigation Guide](guide/router).
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */

let Router = /*#__PURE__*/(() => {
  class Router {
    /**
     * Creates the router service.
     */
    // TODO: vsavkin make internal after the final is out.
    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, compiler, config) {
      this.rootComponentType = rootComponentType;
      this.urlSerializer = urlSerializer;
      this.rootContexts = rootContexts;
      this.location = location;
      this.config = config;
      this.lastSuccessfulNavigation = null;
      this.currentNavigation = null;
      this.disposed = false;
      this.navigationId = 0;
      /**
       * The id of the currently active page in the router.
       * Updated to the transition's target id on a successful navigation.
       *
       * This is used to track what page the router last activated. When an attempted navigation fails,
       * the router can then use this to compute how to restore the state back to the previously active
       * page.
       */

      this.currentPageId = 0;
      this.isNgZoneEnabled = false;
      /**
       * An event stream for routing events in this NgModule.
       */

      this.events = new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject();
      /**
       * A handler for navigation errors in this NgModule.
       */

      this.errorHandler = defaultErrorHandler;
      /**
       * A handler for errors thrown by `Router.parseUrl(url)`
       * when `url` contains an invalid character.
       * The most common case is a `%` sign
       * that's not encoded and is not part of a percent encoded sequence.
       */

      this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;
      /**
       * True if at least one navigation event has occurred,
       * false otherwise.
       */

      this.navigated = false;
      this.lastSuccessfulId = -1;
      /**
       * Hooks that enable you to pause navigation,
       * either before or after the preactivation phase.
       * Used by `RouterModule`.
       *
       * @internal
       */

      this.hooks = {
        beforePreactivation: defaultRouterHook,
        afterPreactivation: defaultRouterHook
      };
      /**
       * A strategy for extracting and merging URLs.
       * Used for AngularJS to Angular migrations.
       */

      this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
      /**
       * A strategy for re-using routes.
       */

      this.routeReuseStrategy = new DefaultRouteReuseStrategy();
      /**
       * How to handle a navigation request to the current URL. One of:
       *
       * - `'ignore'` :  The router ignores the request.
       * - `'reload'` : The router reloads the URL. Use to implement a "refresh" feature.
       *
       * Note that this only configures whether the Route reprocesses the URL and triggers related
       * action and events like redirects, guards, and resolvers. By default, the router re-uses a
       * component instance when it re-navigates to the same component type without visiting a different
       * component first. This behavior is configured by the `RouteReuseStrategy`. In order to reload
       * routed components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`
       * _and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`.
       */

      this.onSameUrlNavigation = 'ignore';
      /**
       * How to merge parameters, data, and resolved data from parent to child
       * routes. One of:
       *
       * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data
       * for path-less or component-less routes.
       * - `'always'` : Inherit parent parameters, data, and resolved data
       * for all child routes.
       */

      this.paramsInheritanceStrategy = 'emptyOnly';
      /**
       * Determines when the router updates the browser URL.
       * By default (`"deferred"`), updates the browser URL after navigation has finished.
       * Set to `'eager'` to update the browser URL at the beginning of navigation.
       * You can choose to update early so that, if navigation fails,
       * you can show an error message with the URL that failed.
       */

      this.urlUpdateStrategy = 'deferred';
      /**
       * Enables a bug fix that corrects relative link resolution in components with empty paths.
       * @see `RouterModule`
       */

      this.relativeLinkResolution = 'corrected';
      /**
       * Configures how the Router attempts to restore state when a navigation is cancelled.
       *
       * 'replace' - Always uses `location.replaceState` to set the browser state to the state of the
       * router before the navigation started. This means that if the URL of the browser is updated
       * _before_ the navigation is canceled, the Router will simply replace the item in history rather
       * than trying to restore to the previous location in the session history. This happens most
       * frequently with `urlUpdateStrategy: 'eager'` and navigations with the browser back/forward
       * buttons.
       *
       * 'computed' - Will attempt to return to the same index in the session history that corresponds
       * to the Angular route when the navigation gets cancelled. For example, if the browser back
       * button is clicked and the navigation is cancelled, the Router will trigger a forward navigation
       * and vice versa.
       *
       * Note: the 'computed' option is incompatible with any `UrlHandlingStrategy` which only
       * handles a portion of the URL because the history restoration navigates to the previous place in
       * the browser history rather than simply resetting a portion of the URL.
       *
       * The default value is `replace`.
       *
       */

      this.canceledNavigationResolution = 'replace';

      const onLoadStart = r => this.triggerEvent(new RouteConfigLoadStart(r));

      const onLoadEnd = r => this.triggerEvent(new RouteConfigLoadEnd(r));

      this.ngModule = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
      this.console = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵConsole"]);
      const ngZone = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone);
      this.isNgZoneEnabled = ngZone instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone && _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone.isInAngularZone();
      this.resetConfig(config);
      this.currentUrlTree = createEmptyUrlTree();
      this.rawUrlTree = this.currentUrlTree;
      this.browserUrlTree = this.currentUrlTree;
      this.configLoader = new RouterConfigLoader(injector, compiler, onLoadStart, onLoadEnd);
      this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);
      this.transitions = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({
        id: 0,
        targetPageId: 0,
        currentUrlTree: this.currentUrlTree,
        currentRawUrl: this.currentUrlTree,
        extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
        urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
        rawUrl: this.currentUrlTree,
        extras: {},
        resolve: null,
        reject: null,
        promise: Promise.resolve(true),
        source: 'imperative',
        restoredState: null,
        currentSnapshot: this.routerState.snapshot,
        targetSnapshot: null,
        currentRouterState: this.routerState,
        targetRouterState: null,
        guards: {
          canActivateChecks: [],
          canDeactivateChecks: []
        },
        guardsResult: null
      });
      this.navigations = this.setupNavigations(this.transitions);
      this.processNavigations();
    }
    /**
     * The ɵrouterPageId of whatever page is currently active in the browser history. This is
     * important for computing the target page id for new navigations because we need to ensure each
     * page id in the browser history is 1 more than the previous entry.
     */


    get browserPageId() {
      var _a;

      return (_a = this.location.getState()) === null || _a === void 0 ? void 0 : _a.ɵrouterPageId;
    }

    setupNavigations(transitions) {
      const eventsSubject = this.events;
      return transitions.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(t => t.id !== 0), // Extract URL
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(t => Object.assign(Object.assign({}, t), {
        extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)
      })), // Using switchMap so we cancel executing navigations when a new one comes in
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(t => {
        let completed = false;
        let errored = false;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe( // Store the Navigation object
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
          this.currentNavigation = {
            id: t.id,
            initialUrl: t.currentRawUrl,
            extractedUrl: t.extractedUrl,
            trigger: t.source,
            extras: t.extras,
            previousNavigation: this.lastSuccessfulNavigation ? Object.assign(Object.assign({}, this.lastSuccessfulNavigation), {
              previousNavigation: null
            }) : null
          };
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(t => {
          const browserUrlTree = this.browserUrlTree.toString();
          const urlTransition = !this.navigated || t.extractedUrl.toString() !== browserUrlTree || // Navigations which succeed or ones which fail and are cleaned up
          // correctly should result in `browserUrlTree` and `currentUrlTree`
          // matching. If this is not the case, assume something went wrong and try
          // processing the URL again.
          browserUrlTree !== this.currentUrlTree.toString();
          const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) && this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);

          if (processCurrentUrl) {
            // If the source of the navigation is from a browser event, the URL is
            // already updated. We already need to sync the internal state.
            if (isBrowserTriggeredNavigation(t.source)) {
              this.browserUrlTree = t.extractedUrl;
            }

            return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe( // Fire NavigationStart event
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(t => {
              const transition = this.transitions.getValue();
              eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));

              if (transition !== this.transitions.getValue()) {
                return rxjs__WEBPACK_IMPORTED_MODULE_23__.EMPTY;
              } // This delay is required to match old behavior that forced
              // navigation to always be async


              return Promise.resolve(t);
            }), // ApplyRedirects
            applyRedirects(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), // Update the currentNavigation
            // `urlAfterRedirects` is guaranteed to be set after this point
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
              this.currentNavigation = Object.assign(Object.assign({}, this.currentNavigation), {
                finalUrl: t.urlAfterRedirects
              });
            }), // Recognize
            recognize(this.rootComponentType, this.config, url => this.serializeUrl(url), this.paramsInheritanceStrategy, this.relativeLinkResolution), // Update URL if in `eager` update mode
            (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
              if (this.urlUpdateStrategy === 'eager') {
                if (!t.extras.skipLocationChange) {
                  const rawUrl = this.urlHandlingStrategy.merge(t.urlAfterRedirects, t.rawUrl);
                  this.setBrowserUrl(rawUrl, t);
                }

                this.browserUrlTree = t.urlAfterRedirects;
              } // Fire RoutesRecognized


              const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
              eventsSubject.next(routesRecognized);
            }));
          } else {
            const processPreviousUrl = urlTransition && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);
            /* When the current URL shouldn't be processed, but the previous one was,
             * we handle this "error condition" by navigating to the previously
             * successful URL, but leaving the URL intact.*/

            if (processPreviousUrl) {
              const {
                id,
                extractedUrl,
                source,
                restoredState,
                extras
              } = t;
              const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);
              eventsSubject.next(navStart);
              const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(Object.assign(Object.assign({}, t), {
                targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: Object.assign(Object.assign({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              }));
            } else {
              /* When neither the current or previous URL can be processed, do nothing
               * other than update router's internal reference to the current "settled"
               * URL. This way the next navigation will be coming from the current URL
               * in the browser.
               */
              this.rawUrlTree = t.rawUrl;
              t.resolve(null);
              return rxjs__WEBPACK_IMPORTED_MODULE_23__.EMPTY;
            }
          }
        }), // Before Preactivation
        switchTap(t => {
          const {
            targetSnapshot,
            id: navigationId,
            extractedUrl: appliedUrlTree,
            rawUrl: rawUrlTree,
            extras: {
              skipLocationChange,
              replaceUrl
            }
          } = t;
          return this.hooks.beforePreactivation(targetSnapshot, {
            navigationId,
            appliedUrlTree,
            rawUrlTree,
            skipLocationChange: !!skipLocationChange,
            replaceUrl: !!replaceUrl
          });
        }), // --- GUARDS ---
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
          const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
          this.triggerEvent(guardsStart);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(t => Object.assign(Object.assign({}, t), {
          guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
        })), checkGuards(this.ngModule.injector, evt => this.triggerEvent(evt)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
          if (isUrlTree(t.guardsResult)) {
            const error = navigationCancelingError(`Redirecting to "${this.serializeUrl(t.guardsResult)}"`);
            error.url = t.guardsResult;
            throw error;
          }

          const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
          this.triggerEvent(guardsEnd);
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(t => {
          if (!t.guardsResult) {
            this.restoreHistory(t);
            this.cancelNavigationTransition(t, '');
            return false;
          }

          return true;
        }), // --- RESOLVE ---
        switchTap(t => {
          if (t.guards.canActivateChecks.length) {
            return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
              const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
              this.triggerEvent(resolveStart);
            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.switchMap)(t => {
              let dataResolved = false;
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(t).pipe(resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)({
                next: () => dataResolved = true,
                complete: () => {
                  if (!dataResolved) {
                    this.restoreHistory(t);
                    this.cancelNavigationTransition(t, `At least one route resolver didn't emit any value.`);
                  }
                }
              }));
            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
              const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);
              this.triggerEvent(resolveEnd);
            }));
          }

          return undefined;
        }), // --- AFTER PREACTIVATION ---
        switchTap(t => {
          const {
            targetSnapshot,
            id: navigationId,
            extractedUrl: appliedUrlTree,
            rawUrl: rawUrlTree,
            extras: {
              skipLocationChange,
              replaceUrl
            }
          } = t;
          return this.hooks.afterPreactivation(targetSnapshot, {
            navigationId,
            appliedUrlTree,
            rawUrlTree,
            skipLocationChange: !!skipLocationChange,
            replaceUrl: !!replaceUrl
          });
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(t => {
          const targetRouterState = createRouterState(this.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
          return Object.assign(Object.assign({}, t), {
            targetRouterState
          });
        }),
        /* Once here, we are about to activate syncronously. The assumption is this
           will succeed, and user code may read from the Router service. Therefore
           before activation, we need to update router properties storing the current
           URL and the RouterState, as well as updated the browser URL. All this should
           happen *before* activating. */
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)(t => {
          this.currentUrlTree = t.urlAfterRedirects;
          this.rawUrlTree = this.urlHandlingStrategy.merge(t.urlAfterRedirects, t.rawUrl);
          this.routerState = t.targetRouterState;

          if (this.urlUpdateStrategy === 'deferred') {
            if (!t.extras.skipLocationChange) {
              this.setBrowserUrl(this.rawUrlTree, t);
            }

            this.browserUrlTree = t.urlAfterRedirects;
          }
        }), activateRoutes(this.rootContexts, this.routeReuseStrategy, evt => this.triggerEvent(evt)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.tap)({
          next() {
            completed = true;
          },

          complete() {
            completed = true;
          }

        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_27__.finalize)(() => {
          var _a;
          /* When the navigation stream finishes either through error or success, we
           * set the `completed` or `errored` flag. However, there are some situations
           * where we could get here without either of those being set. For instance, a
           * redirect during NavigationStart. Therefore, this is a catch-all to make
           * sure the NavigationCancel
           * event is fired when a navigation gets cancelled but not caught by other
           * means. */


          if (!completed && !errored) {
            const cancelationReason = `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`;
            this.cancelNavigationTransition(t, cancelationReason);
          } // Only clear current navigation if it is still set to the one that
          // finalized.


          if (((_a = this.currentNavigation) === null || _a === void 0 ? void 0 : _a.id) === t.id) {
            this.currentNavigation = null;
          }
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(e => {
          // TODO(atscott): The NavigationTransition `t` used here does not accurately
          // reflect the current state of the whole transition because some operations
          // return a new object rather than modifying the one in the outermost
          // `switchMap`.
          //  The fix can likely be to:
          //  1. Rename the outer `t` variable so it's not shadowed all the time and
          //  confusing
          //  2. Keep reassigning to the outer variable after each stage to ensure it
          //  gets updated. Or change the implementations to not return a copy.
          // Not changed yet because it affects existing code and would need to be
          // tested more thoroughly.
          errored = true;
          /* This error type is issued during Redirect, and is handled as a
           * cancellation rather than an error. */

          if (isNavigationCancelingError(e)) {
            const redirecting = isUrlTree(e.url);

            if (!redirecting) {
              // Set property only if we're not redirecting. If we landed on a page and
              // redirect to `/` route, the new navigation is going to see the `/`
              // isn't a change from the default currentUrlTree and won't navigate.
              // This is only applicable with initial navigation, so setting
              // `navigated` only when not redirecting resolves this scenario.
              this.navigated = true;
              this.restoreHistory(t, true);
            }

            const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);
            eventsSubject.next(navCancel); // When redirecting, we need to delay resolving the navigation
            // promise and push it to the redirect navigation

            if (!redirecting) {
              t.resolve(false);
            } else {
              // setTimeout is required so this navigation finishes with
              // the return EMPTY below. If it isn't allowed to finish
              // processing, there can be multiple navigations to the same
              // URL.
              setTimeout(() => {
                const mergedTree = this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);
                const extras = {
                  skipLocationChange: t.extras.skipLocationChange,
                  // The URL is already updated at this point if we have 'eager' URL
                  // updates or if the navigation was triggered by the browser (back
                  // button, URL bar, etc). We want to replace that item in history if
                  // the navigation is rejected.
                  replaceUrl: this.urlUpdateStrategy === 'eager' || isBrowserTriggeredNavigation(t.source)
                };
                this.scheduleNavigation(mergedTree, 'imperative', null, extras, {
                  resolve: t.resolve,
                  reject: t.reject,
                  promise: t.promise
                });
              }, 0);
            }
            /* All other errors should reset to the router's internal URL reference to
             * the pre-error state. */

          } else {
            this.restoreHistory(t, true);
            const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);
            eventsSubject.next(navError);

            try {
              t.resolve(this.errorHandler(e));
            } catch (ee) {
              t.reject(ee);
            }
          }

          return rxjs__WEBPACK_IMPORTED_MODULE_23__.EMPTY;
        })); // TODO(jasonaden): remove cast once g3 is on updated TypeScript
      }));
    }
    /**
     * @internal
     * TODO: this should be removed once the constructor of the router made internal
     */


    resetRootComponentType(rootComponentType) {
      this.rootComponentType = rootComponentType; // TODO: vsavkin router 4.0 should make the root component set to null
      // this will simplify the lifecycle of the router.

      this.routerState.root.component = this.rootComponentType;
    }

    setTransition(t) {
      this.transitions.next(Object.assign(Object.assign({}, this.transitions.value), t));
    }
    /**
     * Sets up the location change listener and performs the initial navigation.
     */


    initialNavigation() {
      this.setUpLocationChangeListener();

      if (this.navigationId === 0) {
        this.navigateByUrl(this.location.path(true), {
          replaceUrl: true
        });
      }
    }
    /**
     * Sets up the location change listener. This listener detects navigations triggered from outside
     * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
     * navigation so that the correct events, guards, etc. are triggered.
     */


    setUpLocationChangeListener() {
      // Don't need to use Zone.wrap any more, because zone.js
      // already patch onPopState, so location change callback will
      // run into ngZone
      if (!this.locationSubscription) {
        this.locationSubscription = this.location.subscribe(event => {
          const source = event['type'] === 'popstate' ? 'popstate' : 'hashchange';

          if (source === 'popstate') {
            // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS
            // hybrid apps.
            setTimeout(() => {
              var _a;

              const extras = {
                replaceUrl: true
              }; // Navigations coming from Angular router have a navigationId state
              // property. When this exists, restore the state.

              const state = ((_a = event.state) === null || _a === void 0 ? void 0 : _a.navigationId) ? event.state : null;

              if (state) {
                const stateCopy = Object.assign({}, state);
                delete stateCopy.navigationId;
                delete stateCopy.ɵrouterPageId;

                if (Object.keys(stateCopy).length !== 0) {
                  extras.state = stateCopy;
                }
              }

              const urlTree = this.parseUrl(event['url']);
              this.scheduleNavigation(urlTree, source, state, extras);
            }, 0);
          }
        });
      }
    }
    /** The current URL. */


    get url() {
      return this.serializeUrl(this.currentUrlTree);
    }
    /**
     * Returns the current `Navigation` object when the router is navigating,
     * and `null` when idle.
     */


    getCurrentNavigation() {
      return this.currentNavigation;
    }
    /** @internal */


    triggerEvent(event) {
      this.events.next(event);
    }
    /**
     * Resets the route configuration used for navigation and generating links.
     *
     * @param config The route array for the new configuration.
     *
     * @usageNotes
     *
     * ```
     * router.resetConfig([
     *  { path: 'team/:id', component: TeamCmp, children: [
     *    { path: 'simple', component: SimpleCmp },
     *    { path: 'user/:name', component: UserCmp }
     *  ]}
     * ]);
     * ```
     */


    resetConfig(config) {
      validateConfig(config);
      this.config = config.map(standardizeConfig);
      this.navigated = false;
      this.lastSuccessfulId = -1;
    }
    /** @nodoc */


    ngOnDestroy() {
      this.dispose();
    }
    /** Disposes of the router. */


    dispose() {
      this.transitions.complete();

      if (this.locationSubscription) {
        this.locationSubscription.unsubscribe();
        this.locationSubscription = undefined;
      }

      this.disposed = true;
    }
    /**
     * Appends URL segments to the current URL tree to create a new URL tree.
     *
     * @param commands An array of URL fragments with which to construct the new URL tree.
     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
     * segments, followed by the parameters for each segment.
     * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
     * property of the options object, if supplied.
     * @param navigationExtras Options that control the navigation strategy.
     * @returns The new URL tree.
     *
     * @usageNotes
     *
     * ```
     * // create /team/33/user/11
     * router.createUrlTree(['/team', 33, 'user', 11]);
     *
     * // create /team/33;expand=true/user/11
     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
     *
     * // you can collapse static segments like this (this works only with the first passed-in value):
     * router.createUrlTree(['/team/33/user', userId]);
     *
     * // If the first segment can contain slashes, and you do not want the router to split it,
     * // you can do the following:
     * router.createUrlTree([{segmentPath: '/one/two'}]);
     *
     * // create /team/33/(user/11//right:chat)
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
     *
     * // remove the right secondary node
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
     *
     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
     *
     * // navigate to /team/33/user/11/details
     * router.createUrlTree(['details'], {relativeTo: route});
     *
     * // navigate to /team/33/user/22
     * router.createUrlTree(['../22'], {relativeTo: route});
     *
     * // navigate to /team/44/user/22
     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
     *
     * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
     * tree should be created relative to the root.
     * ```
     */


    createUrlTree(commands, navigationExtras = {}) {
      const {
        relativeTo,
        queryParams,
        fragment,
        queryParamsHandling,
        preserveFragment
      } = navigationExtras;
      const a = relativeTo || this.routerState.root;
      const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
      let q = null;

      switch (queryParamsHandling) {
        case 'merge':
          q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);
          break;

        case 'preserve':
          q = this.currentUrlTree.queryParams;
          break;

        default:
          q = queryParams || null;
      }

      if (q !== null) {
        q = this.removeEmptyProps(q);
      }

      return createUrlTree(a, this.currentUrlTree, commands, q, f !== null && f !== void 0 ? f : null);
    }
    /**
     * Navigates to a view using an absolute route path.
     *
     * @param url An absolute path for a defined route. The function does not apply any delta to the
     *     current URL.
     * @param extras An object containing properties that modify the navigation strategy.
     *
     * @returns A Promise that resolves to 'true' when navigation succeeds,
     * to 'false' when navigation fails, or is rejected on error.
     *
     * @usageNotes
     *
     * The following calls request navigation to an absolute path.
     *
     * ```
     * router.navigateByUrl("/team/33/user/11");
     *
     * // Navigate without updating the URL
     * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
     * ```
     *
     * @see [Routing and Navigation guide](guide/router)
     *
     */


    navigateByUrl(url, extras = {
      skipLocationChange: false
    }) {
      if (typeof ngDevMode === 'undefined' || ngDevMode && this.isNgZoneEnabled && !_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone.isInAngularZone()) {
        this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);
      }

      const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
      const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
      return this.scheduleNavigation(mergedTree, 'imperative', null, extras);
    }
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     *
     * @param commands An array of URL fragments with which to construct the target URL.
     * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
     * segments, followed by the parameters for each segment.
     * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
     * of the options object, if supplied.
     * @param extras An options object that determines how the URL should be constructed or
     *     interpreted.
     *
     * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation
     *     fails,
     * or is rejected on error.
     *
     * @usageNotes
     *
     * The following calls request navigation to a dynamic route path relative to the current URL.
     *
     * ```
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
     *
     * // Navigate without updating the URL, overriding the default behavior
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
     * ```
     *
     * @see [Routing and Navigation guide](guide/router)
     *
     */


    navigate(commands, extras = {
      skipLocationChange: false
    }) {
      validateCommands(commands);
      return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    }
    /** Serializes a `UrlTree` into a string */


    serializeUrl(url) {
      return this.urlSerializer.serialize(url);
    }
    /** Parses a string into a `UrlTree` */


    parseUrl(url) {
      let urlTree;

      try {
        urlTree = this.urlSerializer.parse(url);
      } catch (e) {
        urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);
      }

      return urlTree;
    }

    isActive(url, matchOptions) {
      let options;

      if (matchOptions === true) {
        options = Object.assign({}, exactMatchOptions);
      } else if (matchOptions === false) {
        options = Object.assign({}, subsetMatchOptions);
      } else {
        options = matchOptions;
      }

      if (isUrlTree(url)) {
        return containsTree(this.currentUrlTree, url, options);
      }

      const urlTree = this.parseUrl(url);
      return containsTree(this.currentUrlTree, urlTree, options);
    }

    removeEmptyProps(params) {
      return Object.keys(params).reduce((result, key) => {
        const value = params[key];

        if (value !== null && value !== undefined) {
          result[key] = value;
        }

        return result;
      }, {});
    }

    processNavigations() {
      this.navigations.subscribe(t => {
        this.navigated = true;
        this.lastSuccessfulId = t.id;
        this.currentPageId = t.targetPageId;
        this.events.next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));
        this.lastSuccessfulNavigation = this.currentNavigation;
        t.resolve(true);
      }, e => {
        this.console.warn(`Unhandled Navigation Error: ${e}`);
      });
    }

    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
      var _a, _b;

      if (this.disposed) {
        return Promise.resolve(false);
      }

      let resolve;
      let reject;
      let promise;

      if (priorPromise) {
        resolve = priorPromise.resolve;
        reject = priorPromise.reject;
        promise = priorPromise.promise;
      } else {
        promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
      }

      const id = ++this.navigationId;
      let targetPageId;

      if (this.canceledNavigationResolution === 'computed') {
        const isInitialPage = this.currentPageId === 0;

        if (isInitialPage) {
          restoredState = this.location.getState();
        } // If the `ɵrouterPageId` exist in the state then `targetpageId` should have the value of
        // `ɵrouterPageId`. This is the case for something like a page refresh where we assign the
        // target id to the previously set value for that page.


        if (restoredState && restoredState.ɵrouterPageId) {
          targetPageId = restoredState.ɵrouterPageId;
        } else {
          // If we're replacing the URL or doing a silent navigation, we do not want to increment the
          // page id because we aren't pushing a new entry to history.
          if (extras.replaceUrl || extras.skipLocationChange) {
            targetPageId = (_a = this.browserPageId) !== null && _a !== void 0 ? _a : 0;
          } else {
            targetPageId = ((_b = this.browserPageId) !== null && _b !== void 0 ? _b : 0) + 1;
          }
        }
      } else {
        // This is unused when `canceledNavigationResolution` is not computed.
        targetPageId = 0;
      }

      this.setTransition({
        id,
        targetPageId,
        source,
        restoredState,
        currentUrlTree: this.currentUrlTree,
        currentRawUrl: this.rawUrlTree,
        rawUrl,
        extras,
        resolve,
        reject,
        promise,
        currentSnapshot: this.routerState.snapshot,
        currentRouterState: this.routerState
      }); // Make sure that the error is propagated even though `processNavigations` catch
      // handler does not rethrow

      return promise.catch(e => {
        return Promise.reject(e);
      });
    }

    setBrowserUrl(url, t) {
      const path = this.urlSerializer.serialize(url);
      const state = Object.assign(Object.assign({}, t.extras.state), this.generateNgRouterState(t.id, t.targetPageId));

      if (this.location.isCurrentPathEqualTo(path) || !!t.extras.replaceUrl) {
        this.location.replaceState(path, '', state);
      } else {
        this.location.go(path, '', state);
      }
    }
    /**
     * Performs the necessary rollback action to restore the browser URL to the
     * state before the transition.
     */


    restoreHistory(t, restoringFromCaughtError = false) {
      var _a, _b;

      if (this.canceledNavigationResolution === 'computed') {
        const targetPagePosition = this.currentPageId - t.targetPageId; // The navigator change the location before triggered the browser event,
        // so we need to go back to the current url if the navigation is canceled.
        // Also, when navigation gets cancelled while using url update strategy eager, then we need to
        // go back. Because, when `urlUpdateSrategy` is `eager`; `setBrowserUrl` method is called
        // before any verification.

        const browserUrlUpdateOccurred = t.source === 'popstate' || this.urlUpdateStrategy === 'eager' || this.currentUrlTree === ((_a = this.currentNavigation) === null || _a === void 0 ? void 0 : _a.finalUrl);

        if (browserUrlUpdateOccurred && targetPagePosition !== 0) {
          this.location.historyGo(targetPagePosition);
        } else if (this.currentUrlTree === ((_b = this.currentNavigation) === null || _b === void 0 ? void 0 : _b.finalUrl) && targetPagePosition === 0) {
          // We got to the activation stage (where currentUrlTree is set to the navigation's
          // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).
          // We still need to reset the router state back to what it was when the navigation started.
          this.resetState(t); // TODO(atscott): resetting the `browserUrlTree` should really be done in `resetState`.
          // Investigate if this can be done by running TGP.

          this.browserUrlTree = t.currentUrlTree;
          this.resetUrlToCurrentUrlTree();
        } else {// The browser URL and router state was not updated before the navigation cancelled so
          // there's no restoration needed.
        }
      } else if (this.canceledNavigationResolution === 'replace') {
        // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op
        // for `deferred` navigations that haven't change the internal state yet because guards
        // reject. For 'eager' navigations, it seems like we also really should reset the state
        // because the navigation was cancelled. Investigate if this can be done by running TGP.
        if (restoringFromCaughtError) {
          this.resetState(t);
        }

        this.resetUrlToCurrentUrlTree();
      }
    }

    resetState(t) {
      this.routerState = t.currentRouterState;
      this.currentUrlTree = t.currentUrlTree; // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be
      // configured to handle only part of the navigation URL. This means we would only want to reset
      // the part of the navigation handled by the Angular router rather than the whole URL. In
      // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL
      // when merging, such as the query params so they are not lost on a refresh.

      this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);
    }

    resetUrlToCurrentUrlTree() {
      this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
    }

    cancelNavigationTransition(t, reason) {
      const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), reason);
      this.triggerEvent(navCancel);
      t.resolve(false);
    }

    generateNgRouterState(navigationId, routerPageId) {
      if (this.canceledNavigationResolution === 'computed') {
        return {
          navigationId,
          ɵrouterPageId: routerPageId
        };
      }

      return {
        navigationId
      };
    }

  }

  Router.ɵfac = function Router_Factory(t) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinvalidFactory"]();
  };

  Router.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: Router,
    factory: Router.ɵfac
  });
  return Router;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function validateCommands(commands) {
  for (let i = 0; i < commands.length; i++) {
    const cmd = commands[i];

    if (cmd == null) {
      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);
    }
  }
}

function isBrowserTriggeredNavigation(source) {
  return source !== 'imperative';
}
/**
 * @description
 *
 * When applied to an element in a template, makes that element a link
 * that initiates navigation to a route. Navigation opens one or more routed components
 * in one or more `<router-outlet>` locations on the page.
 *
 * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,
 * the following creates a static link to the route:
 * `<a routerLink="/user/bob">link to user component</a>`
 *
 * You can use dynamic values to generate the link.
 * For a dynamic link, pass an array of path segments,
 * followed by the params for each segment.
 * For example, `['/team', teamId, 'user', userName, {details: true}]`
 * generates a link to `/team/11/user/bob;details=true`.
 *
 * Multiple static segments can be merged into one term and combined with dynamic segments.
 * For example, `['/team/11/user', userName, {details: true}]`
 *
 * The input that you provide to the link is treated as a delta to the current URL.
 * For instance, suppose the current URL is `/user/(box//aux:team)`.
 * The link `<a [routerLink]="['/user/jim']">Jim</a>` creates the URL
 * `/user/(jim//aux:team)`.
 * See {@link Router#createUrlTree createUrlTree} for more information.
 *
 * @usageNotes
 *
 * You can use absolute or relative paths in a link, set query parameters,
 * control how parameters are handled, and keep a history of navigation states.
 *
 * ### Relative link paths
 *
 * The first segment name can be prepended with `/`, `./`, or `../`.
 * * If the first segment begins with `/`, the router looks up the route from the root of the
 *   app.
 * * If the first segment begins with `./`, or doesn't begin with a slash, the router
 *   looks in the children of the current activated route.
 * * If the first segment begins with `../`, the router goes up one level in the route tree.
 *
 * ### Setting and handling query params and fragments
 *
 * The following link adds a query parameter and a fragment to the generated URL:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
 *   link to user component
 * </a>
 * ```
 * By default, the directive constructs the new URL using the given query parameters.
 * The example generates the link: `/user/bob?debug=true#education`.
 *
 * You can instruct the directive to handle query parameters differently
 * by specifying the `queryParamsHandling` option in the link.
 * Allowed values are:
 *
 *  - `'merge'`: Merge the given `queryParams` into the current query params.
 *  - `'preserve'`: Preserve the current query params.
 *
 * For example:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
 *   link to user component
 * </a>
 * ```
 *
 * See {@link UrlCreationOptions.queryParamsHandling UrlCreationOptions#queryParamsHandling}.
 *
 * ### Preserving navigation history
 *
 * You can provide a `state` value to be persisted to the browser's
 * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).
 * For example:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [state]="{tracingId: 123}">
 *   link to user component
 * </a>
 * ```
 *
 * Use {@link Router.getCurrentNavigation() Router#getCurrentNavigation} to retrieve a saved
 * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`
 * event:
 *
 * ```
 * // Get NavigationStart events
 * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {
 *   const navigation = router.getCurrentNavigation();
 *   tracingService.trace({id: navigation.extras.state.tracingId});
 * });
 * ```
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


let RouterLink = /*#__PURE__*/(() => {
  class RouterLink {
    constructor(router, route, tabIndexAttribute, renderer, el) {
      this.router = router;
      this.route = route;
      this.tabIndexAttribute = tabIndexAttribute;
      this.renderer = renderer;
      this.el = el;
      this.commands = null;
      /** @internal */

      this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject();
      this.setTabIndexIfNotOnNativeEl('0');
    }
    /**
     * Modifies the tab index if there was not a tabindex attribute on the element during
     * instantiation.
     */


    setTabIndexIfNotOnNativeEl(newTabIndex) {
      if (this.tabIndexAttribute != null
      /* both `null` and `undefined` */
      ) {
        return;
      }

      const renderer = this.renderer;
      const nativeElement = this.el.nativeElement;

      if (newTabIndex !== null) {
        renderer.setAttribute(nativeElement, 'tabindex', newTabIndex);
      } else {
        renderer.removeAttribute(nativeElement, 'tabindex');
      }
    }
    /** @nodoc */


    ngOnChanges(changes) {
      // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes
      // to the RouterLinks it's tracking.
      this.onChanges.next(this);
    }
    /**
     * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
     *   - **null|undefined**: effectively disables the `routerLink`
     * @see {@link Router#createUrlTree Router#createUrlTree}
     */


    set routerLink(commands) {
      if (commands != null) {
        this.commands = Array.isArray(commands) ? commands : [commands];
        this.setTabIndexIfNotOnNativeEl('0');
      } else {
        this.commands = null;
        this.setTabIndexIfNotOnNativeEl(null);
      }
    }
    /** @nodoc */


    onClick() {
      if (this.urlTree === null) {
        return true;
      }

      const extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl),
        state: this.state
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return true;
    }

    get urlTree() {
      if (this.commands === null) {
        return null;
      }

      return this.router.createUrlTree(this.commands, {
        // If the `relativeTo` input is not defined, we want to use `this.route` by default.
        // Otherwise, we should use the value provided by the user in the input.
        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
        queryParams: this.queryParams,
        fragment: this.fragment,
        queryParamsHandling: this.queryParamsHandling,
        preserveFragment: attrBoolValue(this.preserveFragment)
      });
    }

  }

  RouterLink.ɵfac = function RouterLink_Factory(t) {
    return new (t || RouterLink)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
  };

  RouterLink.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: RouterLink,
    selectors: [["", "routerLink", "", 5, "a", 5, "area"]],
    hostBindings: function RouterLink_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function RouterLink_click_HostBindingHandler() {
          return ctx.onClick();
        });
      }
    },
    inputs: {
      queryParams: "queryParams",
      fragment: "fragment",
      queryParamsHandling: "queryParamsHandling",
      preserveFragment: "preserveFragment",
      skipLocationChange: "skipLocationChange",
      replaceUrl: "replaceUrl",
      state: "state",
      relativeTo: "relativeTo",
      routerLink: "routerLink"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return RouterLink;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 *
 * Lets you link to specific routes in your app.
 *
 * See `RouterLink` for more information.
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


let RouterLinkWithHref = /*#__PURE__*/(() => {
  class RouterLinkWithHref {
    constructor(router, route, locationStrategy) {
      this.router = router;
      this.route = route;
      this.locationStrategy = locationStrategy;
      this.commands = null; // the url displayed on the anchor element.
      // @HostBinding('attr.href') is used rather than @HostBinding() because it removes the
      // href attribute when it becomes `null`.

      this.href = null;
      /** @internal */

      this.onChanges = new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject();
      this.subscription = router.events.subscribe(s => {
        if (s instanceof NavigationEnd) {
          this.updateTargetUrlAndHref();
        }
      });
    }
    /**
     * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.
     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
     *   - **null|undefined**: Disables the link by removing the `href`
     * @see {@link Router#createUrlTree Router#createUrlTree}
     */


    set routerLink(commands) {
      if (commands != null) {
        this.commands = Array.isArray(commands) ? commands : [commands];
      } else {
        this.commands = null;
      }
    }
    /** @nodoc */


    ngOnChanges(changes) {
      this.updateTargetUrlAndHref();
      this.onChanges.next(this);
    }
    /** @nodoc */


    ngOnDestroy() {
      this.subscription.unsubscribe();
    }
    /** @nodoc */


    onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }

      if (typeof this.target === 'string' && this.target != '_self' || this.urlTree === null) {
        return true;
      }

      const extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl),
        state: this.state
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return false;
    }

    updateTargetUrlAndHref() {
      this.href = this.urlTree !== null ? this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree)) : null;
    }

    get urlTree() {
      if (this.commands === null) {
        return null;
      }

      return this.router.createUrlTree(this.commands, {
        // If the `relativeTo` input is not defined, we want to use `this.route` by default.
        // Otherwise, we should use the value provided by the user in the input.
        relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
        queryParams: this.queryParams,
        fragment: this.fragment,
        queryParamsHandling: this.queryParamsHandling,
        preserveFragment: attrBoolValue(this.preserveFragment)
      });
    }

  }

  RouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) {
    return new (t || RouterLinkWithHref)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_28__.LocationStrategy));
  };

  RouterLinkWithHref.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: RouterLinkWithHref,
    selectors: [["a", "routerLink", ""], ["area", "routerLink", ""]],
    hostVars: 2,
    hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function RouterLinkWithHref_click_HostBindingHandler($event) {
          return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
        });
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("target", ctx.target)("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
      }
    },
    inputs: {
      target: "target",
      queryParams: "queryParams",
      fragment: "fragment",
      queryParamsHandling: "queryParamsHandling",
      preserveFragment: "preserveFragment",
      skipLocationChange: "skipLocationChange",
      replaceUrl: "replaceUrl",
      state: "state",
      relativeTo: "relativeTo",
      routerLink: "routerLink"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return RouterLinkWithHref;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function attrBoolValue(s) {
  return s === '' || !!s;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *
 * @description
 *
 * Tracks whether the linked route of an element is currently active, and allows you
 * to specify one or more CSS classes to add to the element when the linked route
 * is active.
 *
 * Use this directive to create a visual distinction for elements associated with an active route.
 * For example, the following code highlights the word "Bob" when the router
 * activates the associated route:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * Whenever the URL is either '/user' or '/user/bob', the "active-link" class is
 * added to the anchor tag. If the URL changes, the class is removed.
 *
 * You can set more than one class using a space-separated string or an array.
 * For example:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
 * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * To add the classes only when the URL matches the link exactly, add the option `exact: true`:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * To directly check the `isActive` status of the link, assign the `RouterLinkActive`
 * instance to a template variable.
 * For example, the following checks the status without assigning any CSS classes:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * You can apply the `RouterLinkActive` directive to an ancestor of linked elements.
 * For example, the following sets the active-link class on the `<div>`  parent tag
 * when the URL is either '/user/jim' or '/user/bob'.
 *
 * ```
 * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
 *   <a routerLink="/user/jim">Jim</a>
 *   <a routerLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */


let RouterLinkActive = /*#__PURE__*/(() => {
  class RouterLinkActive {
    constructor(router, element, renderer, cdr, link, linkWithHref) {
      this.router = router;
      this.element = element;
      this.renderer = renderer;
      this.cdr = cdr;
      this.link = link;
      this.linkWithHref = linkWithHref;
      this.classes = [];
      this.isActive = false;
      /**
       * Options to configure how to determine if the router link is active.
       *
       * These options are passed to the `Router.isActive()` function.
       *
       * @see Router.isActive
       */

      this.routerLinkActiveOptions = {
        exact: false
      };
      /**
       *
       * You can use the output `isActiveChange` to get notified each time the link becomes
       * active or inactive.
       *
       * Emits:
       * true  -> Route is active
       * false -> Route is inactive
       *
       * ```
       * <a
       *  routerLink="/user/bob"
       *  routerLinkActive="active-link"
       *  (isActiveChange)="this.onRouterLinkActive($event)">Bob</a>
       * ```
       */

      this.isActiveChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this.routerEventsSubscription = router.events.subscribe(s => {
        if (s instanceof NavigationEnd) {
          this.update();
        }
      });
    }
    /** @nodoc */


    ngAfterContentInit() {
      // `of(null)` is used to force subscribe body to execute once immediately (like `startWith`).
      (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(this.links.changes, this.linksWithHrefs.changes, (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_29__.mergeAll)()).subscribe(_ => {
        this.update();
        this.subscribeToEachLinkOnChanges();
      });
    }

    subscribeToEachLinkOnChanges() {
      var _a;

      (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
      const allLinkChanges = [...this.links.toArray(), ...this.linksWithHrefs.toArray(), this.link, this.linkWithHref].filter(link => !!link).map(link => link.onChanges);
      this.linkInputChangesSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(allLinkChanges).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_29__.mergeAll)()).subscribe(link => {
        if (this.isActive !== this.isLinkActive(this.router)(link)) {
          this.update();
        }
      });
    }

    set routerLinkActive(data) {
      const classes = Array.isArray(data) ? data : data.split(' ');
      this.classes = classes.filter(c => !!c);
    }
    /** @nodoc */


    ngOnChanges(changes) {
      this.update();
    }
    /** @nodoc */


    ngOnDestroy() {
      var _a;

      this.routerEventsSubscription.unsubscribe();
      (_a = this.linkInputChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }

    update() {
      if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;
      Promise.resolve().then(() => {
        const hasActiveLinks = this.hasActiveLinks();

        if (this.isActive !== hasActiveLinks) {
          this.isActive = hasActiveLinks;
          this.cdr.markForCheck();
          this.classes.forEach(c => {
            if (hasActiveLinks) {
              this.renderer.addClass(this.element.nativeElement, c);
            } else {
              this.renderer.removeClass(this.element.nativeElement, c);
            }
          }); // Emit on isActiveChange after classes are updated

          this.isActiveChange.emit(hasActiveLinks);
        }
      });
    }

    isLinkActive(router) {
      const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : // While the types should disallow `undefined` here, it's possible without strict inputs
      this.routerLinkActiveOptions.exact || false;
      return link => link.urlTree ? router.isActive(link.urlTree, options) : false;
    }

    hasActiveLinks() {
      const isActiveCheckFn = this.isLinkActive(this.router);
      return this.link && isActiveCheckFn(this.link) || this.linkWithHref && isActiveCheckFn(this.linkWithHref) || this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);
    }

  }

  RouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) {
    return new (t || RouterLinkActive)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](RouterLink, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](RouterLinkWithHref, 8));
  };

  RouterLinkActive.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: RouterLinkActive,
    selectors: [["", "routerLinkActive", ""]],
    contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, RouterLink, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, RouterLinkWithHref, 5);
      }

      if (rf & 2) {
        let _t;

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.links = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.linksWithHrefs = _t);
      }
    },
    inputs: {
      routerLinkActiveOptions: "routerLinkActiveOptions",
      routerLinkActive: "routerLinkActive"
    },
    outputs: {
      isActiveChange: "isActiveChange"
    },
    exportAs: ["routerLinkActive"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return RouterLinkActive;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Use instead of `'paths' in options` to be compatible with property renaming
 */


function isActiveMatchOptions(options) {
  return !!options.paths;
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @description
 *
 * Provides a preloading strategy.
 *
 * @publicApi
 */


class PreloadingStrategy {}
/**
 * @description
 *
 * Provides a preloading strategy that preloads all modules as quickly as possible.
 *
 * ```
 * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
 * ```
 *
 * @publicApi
 */


class PreloadAllModules {
  preload(route, fn) {
    return fn().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.catchError)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null)));
  }

}
/**
 * @description
 *
 * Provides a preloading strategy that does not preload any modules.
 *
 * This strategy is enabled by default.
 *
 * @publicApi
 */


class NoPreloading {
  preload(route, fn) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
  }

}
/**
 * The preloader optimistically loads all router configurations to
 * make navigations into lazily-loaded sections of the application faster.
 *
 * The preloader runs in the background. When the router bootstraps, the preloader
 * starts listening to all navigation events. After every such event, the preloader
 * will check if any configurations can be loaded lazily.
 *
 * If a route is protected by `canLoad` guards, the preloaded will not load it.
 *
 * @publicApi
 */


let RouterPreloader = /*#__PURE__*/(() => {
  class RouterPreloader {
    constructor(router, compiler, injector, preloadingStrategy) {
      this.router = router;
      this.injector = injector;
      this.preloadingStrategy = preloadingStrategy;

      const onStartLoad = r => router.triggerEvent(new RouteConfigLoadStart(r));

      const onEndLoad = r => router.triggerEvent(new RouteConfigLoadEnd(r));

      this.loader = new RouterConfigLoader(injector, compiler, onStartLoad, onEndLoad);
    }

    setUpPreloading() {
      this.subscription = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.filter)(e => e instanceof NavigationEnd), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.concatMap)(() => this.preload())).subscribe(() => {});
    }

    preload() {
      const ngModule = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModuleRef);
      return this.processRoutes(ngModule, this.router.config);
    }
    /** @nodoc */


    ngOnDestroy() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }

    processRoutes(ngModule, routes) {
      const res = [];

      for (const route of routes) {
        // we already have the config loaded, just recurse
        if (route.loadChildren && !route.canLoad && route._loadedConfig) {
          const childConfig = route._loadedConfig;
          res.push(this.processRoutes(childConfig.module, childConfig.routes)); // no config loaded, fetch the config
        } else if (route.loadChildren && !route.canLoad) {
          res.push(this.preloadConfig(ngModule, route)); // recurse into children
        } else if (route.children) {
          res.push(this.processRoutes(ngModule, route.children));
        }
      }

      return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(res).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_29__.mergeAll)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(_ => void 0));
    }

    preloadConfig(ngModule, route) {
      return this.preloadingStrategy.preload(route, () => {
        const loaded$ = route._loadedConfig ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(route._loadedConfig) : this.loader.load(ngModule.injector, route);
        return loaded$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.mergeMap)(config => {
          route._loadedConfig = config;
          return this.processRoutes(config.module, config.routes);
        }));
      });
    }

  }

  RouterPreloader.ɵfac = function RouterPreloader_Factory(t) {
    return new (t || RouterPreloader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PreloadingStrategy));
  };

  RouterPreloader.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: RouterPreloader,
    factory: RouterPreloader.ɵfac
  });
  return RouterPreloader;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let RouterScroller = /*#__PURE__*/(() => {
  class RouterScroller {
    constructor(router,
    /** @docsNotRequired */
    viewportScroller, options = {}) {
      this.router = router;
      this.viewportScroller = viewportScroller;
      this.options = options;
      this.lastId = 0;
      this.lastSource = 'imperative';
      this.restoredId = 0;
      this.store = {}; // Default both options to 'disabled'

      options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';
      options.anchorScrolling = options.anchorScrolling || 'disabled';
    }

    init() {
      // we want to disable the automatic scrolling because having two places
      // responsible for scrolling results race conditions, especially given
      // that browser don't implement this behavior consistently
      if (this.options.scrollPositionRestoration !== 'disabled') {
        this.viewportScroller.setHistoryScrollRestoration('manual');
      }

      this.routerEventsSubscription = this.createScrollEvents();
      this.scrollEventsSubscription = this.consumeScrollEvents();
    }

    createScrollEvents() {
      return this.router.events.subscribe(e => {
        if (e instanceof NavigationStart) {
          // store the scroll position of the current stable navigations.
          this.store[this.lastId] = this.viewportScroller.getScrollPosition();
          this.lastSource = e.navigationTrigger;
          this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
        } else if (e instanceof NavigationEnd) {
          this.lastId = e.id;
          this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);
        }
      });
    }

    consumeScrollEvents() {
      return this.router.events.subscribe(e => {
        if (!(e instanceof Scroll)) return; // a popstate event. The pop state event will always ignore anchor scrolling.

        if (e.position) {
          if (this.options.scrollPositionRestoration === 'top') {
            this.viewportScroller.scrollToPosition([0, 0]);
          } else if (this.options.scrollPositionRestoration === 'enabled') {
            this.viewportScroller.scrollToPosition(e.position);
          } // imperative navigation "forward"

        } else {
          if (e.anchor && this.options.anchorScrolling === 'enabled') {
            this.viewportScroller.scrollToAnchor(e.anchor);
          } else if (this.options.scrollPositionRestoration !== 'disabled') {
            this.viewportScroller.scrollToPosition([0, 0]);
          }
        }
      });
    }

    scheduleScrollEvent(routerEvent, anchor) {
      this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));
    }
    /** @nodoc */


    ngOnDestroy() {
      if (this.routerEventsSubscription) {
        this.routerEventsSubscription.unsubscribe();
      }

      if (this.scrollEventsSubscription) {
        this.scrollEventsSubscription.unsubscribe();
      }
    }

  }

  RouterScroller.ɵfac = function RouterScroller_Factory(t) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinvalidFactory"]();
  };

  RouterScroller.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: RouterScroller,
    factory: RouterScroller.ɵfac
  });
  return RouterScroller;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * The directives defined in the `RouterModule`.
 */


const ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent];
/**
 * A [DI token](guide/glossary/#di-token) for the router service.
 *
 * @publicApi
 */

const ROUTER_CONFIGURATION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTER_CONFIGURATION');
/**
 * @docsNotRequired
 */

const ROUTER_FORROOT_GUARD = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('ROUTER_FORROOT_GUARD');
const ROUTER_PROVIDERS = [_angular_common__WEBPACK_IMPORTED_MODULE_28__.Location, {
  provide: UrlSerializer,
  useClass: DefaultUrlSerializer
}, {
  provide: Router,
  useFactory: setupRouter,
  deps: [UrlSerializer, ChildrenOutletContexts, _angular_common__WEBPACK_IMPORTED_MODULE_28__.Location, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector, _angular_core__WEBPACK_IMPORTED_MODULE_0__.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()], [RouteReuseStrategy, /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()]]
}, ChildrenOutletContexts, {
  provide: ActivatedRoute,
  useFactory: rootRoute,
  deps: [Router]
}, RouterPreloader, NoPreloading, PreloadAllModules, {
  provide: ROUTER_CONFIGURATION,
  useValue: {
    enableTracing: false
  }
}];

function routerNgProbeToken() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgProbeToken('Router', Router);
}
/**
 * @description
 *
 * Adds directives and providers for in-app navigation among views defined in an application.
 * Use the Angular `Router` service to declaratively specify application states and manage state
 * transitions.
 *
 * You can import this NgModule multiple times, once for each lazy-loaded bundle.
 * However, only one `Router` service can be active.
 * To ensure this, there are two ways to register routes when importing this module:
 *
 * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given
 * routes, and the `Router` service itself.
 * * The `forChild()` method creates an `NgModule` that contains all the directives and the given
 * routes, but does not include the `Router` service.
 *
 * @see [Routing and Navigation guide](guide/router) for an
 * overview of how the `Router` service should be used.
 *
 * @publicApi
 */


let RouterModule = /*#__PURE__*/(() => {
  class RouterModule {
    // Note: We are injecting the Router so it gets created eagerly...
    constructor(guard, router) {}
    /**
     * Creates and configures a module with all the router providers and directives.
     * Optionally sets up an application listener to perform an initial navigation.
     *
     * When registering the NgModule at the root, import as follows:
     *
     * ```
     * @NgModule({
     *   imports: [RouterModule.forRoot(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * @param routes An array of `Route` objects that define the navigation paths for the application.
     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
     * @return The new `NgModule`.
     *
     */


    static forRoot(routes, config) {
      return {
        ngModule: RouterModule,
        providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
          provide: ROUTER_FORROOT_GUARD,
          useFactory: provideForRootGuard,
          deps: [[Router, new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf()]]
        }, {
          provide: ROUTER_CONFIGURATION,
          useValue: config ? config : {}
        }, {
          provide: _angular_common__WEBPACK_IMPORTED_MODULE_28__.LocationStrategy,
          useFactory: provideLocationStrategy,
          deps: [_angular_common__WEBPACK_IMPORTED_MODULE_28__.PlatformLocation, [new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject(_angular_common__WEBPACK_IMPORTED_MODULE_28__.APP_BASE_HREF), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional()], ROUTER_CONFIGURATION]
        }, {
          provide: RouterScroller,
          useFactory: createRouterScroller,
          deps: [Router, _angular_common__WEBPACK_IMPORTED_MODULE_28__.ViewportScroller, ROUTER_CONFIGURATION]
        }, {
          provide: PreloadingStrategy,
          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
        }, {
          provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgProbeToken,
          multi: true,
          useFactory: routerNgProbeToken
        }, provideRouterInitializer()]
      };
    }
    /**
     * Creates a module with all the router directives and a provider registering routes,
     * without creating a new Router service.
     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
     *
     * ```
     * @NgModule({
     *   imports: [RouterModule.forChild(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * @param routes An array of `Route` objects that define the navigation paths for the submodule.
     * @return The new NgModule.
     *
     */


    static forChild(routes) {
      return {
        ngModule: RouterModule,
        providers: [provideRoutes(routes)]
      };
    }

  }

  RouterModule.ɵfac = function RouterModule_Factory(t) {
    return new (t || RouterModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](ROUTER_FORROOT_GUARD, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](Router, 8));
  };

  RouterModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: RouterModule
  });
  RouterModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return RouterModule;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function createRouterScroller(router, viewportScroller, config) {
  if (config.scrollOffset) {
    viewportScroller.setOffset(config.scrollOffset);
  }

  return new RouterScroller(router, viewportScroller, config);
}

function provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {
  return options.useHash ? new _angular_common__WEBPACK_IMPORTED_MODULE_28__.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common__WEBPACK_IMPORTED_MODULE_28__.PathLocationStrategy(platformLocationStrategy, baseHref);
}

function provideForRootGuard(router) {
  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {
    throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);
  }

  return 'guarded';
}
/**
 * Registers a [DI provider](guide/glossary#provider) for a set of routes.
 * @param routes The route configuration to provide.
 *
 * @usageNotes
 *
 * ```
 * @NgModule({
 *   imports: [RouterModule.forChild(ROUTES)],
 *   providers: [provideRoutes(EXTRA_ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * @publicApi
 */


function provideRoutes(routes) {
  return [{
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ANALYZE_FOR_ENTRY_COMPONENTS,
    multi: true,
    useValue: routes
  }, {
    provide: ROUTES,
    multi: true,
    useValue: routes
  }];
}

function setupRouter(urlSerializer, contexts, location, injector, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {
  const router = new Router(null, urlSerializer, contexts, location, injector, compiler, flatten(config));

  if (urlHandlingStrategy) {
    router.urlHandlingStrategy = urlHandlingStrategy;
  }

  if (routeReuseStrategy) {
    router.routeReuseStrategy = routeReuseStrategy;
  }

  assignExtraOptionsToRouter(opts, router);

  if (opts.enableTracing) {
    router.events.subscribe(e => {
      var _a, _b; // tslint:disable:no-console


      (_a = console.group) === null || _a === void 0 ? void 0 : _a.call(console, `Router Event: ${e.constructor.name}`);
      console.log(e.toString());
      console.log(e);
      (_b = console.groupEnd) === null || _b === void 0 ? void 0 : _b.call(console); // tslint:enable:no-console
    });
  }

  return router;
}

function assignExtraOptionsToRouter(opts, router) {
  if (opts.errorHandler) {
    router.errorHandler = opts.errorHandler;
  }

  if (opts.malformedUriErrorHandler) {
    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;
  }

  if (opts.onSameUrlNavigation) {
    router.onSameUrlNavigation = opts.onSameUrlNavigation;
  }

  if (opts.paramsInheritanceStrategy) {
    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;
  }

  if (opts.relativeLinkResolution) {
    router.relativeLinkResolution = opts.relativeLinkResolution;
  }

  if (opts.urlUpdateStrategy) {
    router.urlUpdateStrategy = opts.urlUpdateStrategy;
  }

  if (opts.canceledNavigationResolution) {
    router.canceledNavigationResolution = opts.canceledNavigationResolution;
  }
}

function rootRoute(router) {
  return router.routerState.root;
}
/**
 * Router initialization requires two steps:
 *
 * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if
 * a resolver or a guard executes asynchronously.
 *
 * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the
 * `afterPreactivation` hook provided by the router.
 * The router navigation starts, reaches the point when preactivation is done, and then
 * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
 */


let RouterInitializer = /*#__PURE__*/(() => {
  class RouterInitializer {
    constructor(injector) {
      this.injector = injector;
      this.initNavigation = false;
      this.destroyed = false;
      this.resultOfPreactivationDone = new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject();
    }

    appInitializer() {
      const p = this.injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_28__.LOCATION_INITIALIZED, Promise.resolve(null));
      return p.then(() => {
        // If the injector was destroyed, the DI lookups below will fail.
        if (this.destroyed) {
          return Promise.resolve(true);
        }

        let resolve = null;
        const res = new Promise(r => resolve = r);
        const router = this.injector.get(Router);
        const opts = this.injector.get(ROUTER_CONFIGURATION);

        if (opts.initialNavigation === 'disabled') {
          router.setUpLocationChangeListener();
          resolve(true);
        } else if ( // TODO: enabled is deprecated as of v11, can be removed in v13
        opts.initialNavigation === 'enabled' || opts.initialNavigation === 'enabledBlocking') {
          router.hooks.afterPreactivation = () => {
            // only the initial navigation should be delayed
            if (!this.initNavigation) {
              this.initNavigation = true;
              resolve(true);
              return this.resultOfPreactivationDone; // subsequent navigations should not be delayed
            } else {
              return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null);
            }
          };

          router.initialNavigation();
        } else {
          resolve(true);
        }

        return res;
      });
    }

    bootstrapListener(bootstrappedComponentRef) {
      const opts = this.injector.get(ROUTER_CONFIGURATION);
      const preloader = this.injector.get(RouterPreloader);
      const routerScroller = this.injector.get(RouterScroller);
      const router = this.injector.get(Router);
      const ref = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef);

      if (bootstrappedComponentRef !== ref.components[0]) {
        return;
      } // Default case


      if (opts.initialNavigation === 'enabledNonBlocking' || opts.initialNavigation === undefined) {
        router.initialNavigation();
      }

      preloader.setUpPreloading();
      routerScroller.init();
      router.resetRootComponentType(ref.componentTypes[0]);
      this.resultOfPreactivationDone.next(null);
      this.resultOfPreactivationDone.complete();
    }

    ngOnDestroy() {
      this.destroyed = true;
    }

  }

  RouterInitializer.ɵfac = function RouterInitializer_Factory(t) {
    return new (t || RouterInitializer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector));
  };

  RouterInitializer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: RouterInitializer,
    factory: RouterInitializer.ɵfac
  });
  return RouterInitializer;
})();

/*#__PURE__*/
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function getAppInitializer(r) {
  return r.appInitializer.bind(r);
}

function getBootstrapListener(r) {
  return r.bootstrapListener.bind(r);
}
/**
 * A [DI token](guide/glossary/#di-token) for the router initializer that
 * is called after the app is bootstrapped.
 *
 * @publicApi
 */


const ROUTER_INITIALIZER = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Router Initializer');

function provideRouterInitializer() {
  return [RouterInitializer, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.APP_INITIALIZER,
    multi: true,
    useFactory: getAppInitializer,
    deps: [RouterInitializer]
  }, {
    provide: ROUTER_INITIALIZER,
    useFactory: getBootstrapListener,
    deps: [RouterInitializer]
  }, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__.APP_BOOTSTRAP_LISTENER,
    multi: true,
    useExisting: ROUTER_INITIALIZER
  }];
}
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @publicApi
 */


const VERSION = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('13.3.7');
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// This file only reexports content of the `src` folder. Keep it that way.

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */

 //# sourceMappingURL=router.mjs.map

/***/ }),

/***/ 9087:
/*!****************************************************************!*\
  !*** ./node_modules/@ngneat/dialog/fesm2015/ngneat-dialog.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DIALOG_CONFIG": () => (/* binding */ DIALOG_CONFIG),
/* harmony export */   "DIALOG_DOCUMENT_REF": () => (/* binding */ DIALOG_DOCUMENT_REF),
/* harmony export */   "DialogCloseDirective": () => (/* binding */ DialogCloseDirective),
/* harmony export */   "DialogComponent": () => (/* binding */ DialogComponent),
/* harmony export */   "DialogContentSymbol": () => (/* binding */ DialogContentSymbol),
/* harmony export */   "DialogModule": () => (/* binding */ DialogModule),
/* harmony export */   "DialogRef": () => (/* binding */ DialogRef),
/* harmony export */   "DialogService": () => (/* binding */ DialogService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ 9808);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 9646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 188);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6451);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 6758);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 4968);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 9300);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 6590);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 590);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 4004);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 3900);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 2722);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ 5044);








function BaseDialogComponent_h2_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "h2", 10);
  }

  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r0.title.content, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
  }
}

function BaseDialogComponent_h2_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}

function BaseDialogComponent_h2_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h2");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BaseDialogComponent_h2_6_ng_container_1_Template, 1, 0, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r1.title.content)("ngTemplateOutletContext", ctx_r1.context);
  }
}

function BaseDialogComponent_p_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "p", 10);
  }

  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("with-title", ctx_r2.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r2.body.content, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
  }
}

function BaseDialogComponent_p_9_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}

function BaseDialogComponent_p_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BaseDialogComponent_p_9_ng_container_1_Template, 1, 0, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }

  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("with-title", ctx_r3.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.body.content)("ngTemplateOutletContext", ctx_r3.context);
  }
}

const _c0 = [[["", 8, "icon"]], [["", 8, "btn"]]];
const _c1 = [".icon", ".btn"];
const _c2 = "[_nghost-%COMP%]{display:flex;flex-direction:column;flex-grow:1;overflow:hidden}";
const _c3 = ["backdrop"];
const _c4 = ["dialog"];

function DialogComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 6);
  }

  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);

    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dialogDragEnabled", true)("dialogDragTarget", _r1)("dragConstraint", ctx_r2.config.dragConstraint);
  }
}

function DialogComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DialogComponent_div_5_Template_div_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return ctx_r4.closeDialog();
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "svg", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}

function isNil(value) {
  return value === undefined || value === null;
}

function isString(value) {
  return typeof value === 'string';
}

function coerceCssPixelValue(value) {
  if (isNil(value)) {
    return '';
  }

  return isString(value) ? value : `${value}px`;
}

const DialogContentSymbol = Symbol('Dialog Content Data');

class DialogRef {}

class InternalDialogRef extends DialogRef {
  constructor(props = {}) {
    super();
    this.beforeCloseGuards = [];
    this.mutate(props);
  }

  close(result) {
    this.canClose(result).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(Boolean)).subscribe({
      next: () => this.onClose(result)
    });
  }

  beforeClose(guard) {
    this.beforeCloseGuards.push(guard);
  }

  resetDrag(offset) {
    this.onReset(offset);
  }

  canClose(result) {
    const guards$ = this.beforeCloseGuards.map(guard => guard(result)).filter(value => value !== undefined && value !== true).map(value => {
      return typeof value === 'boolean' ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(value) : (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.from)(value).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(canClose => !canClose));
    });
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.merge)(...guards$).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.defaultIfEmpty)(true), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.first)());
  }

  mutate(props) {
    Object.assign(this, props);
  }

  asDialogRef() {
    return this;
  }

}

let BaseDialogComponent = /*#__PURE__*/(() => {
  class BaseDialogComponent {
    constructor(ref) {
      this.ref = ref;
      this.title = this.ref.data[DialogContentSymbol].title;
      this.body = this.ref.data[DialogContentSymbol].body;
      this.context = {
        $implicit: this.ref,
        data: this.ref.data
      };
    }

  }

  BaseDialogComponent.ɵfac = function BaseDialogComponent_Factory(t) {
    return new (t || BaseDialogComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DialogRef));
  };

  BaseDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: BaseDialogComponent,
    selectors: [["ngneat-dialog-base"]],
    ngContentSelectors: _c1,
    decls: 12,
    vars: 6,
    consts: [[1, "dialog"], [1, "dialog-header"], [1, "dialog-icon"], [3, "ngSwitch"], [3, "innerHTML", 4, "ngSwitchCase"], [4, "ngSwitchCase"], [1, "dialog-content", 3, "ngSwitch"], [3, "with-title", "innerHTML", 4, "ngSwitchCase"], [3, "with-title", 4, "ngSwitchCase"], [1, "dialog-footer"], [3, "innerHTML"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]],
    template: function BaseDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "span", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](4, 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, BaseDialogComponent_h2_5_Template, 1, 1, "h2", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, BaseDialogComponent_h2_6_Template, 2, 2, "h2", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, BaseDialogComponent_p_8_Template, 1, 3, "p", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, BaseDialogComponent_p_9_Template, 2, 4, "p", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](11, 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", ctx.title == null ? null : ctx.title.type);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", "string");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", "template");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", ctx.body.type);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", "string");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", "template");
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.NgSwitch, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgSwitchCase, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgTemplateOutlet],
    styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;overflow:hidden;flex-grow:1}.dialog[_ngcontent-%COMP%]{flex-grow:1;display:flex;align-items:center;flex-direction:column;justify-content:flex-start;overflow:hidden}.dialog-header[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:row;align-items:center;width:100%;margin:0;padding:18px 40px 10px 30px}.dialog-header[_ngcontent-%COMP%]   .dialog-icon[_ngcontent-%COMP%]    {display:flex}.dialog-header[_ngcontent-%COMP%]   .dialog-icon[_ngcontent-%COMP%]     .icon{width:24px;margin-right:10px}.dialog-header[_ngcontent-%COMP%]   .dialog-icon[_ngcontent-%COMP%]     .icon-success{fill:#72c140}.dialog-header[_ngcontent-%COMP%]   .dialog-icon[_ngcontent-%COMP%]     .icon-question{fill:#f0af41}.dialog-header[_ngcontent-%COMP%]   .dialog-icon[_ngcontent-%COMP%]     .icon-error{fill:#e74c3c}.dialog-header[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:1.2rem;font-weight:700;margin:0}.dialog-content[_ngcontent-%COMP%]{width:100%;flex-grow:1;overflow:auto;position:relative;display:flex;flex-direction:column;padding:0 30px 30px}.dialog-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:.875rem;line-height:1.75;margin:5px 0}.dialog-content[_ngcontent-%COMP%]   .with-title[_ngcontent-%COMP%]{padding-left:35px}.dialog-footer[_ngcontent-%COMP%]    {display:flex;width:100%;justify-content:flex-end;padding:17px 30px 16px;border-top:1px solid #f1f2f5}.dialog-footer[_ngcontent-%COMP%]     .btn{margin-right:10px;padding:10px 18px;border:0;border-radius:4px;cursor:pointer}.dialog-footer[_ngcontent-%COMP%]     .btn:focus{outline:none}.dialog-footer[_ngcontent-%COMP%]     .btn:last-child{margin-right:0}.dialog-footer[_ngcontent-%COMP%]     .btn-success{background-color:#4091f7;color:#fff}.dialog-footer[_ngcontent-%COMP%]     .btn-error{background-color:#e74c3c;color:#fff}.dialog-footer[_ngcontent-%COMP%]     .btn-cancel{background-color:#fff;border:2px solid #4091f7;color:#4091f7}"],
    changeDetection: 0
  });
  return BaseDialogComponent;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let SuccessDialogComponent = /*#__PURE__*/(() => {
  class SuccessDialogComponent extends BaseDialogComponent {}

  SuccessDialogComponent.ɵfac = /* @__PURE__ */function () {
    let ɵSuccessDialogComponent_BaseFactory;
    return function SuccessDialogComponent_Factory(t) {
      return (ɵSuccessDialogComponent_BaseFactory || (ɵSuccessDialogComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SuccessDialogComponent)))(t || SuccessDialogComponent);
    };
  }();

  SuccessDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: SuccessDialogComponent,
    selectors: [["ngneat-dialog-success"]],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    decls: 7,
    vars: 0,
    consts: [["x", "0px", "y", "0px", "viewBox", "0 0 496 496", 1, "icon", "icon-success"], ["d", "M248,0C111.033,0,0,111.033,0,248s111.033,248,248,248s248-111.033,248-248C495.841,111.099,384.901,0.159,248,0z      M248,480C119.87,480,16,376.13,16,248S119.87,16,248,16s232,103.87,232,232C479.859,376.072,376.072,479.859,248,480z"], ["d", "M370.344,158.344L208,320.688l-82.344-82.344c-3.178-3.07-8.242-2.982-11.312,0.196c-2.994,3.1-2.994,8.015,0,11.116     l88,88c3.124,3.123,8.188,3.123,11.312,0l168-168c3.07-3.178,2.982-8.242-0.196-11.312     C378.359,155.35,373.444,155.35,370.344,158.344z"], [1, "btn", "btn-success", "ngneat-dialog-primary-btn", 3, "click"]],
    template: function SuccessDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ngneat-dialog-base");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "svg", 0)(2, "g");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "path", 1)(4, "path", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceHTML"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SuccessDialogComponent_Template_button_click_5_listener() {
          return ctx.ref.close();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "OK");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }
    },
    directives: [BaseDialogComponent],
    styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;flex-grow:1;overflow:hidden}"],
    changeDetection: 0
  });
  return SuccessDialogComponent;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let ConfirmDialogComponent = /*#__PURE__*/(() => {
  class ConfirmDialogComponent extends BaseDialogComponent {}

  ConfirmDialogComponent.ɵfac = /* @__PURE__ */function () {
    let ɵConfirmDialogComponent_BaseFactory;
    return function ConfirmDialogComponent_Factory(t) {
      return (ɵConfirmDialogComponent_BaseFactory || (ɵConfirmDialogComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](ConfirmDialogComponent)))(t || ConfirmDialogComponent);
    };
  }();

  ConfirmDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: ConfirmDialogComponent,
    selectors: [["ngneat-dialog-confirm"]],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    decls: 10,
    vars: 0,
    consts: [["x", "0px", "y", "0px", "viewBox", "0 0 512 512", 1, "icon", "icon-question"], ["cx", "256", "cy", "378.5", "r", "25"], ["d", "M256,0C114.516,0,0,114.497,0,256c0,141.484,114.497,256,256,256c141.484,0,256-114.497,256-256     C512,114.516,397.503,0,256,0z M256,472c-119.377,0-216-96.607-216-216c0-119.377,96.607-216,216-216     c119.377,0,216,96.607,216,216C472,375.377,375.393,472,256,472z"], ["d", "M256,128.5c-44.112,0-80,35.888-80,80c0,11.046,8.954,20,20,20s20-8.954,20-20c0-22.056,17.944-40,40-40     c22.056,0,40,17.944,40,40c0,22.056-17.944,40-40,40c-11.046,0-20,8.954-20,20v50c0,11.046,8.954,20,20,20     c11.046,0,20-8.954,20-20v-32.531c34.466-8.903,60-40.26,60-77.469C336,164.388,300.112,128.5,256,128.5z"], [1, "btn", "btn-cancel", "ngneat-dialog-secondary-btn", 3, "click"], [1, "btn", "btn-success", "ngneat-dialog-primary-btn", 3, "click"]],
    template: function ConfirmDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ngneat-dialog-base");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "svg", 0)(2, "g");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "circle", 1)(4, "path", 2)(5, "path", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceHTML"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "button", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ConfirmDialogComponent_Template_button_click_6_listener() {
          return ctx.ref.close(false);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7, "Cancel");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "button", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ConfirmDialogComponent_Template_button_click_8_listener() {
          return ctx.ref.close(true);
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9, "OK");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }
    },
    directives: [BaseDialogComponent],
    styles: [_c2],
    changeDetection: 0
  });
  return ConfirmDialogComponent;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let ErrorDialogComponent = /*#__PURE__*/(() => {
  class ErrorDialogComponent extends BaseDialogComponent {}

  ErrorDialogComponent.ɵfac = /* @__PURE__ */function () {
    let ɵErrorDialogComponent_BaseFactory;
    return function ErrorDialogComponent_Factory(t) {
      return (ɵErrorDialogComponent_BaseFactory || (ɵErrorDialogComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](ErrorDialogComponent)))(t || ErrorDialogComponent);
    };
  }();

  ErrorDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: ErrorDialogComponent,
    selectors: [["ngneat-dialog-error"]],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    decls: 7,
    vars: 0,
    consts: [["x", "0px", "y", "0px", "viewBox", "0 0 512 512", 1, "icon", "icon-error"], ["d", "M256,0C114.508,0,0,114.497,0,256c0,141.493,114.497,256,256,256c141.492,0,256-114.497,256-256    C512,114.507,397.503,0,256,0z M256,472c-119.384,0-216-96.607-216-216c0-119.385,96.607-216,216-216    c119.384,0,216,96.607,216,216C472,375.385,375.393,472,256,472z"], ["d", "M343.586,315.302L284.284,256l59.302-59.302c7.81-7.81,7.811-20.473,0.001-28.284c-7.812-7.811-20.475-7.81-28.284,0    L256,227.716l-59.303-59.302c-7.809-7.811-20.474-7.811-28.284,0c-7.81,7.811-7.81,20.474,0.001,28.284L227.716,256    l-59.302,59.302c-7.811,7.811-7.812,20.474-0.001,28.284c7.813,7.812,20.476,7.809,28.284,0L256,284.284l59.303,59.302    c7.808,7.81,20.473,7.811,28.284,0C351.398,335.775,351.397,323.112,343.586,315.302z"], [1, "btn", "btn-error", "ngneat-dialog-primary-btn", 3, "click"]],
    template: function ErrorDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ngneat-dialog-base");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "svg", 0)(2, "g");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "path", 1)(4, "path", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceHTML"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ErrorDialogComponent_Template_button_click_5_listener() {
          return ctx.ref.close();
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "OK");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }
    },
    directives: [BaseDialogComponent],
    styles: [_c2],
    changeDetection: 0
  });
  return ErrorDialogComponent;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

const DIALOG_DOCUMENT_REF = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('A reference to the document. Useful for iframes that want appends to parent window', {
  providedIn: 'root',

  factory() {
    return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT);
  }

});
const GLOBAL_DIALOG_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Global dialog config token');
const DIALOG_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Dialog config token', {
  providedIn: 'root',
  factory: () => ({
    id: undefined,
    container: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(DIALOG_DOCUMENT_REF).body,
    backdrop: true,
    closeButton: true,
    enableClose: true,
    draggable: false,
    dragConstraint: 'none',
    resizable: false,
    size: 'md',
    windowClass: undefined,
    width: undefined,
    height: undefined,
    minHeight: undefined,
    maxHeight: undefined,
    data: undefined,
    vcr: undefined,
    sizes: {
      sm: {
        minHeight: '200px',
        width: '400px'
      },
      md: {
        minHeight: '280px',
        width: '560px'
      },
      lg: {
        minHeight: '350px',
        width: '800px'
      },
      fullScreen: {
        height: '100%',
        width: '100%'
      }
    },
    success: {
      component: SuccessDialogComponent
    },
    confirm: {
      component: ConfirmDialogComponent
    },
    error: {
      component: ErrorDialogComponent
    },
    onClose: undefined,
    onOpen: undefined
  })
});
const NODES_TO_INSERT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Nodes inserted into the dialog');
let DialogDraggableDirective = /*#__PURE__*/(() => {
  class DialogDraggableDirective {
    constructor(host, zone, renderer) {
      this.host = host;
      this.zone = zone;
      this.renderer = renderer;
      this.dialogDragEnabled = false;
      this.delta = {
        x: 0,
        y: 0
      };
      this.offset = {
        x: 0,
        y: 0
      };
      this.enabled = true;
      this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();
    }

    set dialogDragOffset(offset) {
      this.reset(offset);
    }

    ngAfterViewInit() {
      if (!this.enabled) {
        return;
      }

      this.init();
    }

    ngOnChanges() {
      if (!this.enabled && this.dialogDragEnabled && this.dialogDragTarget) {
        this.enabled = true;
        /** determine if the component has been init by the handle variable */

        if (this.handle) {
          this.renderer.setStyle(this.handle, 'cursor', 'move');
        } else if (this.enabled) {
          this.init();
        }
      }

      if (!this.dialogDragEnabled) {
        this.enabled = false;

        if (this.handle) {
          this.renderer.setStyle(this.handle, 'cursor', '');
        }
      }
    }

    ngOnDestroy() {
      this.destroy$.next();
    }

    reset(offset) {
      const defaultValues = {
        x: 0,
        y: 0
      };
      this.offset = Object.assign(Object.assign({}, defaultValues), offset);
      this.delta = Object.assign({}, defaultValues);
      this.translate();
    }

    setupEvents() {
      this.zone.runOutsideAngular(() => {
        const mousedown$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.fromEvent)(this.handle, 'mousedown');
        const mousemove$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.fromEvent)(document, 'mousemove');
        const mouseup$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.fromEvent)(document, 'mouseup');
        const mousedrag$ = mousedown$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(() => this.enabled), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.map)(event => ({
          startX: event.clientX,
          startY: event.clientY
        })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(({
          startX,
          startY
        }) => mousemove$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.map)(event => {
          event.preventDefault();
          this.delta = {
            x: event.clientX - startX,
            y: event.clientY - startY
          };

          if (this.dragConstraint === 'constrain') {
            this.checkConstraint();
          }
        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(mouseup$))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this.destroy$));
        mousedrag$.subscribe(() => {
          if (this.delta.x === 0 && this.delta.y === 0) {
            return;
          }

          this.translate();
        });
        mouseup$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(() => this.enabled),
        /** Only emit change if the element has moved */
        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(() => this.delta.x !== 0 || this.delta.y !== 0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this.destroy$)).subscribe(() => {
          if (this.dragConstraint === 'bounce') {
            this.checkConstraint();
            this.translate();
          }

          this.offset.x += this.delta.x;
          this.offset.y += this.delta.y;
          this.delta = {
            x: 0,
            y: 0
          };
        });
      });
    }

    translate() {
      if (this.target) {
        this.zone.runOutsideAngular(() => {
          requestAnimationFrame(() => {
            const transform = `translate(${this.translateX}px, ${this.translateY}px)`;
            this.renderer.setStyle(this.target, 'transform', transform);
          });
        });
      }
    }

    get translateX() {
      return this.offset.x + this.delta.x;
    }

    get translateY() {
      return this.offset.y + this.delta.y;
    }
    /**
     * Init the directive
     */


    init() {
      if (!this.dialogDragTarget) {
        throw new Error('You need to specify the drag target');
      }

      this.handle = this.dialogDragHandle instanceof Element ? this.dialogDragHandle : typeof this.dialogDragHandle === 'string' && this.dialogDragHandle ? document.querySelector(this.dialogDragHandle) : this.host.nativeElement;
      /** add the move cursor */

      if (this.handle && this.enabled) {
        this.renderer.setStyle(this.handle, 'cursor', 'move');
      }

      this.target = this.dialogDragTarget instanceof HTMLElement ? this.dialogDragTarget : document.querySelector(this.dialogDragTarget);
      this.setupEvents();
      this.translate();
    }

    checkConstraint() {
      const {
        top,
        width,
        height,
        left
      } = this.target.getBoundingClientRect();
      const {
        innerWidth,
        innerHeight
      } = window;
      const verticalDistance = this.translateY > 0 ? this.translateY + height / 2 : this.translateY - height / 2;
      const maxVerticalDistance = innerHeight / 2;
      const horizontalDistance = this.translateX > 0 ? this.translateX + width / 2 : this.translateX - width / 2;
      const maxHorizontalDistance = innerWidth / 2; // Check if modal crosses the top, bottom, left and right window border respectively

      if (-maxVerticalDistance > verticalDistance) {
        this.delta.y = -maxVerticalDistance + height / 2 - this.offset.y;
      }

      if (maxVerticalDistance < verticalDistance) {
        this.delta.y = maxVerticalDistance - height / 2 - this.offset.y;
      }

      if (-maxHorizontalDistance > horizontalDistance) {
        this.delta.x = -maxHorizontalDistance + width / 2 - this.offset.x;
      }

      if (maxHorizontalDistance < horizontalDistance) {
        this.delta.x = maxHorizontalDistance - width / 2 - this.offset.x;
      }
    }

  }

  DialogDraggableDirective.ɵfac = function DialogDraggableDirective_Factory(t) {
    return new (t || DialogDraggableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
  };

  DialogDraggableDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: DialogDraggableDirective,
    selectors: [["", "dialogDraggable", ""]],
    inputs: {
      dialogDragHandle: "dialogDragHandle",
      dialogDragTarget: "dialogDragTarget",
      dialogDragEnabled: "dialogDragEnabled",
      dialogDragOffset: "dialogDragOffset",
      dragConstraint: "dragConstraint"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return DialogDraggableDirective;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

let DialogComponent = /*#__PURE__*/(() => {
  class DialogComponent {
    constructor(document, {
      nativeElement: host
    }, dialogRef, config, nodes) {
      var _a, _b, _c, _d, _e;

      this.document = document;
      this.dialogRef = dialogRef;
      this.config = config;
      this.nodes = nodes;
      this.size = (_a = this.config.sizes) === null || _a === void 0 ? void 0 : _a[this.config.size || 'md'];
      this.styles = {
        width: coerceCssPixelValue(this.config.width || ((_b = this.size) === null || _b === void 0 ? void 0 : _b.width)),
        height: coerceCssPixelValue(this.config.height || ((_c = this.size) === null || _c === void 0 ? void 0 : _c.height)),
        minHeight: coerceCssPixelValue(this.config.minHeight || ((_d = this.size) === null || _d === void 0 ? void 0 : _d.minHeight)),
        maxHeight: coerceCssPixelValue(this.config.maxHeight || ((_e = this.size) === null || _e === void 0 ? void 0 : _e.maxHeight))
      };
      this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();
      host.id = this.config.id; // Append nodes to dialog component, template or component could need
      // something from the dialog component
      // for example, if `[dialogClose]` is used into a directive,
      // DialogRef will be getted from DialogService instead of DI

      this.nodes.forEach(node => host.appendChild(node));

      if (config.windowClass) {
        const classNames = config.windowClass.split(/\s/).filter(x => x);
        classNames.forEach(name => host.classList.add(name));
      }
    }

    ngOnInit() {
      const backdrop = this.config.backdrop ? this.backdrop.nativeElement : this.document.body;
      const dialogElement = this.dialogElement.nativeElement;
      const backdropClick$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.fromEvent)(backdrop, 'click', {
        capture: true
      }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(({
        target
      }) => !dialogElement.contains(target)));
      backdropClick$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this.destroy$)).subscribe(this.dialogRef.backdropClick$);

      if (this.config.enableClose) {
        (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.fromEvent)(this.document.body, 'keyup').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)(({
          key
        }) => key === 'Escape')), backdropClick$).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this.destroy$)).subscribe(() => this.closeDialog());
      } // `dialogElement` is resolved at this point
      // And here is where dialog finally will be placed


      this.nodes.forEach(node => dialogElement.appendChild(node));
    }

    reset(offset) {
      if (this.config.draggable) {
        this.draggable.reset(offset);
      }
    }

    closeDialog() {
      this.dialogRef.close();
    }

    ngOnDestroy() {
      this.destroy$.next();
      this.destroy$.complete();
      this.dialogRef = null;
      this.nodes = null;
    }

  }

  DialogComponent.ɵfac = function DialogComponent_Factory(t) {
    return new (t || DialogComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_7__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](InternalDialogRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DIALOG_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NODES_TO_INSERT));
  };

  DialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: DialogComponent,
    selectors: [["ngneat-dialog"]],
    viewQuery: function DialogComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c3, 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c4, 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](DialogDraggableDirective, 5);
      }

      if (rf & 2) {
        let _t;

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.backdrop = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.dialogElement = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.draggable = _t.first);
      }
    },
    decls: 6,
    vars: 8,
    consts: [[1, "ngneat-dialog-backdrop", 3, "hidden"], ["backdrop", ""], [1, "ngneat-dialog-content", 3, "ngStyle"], ["dialog", ""], ["class", "ngneat-drag-marker", "dialogDraggable", "", 3, "dialogDragEnabled", "dialogDragTarget", "dragConstraint", 4, "ngIf"], ["class", "ngneat-close-dialog", 3, "click", 4, "ngIf"], ["dialogDraggable", "", 1, "ngneat-drag-marker", 3, "dialogDragEnabled", "dialogDragTarget", "dragConstraint"], [1, "ngneat-close-dialog", 3, "click"], ["viewBox", "0 0 329.26933 329", "xmlns", "http://www.w3.org/2000/svg"], ["fill", "currentColor", "d", "m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"]],
    template: function DialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1)(2, "div", 2, 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DialogComponent_div_4_Template, 1, 3, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, DialogComponent_div_5_Template, 3, 0, "div", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ngneat-dialog-backdrop-visible", ctx.config.backdrop);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("hidden", !ctx.config.backdrop);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ngneat-dialog-resizable", ctx.config.resizable);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx.styles);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.config.draggable);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.config.closeButton);
      }
    },
    directives: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.NgStyle, _angular_common__WEBPACK_IMPORTED_MODULE_7__.NgIf, DialogDraggableDirective],
    styles: [".ngneat-dialog-content{display:flex;flex-direction:column;overflow:hidden;position:relative;-webkit-animation:dialog-open .4s cubic-bezier(.25,.8,.25,1);animation:dialog-open .4s cubic-bezier(.25,.8,.25,1);border-radius:4px;box-sizing:border-box;box-shadow:0 11px 15px -7px #0003,0 24px 38px 3px #00000024,0 9px 46px 8px #0000001f;background:#fff;color:#000000de;width:auto;max-width:100%;height:auto;max-height:100%}@-webkit-keyframes dialog-open{0%{transform:translate(50px)}to{transform:none}}@keyframes dialog-open{0%{transform:translate(50px)}to{transform:none}}.ngneat-dialog-content.ngneat-dialog-resizable{resize:both}.ngneat-dialog-backdrop{position:fixed;display:flex;align-items:center;justify-content:center;top:0;left:0;bottom:0;right:0;height:100%;width:100%;padding:30px;z-index:1050;background:rgba(0,0,0,.32);-webkit-animation:dialog-open-backdrop .3s;animation:dialog-open-backdrop .3s}@-webkit-keyframes dialog-open-backdrop{0%{opacity:0}to{opacity:1}}@keyframes dialog-open-backdrop{0%{opacity:0}to{opacity:1}}.ngneat-drag-marker{position:absolute;left:0;top:0;cursor:move;width:100%;height:10px;z-index:1051}.ngneat-close-dialog{display:flex;align-items:center;justify-content:center;position:absolute;top:10px;cursor:pointer;right:10px;width:24px;height:24px;color:#5f6368;transition:color .2s ease-in-out;z-index:1051}.ngneat-close-dialog svg{width:12px;height:12px}.ngneat-close-dialog:hover{color:#5d9ff1}body.ngneat-dialog-hidden{overflow:hidden}\n"],
    encapsulation: 2
  });
  return DialogComponent;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

const OVERFLOW_HIDDEN_CLASS = 'ngneat-dialog-hidden';
let DialogService = /*#__PURE__*/(() => {
  class DialogService {
    constructor(appRef, componentFactoryResolver, injector, document, defaultConfig, globalConfig) {
      this.appRef = appRef;
      this.componentFactoryResolver = componentFactoryResolver;
      this.injector = injector;
      this.document = document;
      this.defaultConfig = defaultConfig;
      this.globalConfig = globalConfig;
      this.dialogs = [];
      this.dialogFactory = this.componentFactoryResolver.resolveComponentFactory(DialogComponent);
    }

    closeAll() {
      this.dialogs.forEach(dialog => dialog.close());
    }

    success(content, config = {}) {
      const configWithDefaults = this.mergeConfigWithContent(this.applyDefaultSize(config), content);
      return this.open(configWithDefaults.success.component, configWithDefaults);
    }

    confirm(content, config = {}) {
      const configWithDefaults = this.mergeConfigWithContent(this.applyDefaultSize(config), content);
      return this.open(configWithDefaults.confirm.component, configWithDefaults);
    }

    error(content, config = {}) {
      const configWithDefaults = this.mergeConfigWithContent(this.applyDefaultSize(config), content);
      return this.open(configWithDefaults.error.component, configWithDefaults);
    }

    open(componentOrTemplate, config = {}) {
      var _a;

      const configWithDefaults = this.mergeConfig(config);
      (_a = configWithDefaults.onOpen) === null || _a === void 0 ? void 0 : _a.call(configWithDefaults);
      const dialogRef = new InternalDialogRef({
        id: configWithDefaults.id,
        data: configWithDefaults.data,
        backdropClick$: new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject()
      });
      const params = {
        config: configWithDefaults,
        dialogRef
      };
      this.throwIfIDAlreadyExists(configWithDefaults.id);
      this.dialogs.push(dialogRef);

      if (this.dialogs.length === 1) {
        this.document.body.classList.add(OVERFLOW_HIDDEN_CLASS);
      }

      return componentOrTemplate instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef ? this.openTemplate(componentOrTemplate, params) : typeof componentOrTemplate === 'function' ? this.openComponent(componentOrTemplate, params) : this.throwMustBeAComponentOrATemplateRef(componentOrTemplate);
    }

    openTemplate(template, {
      config,
      dialogRef
    }) {
      var _a;

      const context = {
        $implicit: dialogRef,
        config
      };
      const view = ((_a = config.vcr) === null || _a === void 0 ? void 0 : _a.createEmbeddedView(template, context)) || template.createEmbeddedView(context);
      return this.attach({
        dialogRef,
        config,
        ref: template,
        view,
        attachToApp: !config.vcr
      });
    }

    openComponent(component, {
      config,
      dialogRef
    }) {
      var _a;

      const factory = this.componentFactoryResolver.resolveComponentFactory(component);
      const componentRef = factory.create(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
        providers: [{
          provide: DialogRef,
          useValue: dialogRef
        }, {
          provide: DIALOG_CONFIG,
          useValue: config
        }],
        parent: ((_a = config.vcr) === null || _a === void 0 ? void 0 : _a.injector) || this.injector
      }));
      return this.attach({
        dialogRef,
        config,
        ref: componentRef,
        view: componentRef.hostView,
        attachToApp: true
      });
    }

    attach({
      dialogRef,
      config,
      ref,
      view,
      attachToApp
    }) {
      const dialog = this.createDialog(config, dialogRef, view);
      const container = config.container instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? config.container.nativeElement : config.container;
      const hooks = {
        after: new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject()
      };

      const onClose = result => {
        var _a, _b;

        (_b = (_a = this.globalConfig).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.dialogs = this.dialogs.filter(({
          id
        }) => dialogRef.id !== id);
        container.removeChild(dialog.location.nativeElement);
        this.appRef.detachView(dialog.hostView);
        this.appRef.detachView(view);
        dialog.destroy();
        view.destroy();
        dialogRef.backdropClick$.complete();
        dialogRef.mutate({
          ref: null,
          onClose: null,
          afterClosed$: null,
          backdropClick$: null,
          beforeCloseGuards: null,
          onReset: null
        });
        hooks.after.next(result);
        hooks.after.complete();

        if (this.dialogs.length === 0) {
          this.document.body.classList.remove(OVERFLOW_HIDDEN_CLASS);
        }
      };

      const onReset = offset => {
        dialog.instance.reset(offset);
      };

      dialogRef.mutate({
        id: config.id,
        data: config.data,
        ref,
        onClose,
        afterClosed$: hooks.after.asObservable(),
        onReset
      });
      container.appendChild(dialog.location.nativeElement);
      this.appRef.attachView(dialog.hostView);

      if (attachToApp) {
        this.appRef.attachView(view);
      }

      return dialogRef.asDialogRef();
    }

    createDialog(config, dialogRef, view) {
      return this.dialogFactory.create(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
        providers: [{
          provide: InternalDialogRef,
          useValue: dialogRef
        }, {
          provide: DIALOG_CONFIG,
          useValue: config
        }, {
          provide: NODES_TO_INSERT,
          useValue: view.rootNodes
        }],
        parent: this.injector
      }));
    }

    mergeConfig(config) {
      var _a;

      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.defaultConfig), {
        id: nanoid()
      }), this.globalConfig), this.cleanConfig(config)), {
        sizes: Object.assign(Object.assign(Object.assign({}, this.defaultConfig.sizes), (_a = this.globalConfig) === null || _a === void 0 ? void 0 : _a.sizes), config === null || config === void 0 ? void 0 : config.sizes)
      });
    }

    mergeConfigWithContent(config, content) {
      const _a = this.mergeConfig(config),
            {
        data
      } = _a,
            configWithDefaults = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__rest)(_a, ["data"]);

      return Object.assign(Object.assign({}, configWithDefaults), {
        data: Object.assign(Object.assign({}, data), {
          [DialogContentSymbol]: this.isTemplateOrString(content) ? {
            title: null,
            body: {
              type: this.getTypeOfContent(content),
              content
            }
          } : Object.entries(content).reduce((acc, [key, value]) => {
            acc[key] = {
              type: this.getTypeOfContent(value),
              content: value
            };
            return acc;
          }, {})
        })
      });
    }

    cleanConfig(config) {
      return Object.entries(config).reduce((cleanConfig, [key, value]) => {
        if (value != null) {
          cleanConfig[key] = value;
        }

        return cleanConfig;
      }, {});
    }

    isTemplateOrString(content) {
      return content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef || typeof content === 'string';
    }

    getTypeOfContent(content) {
      return content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef ? 'template' : 'string';
    }

    throwMustBeAComponentOrATemplateRef(value) {
      throw new TypeError(`Dialog must receive a Component or a TemplateRef, but this has been passed instead: ${value}`);
    }

    throwIfIDAlreadyExists(id) {
      if (this.dialogs.find(dialog => dialog.id === id)) {
        throw new Error(`Please, ID must be unique, but there is already a dialog created with this ID: ${id}`);
      }
    }

    applyDefaultSize(config) {
      return Object.assign(Object.assign({}, config), {
        size: config.size || 'sm'
      });
    }

  }

  DialogService.ɵfac = function DialogService_Factory(t) {
    return new (t || DialogService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DIALOG_DOCUMENT_REF), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DIALOG_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](GLOBAL_DIALOG_CONFIG));
  };

  DialogService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: DialogService,
    factory: DialogService.ɵfac,
    providedIn: 'root'
  });
  return DialogService;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

function nanoid() {
  return `dialog-${Math.random().toString(36).substring(7)}`;
}

let DialogCloseDirective = /*#__PURE__*/(() => {
  class DialogCloseDirective {
    constructor(ref, host, dialogService) {
      this.ref = ref;
      this.host = host;
      this.dialogService = dialogService;
    }

    ngOnInit() {
      this.ref = this.ref || this.getRefFromParent();
    }

    onClose() {
      this.ref.close(this.dialogClose);
    }

    getRefFromParent() {
      let parent = this.host.nativeElement.parentElement;

      while (parent && parent.localName !== 'ngneat-dialog') {
        parent = parent.parentElement;
      }

      return parent ? this.dialogService.dialogs.find(({
        id
      }) => id === parent.id) : null;
    }

  }

  DialogCloseDirective.ɵfac = function DialogCloseDirective_Factory(t) {
    return new (t || DialogCloseDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DialogRef, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DialogService));
  };

  DialogCloseDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: DialogCloseDirective,
    selectors: [["", "dialogClose", ""]],
    hostBindings: function DialogCloseDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DialogCloseDirective_click_HostBindingHandler() {
          return ctx.onClose();
        });
      }
    },
    inputs: {
      dialogClose: "dialogClose"
    }
  });
  return DialogCloseDirective;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

const BuiltIns = [BaseDialogComponent, SuccessDialogComponent, ConfirmDialogComponent, ErrorDialogComponent];
let DialogModule = /*#__PURE__*/(() => {
  class DialogModule {
    static forRoot(config = {}) {
      return {
        ngModule: DialogModule,
        providers: [{
          provide: GLOBAL_DIALOG_CONFIG,
          useValue: config
        }]
      };
    }

  }

  DialogModule.ɵfac = function DialogModule_Factory(t) {
    return new (t || DialogModule)();
  };

  DialogModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: DialogModule
  });
  DialogModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_7__.CommonModule]]
  });
  return DialogModule;
})();

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/*
 * Public API Surface of dialog
 */

/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=ngneat-dialog.mjs.map

/***/ }),

/***/ 5861:
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__(4431));
/******/ }
]);